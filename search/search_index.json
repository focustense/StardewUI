{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Stardew UI","text":"<p>A convenient, fast and scalable UI framework for Stardew Valley mods, dedicated to making UI development a breeze rather than a chore. Inspired in part by Angular and XAML.</p> <ul> <li> <p> StardewUI Core is an includable code library in the form of a .NET Shared Project, containing the layout and rendering services, fundamental widgets, and integrations with the Stardew Valley base game, in particular its Menu system.</p> </li> <li> <p> StardewUI Framework is a standalone mod that hosts its own version of the Core library and provides a Model-View-Whatever (MVW) binding system using StarML as well as many other quality-of-life features not found in the Core.</p> </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li> <p> Dynamic layout</p> <p>Don't fuss with pixel positions; design with flows, grids and other layouts that adapt to your content.</p> <p> Built-in layouts</p> </li> <li> <p> High performance</p> <p>Retained-mode UI only updates the things that change, when they change. Your UI will never stutter, even on potatoes.</p> <p> Details and benchmarks</p> </li> <li> <p> Controller ready</p> <p>No fussy neighbor lists, clunky clickable components or other boilerplate. Mouse or gamepad,  it just works.</p> <p> Focus and interaction</p> </li> <li> <p> Model-View-Whatever</p> <p>Keep your views and data separate, using an enhanced HTML-like markup with data binding and hot reload.</p> <p> StarML guide</p> </li> <li> <p> Don't reinvent the wheel</p> <p>Pre-made widgets cover everything from simple text and images to drop-down lists, sliders, input boxes and scrollbars.</p> <p> Standard views</p> </li> <li> <p> Made for modding</p> <p>Designed for SMAPI. StarML documents are normal game assets, and can be edited or replaced without Harmony patching.</p> <p> All about assets</p> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>In this introductory example, we'll be using the Framework, which is recommended if you're new to StardewUI. You'll need to be familiar with basic C# modding.</p> <p>Try it out</p> <p>Want to see the complete working example in game? The full source can be found in the test mod. Install it along with StardewUI and press F9 after loading a save.</p> ModEntry.csMenuData.csScrollingItemGrid.sml <pre><code>internal sealed class ModEntry : Mod\n{\n    private IViewEngine viewEngine;\n\n    public override void Entry(IModHelper helper)\n    {\n        helper.Events.GameLoop.GameLaunched += GameLoop_GameLaunched;\n        helper.Events.Input.ButtonPressed += Input_ButtonPressed;\n    }\n\n    private void GameLoop_GameLaunched(object? sender, GameLaunchedEventArgs e)\n    {\n        viewEngine = Helper.ModRegistry.GetApi&lt;IViewEngine&gt;(\"focustense.StardewUI\");\n        viewEngine.RegisterViews(\"Mods/TestMod/Views\", \"assets/views\");\n        viewEngine.EnableHotReloading();\n    }\n\n    private void Input_ButtonPressed(object? sender, ButtonPressedEventArgs e)\n    {\n        if (Context.IsPlayerFree &amp;&amp; e.Button == SButton.F8)\n        {\n            var context = MenuData.Edibles();\n            Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n                \"Mods/TestMod/Views/ScrollingItemGrid\",\n                context);\n        }\n    }\n}\n</code></pre> <pre><code>public class MenuData\n{\n    public string HeaderText { get; set; } = \"\";\n    public List&lt;ParsedItemData&gt; Items { get; set; } = [];\n\n    public static MenuData Edibles()\n    {\n        int[] edibleCategories = [\n            StardewValley.Object.CookingCategory,\n            StardewValley.Object.EggCategory,\n            StardewValley.Object.FishCategory,\n            StardewValley.Object.FruitsCategory,\n            StardewValley.Object.meatCategory,\n            StardewValley.Object.MilkCategory,\n            StardewValley.Object.VegetableCategory,\n        ];\n        var items = ItemRegistry.ItemTypes\n            .Single(type =&gt; type.Identifier == ItemRegistry.type_object)\n            .GetAllIds()\n            .Select(id =&gt; ItemRegistry.GetDataOrErrorItem(id))\n            .Where(data =&gt; edibleCategories.Contains(data.Category))\n            .ToList();\n        return new()\n        {\n            HeaderText = \"All Edibles\",\n            Items = items,\n        };\n    }\n}\n</code></pre> <pre><code>&lt;lane orientation=\"vertical\"\n      horizontal-content-alignment=\"middle\"&gt;\n    &lt;banner background={@Mods/StardewUI/Sprites/BannerBackground}\n            background-border-thickness=\"48,0\"\n            padding=\"12\"\n            text={HeaderText} /&gt;\n    &lt;frame layout=\"880px 640px\"\n           background={@Mods/StardewUI/Sprites/ControlBorder}\n           margin=\"0,16,0,0\"\n           padding=\"32,24\"&gt;\n        &lt;scrollable&gt;\n            &lt;grid layout=\"stretch content\"\n                  item-layout=\"length: 64\"\n                  item-spacing=\"16,16\"\n                  horizontal-item-alignment=\"middle\"&gt;\n                &lt;image layout=\"stretch content\"\n                       *repeat={Items}\n                       sprite={this}\n                       focusable=\"true\" /&gt;\n            &lt;/grid&gt;\n        &lt;/scrollable&gt;\n    &lt;/frame&gt;\n&lt;/lane&gt;\n</code></pre> <p>The result:</p> <p></p>"},{"location":"#next-steps","title":"Next Steps","text":"<p>To get started on your own UI, you can either browse the Examples or follow through the recommended reading order below:</p> <ol> <li>StarML: Features, rules, and a handy syntax reference.</li> <li>Concepts: Semi-technical shallow dive into the framework's underlying concepts and design. Learn what \"views\" and \"bindings\" are, and get the necessary background for troubleshooting bugs or performance problems.</li> <li>Binding Context: How to design a good data model for powering StarML views and menus, and make your UI responsive to changes in game/user state.</li> <li>Events: Eventually you'll probably want to make your UI do something, like interact with the game world or update some of your mod's state or setting. Event bindings are powerful enough to deserve their own page.</li> <li>Includes: As UIs grow in complexity, you'll often find yourself wanting to create reusable components to be used in many different menus, HUDs, etc. This tutorial goes over the process and potential pitfalls.</li> <li>The Core Library: How and when to use it; both the \"safe\" and \"unsafe\" ways.</li> <li>Custom Views: If the Framework doesn't have what you need, you can create your own, whether it's something simple like the <code>Banner</code> to an entirely new kind of layout.</li> <li>Framework Extensibility: Adding custom tags, conversions, attributes and more; most useful to those who have created one or more custom widgets and want to make them available in StarML.</li> </ol>"},{"location":"#happy-modding","title":"Happy Modding!","text":""},{"location":"concepts/","title":"Concepts","text":"<p>An extended introduction to StardewUI's major ideas and building blocks; this is a good place to start if you're coming from other UI frameworks (Qt, WPF/Avalonia, etc.) and wondering about the similarities and differences, or if you've never used a UI framework before and wondering why you can't\u2014or shouldn't\u2014simply do everything directly with <code>SpriteBatch</code> and <code>IClickableMenu</code> as is typical in Stardew.</p>"},{"location":"concepts/#views","title":"Views","text":"<p>These go by many different names in many different frameworks. In Qt and Flutter, they're widgets. In Windows Presentation Foundation, Windows Forms and Swift, they're controls. In Android and iOS, they are views. On the web, they are elements in pure HTML, and Angular or React might refer to them as components.</p> <p>Regardless of what we call them, and the many subtle differences between their behavior across frameworks and platforms, they always refer to the same basic concept: a self-contained, reusable object that controls its own appearance on screen and, sometimes, the user interactions it supports, such as clicks or hovers.</p> <p>StardewUI calls them Views, not because of any affinity with mobile frameworks, but because of the \"View\" in Model-View-Whatever (MVP, MVC, MVVM and so on). It may on occasion be referred to as a \"widget\" in other parts of documentation for clarity, or when discussing a view in terms of its behavior rather than what it technically is.</p>"},{"location":"concepts/#everything-is-a-view","title":"Everything is a view","text":"<p>Nothing useful happens in StardewUI without a View. Underneath it all is still MonoGame's <code>SpriteBatch</code>\u2014we do need a destination for those pixels\u2014but Views are what enable layout and reuse.</p> <p>Some views might seem very simple, even too trivial to be a view at all. Is a Label really anything more than a wrapper around <code>SpriteBatch.DrawString</code>, perhaps with a <code>Game1.parseText</code> thrown in?</p> <p>In a word, yes:</p> <ul> <li>What if we want to truncate/add an ellipsis after n lines?</li> <li>What if we want multiple lines to be horizontally centered, or even right-aligned?</li> <li>What if we want to simulate bold, or draw outlined or shadowed text?</li> </ul> <p>Text seems easy at first, but rarely stays that way. It's the same with images, which are all, in a sense, just <code>SpriteBatch.Draw</code> underneath; but is that all they are? What if the image isn't perfectly-sized for the area it needs to fit in - or if a single region needs to accommodate images of multiple sizes? Do we scale or stretch? Clip or crop? Can it be animated?</p> <p>The <code>SpriteBatch</code> is just a blank canvas on which to draw; views provide the reusability, interactivity, reactivity, and everything else we've come to expect from a user interface.</p>"},{"location":"concepts/#layout-views-and-view-trees","title":"Layout views and view trees","text":"<p>So far, we've only touched on basic view types like labels and images, but the real power of StardewUI is in its layout system which is based on layout views.</p> <p>A layout view isn't a specific type, or supertype; it describes any view that is responsible for laying out (positioning and sizing) at least one other view, with those other views being considered the children of the layout view. Together they form a tree:</p> <p>Example</p> <p></p> Lane: Menu Banner: Settings Frame: Border Label: Speed Lane: Row 1 Label: Enable turbo boost Checkbox Lane: Row 2 Label: Speed multiplier Slider <p>The structure is the same whether you're using the Core Library or StarML. At the end of the day, everything resolves to a pixel position, but you almost never deal with pixel positions directly; instead, you work with views (or elements, in StarML), and the layout views\u2014in the above example, the Frame and Lanes\u2014decide how to lay out their children\u2014in this case, the various Labels, Checkbox and Slider.</p>"},{"location":"concepts/#layout","title":"Layout","text":"<p>Many of the pages on this site refer to layout, but what actually is layout?</p> <p>Microsoft's definition is useful here:</p> <p>At its simplest, layout is a recursive system that leads to an element being sized, positioned, and drawn. More specifically, layout describes the process of measuring and arranging the members of a [Layout View] element's <code>Children</code> collection.</p> <p>The original definition refers to a \"Panel\"; the equivalent concept in StardewUI is a \"layout view\".</p> <p>Much like Microsoft's WPF \u2013 and Android, and Apple's UIKit, and the majority of UI frameworks \u2013 StardewUI layout is completed in two recursive passes:</p> <ol> <li>The Measure Pass, in which children (which may themselves be layout views) are assigned sizes based on (a) the amount of available space, or limits, and (b) the amount of space they want, which could be based on the limits, or be a fixed size, or be a function of the content, or multiple or none of the above. The important thing is that each view is told how much space, horizontal and vertical, that it is allowed to use, and then reports back how much it will use.</li> <li>The Layout Pass, in which all the size measurements are combined in order to determine the pixel positions (relative to the parent) of each view. Sometimes this might just mean stacking left-to-right or top-to-bottom, e.g. in a <code>Lane</code> but for other layout types it could involve alignments, wrapping, clipping, offsetting, or doing nothing at all (e.g. drawing its children/content in place at position <code>(0, 0)</code>).</li> </ol> <p>These passes are somewhat implicit in StardewUI\u2014there are not separate methods named \"measure\" and \"layout\". However, it is how every layout view works inside its <code>Measure</code> method.</p> <p>More importantly, layout is inherently recursive. In order to measure its own width, a layout view must measure all of its children first, which requires measuring grandchildren, and so on. If we were to do this on every update tick, it would perform poorly, or at least no better than the equivalent immediate mode UI. To avoid this, StardewUI makes use of a common technique called dirty checking.</p> <p>Separate measure and layout passes allow us to do useful things that single-pass layouts tend to have trouble with\u2014for example, aligning content to both the left and right sides of a container, where the main content stretches to fill the remaining width:</p> Navigation Main Content Info Page 1 Contents of the current page; an item grid or list, NPC profile, options form, etc. Additional sidebar content Page 2 Page 3 <p>This layout is only possible with a measure pass, as we need to know the width of both the Navigation and Info columns (lanes) before it is possible to lay out the Main Content lane. In fact, this requires two measure passes (called initial and deferred) although that is an implementation detail of the layout view and not all layouts require a deferred pass.</p>"},{"location":"concepts/#dirty-checking","title":"Dirty Checking","text":"<p>Rerunning layout on every tick would be expensive, so in order to avoid doing this, StardewUI\u2014like many frameworks\u2014employs a form of dirty-checking. This is sometimes referred to as \"invalidation\", and while there are some subtle differences between invalidation and dirty-checking, they are close enough to be considered the same for the purposes of this section.</p> <p>Invalidation/dirty checking is the process of keeping track of what state was modified (since the last completed layout) in addition to a view's current state. \"State\" is complex and view-specific but can generally be described as the combination of:</p> <ol> <li>Details of the layout request, e.g. the previous limits compared to new limits</li> <li>Values of any layout-affecting properties, such as the <code>LayoutParameters</code> (obviously) but also padding, margins, current text of a label<sup>1</sup>, current value of a slider, etc.</li> <li>The dirty state of any and all child views.</li> </ol> <p>Layout always proceeds from the top down, but dirty-checking cascades from the bottom up. This might seem like a bad thing\u2014yes, a change at any level of the view hierarchy means that the entire layout must be done again\u2014but in fact it is what allows large parts of the layout, and often the entire layout, to be skipped in each pass, reducing the \"typical\" workload to almost nothing. This is the basic principle behind a retained mode (as opposed to immediate-mode) UI.</p> <p>Consider our earlier example and suppose the slider value was changed. Because the slider is dirty, and that dirtiness cascades upward, the entire Menu Lane is effectively dirty. However:</p> <ol> <li>When the <code>Banner: Settings</code> view is measured, it sees that the limits have not changed, and since the banner itself is not dirty, it does not need to perform layout again; it can reuse the same layout as last frame.</li> <li>The <code>Frame: Border</code> is part of the dirty cascade, so it has to perform layout again. However, <code>Label: Speed</code> and <code>Lane: Row 1</code> end up in the same state as the banner; they are not dirty, and their limits are the same as before, so they skip layout.</li> <li>We then get to <code>Lane: Row 2</code>, which is dirty, and <code>Slider</code>, which of course requires new layout, although <code>Label: Speed multiplier</code> can also be skipped for the same reason as previous views.</li> </ol> <p>Thus in the end, we have only actually performed layout on 4 out of the 10 total views; the Menu Lane, Border Frame, Row 2 Lane and Slider. The larger and more complex a view tree gets, the more is saved by this branch-elimination; in a tree of 100 views, a single dirty property may involve fewer than 10 views in the layout update.</p> <p>This same logic can also apply if the change happens at the top level. For example, consider if <code>Lane: Menu</code> had its width increased (perhaps because we change the title of the \"Settings\" banner to something much longer), but <code>Frame: Border</code> is configured with a fixed width or maximum width. When layout is triggered, the entire <code>Frame: Border</code> can be skipped because its limit width hasn't changed and therefore the change in available width cannot affect it.</p> <p>If you ever run into a poorly-performing UI, use this knowledge to help. If you are frequently changing some content and that is causing slowdowns due to frequent layouts, you may be able to mitigate most of the impact by using a fixed-width container somewhere in between.</p>"},{"location":"concepts/#data-binding","title":"Data Binding","text":"<p>A term from the heyday of visual database tools like Microsoft Access, the phrase Data Binding in modern usage refers to the ability of a UI framework to keep the state of the UI in sync with some data that is not part of the UI.</p> <p>Most real-world UI is not static. For example, you have a label that is supposed to display the name of some item. But which item?</p> <pre><code>&lt;label text=\"Parsnip\" /&gt;\n</code></pre> <p>isn't very helpful unless you know the item is always going to be a Parsnip. When you build your own UI from scratch using <code>SpriteBatch</code>, you tell it exactly what text to display on every <code>draw</code> call. However, when you write StarML and use the Framework API to display it, you don't have access to the actual <code>Label</code> instance, nor any ability to set its <code>Text</code>. How do we make this display the name of any item, not just static text?</p> <p>The answer is a data binding:</p> <pre><code>&lt;label text={ItemName} /&gt;\n</code></pre> <p>Along with a model such as:</p> <pre><code>public class ViewData\n{\n    public string ItemName { get; set; } = \"\";\n}\n</code></pre> <p>The full details are covered in the StarML guide; at a conceptual level, what matters is that StardewUI does the synchronization work for you. You don't control the <code>Label</code> directly, but you don't need to, because you have bound its text to a model (<code>ViewData</code>) that you do control. <code>ViewData</code> is part of your mod.</p> <p>This style of UI development favors the \"Model-View\" family \u2013 informally, Model-View-Whatever.</p> <p>But, there's a catch... if you want these data bindings to be more than a one-shot deal\u2014that is, if you want to be able to change the <code>ItemName</code> and see the changes show up immediately in the UI\u2014then you need to implement INotifyPropertyChanged (aka: \"INPC\"). Doing so can be very tedious, so head on over to Binding Context for helpful tips and shortcuts to make it much faster and easier.</p> <ol> <li> <p>Whether or not a particular property truly alters the layout is not always certain; for example, a label that is constrained to 1 line may have no cascading effect if its parent is a horizontally-stretched or fixed vertical lane. However, the relationships in an arbitrary hierarchy can be surprisingly complex\u2014for example, a vertical lane that is horizontally content-sized might be affected by a change to the text of an inner label, but only if it is the longest label or becomes the longest label, etc.</p> <p>Because the effects can be so unpredictable, attempting to check whether layout will be affected can be almost as expensive and far more complex and bug-prone than simply redoing the layout; therefore, StardewUI generally just assumes that any dirty property means a new layout is required.\u00a0\u21a9</p> </li> </ol>"},{"location":"examples/","title":"Examples","text":"<p>Curated list of examples built with StardewUI to demonstrate the many features of the framework and how to use them.</p> <p>The most current source for any example can usually be found in the <code>dev</code> branch of the test mod. If an example isn't part of StardewUI's source, e.g. if it is an abstract of a real mod, then it will be specified on the individual page; click the  and  links next to the title.</p> <ul> <li> <p>Scrolling Item Grid @focustense</p> <p></p> </li> <li> <p>Bestiary @mushymato, @focustense</p> <p></p> </li> <li> <p>Train Shop (Carousel) @focustense</p> <p></p> </li> <li> <p>Crop Calendar @mushymato</p> <p></p> </li> <li> <p>Settings Form @focustense</p> <p></p> </li> </ul>"},{"location":"examples/bestiary/","title":"Example: Bestiary","text":"<p>Contributed by Mushymato and focustense</p> <ul> <li> Bindings</li> <li> Two-Way</li> <li> Events</li> <li> Repeaters</li> <li> Conditionals</li> <li> Tabs</li> <li> Grid</li> <li> Animation</li> </ul> <p>Shows information about all monsters in the game, including their first animation, dangerous variants, and combat stats and loot drops in a tabbed view.</p> DemoBestiaryViewModel.csMonsterViewModel.csBestiary.sml <p> </p> <pre><code>internal enum BestiaryTab { General, Combat, Loot }\n\ninternal partial class BestiaryViewModel : INotifyPropertyChanged\n{\n    public IReadOnlyList&lt;MonsterViewModel&gt; AllMonsters { get; set; } = [];\n    public IReadOnlyList&lt;BestiaryTabViewModel&gt; AllTabs { get; } =\n        Enum.GetValues&lt;BestiaryTab&gt;()\n            .Select(tab =&gt;\n                new BestiaryTabViewModel(tab, tab == BestiaryTab.General))\n            .ToArray();\n    public MonsterViewModel? SelectedMonster =&gt;\n        SelectedIndex &gt;= 0 ? AllMonsters[SelectedIndex] : null;\n    public string SelectedMonsterName =&gt; SelectedMonster?.DisplayName ?? \"\";\n\n    [Notify] private int selectedIndex;\n    [Notify] private BestiaryTab selectedTab;\n\n    public void NextMonster()\n    {\n        SelectedIndex++;\n        if (SelectedIndex &gt;= AllMonsters.Count)\n        {\n            SelectedIndex = 0;\n        }\n        SelectedMonster?.CurrentAnimation?.Reset();\n    }\n\n    public void PreviousMonster()\n    {\n        SelectedIndex--;\n        if (SelectedIndex &lt; 0)\n        {\n            SelectedIndex = AllMonsters.Count - 1;\n        }\n        SelectedMonster?.CurrentAnimation?.Reset();\n    }\n\n    public void SelectTab(BestiaryTab tab)\n    {\n        SelectedTab = tab;\n        foreach (var tabViewModel in AllTabs)\n        {\n            tabViewModel.IsActive = tabViewModel.Value == tab;\n        }\n    }\n\n    public void Update(TimeSpan elapsed)\n    {\n        SelectedMonster?.CurrentAnimation?.Animate(elapsed);\n    }\n}\n\ninternal partial class BestiaryTabViewModel(BestiaryTab value, bool active)\n    : INotifyPropertyChanged\n{\n    public Tuple&lt;int, int, int, int&gt; Margin =&gt;\n        IsActive ? new(0, 0, -12, 0) : new(0, 0, 0, 0);\n    public BestiaryTab Value { get; } = value;\n\n    [Notify] private bool isActive = active;\n}\n</code></pre> <pre><code>internal partial class MonsterViewModel : INotifyPropertyChanged\n{\n    public string Name { get; set; } = \"\";\n    public string DisplayName { get; set; } = \"\";\n    public MonsterAnimation? DefaultAnimation { get; set; }\n    public MonsterAnimation? DangerousAnimation { get; set; }\n    public MonsterAnimation? CurrentAnimation =&gt;\n        IsDangerousSelected ? DangerousAnimation : DefaultAnimation;\n    public bool HasDangerousVariant =&gt; DangerousAnimation is not null;\n    public int Health { get; set; }\n    public int Attack { get; set; }\n    public int Defense { get; set; }\n    public int Speed { get; set; }\n    public int Accuracy { get; set; }\n    public int Experience { get; set; }\n    public IReadOnlyList&lt;MonsterDrop&gt; Drops { get; set; } = [];\n\n    [Notify] private bool isDangerousSelected;\n}\n\npublic partial record MonsterAnimation(Texture2D Texture, int Width, int Height)\n    : INotifyPropertyChanged\n{\n    public string Layout =&gt; $\"{Width * 4}px {Height * 4}px\";\n    public Tuple&lt;Texture2D, Rectangle&gt; Sprite =&gt;\n        Tuple.Create(Texture, new Rectangle(Width * FrameIndex, 0, Width, Height));\n\n    private static readonly TimeSpan animationInterval =\n        TimeSpan.FromMilliseconds(150);\n\n    private TimeSpan animationProgress;\n    [Notify] private int frameIndex;\n\n    public void Animate(TimeSpan elapsed)\n    {\n        animationProgress += elapsed;\n        if (animationProgress &gt;= animationInterval)\n        {\n            FrameIndex = (FrameIndex + 1) % 4;\n            animationProgress = TimeSpan.Zero;\n        }\n    }\n\n    public void Reset()\n    {\n        FrameIndex = 0;\n        animationProgress = TimeSpan.Zero;\n    }\n}\n\ninternal record MonsterDrop(ParsedItemData Item, float Chance)\n{\n    public Color ChanceColor =&gt;\n        Chance switch\n        {\n            &lt; 0.1f =&gt; Color.DarkRed,\n            &lt;= 0.25f =&gt; Game1.textColor,\n            &lt;= 0.5f =&gt; Color.Blue,\n            _ =&gt; Color.Green,\n        };\n    public string FormattedChance = string.Format(\"{0:0.0%}\", Chance);\n    public string ItemDisplayName =&gt; Item.DisplayName;\n}\n</code></pre> <pre><code>&lt;lane orientation=\"vertical\" horizontal-content-alignment=\"middle\"&gt;\n    &lt;lane vertical-content-alignment=\"middle\"&gt;\n        &lt;image layout=\"48px 48px\"\n               horizontal-alignment=\"middle\"\n               vertical-alignment=\"middle\"\n               sprite={@Mods/StardewUI/Sprites/SmallLeftArrow}\n               focusable=\"true\"\n               click=|PreviousMonster()| /&gt;\n        &lt;banner layout=\"350px content\"\n                margin=\"16, 0\"\n                background={@Mods/StardewUI/Sprites/BannerBackground}\n                background-border-thickness=\"48, 0\"\n                padding=\"12\"\n                text={SelectedMonsterName} /&gt;\n        &lt;image layout=\"48px 48px\"\n               horizontal-alignment=\"middle\"\n               vertical-alignment=\"middle\"\n               sprite={@Mods/StardewUI/Sprites/SmallRightArrow}\n               focusable=\"true\"\n               click=|NextMonster()| /&gt;\n    &lt;/lane&gt;\n    &lt;lane&gt;\n        &lt;lane layout=\"150px content\"\n              margin=\"0, 16, 0, 0\"\n              orientation=\"vertical\"\n              horizontal-content-alignment=\"end\"\n              z-index=\"2\"&gt;\n            &lt;frame *repeat={AllTabs}\n                   layout=\"120px 64px\"\n                   margin={Margin}\n                   padding=\"16, 0\"\n                   horizontal-content-alignment=\"middle\"\n                   vertical-content-alignment=\"middle\"\n                   background={@Mods/focustense.StardewUITest/Sprites/MenuTiles:TabButton}\n                   focusable=\"true\"\n                   click=|^SelectTab(Value)|&gt;\n                &lt;label text={Value} /&gt;\n            &lt;/frame&gt;\n        &lt;/lane&gt;\n        &lt;frame *switch={SelectedTab}\n               layout=\"400px 300px\"\n               margin=\"0, 16, 0, 0\"\n               padding=\"32, 24\"\n               background={@Mods/StardewUI/Sprites/ControlBorder}&gt;\n            &lt;lane *case=\"General\"\n                  *context={SelectedMonster}\n                  layout=\"stretch content\"\n                  orientation=\"vertical\"\n                  horizontal-content-alignment=\"middle\"&gt;\n                &lt;panel *context={CurrentAnimation}\n                       layout=\"stretch 128px\"\n                       margin=\"0, 0, 0, 12\"\n                       horizontal-content-alignment=\"middle\"\n                       vertical-content-alignment=\"middle\"&gt;\n                    &lt;image layout={Layout} sprite={Sprite} /&gt;\n                &lt;/panel&gt;\n                &lt;label margin=\"0, 8\" color=\"#136\" text={Name} /&gt;\n                &lt;lane *if={HasDangerousVariant}\n                      margin=\"0, 16\"\n                      vertical-content-alignment=\"middle\"&gt;\n                    &lt;checkbox layout=\"content 32px\"\n                              label-text=\"Dangerous\"\n                              is-checked={&lt;&gt;IsDangerousSelected} /&gt;\n                &lt;/lane&gt;\n            &lt;/lane&gt;\n            &lt;lane *case=\"Combat\"\n                  *context={SelectedMonster}\n                  orientation=\"vertical\"&gt;\n                &lt;lane margin=\"0, 0, 0, 6\" vertical-content-alignment=\"middle\"&gt;\n                    &lt;image layout=\"20px content\"\n                           sprite={@Mods/focustense.StardewUITest/Sprites/Cursors:HealthIcon} /&gt;\n                    &lt;label layout=\"140px content\" margin=\"8, 0\" text=\"Health\" /&gt;\n                    &lt;label color=\"#136\" text={Health} /&gt;\n                &lt;/lane&gt;\n                &lt;lane margin=\"0, 6\" vertical-content-alignment=\"middle\"&gt;\n                    &lt;image layout=\"20px content\"\n                           sprite={@Mods/focustense.StardewUITest/Sprites/Cursors:AttackIcon} /&gt;\n                    &lt;label layout=\"140px content\" margin=\"8, 0\" text=\"Attack\" /&gt;\n                    &lt;label color=\"#136\" text={Attack} /&gt;\n                &lt;/lane&gt;\n                &lt;lane margin=\"0, 6\" vertical-content-alignment=\"middle\"&gt;\n                    &lt;image layout=\"20px content\"\n                           sprite={@Mods/focustense.StardewUITest/Sprites/Cursors:DefenseIcon} /&gt;\n                    &lt;label layout=\"140px content\" margin=\"8, 0\" text=\"Defense\" /&gt;\n                    &lt;label color=\"#136\" text={Defense} /&gt;\n                &lt;/lane&gt;\n                &lt;lane margin=\"0, 6\" vertical-content-alignment=\"middle\"&gt;\n                    &lt;image layout=\"20px content\"\n                           sprite={@Mods/focustense.StardewUITest/Sprites/Cursors:SpeedIcon} /&gt;\n                    &lt;label layout=\"140px content\" margin=\"8, 0\" text=\"Speed\" /&gt;\n                    &lt;label color=\"#136\" text={Speed} /&gt;\n                &lt;/lane&gt;\n                &lt;lane margin=\"0, 6\" vertical-content-alignment=\"middle\"&gt;\n                    &lt;image layout=\"20px content\"\n                           sprite={@Mods/focustense.StardewUITest/Sprites/Cursors:LuckIcon} /&gt;\n                    &lt;label layout=\"140px content\" margin=\"8, 0\" text=\"Hit Chance\" /&gt;\n                    &lt;label color=\"#136\" text={Accuracy} /&gt;\n                &lt;/lane&gt;\n            &lt;/lane&gt;\n            &lt;grid *case=\"Loot\"\n                  *context={SelectedMonster}\n                  layout=\"stretch\"\n                  item-layout=\"count: 5\"\n                  item-spacing=\"16, 16\"\n                  horizontal-item-alignment=\"middle\"&gt;\n              &lt;lane *repeat={Drops} orientation=\"vertical\" horizontal-content-alignment=\"middle\"&gt;\n                  &lt;image layout=\"64px\" margin=\"0, 0, 0, 4\" sprite={Item} /&gt;\n                  &lt;label color={ChanceColor} scale=\"0.66\" text={FormattedChance} /&gt;\n              &lt;/lane&gt;\n            &lt;/grid&gt;\n        &lt;/frame&gt;\n        &lt;spacer layout=\"50px content\" /&gt;\n    &lt;/lane&gt;\n&lt;/lane&gt;\n</code></pre>"},{"location":"examples/carousel/","title":"Example: Train Shop (Carousel)","text":"<p>Author: focustense</p> <ul> <li> Bindings</li> <li> Events</li> <li> Repeaters</li> <li> Conditionals</li> <li> Grid</li> <li> View Addon</li> <li> Converter Addon</li> <li> Animation</li> </ul> <p>A very showy, very hypothetical example of a \"shop\" where you can buy different items from different train cars.</p> <p>This example isn't meant to be very practical, but shows off how to use add-ons, AKA framework extensions, and includes some unusual features you're unlikely to find anywhere else, such as tweening motion, sub-layout and pagination using controller buttons.</p> <p>Note</p> <p>Because this example is more code-heavy than most, the code tabs below may be abridged or organized differently from the original source. Click the source links next to the page title to see the full source code.</p> DemoCarouselMenuViewModel.csCarousel.csCarouselDemo.sml <p> </p> <pre><code>internal partial class CarouselMenuViewModel\n{\n    public int HeaderIndex =&gt; SelectedPageIndex + 1;\n    public List&lt;CarouselMenuPage&gt; Pages { get; set; } = [];\n\n    [Notify] private int selectedPageIndex;\n\n    public bool HandleButtonPress(SButton button)\n    {\n        return button switch\n        {\n            SButton.LeftShoulder =&gt; PreviousPage(),\n            SButton.RightShoulder =&gt; NextPage(),\n            _ =&gt; false\n        };\n    }\n\n    public bool NextPage()\n    {\n        if (SelectedPageIndex &lt; (Pages.Count - 1))\n        {\n            SelectedPageIndex++;\n            return true;\n        }\n        return false;\n    }\n\n    public bool PreviousPage()\n    {\n        if (SelectedPageIndex &gt; 0)\n        {\n            SelectedPageIndex--;\n            return true;\n        }\n        return false;\n    }\n}\n\ninternal enum TrainCarType { Passenger, Freight }\n\ninternal enum TrainCovering { None, Minerals, Boxes }\n\ninternal class CarouselMenuPage\n{\n    public string Title { get; } = title;\n    public TrainCarType CarType { get; } = carType;\n    public TrainCovering Covering { get; } = covering;\n    public IReadOnlyList&lt;PurchasableItem&gt; Items { get; set; } = items ?? [];\n}\n\ninternal class PurchasableItem(ParsedItemData data, int price)\n{\n    public ParsedItemData Data { get; } = data;\n    public string DisplayName =&gt; Data.DisplayName;\n    public int Price { get; } = price;\n}\n</code></pre> <pre><code>internal partial class Carousel : View\n{\n    public IList&lt;IView&gt; Children { ... }\n    public float Gap { ... }\n    public LayoutParameters SelectionLayout { ... }\n\n    [Notify] private KeySpline easing = KeySpline.Linear;\n    [Notify] private int selectedIndex;\n    [Notify] private float transitionDuration = 500; // milliseconds\n\n    private readonly List&lt;ViewChild&gt; childPositions = [];\n\n    private float drawingOffset;\n    private float selectedOffset;\n    private float transitionProgress;\n    private float transitionStartOffset;\n\n    public override void OnUpdate(TimeSpan elapsed)\n    {\n        if (drawingOffset == selectedOffset)\n        {\n            return;\n        }\n        transitionProgress += (float)elapsed.TotalMilliseconds;\n        if (transitionProgress &gt;= TransitionDuration)\n        {\n            drawingOffset = selectedOffset;\n            transitionProgress = 0;\n            return;\n        }\n        float progressRatio = transitionProgress / TransitionDuration;\n        float offsetRatio = Easing.Get(progressRatio);\n        drawingOffset = transitionStartOffset +\n            (selectedOffset - transitionStartOffset) * offsetRatio;\n    }\n\n    protected override FocusSearchResult? FindFocusableDescendant(\n        Vector2 contentPosition,\n        Direction direction)\n    {\n        if (Children.Count == 0)\n        {\n            return null;\n        }\n        var selectedChild =\n            (SelectedIndex &gt;= 0 &amp;&amp; SelectedIndex &lt; Children.Count)\n                ? childPositions[SelectedIndex]\n                : childPositions[0];\n        var offset = new Vector2(selectedOffset, 0);\n        return selectedChild\n            .FocusSearch(contentPosition + offset, direction)?\n            .Offset(-offset);\n    }\n\n    protected override IEnumerable&lt;ViewChild&gt; GetLocalChildren()\n    {\n        var offset = new Vector2(-selectedOffset, 0);\n        return childPositions.Select(c =&gt; c.Offset(offset));\n    }\n\n    protected override void OnDrawContent(ISpriteBatch b)\n    {\n        using var _clip = b.Clip(new(0, 0, (int)OuterSize.X, (int)OuterSize.Y));\n        var clipBounds = new Bounds(Vector2.Zero, OuterSize);\n        foreach (var child in childPositions)\n        {\n            if (!child.GetActualBounds()\n                      .Offset(new(-drawingOffset, 0))\n                      .IntersectsWith(clipBounds))\n            {\n                continue;\n            }\n            using var _ = b.SaveTransform();\n            b.Translate(child.Position.X - drawingOffset, child.Position.Y);\n            child.View.Draw(b);\n        }\n    }\n\n    protected override void OnMeasure(Vector2 availableSize)\n    {\n        ContentSize = Layout.GetLimits(availableSize);\n        var selectionLimits = SelectionLayout.GetLimits(availableSize);\n        childPositions.Clear();\n        float x = (ContentSize.X - selectionLimits.X) / 2;\n        foreach (var childView in children)\n        {\n            childView.Measure(selectionLimits);\n            float top = (ContentSize.Y - childView.OuterSize.Y) / 2;\n            childPositions.Add(new(childView, new(x, top)));\n            x += childView.OuterSize.X + Gap;\n        }\n        selectedOffset = GetStartOffset(SelectedIndex);\n    }\n\n    private void BeginTransition()\n    {\n        selectedOffset = GetStartOffset(SelectedIndex);\n        transitionStartOffset = drawingOffset;\n        transitionProgress = 0;\n    }\n\n    private float GetStartOffset(int index)\n    {\n        if (childPositions.Count == 0\n            || index &lt; 0\n            || index &gt;= childPositions.Count)\n        {\n            return 0;\n        }\n        var child = childPositions[index];\n        var localOffset = (ContentSize.X - child.View.OuterSize.X) / 2;\n        return child.Position.X - localOffset;\n    }\n\n    // This method has a special name recognized by\n    // PropertyChanged.SourceGenerator, and will run whenever the\n    // SelectedIndex property changes to a new value.\n    private void OnSelectedIndexChanged()\n    {\n        BeginTransition();\n    }\n}\n</code></pre> <pre><code>&lt;lane vertical-content-alignment=\"middle\"&gt;\n    &lt;image layout=\"64px\"\n           sprite={@Mods/StardewUI/Sprites/LargeLeftArrow}\n           tooltip=\"Previous Car\"\n           focusable=\"true\"\n           left-click=|PreviousPage()| /&gt;\n    &lt;frame layout=\"800px 800px\"\n           background={@Mods/StardewUI/Sprites/MenuBackground}\n           border={@Mods/StardewUI/Sprites/MenuBorder}\n           border-thickness=\"36, 36, 40, 36\"\n           button-press=|HandleButtonPress($Button)|&gt;\n        &lt;lane orientation=\"vertical\"&gt;\n            &lt;carousel layout=\"stretch 350px\"\n                      selection-layout=\"480px 240px\"\n                      easing=\"InOutCubic\"\n                      selected-index={HeaderIndex}&gt;\n                &lt;image layout=\"stretch\"\n                       sprite={@Mods/focustense.StardewUITestAddon/Sprites/Cursors:TrainCarFreightCovered} /&gt;\n                &lt;panel *repeat={Pages} *switch={CarType} layout=\"stretch\"&gt;\n                    &lt;image *case=\"Passenger\"\n                           layout=\"stretch\"\n                           sprite={@Mods/focustense.StardewUITestAddon/Sprites/Cursors:TrainCarPassenger} /&gt;\n                    &lt;image *case=\"Freight\"\n                           layout=\"stretch\"\n                           sprite={@Mods/focustense.StardewUITestAddon/Sprites/Cursors:TrainCarFreightUncovered} /&gt;\n                    &lt;panel *switch={Covering}\n                           layout=\"stretch\"\n                           margin=\"26, 15, 22, 18\"&gt;\n                        &lt;image *case=\"Minerals\"\n                               layout=\"stretch\"\n                               sprite={@Mods/focustense.StardewUITestAddon/Sprites/Cursors:TrainCargoMinerals} /&gt;\n                        &lt;image *case=\"Boxes\"\n                               layout=\"stretch\"\n                               sprite={@Mods/focustense.StardewUITestAddon/Sprites/Cursors:TrainCargoBoxes} /&gt;\n                    &lt;/panel&gt;\n                &lt;/panel&gt;\n                &lt;image layout=\"stretch\"\n                       sprite={@Mods/focustense.StardewUITestAddon/Sprites/Cursors:TrainEngine} /&gt;\n            &lt;/carousel&gt;\n            &lt;carousel layout=\"stretch\"\n                      selection-layout=\"600px stretch\"\n                      easing=\"OutCubic\"\n                      gap=\"50\"\n                      selected-index={SelectedPageIndex}&gt;\n                &lt;frame *repeat={Pages}\n                       layout=\"stretch\"\n                       margin=\"0, 0, 0, 32\"\n                       padding=\"16\"\n                       background={@Mods/StardewUI/Sprites/ControlBorder}&gt;\n                    &lt;lane orientation=\"vertical\" padding=\"12\"&gt;\n                        &lt;banner layout=\"stretch content\" text={Title} /&gt;\n                        &lt;grid layout=\"stretch\"\n                              margin=\"0, 16, 0, 0\"\n                              item-layout=\"count: 3\"\n                              item-spacing=\"16, 16\"\n                              horizontal-item-alignment=\"middle\"&gt;\n                            &lt;frame *repeat={Items}\n                                   layout=\"stretch content\"\n                                   padding=\"12\"\n                                   background={@Mods/focustense.StardewUITestAddon/Sprites/MenuTiles:ItemBorder}\n                                   tooltip={DisplayName}\n                                   focusable=\"true\"&gt;\n                                &lt;lane layout=\"stretch content\"\n                                      orientation=\"vertical\"\n                                      horizontal-content-alignment=\"middle\"&gt;\n                                    &lt;image layout=\"64px\" sprite={Data} /&gt;\n                                    &lt;lane margin=\"0, 8\" vertical-content-alignment=\"middle\"&gt;\n                                        &lt;image layout=\"22px\"\n                                               sprite={@Mods/focustense.StardewUITestAddon/Sprites/Cursors:Coin} /&gt;\n                                        &lt;label margin=\"8, 0, 0, 0\" text={Price} /&gt;\n                                    &lt;/lane&gt;\n                                &lt;/lane&gt;\n                            &lt;/frame&gt;\n                        &lt;/grid&gt;\n                    &lt;/lane&gt;\n                &lt;/frame&gt;\n            &lt;/carousel&gt;\n        &lt;/lane&gt;\n    &lt;/frame&gt;\n    &lt;image layout=\"64px\"\n           sprite={@Mods/StardewUI/Sprites/LargeRightArrow}\n           tooltip=\"Next Car\"\n           focusable=\"true\"\n           left-click=|NextPage()| /&gt;\n&lt;/lane&gt;\n</code></pre>"},{"location":"examples/crop-calendar/","title":"Example: Crop Calendar","text":"<p>Contributed by Mushymato, edited by focustense</p> <ul> <li> Bindings</li> <li> Events</li> <li> Repeaters</li> <li> Grid</li> <li> Scrolling</li> <li> Animation</li> </ul> <p>Displays harvest timing and an animation of the growth phases for any given crop, selectable from a grid.</p> DemoCropsGridViewModel.csCropInfoboxModel.csCropsGrid.sml <p> </p> <pre><code>internal partial class CropsGridViewModel : INotifyPropertyChanged\n{\n    public IReadOnlyList&lt;CropInfoboxModel&gt; AllCrops { get; }\n\n    [Notify]\n    private CropInfoboxModel selectedCrop;\n\n    public CropsGridViewModel()\n    {\n        AllCrops = Game1\n            .objectData.Select(\n                (kv) =&gt;\n                    Game1.cropData.TryGetValue(kv.Key, out CropData? crop)\n                        ? new CropInfoboxModel(ItemRegistry.GetData(kv.Key), crop)\n                        : null\n            )\n            .Where(cropInfo =&gt; cropInfo is not null)\n            .ToList()!;\n        selectedCrop = AllCrops[0];\n    }\n\n    public void SelectCrop(CropInfoboxModel cropInfo)\n    {\n        cropInfo.ResetPhase();\n        SelectedCrop = cropInfo;\n    }\n}\n</code></pre> <pre><code>internal partial record CropInfoboxModel(ParsedItemData Seed, CropData Crop)\n    : INotifyPropertyChanged\n{\n    public string Name =&gt; Produce.DisplayName;\n    public IReadOnlyList&lt;bool&gt; Harvest { get; } = GetHarvest(Crop).ToList();\n    public ParsedItemData Produce { get; } =\n        ItemRegistry.GetDataOrErrorItem(Crop.HarvestItemId);\n\n    private readonly Texture2D cropTexture =\n        Game1.content.Load&lt;Texture2D&gt;(Crop.Texture);\n\n    private int phaseIndex = 0;\n\n    [Notify]\n    private Tuple&lt;Texture2D, Rectangle&gt; phase = null!;\n\n    internal void NextPhase()\n    {\n        Phase = new Tuple&lt;Texture2D, Rectangle&gt;(\n            cropTexture,\n            new Rectangle(\n                // odd number sprite index = right side\n                Crop.SpriteIndex\n                    % 2\n                    * 128\n                    + phaseIndex * 16,\n                // zigzag\n                Crop.SpriteIndex\n                    / 2\n                    * 32,\n                16,\n                32\n            )\n        );\n\n        if (phaseIndex &lt; 2)\n            phaseIndex = 2;\n        else if (phaseIndex == Crop.DaysInPhase.Count + 1)\n            phaseIndex = Random.Shared.Next(0, 2);\n        else\n            phaseIndex++;\n    }\n\n    internal void ResetPhase()\n    {\n        phaseIndex = Random.Shared.Next(0, 2);\n        NextPhase();\n    }\n\n    private static IEnumerable&lt;bool&gt; GetHarvest(CropData crop)\n    {\n        int growDays = crop.DaysInPhase.Sum();\n        int regrowDays = crop.RegrowDays;\n        if (regrowDays &lt; 1)\n        {\n            yield return false;\n            for (int day = 1; day &lt; WorldDate.DaysPerMonth; day++)\n                yield return day % growDays == 0;\n        }\n        else\n        {\n            yield return false;\n            for (int day = 1; day &lt; growDays; day++)\n                yield return false;\n            yield return true;\n            for (int day = 1; day &lt; WorldDate.DaysPerMonth - growDays; day++)\n                yield return day % regrowDays == 0;\n        }\n    }\n}\n</code></pre> <pre><code>&lt;lane layout=\"content 700px\"\n      orientation=\"horizontal\"\n      horizontal-content-alignment=\"start\"&gt;\n    &lt;frame layout=\"400px stretch\"\n           background={@Mods/StardewUI/Sprites/ControlBorder}\n           padding=\"32, 20\"\n           horizontal-content-alignment=\"middle\"&gt;\n        &lt;lane *context={SelectedCrop}\n              orientation=\"vertical\"\n              horizontal-content-alignment=\"middle\"&gt;\n            &lt;banner text={Name} /&gt;\n            &lt;lane orientation=\"horizontal\" &gt;\n                &lt;image sprite={Seed} layout=\"64px 64px\" margin=\"4\"/&gt;\n                &lt;image sprite={Produce} layout=\"64px 64px\" margin=\"4\"/&gt;\n            &lt;/lane&gt;\n            &lt;grid layout=\"400px content\"\n                  item-layout=\"count: 7\"\n                  item-spacing=\"8,8\"\n                  horizontal-item-alignment=\"middle\"&gt;\n                &lt;frame *repeat={Harvest}\n                       layout=\"64px 64px\"\n                       background={@Mods/StardewUI/Sprites/ButtonLight}&gt;\n                    &lt;image *if={this}\n                           layout=\"48px 48px\"\n                           sprite={^Produce}\n                           margin=\"8\"/&gt;\n                &lt;/frame&gt;\n            &lt;/grid&gt;\n            &lt;image sprite={Phase} layout=\"64px 128px\" margin=\"0,16,0,0\"/&gt;\n        &lt;/lane&gt;\n    &lt;/frame&gt;\n    &lt;frame layout=\"600px stretch\"\n           background={@Mods/StardewUI/Sprites/ControlBorder}\n           padding=\"20\"&gt;\n        &lt;scrollable&gt;\n            &lt;grid layout=\"content content\"\n                  item-layout=\"count: 6\"\n                  item-spacing=\"8, 8\"\n                  horizontal-item-alignment=\"middle\"&gt;\n                &lt;image *repeat={AllCrops}\n                       layout=\"64px 64px\"\n                       sprite={Seed}\n                       tooltip={Name}\n                       focusable=\"true\"\n                       click=|^SelectCrop(this)| /&gt;\n            &lt;/grid&gt;\n        &lt;/scrollable&gt;\n    &lt;/frame&gt;\n&lt;/lane&gt;\n</code></pre>"},{"location":"examples/scrolling-item-grid/","title":"Example: Scrolling Item Grid","text":"<p>Contributed by focustense</p> <ul> <li> Bindings</li> <li> Repeaters</li> <li> Grid</li> <li> Scrolling</li> </ul> <p>Simple grid showing a large number of items inside a scrollable container. This is the same example as the one on the home page.</p> DemoEdiblesViewModel.csScrollableItemGrid.sml <p> </p> <pre><code>internal record EdiblesViewModel(string HeaderText, ParsedItemData[] Items)\n{\n    public static EdiblesViewModel LoadFromGameData()\n    {\n        int[] edibleCategories = [\n            StardewValley.Object.CookingCategory,\n            StardewValley.Object.EggCategory,\n            StardewValley.Object.FishCategory,\n            StardewValley.Object.FruitsCategory,\n            StardewValley.Object.meatCategory,\n            StardewValley.Object.MilkCategory,\n            StardewValley.Object.VegetableCategory,\n        ];\n        var items = ItemRegistry.ItemTypes\n            .Single(type =&gt; type.Identifier == ItemRegistry.type_object)\n            .GetAllIds()\n            .Select(id =&gt; ItemRegistry.GetDataOrErrorItem(id))\n            .Where(data =&gt; edibleCategories.Contains(data.Category))\n            .ToArray();\n        return new(\"All Edibles\", items);\n    }\n}\n</code></pre> <pre><code>&lt;lane orientation=\"vertical\" horizontal-content-alignment=\"middle\"&gt;\n    &lt;banner background={@Mods/StardewUI/Sprites/BannerBackground}\n            background-border-thickness=\"48,0\"\n            padding=\"12\"\n            text={HeaderText} /&gt;\n    &lt;frame layout=\"880px 640px\"\n           margin=\"0,16,0,0\"\n           padding=\"32,24\"\n           background={@Mods/StardewUI/Sprites/ControlBorder}&gt;\n        &lt;scrollable peeking=\"128\"&gt;\n            &lt;grid layout=\"stretch content\"\n                  item-layout=\"length: 64\"\n                  item-spacing=\"16,16\"\n                  horizontal-item-alignment=\"middle\"&gt;\n                &lt;image *repeat={Items}\n                       layout=\"stretch content\"\n                       sprite={this}\n                       tooltip={DisplayName}\n                       focusable=\"true\" /&gt;\n            &lt;/grid&gt;\n        &lt;/scrollable&gt;\n    &lt;/frame&gt;\n&lt;/lane&gt;\n</code></pre>"},{"location":"examples/settings-form/","title":"Example: Settings Form","text":"<p>Author: focustense</p> <ul> <li> Bindings</li> <li> Two-Way</li> <li> Events</li> <li> Transparency</li> <li> Templates</li> <li> Localization</li> <li> Text Input</li> <li> Drop-Down</li> </ul> <p>Generic Mod Config Menu is a great way to get started with mod configuration, but what happens when you want more customization and control over the UI? This example isn't as fancy as the FishinC settings, but shows how simple it is to start building a custom menu.</p> <p>Uses templates to provide a consistent appearance for headings and settings.</p> DemoFormViewModel.csForm.sml <p> </p> <pre><code>internal partial class FormViewModel : INotifyPropertyChanged\n{\n    public Color BackgroundTint =&gt; SelectedTheme.Color;\n    public Func&lt;float, string&gt; FormatOpacity { get; } = v =&gt; v.ToString(\"f2\");\n    public PetType[] PetTypes { get; } = Enum.GetValues&lt;PetType&gt;();\n    public ThemeViewModel[] Themes { get; } =\n        [\n            new(Color.SandyBrown) { Selected = true },\n            new(Color.SkyBlue),\n            new(Color.SeaGreen),\n            new(Color.Violet),\n            new(Color.LightGoldenrodYellow),\n            new(Color.LightSlateGray),\n        ];\n\n    public TomatoType[] TomatoTypes { get; } = Enum.GetValues&lt;TomatoType&gt;();\n\n    [Notify] private bool allowClose = true;\n    [Notify] private KeybindList keybinds = new(\n        new Keybind(SButton.LeftControl, SButton.F7));\n    [Notify] private string name = \"Cletus\";\n    [Notify] private float opacity = 1f;\n    [Notify] private PetType selectedPetType;\n    [Notify] private ThemeViewModel selectedTheme;\n    [Notify] private TomatoType selectedTomatoType;\n\n    public FormViewModel()\n    {\n        selectedTheme = Themes[0];\n    }\n\n    public void Close(bool save)\n    {\n        // Omitted here; see example source code for implementation.\n    }\n\n    public void SetTheme(ThemeViewModel theme)\n    {\n        if (SelectedTheme == theme)\n        {\n            return;\n        }\n        Game1.playSound(\"smallSelect\");\n        SelectedTheme.Selected = false;\n        SelectedTheme = theme;\n        theme.Selected = true;\n    }\n}\n\ninternal enum PetType { Dog, Cat, Turtle, Parrot, Snake }\n\ninternal enum TomatoType { Fruit, Vegetable, Condiment }\n\ninternal partial class ThemeViewModel(Color color)\n{\n    public Color Color { get; } = color;\n\n    [Notify] private bool selected;\n}\n</code></pre> <pre><code>&lt;lane orientation=\"vertical\"\n      horizontal-content-alignment=\"middle\"\n      opacity={Opacity}&gt;\n    &lt;banner background={@Mods/StardewUI/Sprites/BannerBackground}\n            background-border-thickness=\"48,0\"\n            padding=\"12\"\n            text={#focustense.StardewUI:SettingsMenu.Title} /&gt;\n    &lt;frame layout=\"700px content\"\n           margin=\"0,8,0,0\"\n           padding=\"32,24\"\n           background={@Mods/StardewUI/Sprites/ControlBorderUncolored}\n           background-tint={BackgroundTint}&gt;\n        &lt;lane layout=\"stretch content\" orientation=\"vertical\"&gt;\n            &lt;form-heading text={#Example.Form.Profile.Heading} /&gt;\n            &lt;form-row title={#Example.Form.Name.Title}&gt;\n                &lt;textinput layout=\"250px 48px\"\n                           margin=\"-6, 0, 0, 0\"\n                           max-length=\"20\"\n                           text={Name} /&gt;\n            &lt;/form-row&gt;\n            &lt;form-row title={#Example.Form.PetType.Title}&gt;\n                &lt;dropdown option-min-width=\"200\"\n                          options={PetTypes}\n                          selected-option={SelectedPetType} /&gt;\n            &lt;/form-row&gt;\n            &lt;form-row title={#Example.Form.TomatoType.Title}&gt;\n                &lt;dropdown option-min-width=\"200\"\n                          options={TomatoTypes}\n                          selected-option={SelectedTomatoType} /&gt;\n            &lt;/form-row&gt;\n\n            &lt;form-heading text={#Example.Form.UI.Heading} /&gt;\n            &lt;form-row title={#Example.Form.ColorTheme.Title}&gt;\n                &lt;theme-picker *repeat={Themes} /&gt;\n            &lt;/form-row&gt;\n            &lt;form-row title={#Example.Form.Opacity.Title}&gt;\n                &lt;slider track-width=\"240\"\n                        min=\"0.05\"\n                        max=\"1\"\n                        interval=\"0.05\"\n                        value={&lt;&gt;Opacity}\n                        value-format={FormatOpacity} /&gt;\n            &lt;/form-row&gt;\n            &lt;form-row title={#Example.Form.Keybind.Title}&gt;\n                &lt;keybind-editor button-height=\"64\"\n                                sprite-map={@Mods/StardewUI/SpriteMaps/Buttons:default-default-0.5}\n                                editable-type=\"MultipleKeybinds\"\n                                add-button-text={#Example.Form.Keybind.Add}\n                                empty-text={#Example.Form.Keybind.Empty}\n                                focusable=\"true\"\n                                keybind-list={&lt;&gt;Keybinds} /&gt;\n            &lt;/form-row&gt;\n            &lt;form-row title={#Example.Form.AllowClose.Title}&gt;\n                &lt;checkbox is-checked={&lt;&gt;AllowClose} /&gt;\n            &lt;/form-row&gt;\n        &lt;/lane&gt;\n    &lt;/frame&gt;\n    &lt;lane layout=\"stretch content\"\n          margin=\"16, 8, 0, 0\"\n          horizontal-content-alignment=\"end\"\n          vertical-content-alignment=\"middle\"&gt;\n        &lt;button text={#Example.Form.Button.Cancel}\n                hover-background={@Mods/StardewUI/Sprites/ButtonLight}\n                left-click=|Close(\"false\")| /&gt;\n        &lt;button margin=\"16, 0, 0, 0\"\n                text={#Example.Form.Button.OK}\n                hover-background={@Mods/StardewUI/Sprites/ButtonLight}\n                left-click=|Close(\"false\")| /&gt;\n    &lt;/lane&gt;\n&lt;/lane&gt;\n\n&lt;template name=\"form-heading\"&gt;\n    &lt;label font=\"dialogue\"\n           margin=\"0,0,0,8\"\n           text={&amp;text}\n           shadow-alpha=\"0.6\"\n           shadow-layers=\"VerticalAndDiagonal\"\n           shadow-offset=\"-3, 3\" /&gt;\n&lt;/template&gt;\n\n&lt;template name=\"form-row\"&gt;\n    &lt;lane layout=\"stretch content\"\n          margin=\"16,4\"\n          vertical-content-alignment=\"middle\"&gt;\n        &lt;label layout=\"280px content\"\n               margin=\"0,8\"\n               text={&amp;title}\n               shadow-alpha=\"0.8\"\n               shadow-color=\"#4448\"\n               shadow-offset=\"-2, 2\" /&gt;\n        &lt;outlet /&gt;\n    &lt;/lane&gt;\n&lt;/template&gt;\n\n&lt;template name=\"theme-picker\"&gt;\n    &lt;panel layout=\"48px\" margin=\"8, 0\"&gt;\n        &lt;image layout=\"stretch\"\n               fit=\"stretch\"\n               margin=\"8\"\n               sprite={@Mods/StardewUI/Sprites/White}\n               tint={Color}\n               focusable=\"true\"\n               left-click=|^SetTheme(this)| /&gt;\n        &lt;image *if={Selected}\n               layout=\"stretch\"\n               fit=\"stretch\"\n               sprite={@Mods/focustense.StardewUITest/Sprites/Cursors:SelectionRect} /&gt;\n    &lt;/panel&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"framework/","title":"UI Framework","text":"<p>The recommended, and fastest way to start building UI with StardewUI is via the Framework API. This is a standalone mod, which on mod sites is simply named StardewUI.</p>"},{"location":"framework/#using-the-framework","title":"Using the Framework","text":"<p>If you're new to the framework, please check out the Getting Started guide. It includes everything needed to spawn a menu or HUD using just a few lines of code along with a StarML file.</p> <p>Summary of the steps in that guide:</p> <ol> <li>Import the API</li> <li>Register asset paths</li> <li>Create a view (some examples are provided)</li> <li>Make sure your view is deployed with your project</li> <li>Display the menu or HUD</li> </ol> <p>The above steps are intentionally very specific; aside from creating the view, each \"step\" is usually only 1-2 clicks or lines of code.</p>"},{"location":"framework/#comparison-with-content-packs","title":"Comparison with Content Packs","text":"<p>The \"framework\" label is an analogy to other UI frameworks such as Angular and WPF, and should not be confused with \"Content Pack\" frameworks providing add-ons for completely codeless mods. While StarML and Spritesheet JSON are definitely \"content\" for StardewUI, the crucial element that cannot be fully specified in a content pack is the model \u2013 what the UI does, as opposed to how it looks.</p> <p>A menu or other UI normally exists to provide some function; it's a way to navigate the features of your mod, which are up to you. It would be impractical to try to anticipate every possible reason for a UI to exist, which is an almost infinite space: mod configuration, inventory, shops, NPC interactions, quests, minigames and more. StardewUI requires very little code to use, but it is still a C# framework.</p> <p>If you're interested in making, contributing to, or helping to define a more limited, content-pack friendly version, possibly based on Game State Queries, Trigger Actions and similar features, please consider either creating your own extension mod or starting/participating in a discussion on GitHub.</p>"},{"location":"framework/binding-context/","title":"Binding Context","text":"<p>StardewUI's framework API is based on data binding. While the UI state or \"widget tree\" is retained, you don't interact it with it directly; instead, in order to provide interactivity and/or dynamic content to views, you define a data model, which becomes the context.</p> <p>Context is simply a tree node which contains the particular model/data for a specific view or position in the hierarchy. It provides access to the model itself, as well as redirects, which are important for building more complex UI. Other frameworks use similar names, such as DataContext in WPF.</p>"},{"location":"framework/binding-context/#context-vs-data","title":"Context vs Data","text":"<p>As an example, consider a simple list of selectable items:</p> Model DiagramUI MockupStarML <pre><code>classDiagram\ndirection LR\n    class MenuViewModel {\n        string Title\n        List~MenuItem~ Items\n        SelectItem(id)\n    }\n    class MenuItem {\n        string Id\n        string Text\n        int Price\n    }\n    MenuViewModel *-- MenuItem\n</code></pre> <pre><code>block-beta\ncolumns 2\n    A[\"Joey Jo-Jo Junior Shabadoo's Shop\"]:2\n    space:2\n    B[\"Bread\"] C[\"500\"]\n    D[\"Peanut Butter\"] E[\"1200\"]\n    F[\"Strawberry Jam\"] G[\"800\"]\n</code></pre> <pre><code>&lt;lane layout=\"500px content\" orientation=\"vertical\"&gt;\n    &lt;label font=\"dialogue\" text={Title} /&gt;\n    &lt;lane *repeat={Items} click=|^SelectItem(Id)|&gt;\n        &lt;label margin=\"0, 0, 0, 32\" text={Text} /&gt;\n        &lt;label text={Price} /&gt;\n    &lt;/lane&gt;\n&lt;/lane&gt;\n</code></pre> <p>The specific layout or exact appearance in game isn't important to this example; what we're focused on here are the binding attributes and events. Specifically, we have:</p> <ul> <li><code>text={Title}</code>, which is clearly referring to <code>MenuViewModel.Title</code></li> <li><code>click=|^SelectItem(Id)|</code>, which refers to the same-named method on <code>MenuViewModel</code></li> <li><code>text={Text}</code> and <code>text={Price}</code> which are referring, not to the <code>MenuViewModel</code> anymore, but to properties on the <code>MenuItem</code>.</li> </ul> <p>What happened? Although we only actually provided a single \"model\" (the <code>MenuViewModel</code>), the context changed as soon as <code>*repeat</code> was encountered. Repeaters replace the original binding context (<code>MenuViewModel</code>) with a context referring to the specific item in the collection (<code>MenuItem</code>). As far as those inner <code>&lt;label&gt;</code> elements are concerned, the \"model\" or \"data\" is actually <code>MenuItem</code>.</p> <p>This behavior isn't necessarily limited to repeaters; for example, another way to narrow or drill down the context would be the <code>*context</code> attribute.</p> <p>But note the <code>click</code> event in particular: <code>^SelectItem(Id)</code>. The <code>Id</code> is a property on the <code>MenuItem</code>, as we would expect since it is attached to the repeating element; however, <code>SelectItem</code> is referring back to the <code>MenuViewModel</code>. It does this using the <code>^</code> redirect, which instructs StardewUI to look at the parent or previous context to find the <code>SelectItem</code> method.</p> <p>The model or data refers to the specific object attached, or \"bound\", to any given node; the outer <code>&lt;lane&gt;</code> is bound to a <code>MenuViewModel</code> and each inner <code>&lt;lane&gt;</code> is bound to a <code>MenuItem</code>. The context has an awareness of the overall structure, and is able to backtrack to a previous level at any time.</p>"},{"location":"framework/binding-context/#source-updates","title":"Source Updates","text":"<p>It is rare for any UI to be completely static, with content that never changes. Most UI needs to respond not only to user input, but to changes in the underlying data or state. More generally, it should always show the most current data, however one chooses to define it.</p> <p>Broken</p> C#StarML <pre><code>public class CounterViewModel\n{\n    public int Count { get; set; }\n\n    public void Increment()\n    {\n        Count++;\n    }\n}\n</code></pre> <pre><code>&lt;lane&gt;\n    &lt;button click=|Increment()| text=\"Add One\" /&gt;\n    &lt;label text={Count} /&gt;\n&lt;/lane&gt;\n</code></pre> <p>If you run this example, and click the button, you'll see that nothing happens. Our <code>Count</code> does get incremented, but the UI never updates. That is because StardewUI's data binding depends on having an implementation of INotifyPropertyChanged (hereafter: \"INPC\") in order to detect changes. Without INPC, every binding is a \"one-time\" binding, meaning it is only read when the view is first created.</p>"},{"location":"framework/binding-context/#implementing-inotifypropertychanged","title":"Implementing <code>INotifyPropertyChanged</code>","text":"<p>INPC can be extremely tedious to implement for many models and properties, as it requires intercepting every property setter, comparing the values, raising an event, etc. Fortunately, the .NET ecosystem has many tools to automate the process, and using one is strongly recommended over a \"manual\" implementation.</p> <p>The recommended options for INPC include:</p> Library Package Source PropertyChanged.SourceGenerator  NuGet  GitHub PropertyChanged.Fody  NuGet  GitHub <p>The author(s) of this guide and of StardewUI have no affiliation with any of the above projects; they are recommended on the basis of:</p> <ul> <li> <p> Leaving no footprint.</p> <p>Although they are installed as packages, they do not add any new assemblies to your build output, meaning your INPC-enhanced mod can continue to be a single DLL;</p> </li> <li> <p> Handling dependent properties automatically.</p> <p>For example, <code>public string FullName =&gt; $\"{FirstName} {LastName}\"</code> will raise notifications for changes to either <code>FirstName</code> or <code>LastName</code>.</p> </li> <li> <p> Being free and open source, with a permissive license (MIT, Apache, etc.).<sup>1</sup></p> <p>In other words, their license imposes no requirements on your license, your ability to opt into Nexus Donation Points, etc.</p> </li> </ul> <p>Using the first library (<code>PropertyChanged.SourceGenerator</code>), we can quickly convert the non-working example above to one that does work:</p> <p>Success</p> C#StarML <pre><code>using PropertyChanged.SourceGenerator;\n\npublic partial class CounterViewModel\n{\n    [Notify] private int count;\n\n    public void Increment()\n    {\n        Count++;\n    }\n}\n</code></pre> <pre><code>&lt;lane&gt;\n    &lt;button click=|Increment()| text=\"Add One\" /&gt;\n    &lt;label text={Count} /&gt;\n&lt;/lane&gt;\n</code></pre> <p>Note that the markup has not changed at all. All we had to do for the C# code was:</p> <ul> <li>Add the <code>partial</code> keyword to the <code>CounterViewModel</code> class (required for code generation)</li> <li>Change the <code>Count</code> auto-property to be a field</li> <li>Make it lowerCamelCase, so it doesn't conflict with the auto-generated property</li> <li>Add a <code>[Notify]</code> attribute.</li> </ul> <p>You don't need to <code>[Notify]</code> every single property, only the ones that might change. The mixed approach is demonstrated in several examples.</p>"},{"location":"framework/binding-context/#collection-updates","title":"Collection Updates","text":"<p>A special case of updates is collections. Consider the case of a UI that adds items to a list:</p> <p>Broken</p> C#StarML <pre><code>public partial class TodoViewModel\n{\n    public List&lt;string&gt; Items { get; } = [];\n\n    [Notify] private string currentItem = \"\";\n\n    public void AddCurrentItem()\n    {\n        if (!string.IsNullOrWhitespace(CurrentItem))\n        {\n            Items.Add(CurrentItem);\n            CurrentItem = \"\";\n        }\n    }\n}\n</code></pre> <pre><code>&lt;lane layout=\"500px content\" orientation=\"vertical\"&gt;\n    &lt;lane&gt;\n        &lt;textinput text={CurrentItem} /&gt;\n        &lt;button text=\"Add\" click=|AddCurrentItem()| /&gt;\n    &lt;/lane&gt;\n    &lt;label *repeat={Items} text={this} /&gt;\n&lt;/lane&gt;\n</code></pre> <p>If you run this, you'll observe that the text box is cleared when clicking \"Add\", but the item does not appear to be added to the list. Moreover, converting <code>Items</code> to a <code>[Notify]</code> will not help in this case, because the field itself has not changed. <code>Items</code> always points to the same list.</p> <p>Before explaining the solution, it is worth noting the workarounds that should not be used, even if they appear to be effective at first:</p> <ul> <li> <p> Converting the <code>Items</code> list to <code>[Notify]</code> (or equivalent INPC) and replacing the entire list with a new list, e.g. <code>Items = Items.Append(CurrentItem).ToList()</code>.</p> <p>This has quadratic or Schlemiel the Painter performance, in both time and memory.</p> </li> <li> <p> Leaving the list alone, but calling an <code>OnPropertyChanged</code> or <code>PropertyChanged?.Invoke</code> after adding an item, to force an INPC change notification.</p> <p>While not as serious an offense as the previous version, it still forces StardewUI to rebuild the entire view tree for the <code>*repeat</code>. Even if only one item changed, it must recreate the views for all of them.</p> </li> </ul> <p>All performance is relative, and these workarounds might be perfectly acceptable for our toy example above. However, if there are hundreds of items in the list, and each item has many views within\u2014for example, an image, quality icon, quantity text, etc.\u2014then making this type of change very often is still likely to cause jank.</p> <p>StardewUI has a better solution: <code>INotifyCollectionChanged</code>, which is the collection-based counterpart to INPC. While \"INCC\" is also difficult to implement, you don't have to, because there is already an <code>ObservableCollection</code> type to do it for you.</p> <p>Using <code>ObservableCollection</code>, the revised and working code then becomes:</p> <p>Success</p> C#StarML <pre><code>public partial class TodoViewModel\n{\n    public ObservableCollection&lt;string&gt; Items { get; } = [];\n\n    [Notify] private string currentItem = \"\";\n\n    public void AddCurrentItem()\n    {\n        if (!string.IsNullOrWhitespace(CurrentItem))\n        {\n            Items.Add(CurrentItem);\n            CurrentItem = \"\";\n        }\n    }\n}\n</code></pre> <pre><code>&lt;lane layout=\"500px content\" orientation=\"vertical\"&gt;\n    &lt;lane&gt;\n        &lt;textinput text={CurrentItem} /&gt;\n        &lt;button text=\"Add\" click=|AddCurrentItem()| /&gt;\n    &lt;/lane&gt;\n    &lt;label *repeat={Items} text={this} /&gt;\n&lt;/lane&gt;\n</code></pre> <p>We changed only one line here: <code>List&lt;string&gt;</code> became <code>ObservableCollection&lt;string&gt;</code>.</p>"},{"location":"framework/binding-context/#redirects","title":"Redirects","text":"<p>Any binding that references context data, including properties or event handlers or arguments, can use a redirect operator.</p> <p>The types of redirects are:</p> Name Syntax Example Behavior Parent <code>^</code> <code>^Prop</code> Goes back to the previous, or \"parent\" context.Can be repeated. Ancestor <code>~Type</code> <code>~Foo.Prop</code> Backtracks to the nearest ancestor of the specified type.Cannot be repeated. <p>The following example will walk through the different redirects in more detail.</p> C#StarMLOutput <pre><code>class InventoryViewModel\n{\n    public string OwnerName { get; set; }\n    public PageViewModel ActivePage { get; set; }\n}\n\nclass PageViewModel\n{\n    public string Category { get; set; }\n    public List&lt;ItemViewModel&gt; Items { get; set; }\n}\n\nrecord ItemViewModel(string Name);\n\nvoid ShowMenu()\n{\n    var context = new InventoryViewModel()\n    {\n        OwnerName = \"Timmy\",\n        ActivePage = new()\n        {\n            Category = \"Tools\",\n            Items = [new(\"Axe\"), new(\"Hoe\")]\n        },\n    };\n    Game1.activeClickableMenu =\n        viewEngine.CreateMenuFromAsset(\"Mods/Xyz/Views/Inventory\", context);\n}\n</code></pre> <pre><code>&lt;lane orientation=\"vertical\" *context={ActivePage}&gt;\n    &lt;label text={^OwnerName} /&gt;\n    &lt;label text={~InventoryViewModel.OwnerName} /&gt;\n    &lt;lane *repeat={Items}&gt;\n        &lt;label text={Name} /&gt;\n        &lt;label text={^Category} /&gt;\n        &lt;label text={~PageViewModel.Category} /&gt;\n        &lt;label text={^^OwnerName} /&gt;\n        &lt;label text={~InventoryViewModel.OwnerName} /&gt;\n    &lt;/lane&gt;\n&lt;/lane&gt;\n</code></pre> <pre><code>block-beta\ncolumns 5\n    A[\"Timmy\"]:5\n    B[\"Timmy\"]:5\n    C1[\"Axe\"]\n    C2[\"Tools\"]\n    C3[\"Tools\"]\n    C4[\"Timmy\"]\n    C5[\"Timmy\"]\n    D1[\"Hoe\"]\n    D2[\"Tools\"]\n    D3[\"Tools\"]\n    D4[\"Timmy\"]\n    D5[\"Timmy\"]\n</code></pre> <p>The above is not intended to represent any kind of realistic UI scenario, only to demonstrate what the different redirects do. It is important to realize that redirects do not navigate the actual model data; there is nothing in StardewUI, or anywhere else, that knows how to get from a <code>PageViewModel</code> back to its \"parent\" <code>InventoryViewModel</code>, and such a relationship may not exist or be meaningful at all.</p> <p>Instead, we assign a context to each node:</p> Node/Element Has Context <code>&lt;lane orientation\u200b=\u200b\"vertical\"...&gt;</code> <code>InventoryViewModel</code> (\"Timmy\") <code>&lt;label text={^OwnerName} /&gt;</code> <code>PageViewModel</code> (\"Tools\") <code>&lt;label text={~PageViewModel.OwnerName} /&gt;</code> <code>&lt;lane *repeat={Items}&gt;</code> <code>[1] &lt;label text={Name} /&gt;</code> <code>ItemViewModel</code> (\"Axe\") <code>[1] &lt;label text={^Category} /&gt;</code> <code>[1] &lt;label text={~PageViewModel.Category} /&gt;</code> <code>[1] &lt;label text={^^OwnerName} /&gt;</code> <code>[1] &lt;label text={~InventoryViewModel.OwnerName} /&gt;</code> <code>[2] &lt;label text={Name} /&gt;</code> <code>ItemViewModel</code> (\"Hoe\") <code>[2] &lt;label text={^Category} /&gt;</code> <code>[2] &lt;label text={~PageViewModel.Category} /&gt;</code> <code>[2] &lt;label text={^^OwnerName} /&gt;</code> <code>[2] &lt;label text={~InventoryViewModel.OwnerName} /&gt;</code> <p>To resolve the <code>^^OwnerName</code> near the end of the above table:</p> <ol> <li>Walk up the parent elements until we find one that changed the context. Since <code>*repeat</code> has a context effect, the first parent is the <code>&lt;lane *repeat={Items}&gt;</code> element.</li> <li>Repeat the process from that position, since there is a second <code>^</code>. Since the <code>&lt;lane orientation=\"vertical\"&gt;</code> element has a <code>*context</code> modifier, it is chosen next.</li> <li>Take the context data linked to the element we ended up at; the root <code>&lt;lane&gt;</code> is associated with the <code>InventoryViewModel</code>.</li> <li>Read the property from the data we just found, i.e. <code>InventoryViewModel.OwnerName</code>.</li> </ol> <p>Resolving <code>~InventoryViewModel.OwnerName</code> follows a very similar process, but instead of going \"up\" a specific number of times (twice, for <code>^^</code>, or once, for a single <code>^</code>), it repeats the traversal step as many times as necessary until it reaches an element that has an <code>InventoryViewModel</code> as its context.</p> <p>Summary</p> <p>The most important lesson to take away from this is that context redirects follow the document structure, not the data (model/view-model) structure.</p> <p>In an MV* design, document structure is itself usually based on the model, so you can often treat redirects as going to the \"parent object\", but may eventually run into scenarios where this doesn't work as expected.</p> <p>Remember that context lives outside your data.</p>"},{"location":"framework/binding-context/#update-ticks","title":"Update Ticks","text":"<p>As a convenience, StardewUI can dispatch update ticks to any objects bound as context so that you do not need to \"drive\" them from <code>ModEntry</code>, i.e. using SMAPI's UpdateTicked event.</p> <p>Importantly, these updates can be at any arbitrary nesting level, as long as they are reachable by some view/node; they do not have to be at the top level. This can be useful for running animations, synchronizing with external game state or netfields, or for any other purpose that requires frame-precision updates.</p> <p>To opt in, simply add a <code>void Update</code> method to any context type with either no parameters or a single <code>TimeSpan</code> parameter.</p> <p>Example</p> Code (C#)View (StarML) <pre><code>public class OuterModel\n{\n    public StopwatchModel Stopwatch { get; set; }\n}\n\npublic class InnerModel\n{\n    public string FormattedTime =&gt; Elapsed.ToString(@\"mm\\:ss\\.fff\");\n\n    [Notify] private TimeSpan elapsed;\n\n    public void Update(TimeSpan elapsed)\n    {\n        Elapsed += elapsed;\n    }\n}\n</code></pre> <pre><code>&lt;frame *context={Stopwatch}&gt;\n    &lt;label text={FormattedTime} /&gt;\n&lt;/frame&gt;\n</code></pre> <p>The <code>Update</code> method must match the signature above (with or without the <code>TimeSpan</code> argument); any other signature will cause a warning to be logged and the method to be ignored.</p> <ol> <li> <p>Fody is \"legally free, morally paid\", but the advantages of this clearly show in its maintenance statistics; <code>PropertyChanged</code> is over 12 years old, still being updated, and has the most frictionless syntax, in addition to the Fody master project being a much larger collection of also useful tools.\u00a0\u21a9</p> </li> </ol>"},{"location":"framework/binding-events/","title":"Binding Events","text":"<p>All views in StardewUI emit events, especially pointer events such as clicks, hovers, drags, etc. These tend to the form the basis of user interaction in most UI.</p> <p>In the core library, events are literally .NET events. When using the framework to write StarML, however, there are many problems with consuming events directly, mostly owing to the design of SMAPI's mod integration:</p> <ul> <li>Neither the specific view type nor even an <code>IView</code> instance is available on which to add an event handler;</li> <li>Even if the view were available, the event handler type, like <code>PointerEventArgs</code>, can't be sent over SMAPI's integration framework (Pintail);</li> <li>Even if the arguments could be sent, actual <code>View</code> instances can often be destroyed, recreated, etc., e.g. when using <code>*repeat</code>, <code>*if</code>, or other structural attributes.</li> </ul> <p>Conventional event listeners are effectively a dead-end, but there is a solution. StarML supports event bindings as a micro-grammar or micro-syntax, i.e. a \"syntax within another syntax\".</p>"},{"location":"framework/binding-events/#event-attributes","title":"Event Attributes","text":"<p>The quickest way to explain the micro-syntax used for event bindings is to jump right in and dissect a live one:</p> StarMLC# <pre><code>&lt;button click=|~ShopViewModel.Buy(\"Cheese\", ^Quantity, $Button)| /&gt;\n</code></pre> <pre><code>public class ShopViewModel\n{\n    public void Buy(string name, int quantity, SButton button)\n    {\n        // Implementation intentionally omitted.\n    }\n}\n</code></pre> <p>The individual parts of this are as follows:</p> Syntax Explanation <code>&lt;button ... /&gt;</code> The element/view that the event is being attached to, in this case a Button. <code>click=|...|</code> The name of the view's event property or field, in kebab-case; in this example, it is the <code>Click</code> event available on every view.<p>To be recognized as an event binding, the value must be enclosed in pipe characters, i.e. <code>event=|...|</code> but not <code>event=\"...\"</code> or <code>event={...}</code>. <code>~ShopViewModel.Buy</code> The name of the event handler (method) to run when the event is raised. Context redirects are supported here\u2014although not required. In this example, we want to run the method named <code>Buy</code> on the class <code>ShopViewModel</code>. <code>(...)</code> The arguments to provide to the above method. Note that even if the method takes no arguments, it still must be given an empty argument list <code>()</code>, as would be the case for any C# method call. <code>\"Cheese\"</code> A literal argument value. The exact value is read as a literal string, and converted as necessary to the required argument value; e.g. if the method takes an <code>int</code> then we can write <code>\"42\"</code>. <code>^Quantity</code> A context property value. This has the exact same behavior as a property data binding, but without the enclosing braces. Redirects are supported with individual arguments of this kind, and are unrelated to the event handler's target. <code>$Button</code> An event property value. The <code>$</code> token is only valid for event arguments, and refers to the same-named property on the real <code>EventArgs</code> object. Specifically, we want the <code>Button</code> property of <code>ClickEventArgs</code>\u2014for example, we might use this to implement different behavior for left-click vs. right-click. <p>This example covers all possible argument types: literals, context properties, and event properties. Other types of bindings, such as assets (<code>@path</code>) are not supported in event arguments.</p>"},{"location":"framework/binding-events/#return-values","title":"Return Values","text":"<p>Event handler methods, such as the hypothetical <code>Buy</code> method above, will generally be <code>void</code>, but there is one special case: a handler may return <code>bool</code> in order to control the <code>Handled</code> property of the event and prevent it from bubbling up.</p> <p>\"Event bubbling\" is the process by which an event not considered \"handled\" by a child view is given another chance to run at the parent. Consider the following two scenarios:</p> <ol> <li>A list or table in which the currently-hovered item or row is highlighted, and within that row is a button with its own special highlighting or hover animation.</li> <li>A large frame that can be clicked to perform some action (e.g. buy an item), with a smaller inner button that performs a different action (e.g. displaying additional info).</li> </ol> <p>In case (1), if the user hovers on the button, then we want both actions to run \u2013 the list item and the button should both be highlighted. However, in case (2), we do not want the \"outer\" action (buy) to run when the user clicks on the \"inner\" (info) button.</p> <p>These two cases might very well be part of the same user interface, so let's invent one:</p> <p>Partially Broken</p> C#StarML <pre><code>public class ListItemViewModel : INotifyPropertyChanged\n{\n    public Color BackgroundTint { get; set; } = Color.White;\n    public Color InfoButtonTint { get; set; } = Color.White;\n    public string ExtraInfo { get; set; } = \"Extra item info\";\n    public string Text { get; set; } = \"Item Text\";\n\n    public void Buy()\n    {\n        Game1.addHUDMessage(new($\"You bought {Text}\"));\n    }\n\n    public void DisplayExtraInfo()\n    {\n        Game1.addHUDMessage(new(ExtraInfo));\n    }\n\n    public void SetBackgroundHover(bool hover)\n    {\n        BackgroundTint = hover ? Color.Yellow : Color.White;\n    }\n\n    public void SetInfoButtonHover(bool hover)\n    {\n        InfoButtonTint = hover ? Color.Blue : Color.White;\n    }\n}\n</code></pre> <pre><code>&lt;frame background={@Mods/StardewUI/Sprites/ControlBorder}\n       background-tint={BackgroundTint}\n       click=|Buy()|\n       pointer-enter=|SetBackgroundHover(\"true\")|\n       pointer-leave=|SetBackgroundHover(\"false\")|&gt;\n    &lt;lane layout=\"400px 80px\" vertical-content-alignment=\"middle\"&gt;\n        &lt;label layout=\"stretch content\" text={Text} /&gt;\n        &lt;image layout=\"32px\"\n               sprite={@Mods/MyMod/Sprites/Info}\n               tint={InfoButtonTint}\n               click=|DisplayExtraInfo()|\n               pointer-enter=|SetInfoButtonHover(\"true\")|\n               pointer-leave=|SetInfoButtonHover(\"false\")| /&gt;\n    &lt;/lane&gt;\n&lt;/frame&gt;\n</code></pre> <p>In this example, hovers should work as described above, but clicks will not. If you click on the info button (image), you will see both HUD messages, because the clicked position is inside the <code>&lt;image&gt;</code> and also inside the <code>&lt;frame&gt;</code>.</p> <p>Resolving this is very simple; all we need to do is instruct StardewUI not to bubble the click event from the info button.</p> <p>Success</p> <pre><code>public class ListItemViewModel : INotifyPropertyChanged\n{\n    // Unchanged properties/methods omitted\n\n    public bool DisplayExtraInfo()\n    {\n        Game1.addHUDMessage(new(ExtraInfo));\n        return true;\n    }\n}\n</code></pre> <p>StardewUI automatically recognizes that <code>DisplayExtraInfo</code> now returns a <code>bool</code>, and since we return <code>true</code>, it sets the event's <code>Handled</code> property to <code>true</code>, preventing <code>Buy()</code> from being triggered at the same time.</p> <p>This leaves us with the behavior we wanted originally: clicking the info button (<code>&lt;image&gt;</code>) only shows info, while clicking anywhere else within the list item (<code>&lt;frame&gt;</code>) runs the \"buy\" logic.</p>"},{"location":"framework/dry-guide/","title":"The DRY Guide","text":"<p>DRY is a software development acronym that stands for: Don't Repeat Yourself.</p> <p>When code (or markup) starts to accumulate a lot of copy-paste code or boilerplate, it becomes error-prone and hard to maintain, both for the original author and for future maintainers\u2014which, in the case of a game mod, can also include other mod authors who want to base their mod on yours.</p> <p>This page is designed to be a guide and quick reference for mod authors using the UI Framework on how to DRY, whether it's reduce boilerplate, refactor complex views, or just improve the overall consistency of a mod's look and feel.</p>"},{"location":"framework/dry-guide/#reusable-components","title":"Reusable Components","text":"<p>StardewUI provides a few different strategies for creating reusable \"components\", each with its own tradeoffs.</p> Feature Scope(1) Usage Target Expansion(2) Parameterization Templates Local Tag Document(Node\u00a0Transformer) Static Template attributes Included Views Global Asset Binding(View Node) Dynamic Context only Custom Views Global Tag Compiled(View Factory) Static Normal attributes <ol> <li>Local means available for use in the same view (<code>.sml</code>) file only; Global means available for use in any view.</li> <li>\"Dynamic\" means the ability to change which template is used, allowing a UI to display content that is not be known ahead of time and may even be from another mod.</li> </ol> <p>The following flowchart may help decide on a strategy:</p> <pre><code>flowchart TD\n    A[\"`Does it require non-standard **layout**?`\"]\n    B[\"`Does it draw something other than **text** or **sprites**?`\"]\n    C[\"`Will it create **overlays** or **custom animations**?`\"]\n    D[\"`Will it be used from **multiple views**?`\"]\n    E[\"`Do you need to insert **arbitrary content**?`\"]\n    F[\"`Should customization be done with **attributes** instead of **data**?`\"]\n    Custom{{Custom View}}:::outcome\n    Included{{Included View}}:::outcome\n    Template{{Template}}:::outcome\n    A -- Yes --&gt; Custom\n    A -- No --&gt; B\n    B -- Yes --&gt; Custom\n    B -- No --&gt; C\n    C -- Yes --&gt; Custom\n    C -- No --&gt; D\n    D -- Yes --&gt; Included\n    D -- No --&gt; E\n    E -- Yes --&gt; Template\n    E -- No --&gt; F\n    F -- Yes --&gt; Template\n    F -- No --&gt; Included\n    classDef outcome fill:#6f6,stroke:#009,font-size:18pt\n</code></pre> <p>These are simply guidelines to help you choose\u2014in practice, most UIs can be built using any or none of the above methods, and a well-designed project with a complex UI will most likely use several or all of them.</p>"},{"location":"framework/duck-typing/","title":"Duck Typing","text":"<p>When attempting a data type conversion and no explicit conversion is available, StardewUI will attempt a duck typing conversion, allowing you to provide your own data types in your context data that have no direct knowledge of (or dependency on) StardewUI's internal types but simply have the same or similar structure.</p>"},{"location":"framework/duck-typing/#rules","title":"Rules","text":"<p>Not all StardewUI types allow this conversion. Consult the API reference for types that declare the <code>[DuckType]</code> attribute; these are the types available as target (destination) types for duck-type conversion, while all other types will ignore it.</p> <p>In order for a user-defined type to be converted to a StardewUI type, such as <code>Sprite</code> or <code>Edges</code>, the following requirements must be met:</p> <ol> <li>The target type must have either a default constructor, or a constructor whose non-optional arguments all correspond to property names (case-insensitive) on the source type;</li> <li>If relying on the default constructor, there must be at least one source property with the same name as a target property and a type that is convertible to the target property's type;</li> <li>There must not be any source properties whose names match a constructor argument, but whose types cannot be converted to the argument type;</li> <li>The conversion cannot be recursive, e.g. a <code>class Foo { public Foo Child; }</code> is not eligible for duck type conversion. This is the case even if the reference is indirect, e.g. a <code>Foo.Bar.Foo</code> reference.</li> </ol> <p>If a property name cannot match\u2014for example, it might need to be a certain name to implement some interface, deserialize from JSON or XML, etc.\u2014then the <code>[DuckProperty]</code> attribute can be used to \"rename\" it for StardewUI, either for all conversions or when converting to a specific type.</p> <p>Like duck-typing in general, the rules tend to be easier to understand at an intuitive level than they are formally. Some examples of valid and invalid conversions are below; these all use the <code>Edges</code> type as a target, which is defined as:</p> <pre><code>[DuckType]\npublic record Edges(int Left = 0, int Top = 0, int Right = 0, int Bottom = 0)\n{\n    // Other constructors\n}\n</code></pre> <p>This is a useful type to look at in order to understand constructor matching because it has multiple constructors. Note that these examples use class names that are different from StardewUI's types, but this is only for reader clarity; it is allowed for user-defined types to have the exact same name as the target type.</p>"},{"location":"framework/duck-typing/#allowed-conversions","title":"Allowed Conversions","text":"<p>All of the following conversions to <code>Edges</code> will succeed:</p>  Identical Renamed Partial Alternate Convertible <p>Valid</p> <pre><code>public record MyEdges(int Left, int Top, int Bottom, int Left);\n</code></pre> <p>Includes all <code>Edges</code> constructor arguments, with the exact same types. The simplest and most obvious conversion.</p> <p>Valid</p> <pre><code>public struct MyEdges\n{\n    [DuckProperty(\"Left\")]\n    public int X;\n\n    [DuckProperty(\"Top\")]\n    public int Y;\n\n    public int Width { get; set; }\n\n    public int Height { get; set; }\n\n    [DuckProperty(\"Right\")]\n    public int X2 =&gt; X + Width;\n\n    [DuckProperty(\"Bottom\")]\n    public int Y2 =&gt; Y + Height;\n}\n</code></pre> <p>In this structure (<code>struct</code> types are supported) made to resemble an XNA <code>Rectangle</code>, all the properties are available, but all have the wrong names; we use <code>[DuckProperty]</code> to make them recognizable to StardewUI. Fields (<code>X</code> and <code>Y</code>) and computed properties (<code>X2</code> and <code>Y2</code>) are also supported in addition to the usual auto-properties.</p> <p>Valid</p> <pre><code>public record MyEdges(int Left, int Right);\n</code></pre> <p>This works because <code>Edges</code> specifies default values for all properties, including the ones \"missing\" here, <code>Top</code> and <code>Bottom</code>. At least some properties (<code>Left</code> and <code>Right</code>) do match, so the constructor still counts. On conversion, <code>Top</code> and <code>Bottom</code> will have their default values of <code>0</code>, while <code>Left</code> and <code>Right</code> will be copied from <code>MyEdges</code>.</p> <p>Valid</p> <pre><code>public record MyEdges(int Horizontal, int Vertical);\n</code></pre> <p>Here we don't have any of the original properties, but <code>Edges</code> has a different constructor that does match. The converted result will be the same as if it had been created using <code>new Edges(Horizontal: x, Vertical: y)</code>.</p> <p>Valid</p> <pre><code>public class MyEdges\n{\n    public int? Horizontal { get; set; }\n    public string Vertical { get; set; } = \"\";\n}\n</code></pre> <p>Above, we've given different (and perhaps a little contrived) types to <code>Horizontal</code> and <code>Vertical</code>, but they are convertible types; any <code>Nullable&lt;T&gt;</code> can convert to a <code>T</code>, and any <code>string</code> can be parsed into a numeric type. Therefore, because these properties (a) have the same names as constructor arguments and (b) can be converted to the argument types after the constructor is chosen, the conversion is allowed.</p>"},{"location":"framework/duck-typing/#ignored-conversions","title":"Ignored Conversions","text":"<p>These types are not allowed to be converted to <code>Edges</code>. You won't receive a specific error related to duck-typing; the log will simply say that no conversion is available.</p>  Missing Incompatible Insufficient Prickly Priority <p>Broken</p> <pre><code>public record MyEdges(int Horizontal);\n</code></pre> <p>This attempt at conversion is a little like the successful \"Partial\" or \"Alternate\" examples above. The problem is that the <code>Horizontal</code> property selects for the <code>(int Horizontal, int Vertical)</code> constructor, and unlike the \"Partial\" example, that alternate constructor does not have default parameters. We need a match for <code>Vertical</code>, and we don't have one; therefore the conversion is not supported.</p> <p>Recall that constructors are matched on argument names, not types, so the existence of an <code>Edges(int all)</code> parameter doesn't provide an alternative match.</p> <p>Broken</p> <pre><code>public record MyEdges(int Left, int Top, int Right, bool Bottom);\n</code></pre> <p>Almost identical to the very first example except that <code>int Bottom</code> has been changed to <code>bool Bottom</code>. While it's a subtle change, it's enough to disable conversion, because <code>bool</code> has no conversion to <code>int</code>.</p> <p>If we removed <code>Bottom</code> entirely, this would work, because <code>Bottom</code> is optional. But because it's been specified, and it has a non-convertible type, it excludes the entire constructor.</p> <p>Another way we could make this work is by \"renaming\" <code>Bottom</code> so that StardewUI doesn't see it, e.g. by adding a <code>[DuckProperty(\"HasBottom\")]</code> attribute to the <code>Bottom</code> parameter/property.</p> <p>Broken</p> <pre><code>public class MyEdges\n{\n    public string Foo { get; set; } = \"\";\n    public float Bar { get; set; }\n}\n</code></pre> <p>This can technically match the <code>Edges</code> constructor, despite matching none of its actual parameters, because all of the constructor parameters are optional.</p> <p>Since allowing such conversions would imply that literally any type with a default parameterless constructor could be the target of a duck-type conversion from any other type, we explicitly block the scenario; at least one constructor argument or property on the target type must match a property on the source.</p> <p>Broken</p> <pre><code>public class MyEdges\n{\n    public int Left { get; set; }\n    public bool Horizontal { get; set; }\n    public bool Vertical { get; set; }\n}\n</code></pre> <p>This final example is designed to be a little tricky. We have <code>Left</code>, so that should match the default constructor: <code>Edges(int Left = 0, int Top = 0, int Right = 0, int Bottom = 0)</code>, shouldn't it?</p> <p>Unfortunately, the existence of <code>Horizontal</code> and <code>Vertical</code> also matches a different constructor whose parameters have incompatible types. But more importantly, recalling that constructors are matched by argument names and only then validated by their argument types, the <code>Edges(int horizontal, int vertical)</code> constructor is considered a better match here, despite ultimately proving incompatible, because it matches more properties than the 4-argument version. StardewUI won't backtrack; once it decides on the best constructor, it will stick to that constructor even if some argument conversions fail.</p> <p>While it's very debatable what the right course of action might have been in this specific case, it is impossible for StardewUI to always guess right because the intent of the (hypothetical) author here is ambiguous. Were we trying to use the <code>Horizontal</code> and <code>Vertical</code> edges, and just got the types wrong? Or are they actually totally irrelevant and <code>Left</code> is the only value that matters?</p> <p>You can clear this up by renaming some properties, either directly or via <code>[DuckProperty]</code>.</p>"},{"location":"framework/duck-typing/#enums","title":"Enums","text":"<p>Enumeration types are a special case for duck typing that use their own converter. One <code>enum</code> can be implicitly converted to any other <code>enum</code> as long as the two enums have at least one field (name) that matches. For example:</p> <p>Success</p> <pre><code>enum EnumOne { Foo, Bar, Baz }\n\nenum EnumTwo { Foo, Bar, Quux }\n</code></pre> <p>These two enums don't match perfectly, but they have some overlap. If a name is shared, e.g. <code>Bar</code>, then <code>EnumOne.Bar</code> will convert to <code>EnumTwo.Bar</code>. If a name is not shared, e.g. <code>Baz</code>, then it will convert to the default value for the target enum, which is always the ordinal value <code>0</code>. </p> <p>On the other hand, if the two enums have no fields in common:</p> <p>Failure</p> <pre><code>enum EnumOne { A, B, C }\n\nenum EnumTwo { X, Y, Z }\n</code></pre> <p>Then conversion between these types is not allowed.</p> <p>Enums are not required to have the same ordinal values; all matching is done on the names, and is case-insensitive.</p> <p>You can use this feature to incorporate strongly-typed equivalents to enums such as <code>Alignment</code> in a data model, even if they are part of some larger model. For example, it is possible to mirror a <code>NineGridPlacement</code> entirely with a duck type:</p> <p>Success</p> <pre><code>public enum MyAlignment { Start, Middle, End }\n\npublic record MyNineGridPlacement(\n    MyAlignment HorizontalAlignment,\n    MyAlignment VerticalAlignment,\n    Point Offset);\n</code></pre> <p>This type will fully convert to a <code>NineGridPlacement</code> without any additional logic.</p>"},{"location":"framework/duck-typing/#reverse-conversion","title":"Reverse Conversion","text":"<p>So far, this page has primarily described converting from user types to StardewUI types.</p> <p>Recalling that the destination type must have <code>[DuckType]</code> in order to be eligible \u2013 what if you want to use duck typing in a two-way or output binding, and don't want to take on a hard dependency (assembly reference) to StardewUI?</p> <p>The good news is that <code>DuckTypeAttribute</code> is itself treated as a duck type. To mark one of your own types as being eligible for conversion from a StardewUI framework type, simply copy it and use your copy as the annotation:</p> <pre><code>[AttributeUsage(\n    AttributeTargets.Class | AttributeTargets.Struct,\n    AllowMultiple = false,\n    Inherited = false)]\npublic class DuckTypeAttribute : Attribute { }\n\n[DuckType]\npublic class Foo { ... }\n</code></pre> <p>In this particular case, you must keep the exact name <code>DuckTypeAttribute</code>. Renaming it to something else will cause it to be ignored by StardewUI.</p>"},{"location":"framework/extensions/","title":"Framework Extensions","text":"<p>StardewUI's framework is built on its own core library. The built-in set of tags and type conversions are the set of standard views and first-party converters.</p> <p>In some of the more unusual scenarios, the built-in features might seem either too restrictive or simply awkward (e.g. copypasta-heavy) to use. To allow more flexibility for users, StardewUI can be extended using a feature called add-ons.</p>"},{"location":"framework/extensions/#creating-add-ons","title":"Creating Add-Ons","text":"<p>To create an initially-empty add-on:</p> <ol> <li> <p>Add a direct reference to StardewUI.</p> </li> <li> <p>Implement the <code>IAddon</code> interface. The only required property is <code>Id</code>, which should normally be your mod's ID.</p> <p>Example</p> <p>Most add-ons can copy and paste the following template. Replace the name <code>MyAddon</code> with an appropriate name for your own mod/framework.</p> <pre><code>internal class MyAddon(string id) : IAddon\n{\n    public string Id { get; } = id;\n}\n</code></pre> </li> <li> <p>Register the addon using <code>UI.RegisterAddon</code>. Do this as early as possible, ideally in your mod's <code>Entry</code> method:</p> <p>Example</p> <pre><code>internal class ModEntry : Mod\n{\n    public override void Entry(IModHelper helper)\n    {\n        UI.RegisterAddon(new MyAddon(ModManifest.UniqueID));\n\n        // Other mod initialization code\n    }\n}\n</code></pre> </li> <li> <p>(Optional) If your add-on depends on any other add-on to function, add a <code>Dependencies</code> field. For example, many mod authors create their own \"shared\" or \"core\" framework and an individual mod might require the add-on from this shared mod.</p> <p>Example</p> <pre><code>internal class MyAddon(string id) : IAddon\n{\n    public string Id { get; } = id;\n\n    public IReadOnlyList&lt;string&gt; Dependencies { get; } =\n    [\n        \"authorname.SharedMod\",\n    ];\n}\n</code></pre> <p>Note that <code>authorName.SharedMod</code> is the addon ID, which by the conventions described above should be the same as the mod's unique ID, but that is up to the add-on's author.</p> </li> </ol>"},{"location":"framework/extensions/#custom-converters","title":"Custom Converters","text":"<p>User-defined conversions extend the default type conversions, so that other types\u2014for example, types you've defined in your own mod\u2014can be auto-converted to view properties/attributes without requiring any explicit conversion code in the model or context.</p>"},{"location":"framework/extensions/#registering-converters","title":"Registering Converters","text":"<p>Converters are provided through the <code>IValueConverterFactory</code> type; every add-on must specify exactly one (optional) converter factory. Most add-ons should use the <code>ValueConverterFactory</code> base class, which simplifies the registration of multiple converters and is ideal for using as a \"root\" factory that handles many different types of conversions.</p> <p>The example addon uses the following logic:</p> <pre><code>internal class ExampleAddon(string id) : IAddon\n{\n    public string Id { get; } = id;\n\n    // --- Other addon features ---\n\n    public IValueConverterFactory ValueConverterFactory =&gt;\n        valueConverterFactory.Value;\n\n    private readonly Lazy&lt;IValueConverterFactory&gt; valueConverterFactory =\n        new(() =&gt;\n        {\n            var factory = new ValueConverterFactory();\n            factory.TryRegister(new ItemIdToSpriteConverter());\n            factory.TryRegister(new StringToKeySplineConverter());\n            return factory;\n        });\n}\n</code></pre> <p>Using <code>Lazy&lt;T&gt;</code> here can help slightly with performance, as it ensures that your factory/converters aren't created until they are actually necessary for a conversion; however, it is not necessary to do this and could easily replaced with a line such as:</p> <pre><code>public IValueConverterFactory ValueConverterFactory { get; } =\n    CreateValueConverterFactory();\n</code></pre> <p>where <code>CreateValueConverterFactory</code> is some static method.</p>"},{"location":"framework/extensions/#implementing-converters","title":"Implementing Converters","text":"<p>Converters can be very simple or very complex. A simple example is the ItemIdToSpriteConverter in the test addon:</p> <pre><code>internal class ItemIdToSpriteConverter : IValueConverter&lt;string, Sprite&gt;\n{\n    public Sprite Convert(string value)\n    {\n        var itemData = ItemRegistry.GetDataOrErrorItem(value);\n        return new(itemData.GetTexture(), itemData.GetSourceRect());\n    }\n}\n</code></pre> <p>This is simply a generic implementation of <code>IValueConverter</code>, which converts a <code>string</code> to a <code>Sprite</code>, assuming that string is a Stardew Valley Item ID. (Note that StardewUI doesn't include this converter as built-in, because even though every valid item ID is expected to have a sprite, not every string is going to be a valid item ID!)</p> <p>More complex converters that operate on runtime types will generally have to do so by adding a \"sub-factory\" or delegate factory implementing <code>IValueConverterFactory</code> and then registering that via <code>ValueConverterFactory.Register</code>. The implementation of one of these delegates will generally use at least some amount of reflection. A good beginner's example of a dynamic converter is the <code>EnumNameConverterFactory</code>, which allows any <code>string</code> to be converted to any enum type (not just a specific enum type) using its name.</p> <p>Example</p> <pre><code>public class EnumNameConverterFactory : IValueConverterFactory\n{\n    public bool TryGetConverter&lt;TSource, TDestination&gt;(\n        [MaybeNullWhen(false)] out IValueConverter&lt;TSource, TDestination&gt; converter\n    )\n    {\n        if (typeof(TSource) != typeof(string) || !typeof(TDestination).IsEnum)\n        {\n            converter = null;\n            return false;\n        }\n        var converterType = typeof(Converter&lt;&gt;).MakeGenericType(typeof(TDestination));\n        converter = (IValueConverter&lt;TSource, TDestination&gt;)\n            Activator.CreateInstance(converterType)!;\n        return true;\n    }\n\n    class Converter&lt;T&gt; : IValueConverter&lt;string, T&gt;\n        where T : struct, Enum\n    {\n        public T Convert(string value)\n        {\n            return Enum.Parse&lt;T&gt;(value, true);\n        }\n    }\n}\n</code></pre> <p>Since many dynamic conversions are already built in (enums, <code>Nullable&lt;T&gt;</code>, assignment casts, etc.) the most likely reason you might want to define a new one is to handle conversion to or from a generic type. <code>NullableConverterFactory</code> illustrates the type of work generally involved with this approach.</p> <p>Converters are cached by type, so it is not necessary to do your own caching in a custom <code>IValueConverterFactory</code>, nor to spend too much time optimize the <code>TryGetConverter</code> method. Instead, focus on making the actual <code>Convert</code> method as fast as possible, since that is the method that may be called on every view update.</p> <p>Danger</p> <p>Never include any state in a converter, since the same converter will be reused for all conversions between the source and destination types. Stateful converters may break at arbitrary and unexpected times, and in ways that are difficult to isolate or debug.</p>"},{"location":"framework/extensions/#custom-views","title":"Custom Views","text":"<p>Every tag is really a view, with the exception of a few special tags like <code>&lt;include&gt;</code>. If you can't find a standard view, or combination of standard views, that cleanly does what you are looking for, then there are several options for creating custom views.</p>"},{"location":"framework/extensions/#registering-custom-views","title":"Registering Custom Views","text":"<p>To register a view you've created as a custom tag, define and register a new <code>IViewFactory</code> implementation. The registration API is very similar to that for converters, also providing a base class, <code>ViewFactory</code>, to make registration of views more convenient.</p> <p>The Carousel example defines a custom view, appropriately called <code>Carousel</code>, and registers it via:</p> <pre><code>internal class ExampleAddon(string id) : IAddon\n{\n    public string Id { get; } = id;\n\n    // --- Other addon features ---\n\n    public IViewFactory ViewFactory =&gt; viewFactory.Value;\n\n    private readonly Lazy&lt;IViewFactory&gt; viewFactory = new(() =&gt;\n    {\n        var factory = new ViewFactory();\n        factory.Register&lt;Carousel&gt;(\"carousel\");\n        return factory;\n    });\n}\n</code></pre> <p>As with converters, it is useful, but not required, to use <code>Lazy&lt;T&gt;</code> for this, as long as the <code>ViewFactory</code> property retrieves a single long-lived instance and does not recreate the factory each time.</p>"},{"location":"framework/extensions/#using-custom-views","title":"Using Custom Views","text":"<p>Once a custom view is registered, it can be used in a StarML document like any other tag, using the registered tag name:</p> <pre><code>&lt;carousel layout=\"stretch\"\n          selection-layout=\"600px stretch\"\n          easing=\"OutCubic\"\n          gap=\"50\"\n          selected-index={SelectedPageIndex}&gt;\n    &lt;!-- Carousel Contents --&gt;\n&lt;/carousel&gt;\n</code></pre>"},{"location":"framework/focus-and-interaction/","title":"Focus and Interaction","text":"<p>Most UI and frontend frameworks have some concept of input focus\u2014which element on screen the user is currently interacting with. MonoGame, being the barebones framework that it is, does not have such a concept, and Stardew Valley does not really add one; instead, it introduces a setting named \"controller-style menus\" (internally, \"snappy menus\") with these characteristics:</p> <ul> <li>The cursor is drawn as a hand, instead of an arrow, when using a controller;</li> <li>Pressing the left stick in any direction \"snaps\" the cursor\u2014in theory\u2014to the next element in that direction, instead of moving it freeform;</li> <li>Pressing any directional button has equivalent behavior to the left stick, instead of doing nothing.</li> </ul> <p>As controller navigation in the vanilla game is nearly unusable without this setting\u2014at the time of writing, turning it off results in both the arrow and hand cursor being drawn on top of each other, so it is not even consistently tested\u2014the rest of this page assumes controller input using controller-style menus.</p> <p>Focus in Stardew Valley does not really exist, but a reasonable approximation is simply \"whichever element contains the cursor\", with focus order or \"tab order\" being equivalent to the \"snap order\" used in game. The question then becomes which elements are actually \"snappable\", or focusable.</p>"},{"location":"framework/focus-and-interaction/#focusability","title":"Focusability","text":"<p>If you've worked with vanilla UI in Stardew\u2014i.e. manual implementations of <code>IClickableMenu</code>\u2014then you know that focus, or snapping, is entirely based on a menu's clickable component list; literally, a <code>List&lt;ClickableComponent&gt;</code> whose elements define neighbor IDs in each direction as well as several other metadata fields (visibility, name, tooltip, etc.), all of which ironically have no behavior at all unless the menu using them chooses to implement it.</p> <p>Controller support is famously neglected in mods because setting it up is a messy process of assigning IDs to every single element, predefining or at least pre-generating the neighbor lists for each and every one of those elements, and either hoping that they don't have variable locations or adding hooks to keep the IDs and lists constantly up to date.</p> <p>StardewUI does away with this system completely, and in fact is intentionally not compatible with it. There is one relevant property, named <code>Focusable</code> (or in StarML, the <code>focusable</code> attribute), which specifies whether or not that view should be able to independently receive focus.</p> <p>Some elements are assumed to want focus and automatically enable it (e.g. Buttons and Sliders), but the <code>focusable</code> property/attribute can also be added directly to any other type of view such as an Image.</p> <p>Example</p> <pre><code>&lt;lane&gt;\n    &lt;button text=\"Cancel\" /&gt;\n    &lt;image focusable=\"true\" sprite={@Mods/MyMod/Sprites/UI:ConfirmButton} /&gt;\n&lt;lane&gt;\n</code></pre> <p>Buttons are implicitly focusable; on the <code>&lt;image&gt;</code>, we simply add <code>focusable=\"true\"</code>.</p> <p>When a view is focusable, it becomes a candidate for the focus search that runs on every left stick movement or d-pad button press, and if StardewUI decides that it is the user's intended next target \u2013 e.g. if it is directly adjacent to the previously-focused view and in the requested direction \u2013 then the on-screen cursor will be moved (snapped) to its exact center, and it is then considered to have focus.</p>"},{"location":"framework/focus-and-interaction/#pointer-events","title":"Pointer Events","text":"<p>The most common purpose of element focus is for it to be able to receive clicks or other pointer events such as enter/leave (AKA mouseover/mouseout). Focus implies interactivity and therefore some interaction (event) is likely to be defined.</p> <p>Using clicks as an example: in vanilla Stardew menu code, clicks are simply dispatched to the <code>IClickableMenu</code> which then has to iterate through all the clickable components and apply ad-hoc ordering logic to figure out which element the click really landed on. In StardewUI, this is all handled for you, and the behavior is largely identical to any other popular UI framework:</p> <ul> <li>First, the focused element \u2013 the deepest element that contains the cursor \u2013 gets a chance to handle the event.</li> <li>If that element either does not handle the click, or allows it to \"bubble\", then the element's parent also gets a chance at it.</li> <li>And so on until either the event is marked as Handled or the top-level view is reached.</li> </ul> <p>You never have to write code to figure out which element was clicked, hovered, etc. Simply add events to the elements you want, similar to the focusable attribute.</p> <p>Tip</p> <p>It is not uncommon for the focusable element to be different from the element that handles pointer events. A great example of this is the drop-down list:</p> <p></p> <p>Recall that in a focus search, the cursor is moved to the center of the focusable element. The affordance of a drop-down list is its downward-pointing arrow, and that is where we want the cursor to land; it is the part that is \"focusable\". However, the entire widget is technically \"clickable\"; a mouse user can click on the text, beside the text, or anywhere else in the widget's boundaries, and still open the menu.</p> <p>It may help to think of focusability as \"where the cursor should snap to\", as compared to the \"clickable area\" that handles tooltips and other pointer events. Sometimes they are the same, e.g. with a button, but not always.</p> <p>This distinction is very particular to Stardew because of the \"snappy menu\" system; in conventional desktop and web UI, the location of the mouse pointer is irrelevant to and independent from keyboard or input focus, whereas in Stardew Valley, the pointer location is the only relevant information.</p>"},{"location":"framework/focus-and-interaction/#tooltips","title":"Tooltips","text":"<p>Similar to focusability, tooltips require only a single attribute, aptly named <code>tooltip</code>. No code is needed.</p> <p>To assign a tooltip, simply set this attribute to either a literal string or data binding. If you are supporting localization (translations)\u2014and you should be\u2014then most of the time it will be a data binding, with the model doing the work of invoking <code>ITranslationHelper</code> or the <code>I18n</code> wrapper.</p> <pre><code>&lt;lane tooltip=\"Actions\"&gt;\n    &lt;image tooltip=\"I'm clickable!\" click=|...| /&gt;\n    &lt;image tooltip={Description} click=|...| /&gt;\n&lt;/lane&gt;\n</code></pre> <p>Tooltips are hierarchical in a way that is similar to pointer events but without bubbling; the deepest element that (a) currently contains the cursor and (b) has a non-empty tooltip will determine the tooltip that is displayed at any given instant.</p> <p>In the example above, we've given both the outer <code>&lt;lane&gt;</code> and its inner <code>&lt;images&gt;</code> tooltips. So:</p> <ul> <li>If the cursor is over the first image, the tooltip displayed will be \"I'm clickable!\"</li> <li>If the cursor is over the second image, the tooltip will be the value of <code>Description</code>.</li> <li>If the cursor is somewhere inside the lane, but not within either of the images\u2014e.g. in some empty space between or around the images\u2014then the tooltip will be \"Actions\".</li> </ul> <p>Tooltips don't have to be on <code>focusable</code> elements; see the note in pointer events for why you might do this on purpose. Tooltips also do not have to be on clickable elements; they could be informational only, as is the case in the scrolling item grid example.</p> Customization <p>While not common, it is possible to further customize the tooltip when using the Core Library directly, via the BuildTooltip method. The Garbage In Garbage Can mod does this in order to add button prompts to the tooltip.</p> <p>Note, however, that (a) this code was written before the framework and StarML existed, and (b) it is completely possible to achieve using standard tooltips, and was only written this way to make it slightly easier to adapt the tooltip's exact wording based on whether the current input is mouse vs. controller. Most tooltips are not going to require this degree of control.</p>"},{"location":"framework/focus-and-interaction/#scrolling","title":"Scrolling","text":"<p>When using the UI framework, scrolling is generally achieved with the <code>&lt;scrollable&gt;</code> element (ScrollableView). This widget automatically takes care of showing/hiding a scroll bar depending on the length of content, and handles all the interactions with the scrollbar itself.</p> <pre><code>&lt;scrollable peeking=\"128\"&gt;\n    &lt;lane orientation=\"vertical\"&gt;\n        &lt;frame *repeat={LotsOfItems}&gt;\n            ...\n        &lt;/frame&gt;\n    &lt;/lane&gt;\n&lt;/scrollable&gt;\n</code></pre> <p>While it is mostly straightforward, there are a few interesting things to note here:</p> <ul> <li>When using a controller, the right stick is always used to manually scroll; the scrollbar and up/down buttons are not themselves focusable or otherwise reachable via controller. This is done intentionally to preserve consistency with standard Stardew game menus.</li> <li>When using the left-stick or d-pad to navigate a long list or grid, StardewUI will scroll automatically to keep the focused element fully visible. However, on its own, this isn't always the ideal user experience; you'll usually want to apply peeking (see below).</li> <li> <p>If a row is irregular, e.g. if the individual columns a row have controls of drastically different sizes such as a label, a checkbox, small buttons, large buttons, etc., then you can use <code>ScrollWithChildren</code> to force them all to scroll together:</p> ScrollWithChildren Example <pre><code>&lt;scrollable peeking=\"128\"&gt;\n    &lt;lane orientation=\"vertical\"&gt;\n        &lt;frame *repeat={LotsOfItems}&gt;\n            &lt;lane vertical-content-alignment=\"middle\" scroll-with-children=\"vertical\"&gt;\n                &lt;label text=\"Row Heading\" /&gt;\n                &lt;image focusable=\"true\" layout=\"64px 64px\" sprite={ItemSprite} /&gt;\n                &lt;image focusable=\"true\" layout=\"20px 20px\" sprite={DeleteIcon} /&gt;\n            &lt;/lane&gt;\n        &lt;/frame&gt;\n    &lt;/lane&gt;\n&lt;/scrollable&gt;\n</code></pre> <p>Here we have many rows, each with two focusable controls (images), the first being the size of a normal item/object sprite and the second as a very small \"x\" or trash can to remove it from the list. By specifying <code>scroll-with-children=\"vertical\"</code> on the lane, we guarantee that if the user is navigating down the 2nd column (delete icon), it is not just the delete icon that is made visible, but the entire row including the item sprite which extends farther below.</p> <p>Note that <code>peeking</code> applies after this forced scrolling, so this will display up to 128px below the bottom of the row, not just the bottom of the delete icon or item sprite.</p> </li> </ul>"},{"location":"framework/focus-and-interaction/#peeking","title":"Peeking","text":"<p>Peeking<sup>1</sup> improves the discoverability of a scrolling UI by displaying content beyond the edge of the focused area. Observe the difference below between the vanilla social UI and the settings of A Fishing Sea:</p> Social Menu - StillSocial Menu - VideoAFS Settings <p> End of the list... or is it? </p> <p> </p> <p> </p> <p>In the still frame, we are picking on what is obviously a bug in the vanilla menu/scrollbar; there is no outward sign at all that there is a row below Alex, and the only way to find out is to keep trying to scroll until nothing happens. However, even if the scroll bar were working, this isn't a UI that is friendly to directional pads.</p> <p>By contrast, in the AFS video, you always know what the next item will be, and can ignore the scrollbar completely and still know when you are reaching the end, because the scrolling first \"decelerates\" (scrolls less) and then stops completely. The scrollbar still helps, but it is complementary, not necessary.</p> <p>TL;DR</p> <p>Always set your <code>peeking</code>. When possible, set it to 2-3x of the distance of a typical scroll; if rows are 80px high, a good peeking value is anywhere from 160px to 240px.</p>"},{"location":"framework/focus-and-interaction/#tabbing-and-paging","title":"Tabbing and Paging","text":"<p>Two types of UI in Stardew generally receive special input treatment:</p> <ol> <li> <p>Tab controls, such as the main menu's top tabs, which have individually focusable and clickable buttons to switch the current tab but are also supposed to respond to the controller's trigger buttons\u2014generally, L2 and R2\u2014to switch to the previous or next tab.</p> </li> <li> <p>Pagination or pageable sections, which can either be used as \"big scrolls\" or to replace the current page completely. This is usually controlled by shoulder buttons\u2014L1 and R1\u2014and is sometimes also used to navigate between items in a single-item detail view, such as the selected character in the social profile.</p> </li> </ol> <p>There isn't a single consistent scheme used throughout the game, and especially not in mods, but in general any paged and/or tabbed UI will support some combination of the above. Some examples include:</p> Build Menu (Vanilla)Social Detail (Vanilla)Better Crafting (Mod) <p></p> <p>Uses triggers (L2/R2) to switch between buildings.</p> <p></p> <p>Uses shoulders (L1/R1) to select character, triggers (L2/R2) to select category.</p> <p></p> <p>Uses triggers (L2/R2) to select horizontal tab, shoulders (L1/R1) to select vertical tab.</p> <p>StardewUI has <code>ITabbable</code> and <code>IPageable</code> interfaces that can be implemented on a view in order to hook the trigger and shoulder buttons, respectively. However, because there is so much variability in terms of design decisions, the Framework chooses to leave this up to you, and instead provides a general purpose event to handle button presses.</p> <p>Example</p> TabbedViewModel.csTabbedView.sml <pre><code>public class TabbedViewModel : INotifyPropertyChanged\n{\n    public TabPage CurrentPage =&gt; Pages[CurrentPageIndex];\n    public int CurrentPageIndex { get; set; }\n    public List&lt;TabPage&gt; Pages { get; set; }\n\n    public bool HandleButtonPress(SButton button)\n    {\n        int pageOffset = button switch\n        {\n            SButton.LeftTrigger =&gt; -1,\n            SButton.RightTrigger =&gt; 1,\n            _ =&gt; 0\n        };\n        // Arithmetic here is a one-liner for wrapping at both beginning and end.\n        CurrentPageIndex = (CurrentPageIndex + pageOffset + Pages.Count) % Pages.Count;\n        return true;\n    }\n}\n</code></pre> <p>Implementation of <code>INotifyPropertyChanged</code> is omitted for brevity; see binding context for details on INPC.</p> <p>It is useful for most button-press handlers to return <code>true</code> so that the event does not bubble to a different element looking for the same button.</p> <pre><code>&lt;lane orientation=\"vertical\" button-press=|HandleButtonPress($Button)|&gt;\n    &lt;lane&gt;\n        &lt;frame *repeat={Pages}&gt; ...tab button... &lt;/frame&gt;\n    &lt;/lane&gt;\n    &lt;frame *context={CurrentPage}&gt; ...tab content... &lt;/frame&gt;\n&lt;/lane&gt;\n</code></pre> <p>Full markup for tab button and tab content are intentionally omitted. The important feature here is the <code>button-press</code> assignment, which passes in the specific button so it can be converted to a tab movement (or not).</p> <p>Because button presses bubble up the entire focus path, the handler will run whenever focus is anywhere within the top-level <code>&lt;lane&gt;</code>\u2014that is, anywhere within the tab list or the tab content.</p> <p>Implementations such as the above are optional, but they significantly improve navigability with a controller and are usually very quick to write, so it is recommended to include one whenever content is organized into many discrete sections, or simply when there is a large amount of content to navigate.</p> <ol> <li> <p>Sometimes spelled as \"peaking\".\u00a0\u21a9</p> </li> </ol>"},{"location":"framework/included-views/","title":"Included Views","text":"<p>StardewUI enables you to use any view within another view. This can be useful in a number of situations, for example:</p> <ul> <li>Creating reusable \"building blocks\" to use in multiple views;</li> <li>Simplifying a large or complex view that is becoming difficult to maintain;</li> <li>Implementing a dynamic template system, in similar fashion to the WPF DataTemplateSelector;</li> <li>Enabling other mods to more easily or safely customize your own UI.</li> </ul> <p>All of these are supported by the <code>&lt;include&gt;</code> tag, which is a special kind of tag that does not have its own view; instead, it behaves similarly to a structural attribute.</p>"},{"location":"framework/included-views/#usage","title":"Usage","text":"<pre><code>&lt;include name=\"...\" /&gt;\n</code></pre> <p>Include tags are are written in StarML like any other tags, but don't use the common attributes. Instead, the attributes supported are:</p> <ul> <li><code>name</code>, which holds the asset name of the view to include.<ul> <li>This attribute is required and is the same name you'd provide to the API.</li> <li>Supports either literal names, like <code>\"Mods/MyMod/Views/MyView\"</code>, or data bindings, such as <code>{ViewName}</code>.</li> <li>Although views are assets, data bindings on the name of an <code>&lt;include&gt;</code> element should not include a <code>@</code> prefix, since the attribute is already understood to be the view name and not the view itself.</li> </ul> </li> <li>All structural attributes that could apply to any other tag.<ul> <li><code>*context</code> is especially useful for included views, since a reusable view will generally have assumptions about the type of data it receives.</li> </ul> </li> </ul> <p>Minimal Example</p> Data.csOuterView.smlInnerView.sml <pre><code>public class OuterViewModel\n{\n    public InnerViewModel Inner { get; set; }\n}\n\npublic class InnerViewModel\n{\n    public string Text { get; set; }\n}\n</code></pre> <pre><code>&lt;include name=\"Mods/MyMod/Views/InnerView\" *context={Inner} /&gt;\n</code></pre> <pre><code>&lt;label text={Text} /&gt;\n</code></pre>"},{"location":"framework/included-views/#detailed-example","title":"Detailed Example","text":"<p>Consider a UI similar to Stardew's main menu, with many different tabs that all perform entirely different functions. While this won't be a guide to patching the actual, vanilla main menu (StardewUI is indifferent to vanilla UI, and seamless integration is an explicit non-goal of the project), we will show that not only is it easy to build a similar UI, but it is easy to build it in such a way that it is extensible, with straightforward hooks for other mods to add their own pages.</p> <p>This example is aimed at demonstrating how to use includes, so it will intentionally omit many of the visual styles, borders, backgrounds, etc. that are associated with tabbed UI, but there are other examples of how to create the visual look and feel. For conciseness, default values and other validation concerns are also omitted.</p> <p>Note: This uses PropertyChanged.SourceGenerator to provide change notifications, as described in the Binding Context guide.</p> ModEntry.csApi.csMenuViewModel.csModMenu.sml <pre><code>public class ModEntry : Mod\n{\n    // Preconditions and setup omitted; trigger the menu however you like.\n\n    private IApi api;\n    private ModConfig config; // E.g. loaded via Helper.ReadConfig\n    private ModData data; // Can be any data/type, this is only an example.\n    private IViewEngine viewEngine;\n\n    public override object? GetApi()\n    {\n        return api;\n    }\n\n    public void ShowMenu()\n    {\n        var menuViewModel = new MenuViewModel([\n            new()\n            {\n                Title = I18n.HomeTabTitle(),\n                Icon = Tuple.Create(...),\n                ContentViewName = \"Mods/MyMod/Views/HomeMenuPage\",\n                ContentData = data\n            },\n            new()\n            {\n                Title = I18n.SettingsTabTitle(),\n                Icon = Tuple.Create(...),\n                ContentViewName = \"Mods/MyMod/Views/SettingsMenuPage\",\n                ContentData = config\n            },\n            .. api.GetCustomPages()\n        ]);\n        Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n            \"Mods/MyMod/Views/MainMenu\",\n            menuViewModel\n        );\n    }\n}\n</code></pre> <pre><code>public interface IApi\n{\n    void AddCustomPage(\n        Func&lt;string&gt; title,\n        Func&lt;Texture2D, Rectangle&gt; iconSelector,\n        Func&lt;object&gt; contentDataSelector,\n        string contentViewName);\n}\n\npublic class Api : IApi\n{\n    private readonly List&lt;Func&lt;MenuPageViewModel&gt;&gt; customPages = [];\n\n    public void AddCustomPage(\n        Func&lt;string&gt; title,\n        Func&lt;Texture2D, Rectangle&gt; iconSelector,\n        Func&lt;object&gt; contentDataSelector,\n        string contentViewName)\n    {\n        CustomPages.Add(() =&gt; new MenuPageViewModel()\n        {\n            Title = title(),\n            Icon = iconSelector(),\n            ContentData = contentDataSelector(),\n            ContentViewName = contentViewName,\n        });\n    }\n\n    internal IEnumerable&lt;MenuPageViewModel&gt; GetCustomPages()\n    {\n        return customPages.Select(page =&gt; page());\n    }\n}\n</code></pre> <pre><code>public partial class MenuViewModel\n{\n    public IReadOnlyList&lt;MenuPageViewModel&gt; Pages;\n\n    [Notify] private MenuPageViewModel currentPage;\n\n    public MenuViewModel(IReadOnlyList&lt;MenuPageViewModel&gt; pages)\n    {\n        Pages = pages;\n        currentPage = pages[0];\n        currentPage.IsSelected = true;\n    }\n\n    public void SelectPage(MenuPageViewModel page)\n    {\n        if (page == currentPage)\n        {\n            return;\n        }\n        currentPage.IsSelected = false;\n        CurrentPage = page;\n        page.IsSelected = true;\n    }\n}\n\npublic partial class MenuPageViewModel\n{\n    public string Title { get; set; }\n    public Tuple&lt;Texture2D, Rectangle&gt; Icon { get; set; }\n    public object ContentData { get; set; }\n    public string ContentViewName { get; set; }\n\n    // Not used in this example, but in a real tab implementation, this property\n    // would be used to style the selected tab differently.\n    [Notify] private bool isSelected;\n}\n</code></pre> <pre><code>&lt;lane orientation=\"vertical\"&gt;\n    &lt;lane&gt;\n        &lt;frame *repeat={Pages}\n               padding=\"8px\"\n               background={@Mods/MyMod/Sprites/UI:TabBackground}\n               tooltip={Title}\n               focusable=\"true\"\n               click=|SelectPage(this)|&gt;\n            &lt;image layout=\"32px 32px\" sprite={Icon} /&gt;\n        &lt;/frame&gt;\n    &lt;lane&gt;\n    &lt;frame *context={CurrentPage}\n           background={@Mods/StardewUI/Sprites/ControlBorder}&gt;\n        &lt;include *context={ContentData} name={ContentViewName} /&gt;\n    &lt;/frame&gt;\n&lt;/lane&gt;\n</code></pre> <p>This mod creates a menu with two pages by default, Home and Settings. Other mods can register any pages they want, using any view and any data they want, using <code>IApi.AddCustomPage</code>, and those pages will automatically be integrated into the menu. They will have a corresponding tab, and show their corresponding view when the tab is clicked; they will have intrinsically correct focus (no need for Harmony patching to set up neighbors, etc.) and, with minor changes to the API, could even be sorted or added in arbitrary positions.</p> <p>While a lot of specifics, such as texture/sprite references, are excluded from the example in order to highlight the important parts\u2014it doesn't matter what specifically is in the <code>HomeMenuPage</code> or <code>SettingsMenuPage</code>, only that they are controlled by the tabs\u2014this really is the entire code for both the main-menu UI and the API.</p> <p>You might not want your mod's UI to be this \"open\", but the external API is optional, and could be either removed entirely or replaced with more constrained types such as <code>Func&lt;IMenuPage&gt;</code> instead of <code>Func&lt;object&gt;</code> where <code>IMenuPage</code> is something you define\u2014for example, the data for a category of items, or a single game location.</p> <p><code>&lt;include&gt;</code> is here to offer an extra level of customizability. Using it, you can change from a single view using data binding to a completely dynamic view whose layout is undecided until it is time to display it.</p>"},{"location":"framework/starml/","title":"Stardew Markup Language (StarML)","text":"<p>StarML is the markup language used by the UI Framework. It is an HTML-like syntax based on a tree of elements, each corresponding to a view.</p> <p>It shares many traits with Angular templates, particularly an enhanced set of attributes that perform data binding and other special functions.</p> <p>Example</p> <pre><code>&lt;frame layout=\"850px 500px\"\n       background={@Mods/StardewUI/Sprites/MenuBackground}\n       border={@Mods/StardewUI/Sprites/MenuBorder}\n       border-thickness=\"36, 36, 40, 36\"&gt;\n    &lt;lane layout=\"stretch content\" orientation=\"vertical\"&gt;\n        &lt;label font=\"dialogue\" text=\"Hello from StardewUI!\" /&gt;\n        &lt;label text={IntroParagraph} /&gt;\n        &lt;textinput layout=\"200px content\" text={&lt;&gt;FarmerName} /&gt;\n        &lt;image layout=\"400px 100px\" sprite={@Mods/TestMod/Sprites/Hello} /&gt;\n        &lt;button text=\"Launch\" click=|LaunchCoolFeature(\"now\")| /&gt;\n    &lt;/lane&gt;\n&lt;/frame&gt;\n</code></pre>"},{"location":"framework/starml/#elements","title":"Elements","text":"<p>As with most markup languages, StarML is built around elements. An element is:</p> <ul> <li>A single tag</li> <li>with any number of distinct attributes</li> <li>and zero or more children.</li> </ul> <p>Every StarML element corresponds to a View, whose type is decided by its tag; every attribute corresponds to a property or event on that view (except structural attributes), and child elements correspond to the view's child views.</p> <p>Like HTML and XML, elements can either have an explicit closing tag, or be self-closing:</p> <p>Opening/Closing Tags</p> <pre><code>&lt;frame layout=\"50px 50px\"&gt;\n    ...\n&lt;/frame&gt;\n</code></pre> <p>Self-Closing Tag</p> <pre><code>&lt;label text=\"Hello\" /&gt;\n</code></pre> <p>There are no strict rules around the use of opening/closing vs. self-closing tags\u2014any element can be written using either style. The difference is that self-closing tags cannot have any children; thus tend to be used for \"simple\" views such as <code>&lt;label /&gt;</code> and <code>&lt;image /&gt;</code>, while open tags are used for layout views like <code>&lt;frame&gt;</code>, <code>&lt;lane&gt;</code> and <code>&lt;panel&gt;</code>.</p> <p> Because the UI Framework is an abstraction over regular Views, it will not enable you to do anything with a View that would be impossible or prohibited in the Core Library, such as add children to a non-layout view.</p>"},{"location":"framework/starml/#tags","title":"Tags","text":"<p>A tag is anything between a pair of angle brackets <code>&lt;  &gt;</code>, one of:</p> <ul> <li>An opening tag: <code>&lt;panel&gt;</code></li> <li>A closing tag: <code>&lt;/panel&gt;</code></li> <li>A self-closing tag: <code>&lt;panel /&gt;</code>.</li> </ul> <p>While the term \"tag\" may sometimes be used synonymously with \"element\", tags refer more narrowly to the specific markup above, i.e. not including any attributes or children.</p> <p>In StarML, tags are not arbitrary; except for <code>&lt;include&gt;</code>, the tag defines the specific type of view that is to be created, which in turn determines what attributes are allowed and how many children it is allowed to have.</p> <p>These are the standard tags available in the UI framework:</p> <p>Note</p> <p>The full list of tags currently supported can always be found in the ViewFactory source.</p> Tag View/Behavior Description <code>&lt;banner&gt;</code> Banner Displays a banner, aka \"scroll\", using a cartoonish font. Background optional. <code>&lt;button&gt;</code> Button Simple raised button with optional hover effect. <code>&lt;checkbox&gt;</code> Checkbox Checkbox with optional clickable label. <code>&lt;digits&gt;</code> Tiny Number Label Displays a number in extra-small font; used for item quantities. <code>&lt;dropdown&gt;</code> Drop-Down List Select from a list of options. <code>&lt;expander&gt;</code> Expander Can be clicked to show or hide more content. <code>&lt;frame&gt;</code> Frame Draws a border and/or background around another view. <code>&lt;grid&gt;</code> Grid Uniform grid layout using either fixed size per item or fixed number of items per row/column. <code>&lt;image&gt;</code> Image Displays one image using a variety of scaling and fit options. <code>&lt;include&gt;</code> Included View Insert a different StarML view in this position, using its asset <code>name</code> to load the content. <code>&lt;keybind&gt;</code> Keybind Displays the buttons bound for a single keybinding. <code>&lt;keybind-editor&gt;</code> Keybind Editor Displays and allows rebinding of all button combinations in a keybind list. <code>&lt;label&gt;</code> Label Displays single- or multi-line text using a standard <code>SpriteFont</code>. <code>&lt;lane&gt;</code> Lane Arranges other views along one axis, either horizontal (left to right) or vertical (top to bottom). <code>&lt;marquee&gt;</code> Marquee Animates scrolling text or other content horizontally; named after the HTML Marquee. <code>&lt;outlet&gt;</code> N/A Default or named template outlet. Only valid within a <code>&lt;template&gt;</code> element. <code>&lt;panel&gt;</code> Panel Displays all children as layers ordered by z-index. Positions can be adjusted using margins. <code>&lt;scrollable&gt;</code> Scrollable View Shows scroll bars and arrows when content is too large to fit. <code>&lt;slider&gt;</code> Slider A numeric slider that can be moved between a minimum and maximum range. <code>&lt;spacer&gt;</code> Spacer Draws nothing, but takes up space in the layout; used to \"push\" siblings to one side. <code>&lt;tab&gt;</code> Tab Push-down tab used to select the active section or page of a larger menu. Can be rotated for side navigation. <code>&lt;template&gt;</code> Template Defines a custom tag for replacement. Must be at the document root; not valid as a child of any other element. <code>&lt;textinput&gt;</code> Text Input Input box for entering text; includes on-screen keyboard when activated by gamepad."},{"location":"framework/starml/#attributes","title":"Attributes","text":"<p>Tags define what view will be created; attributes define how it will look and behave, and specifically its properties and events.</p> <p>An attribute is any string appearing inside a tag that has the form <code>attr=value</code>, where <code>value</code> is one of the supported flavors, such as a quoted string like <code>text=\"Hello\"</code> or data binding expression like <code>text={HelloMessage}</code>.</p> <p>There are also structural attributes which are a separate topic.</p>"},{"location":"framework/starml/#common-attributes","title":"Common Attributes","text":"<p>Note</p> <p>These are the attributes common to all types of views (tags). Specific views usually have additional properties. Refer to the standard views documentation for details.</p> <p>In StarML, the name of an attribute is always the kebab-case version of the property name, e.g. <code>HorizontalContentAlignment</code> becomes <code>horizontal-content-alignment</code>.</p> Attribute\u00a0 Direction\u00a0(1) Type\u00a0(2) Explanation <code>actual-bounds</code> Out <code>Bounds</code> True outer bounds of the view relative to its parent, including margins. <code>border-size</code> Out <code>Vector2</code> Size of the view's content plus padding and border width. <code>content-bounds</code> Out <code>Bounds</code> True bounds of the view's content relative to its parent, excluding margins. <code>content-size</code> Out <code>Vector2</code> Size of the view's content, not including padding, borders or margins. <code>draggable</code> In/Out <code>bool</code> Allows this view to receive drag events (<code>drag</code>, <code>drag-start</code> and <code>drag-end</code>). <code>focusable</code> In/Out <code>bool</code> Allows this view to receive focus, or \"snap\", when using a gamepad. Automatically enabled for most interactive elements like <code>button</code> or <code>dropdown</code>. <code>inner-size</code> Out <code>Vector2</code> Size of the view's content and padding, excluding borders and margins. <code>layout</code> In/Out <code>LayoutParameters</code> The intended width and height. See conversions for allowed values. <code>margin</code> In/Out <code>Edges</code> Pixel sizes for whitespace outside the border/background. <code>name</code> In/Out <code>string</code> For <code>&lt;include&gt;</code> elements, the view's asset name; for all other elements, a user-defined name used mainly for logging and troubleshooting. <code>opacity</code> In/Out <code>float</code> Opacity (alpha) value of the entire view, from 0.0 (fully transparent/hidden) to 1.0 (fully opaque). <code>outer-size</code> Out <code>Bounds</code> Total layout size occupied by the element, including padding, borders and margins. <code>padding</code> In/Out <code>Edges</code> Pixel sizes for whitespace inside the border/background. <code>pointer-events-enabled</code> In/Out <code>bool</code> Can be set to <code>false</code> to prevent receiving clicks, mouseovers, etc. Use when a transparent view is drawn on top of an interactive view. <code>scroll-with-children</code> In/Out <code>Orientation</code> Forces the entire view to be visible when navigating in the specified direction. See the ScrollableView documentation for details. <code>tags</code> In/Out <code>Tags</code> Allows arbitrary data to be associated with the view. Not supported in StarML yet - may be supported in the future. <code>tooltip</code> In/Out <code>TooltipData</code> Tooltip to show when hovered with the mouse, or focused on via game controller. <code>visibility</code> In/Out <code>Visibility</code> Whether to show or hide the view; hiding does not remove it from the layout, use <code>*if</code> for that. <code>z-index</code> In/Out <code>int</code> Drawing order within the parent; higher indices are drawn later (on top). <ol> <li> <p>In/Out properties can accept any directional binding modifier; Out properties are read-only and can only be used to write to the model, e.g. if you need to receive the view's actual pixel size after a layout.</p> <p>Attempting to bind an <code>Out</code> property without the <code>&gt;</code> modifier, or attempting to assign it a literal value with a <code>=\"value\"</code> type attribute, will cause it to fail.</p> </li> <li> <p>StardewUI's views will often have property types that can't be carried across the API boundary due to current limitations on SMAPI and its version of Pintail.</p> <p>To help you through this, automatic conversions to and from other common types, such as tuples and XNA/MonoGame structures, are often provided if you want to bind one to your model and would rather not make everything a <code>string</code>.</p> <p>Note that some conversions may be lossy, i.e. if there is a difference in numeric precision.</p> </li> </ol>"},{"location":"framework/starml/#structural-attributes","title":"Structural Attributes","text":"<p>Structural attributes look like regular attributes, but with a <code>*</code> prefix. Instead of binding to properties or events, they control aspects of how the view tree is constructed.</p> Attribute\u00a0 Expected Type Description <code>*case</code> Any Removes the element unless the value is equal to the most recent <code>*switch</code>. The types of <code>*switch</code> and <code>*case</code> must either match exactly or be convertible. <code>*context</code> Any Changes the context that all child nodes bind to; used for heavily-nested data models. <code>*if</code> <code>bool</code> Removes the element unless the specified condition is met. <code>*outlet</code> <code>string</code> Specifies which of the parent node's outlets will receive this node.Does not support bindings. The attribute value must be a quoted string. <code>*repeat</code> <code>IEnumerable</code> Repeats the element over a collection, creating a new view for every item and setting its context to that item. Applies to both regular and structural attributes; e.g. if <code>*repeat</code> and <code>*if</code> are both specified, then <code>*repeat</code> applies first. <code>*switch</code> Any Sets the object that any subsequent <code>*case</code> attributes must match in order for their elements to show."},{"location":"framework/starml/#events","title":"Events","text":"<p>Event attributes look similar to property attributes, but deal specifically with .NET events raised by views. More generally, they are one of the two ways it is possible for the UI to communicate something back to your mod (the other being output/two-way bindings).</p> <p>While some UI might be purely informational (e.g. a tooltip or HUD), any interactive UI will probably involve one or more event bindings.</p> <p>Bindings for events use a specific flavor, where the handler and its arguments are enclosed in a pair of pipes (<code>|</code>):</p> <pre><code>&lt;image click=|PlantCrops(\"corn\", ^Quantity, $Button)| /&gt;\n</code></pre> <p>To experienced C# programmers, this may look like an ordinary method call, but it isn't. Event bindings are a powerful and complex feature, and reading the documentation on them is strongly recommended before using them.</p> <p>Note</p> <p>The events described below are the events common to all types of views (tags). Specific views may have additional events. Refer to the standard views documentation for details.</p> <p>In StarML, the name of an attribute is always the kebab-case version of the event name, e.g. <code>LeftClick</code> becomes <code>left-click</code>.</p> Event\u00a0 Arguments\u00a0Type\u00a0(1) Condition <code>button-press</code> <code>ButtonEventArgs</code> Any keyboard/gamepad button pressed. <code>click</code> <code>ClickEventArgs</code> Any mouse/gamepad button clicked. <code>drag</code> <code>PointerEventArgs</code> Ongoing drag operation; mouse was moved while button is still held. <code>drag-end</code> <code>PointerEventArgs</code> End of a drag operation, mouse button was released. <code>drag-start</code> <code>PointerEventArgs</code> First frame of a drag operation. <code>left-click</code> <code>ClickEventArgs</code> Left mouse button or controller A was pressed. <code>pointer-enter</code> <code>PointerEventArgs</code> Cursor just moved inside the view's bounds. <code>pointer-leave</code> <code>PointerEventArgs</code> Cursor just moved outside the view's bounds. <code>pointer-move</code> <code>PointerMoveEventArgs</code> Cursor moved within a view's bounds after entering. <code>right-click</code> <code>ClickEventArgs</code> Right mouse button or controller X was pressed. <code>wheel</code> <code>WheelEventArgs</code> Mouse wheel movement was detected. <ol> <li>Provided here as a reference for looking up the properties in Events Source. You don't consume these types directly in your event handlers; consult the Event Docs for details on how to set up handlers.</li> </ol>"},{"location":"framework/starml/#attribute-flavors","title":"Attribute Flavors","text":"<p>Regular HTML uses quoted attributes; to support the more complex behaviors where the attribute value should not be interpreted literally (as in, the exact value inside the quotes), StarML uses different \"flavors\" of attributes using different punctuation.</p> <p>Bindings are not tokens</p> <p>Those accustomed to Content Patcher Tokens may need to unlearn certain habits, because what goes on behind the scenes with StarML is far more complicated than string replacement. If you attempt to write \"tokens\" of the form <code>attr=\"A {{value}} B\"</code>, you are going to be disappointed.</p> Format Meaning <code>attr=\"value\"</code> The literal (converted) value inside the quotes. <code>attr={PropertyName}</code> The current value of the specified context property. <code>attr={@AssetName}</code> The current content of the named asset. <code>attr={#TranslationKey}</code> The translated string for a given translation key. Can be either unqualified (<code>foo.bar</code>) if referring to a translation in the same mod that provided the view, or qualified (<code>authorname.ModName:foo.bar</code>) if referring to a translation in any other mod. <code>attr={&amp;templateParam}</code> Replace with a template attribute of the same name. Only valid in a <code>&lt;template&gt;</code> element. <code>attr=|Handler(Arg1, ...)|</code> Call the specified context method, with the specified arguments; only valid for event attributes. Note <p>Double-braces (<code>{{</code> and <code>}}</code>) are allowed in place of single braces, for those heavily accustomed to Content Patcher syntax and JSON tokens in general, but are not recommended due to the inconsistency with other attributes and reduced readability.</p>"},{"location":"framework/starml/#binding-modifiers","title":"Binding Modifiers","text":"<p>In addition to the different attribute flavors,  context binding attributes\u2014that is, those of the form <code>attr={PropertyName}</code>\u2014can use modifier prefixes to either redirect to a different context or change the direction of synchronization between context and view.</p> <p>These modifiers work only with context property and event bindings; they cannot be used on literal attributes or assets.</p> Modifier Example Effect <code>^</code> <code>{^Prop}</code> Binds to the parent context instead of the current context. Multiple <code>^</code> characters can be appended to go farther up, e.g. <code>^^^Prop</code>. <code>~</code> <code>{~Foo.Prop}</code> Binds to the typed ancestor instead of the current context. <code>&lt;</code> <code>{&lt;Prop}</code> Specifies an input binding, where the view receives its value from the model but does not write back. This is the default behavior when no modifier is used, and can generally be omitted. <code>:</code> or <code>&lt;:</code> <code>{:Prop}</code> Specifies a one-time input binding, which is the same as an ordinary input binding except that subsequent changes to the value will be ignored. <code>&gt;</code> <code>{&gt;Prop}</code> Specifies an output binding, where the view writes its value to the model but does not read back. <code>&lt;&gt;</code> <code>{&lt;&gt;Prop}</code> Specifies an in/out binding, where the view both receives its value from the model and writes back to the model. <p>Tip</p> <p>Context modifiers can be combined with direction modifiers, but order matters; the direction must come first. You can write <code>{&lt;&gt;^^Prop}</code> or <code>{&gt;~Foo.Prop}</code>, but not <code>{^^&lt;&gt;Prop}</code> or <code>{~&gt;Foo.Prop}</code>.</p>"},{"location":"framework/starml/#type-conversions","title":"Type Conversions","text":"<p>In the SMAPI world, integrations between mods, including framework mods, are accomplished by duck typing, specifically through the Pintail library. This is a highly effective system for backward-compatibility and in some cases forward-compatibility; however, it presents many challenges for a UI library that uses many complex types.</p> <p>Many attribute types like <code>Bounds</code> and <code>Edges</code> simply can't be transmitted across the API boundary, even if you copy their definitions. Interface types such as <code>IView</code> are far too complex to copy over. StardewUI doesn't want you to have to deal with these issues on a one-off basis. Instead, it has a highly integrated system of type conversions: regardless of the actual, real type of a view's property or event argument, it can be assigned or bound to any property with a convertible type.</p> <p>In the table below, the String Format is what you can put in a literal attribute or a <code>string</code> typed context property; Converts From can be used with input bindings and Converts To can be used with output bindings or event arguments. For two-way bindings, the type must either be <code>string</code> or be in both the \"from\" and \"to\" lists.</p> <p>Note</p> <p>All primitive types (numeric and <code>bool</code>) can be converted from their string representation, and are not shown explicitly in the conversion table. All types can also be converted to a string, though whether or not the string is useful depends on its <code>ToString()</code> implementation.</p> <p> indicates a possible loss of numeric precision.</p> Type String Format Converts From Converts To Any <code>enum</code> (Field Name) N/A N/A <code>Point</code> <code>\"x, y\"</code> N/A N/A <code>Vector2</code> <code>\"x, y\"</code> N/A N/A <code>Rectangle</code> <code>\"x, y, width, height\"</code> N/A N/A <code>LayoutParameters</code> <code>\"&lt;Length&gt;\"</code>\u00a0(1) N/A N/A <code>\"&lt;Width&gt; &lt;Height&gt;\"</code> <code>\"&lt;...&gt;[Min..]\"</code>\u00a0(12) <code>\"&lt;...&gt;[Min..Max]\"</code> <code>\"&lt;...&gt;[..Max]\"</code> <code>Length</code> <code>\"&lt;num&gt;px\"</code> (2) N/A N/A <code>\"&lt;num&gt;%\"</code> (3) <code>\"content\"</code> (4) <code>\"stretch\"</code> (5) <code>Edges</code> <code>\"left, right, top, bottom\"</code> <code>Tuple&lt;int, int, int, int&gt;</code> <code>Tuple&lt;int, int, int, int&gt;</code> <code>Vector4</code> <code>Vector4</code> <code>int</code> <code>Point</code> <code>Tuple&lt;int, int&gt;</code> <code>Vector2</code> <code>Tuple&lt;Point, Point&gt;</code> <code>Tuple&lt;Vector2, Vector2&gt;</code> <code>Bounds</code> N/A N/A <code>Tuple&lt;float, float, float, float&gt;</code> <code>Tuple&lt;Vector2, Vector2&gt;</code> <code>Vector4</code> <code>Rectangle</code> <code>Color</code> <code>\"#rgb\"</code> N/A N/A <code>\"#rgba\"</code> <code>\"#rrggbb\"</code> <code>\"#rrggbbaa\"</code> <code>Sprite</code> (9) N/A <code>Texture2D</code> N/A <code>Tuple&lt;Texture2D, Rectangle&gt;</code> <code>ParsedItemData</code> <code>SpriteFont</code> <code>\"dialogue\"</code> (6) N/A N/A <code>\"small\"</code> (7) <code>\"tiny\"</code> (8) <code>TooltipData</code> Any <code>string</code> (text only) N/A <code>Tuple&lt;string, string&gt;</code>(title + text) <code>Item</code> <code>ParsedItemData</code> <code>GridItemLayout</code> <code>\"count: n\"</code> (10) N/A N/A <code>\"length: n\"</code> (11) <ol> <li>Applies the same value to both the <code>Width</code> and <code>Height</code>. See <code>Length</code> conversions below for what values are allowed for <code>&lt;Length&gt;</code>, <code>&lt;Width&gt;</code> or <code>&lt;Height&gt;</code>.</li> <li>Specifies an exact value in pixels, e.g. <code>100px</code>.</li> <li>Percentage of the container's available width or height, e.g. <code>50%</code>.</li> <li>As wide/tall as the content wants itself to be, up to the available container size.</li> <li>Use the entire width/height available, after any siblings that are not stretched.</li> <li>Reference to <code>Game1.dialogueFont</code></li> <li>Reference to <code>Game1.smallFont</code></li> <li>Reference to <code>Game1.tinyFont</code></li> <li>Sprites can be bound to model properties, but should only be done for sprites that must be dynamic. In the majority of cases, you should use sprite assets instead.</li> <li><code>n</code> is any positive integer; lays out the grid using n items per row/column and adjusts their size accordingly.</li> <li><code>n</code> is any positive integer; lays out the grid using a fixed width/height of <code>n</code> per item, and wraps to the next row/column when reaching the end.</li> <li>Any <code>Length</code> (width, height or both) can have a range appended to it specifying the min and/or max, such as <code>50%[100..800]</code>, meaning \"prefer 50% of container, but constrained between 100px and 800px\". Use open ranges to specify only a minimum, or only a maximum.</li> </ol> <p>If a type shows \"N/A\" for conversions, that means no conversion is available, either because it is not meant to be used in that scenario, or because it is already a shared type. Shared types such as any of the XNA/MonoGame types can be used directly in your model and therefore don't require any conversions, except from <code>string</code> to be used in literal attributes.</p>"},{"location":"framework/starml/#duck-typing","title":"Duck Typing","text":"<p>If a particular type conversion is not in the table above, it may be available for automatic implicit conversion. See the page on duck typing for rules and additional information on when and how this occurs.</p>"},{"location":"framework/starml/#children","title":"Children","text":"<p>In StarML\u2014as in HTML or XML\u2014an element's children are any tags appearing between the parent element's opening and closing tags:</p> <p>Example</p> <pre><code>&lt;lane&gt;\n    &lt;label text=\"Title\" /&gt;\n    &lt;frame&gt;\n        &lt;label text=\"Content\" /&gt;\n    &lt;/frame&gt;\n&lt;/lane&gt;\n</code></pre> <p>In the above example:</p> <ul> <li><code>&lt;label text=\"Title\" /&gt;</code> and <code>&lt;frame&gt;</code> are children of the <code>&lt;lane&gt;</code></li> <li><code>&lt;label text=\"Content\"</code> is a child of the <code>&lt;frame&gt;</code></li> </ul> <p>In general, only layout views can have children; attempting to add children to any other view type will cause an error.</p> <p>Children can only be added to elements with separate opening and closing tags, e.g. <code>&lt;lane&gt;...&lt;/lane&gt;</code>. Any self-closing tag, even if it corresponds to a layout view, cannot contain children, because a self-closing tag cannot be paired with a regular closing tag; just as with HTML or XML, <code>&lt;lane/&gt;...&lt;/lane&gt;</code> is simply invalid StarML and will fail to parse.</p> <p>Because of these constraints, all documentation and examples on this site use opening/closing tags for layout views, and self-closing tags for other views. While this is not a requirement for valid StarML, it is recommended that you do the same in order to avoid confusion and lower the chances of creating invalid markup.</p>"},{"location":"framework/starml/#child-limits","title":"Child Limits","text":"<p>Some layout views can have only one child, for example frames and scrollables. That means the following is invalid markup:</p> <p>Failure</p> <pre><code>&lt;frame&gt;\n    &lt;label text=\"Item 1\" /&gt;\n    &lt;label text=\"Item 2\" /&gt;\n&lt;/frame&gt;\n</code></pre> <p>This will parse, but will either fail to display at all or fail to display correctly, because the actual frame view only has a single <code>Content</code> view, not a list of views like a lane or panel.</p> <p>However, this rule applies only to the constructed view, not the markup itself. If only one of the children can actually display at a time, then there is no problem.</p> <p>Risky</p> <pre><code>&lt;frame&gt;\n    &lt;label *if={Item1Visible} text=\"Item 1\" /&gt;\n    &lt;label *if={Item2Visible} text=\"Item 2\" /&gt;\n&lt;/frame&gt;\n</code></pre> <p>This is a \"maybe\" because, while you might personally know \u2013 or expect \u2013 that <code>Item1Visible</code> and <code>Item2Visible</code> cannot both be <code>true</code> at the same time, the framework itself does not know that and cannot enforce it, and doing it this way could cause it to fail when you least expect it, e.g. long after your mod has been released and been downloaded several times.</p> <p>A better way is to use <code>*switch</code>:</p> <p>Success</p> <pre><code>&lt;frame *switch={VisibleItem}&gt;\n    &lt;label *case=\"Item1\" text=\"Item 1\" /&gt;\n    &lt;label *case=\"Item2\" text=\"Item 2\" /&gt;\n&lt;/frame&gt;\n</code></pre> <p>This version cannot fail because <code>VisibleItem</code> cannot be both <code>Item1</code> and <code>Item2</code> at the same time. In other words, it is always OK to have multiple child nodes underneath a single-view layout, if all of those nodes have a distinct <code>*case</code>. Otherwise, there is the possibility of failure.</p>"},{"location":"framework/starml/#outlets","title":"Outlets","text":"<p>Children are grouped into \"outlets\", which represent specific areas or subcomponents of a layout.</p> <p>Usually, this is invisible to you, as a layout view only performs one type of layout and therefore only has one child or collection of children. However, there are a few exceptions; one of them is the Expander, which allows specifying both a header view (the part that is always shown) and the content view (the part that can collapse).</p> <p>To solve for these problems, StarML supports the <code>*outlet</code> structural attribute, which allows targeting a specific outlet with a specific element:</p> <pre><code>&lt;expander&gt;\n    &lt;button *outlet=\"header\" text={ExpandCollapseText} /&gt;\n    &lt;label layout=\"stretch content\" text={LongContent} /&gt;\n&lt;/expander&gt;\n</code></pre> <p>Outlet names are determined by the view itself, via the OutletAttribute being applied to specific properties. In the case of <code>Expander</code>, there is one named outlet for the Header property, named \"header\". Custom views can create named outlets using the same attribute.</p> <p>If an <code>*outlet</code> is not specified in the markup, then the default (unnamed) outlet is assumed. When multiple outlets are available, the child limits still apply per-outlet; if any given outlet, default or named, only allows a single view, then attempting to assign multiple views to that outlet would be invalid. For example, the following would not be allowed for an <code>&lt;expander&gt;</code> element:</p> <p>Broken</p> <pre><code>&lt;expander&gt;\n    &lt;label *outlet=\"header\" text=\"Hello\" /&gt;\n    &lt;label *outlet=\"header\" text=\"World\" /&gt;\n    &lt;label layout=\"stretch content\" text={LongContent} /&gt;\n&lt;/expander&gt;\n</code></pre> <p>This is not allowed because the expander's <code>header</code> outlet requires a single content view. However, if this were to use an <code>*if*</code> condition then it would be valid again:</p> <p>Success</p> <pre><code>&lt;expander&gt;\n    &lt;label *outlet=\"header\" *if={IsCollapsed} text=\"Show help\" /&gt;\n    &lt;label *outlet=\"header\" *if={IsExpanded} text=\"Hide help\" /&gt;\n    &lt;label layout=\"stretch content\" text={LongContent} /&gt;\n&lt;/expander&gt;\n</code></pre> <p>If there is a real need to have multiple views in the outlet, then this can also be achieved using a single layout view to hold them:</p> <p>Success</p> <pre><code>&lt;expander&gt;\n    &lt;lane *outlet=\"header\"&gt;\n        &lt;label text=\"Hello\" /&gt;\n        &lt;label text=\"World\" /&gt;\n    &lt;/lane&gt;\n    &lt;label layout=\"stretch content\" text={LongContent} /&gt;\n&lt;/expander&gt;\n</code></pre>"},{"location":"framework/starml/#why-not-html","title":"Why not HTML?","text":"<p>Some web frameworks, like Vue, are a subset of HTML; their templates are syntactically valid HTML, constructed in such a way that any special behavior can be understood using special tags, attributes with unusual but valid prefixes like <code>:class</code>, and so on. So, why not simply pull in an HTML (or XHTML) parser and use that?</p> <p>This went through careful consideration but ultimately seemed to have more negatives than positives. The potential positives:</p> <ul> <li>Several preexisting parsers are available for .NET;</li> <li>Common editors (Visual Studio Code, Notepad++, etc.) provide built-in syntax highlighting and validation;</li> <li>Already familiar to anyone with web development experience.</li> </ul> <p>The negatives:</p> <ul> <li>Using a third-party parser (or any third-party library) in a SMAPI environment is risky, and most parsers are not totally optimized for memory and speed.</li> <li>Common editors provide built-in syntax highlighting and validation that could be misleading given the real constraints of a Stardew UI. For example, interpolations like <code>attr=\"{value1} {value2}\"</code> are valid HTML but not actually supported.</li> <li>Prior web development experience only helps through the shallowest part of the learning curve, not with binding/event attributes, model design, asset organization, etc.</li> <li>If all attributes are quoted, then character escaping becomes a more significant issue, especially for literal expressions; imagine documents full of <code></code>.</li> <li>An HTML parser only breaks the raw text down into stringly-typed elements and attributes; StardewUI would then need to do a second round of parsing (i.e. twice as much work) on all the tags and attribute values to determine which attributes are standard vs. structural, which values are literals vs. bindings vs. events, determine all the property names and types involved in an event handler, and so on.</li> <li>The actual runtime model (widget tree) is not comparable to an HTML DOM; does not understand unknown tags or standard HTML tags, does not distinguish between block/inline/other styles, and so on. As an abstraction over native UI, the inner workings are more like Qt or Android than a web browser; therefore, an \"it's just HTML\" approach would eventually end up causing more friction and confusion than a custom language.</li> </ul> <p>What about XML?</p> <p>An alternative would be something similar to XAML, but these have a way of getting out of control; consider, for example, a \"simple\" binding redirect in XAML:</p> <pre><code>&lt;Label Content=\"{Binding Path=DisplayName, RelativeSource={RelativeSource Mode=FindAncestor AncestorLevel=1}}\"/&gt;\n&lt;Label Content=\"{Binding Path=DisplayName, RelativeSource={RelativeSource Mode=FindAncestor AncestorType={x:Type Foo}}}\"/&gt;\n</code></pre> <p>Compare to a StarML context redirect:</p> <pre><code>&lt;label text={^DisplayName} /&gt;\n&lt;label text={~Foo.DisplayName} /&gt;\n</code></pre> <p>And this is without any binding modifiers which add even more noise to XAML.</p> <p>This is not intended as a slight against XAML, which is actually a very powerful and mature tool for cross-platform development and far better than most of the available alternatives. However, it reflects a different use case: backing an enormous framework (WPF) that is difficult to update once released, needs to scale to almost any imaginable UI scenario, and can expect a very high level of expertise from dev-users.</p> <p>It is precisely because XML is so extensible that XML-based languages become convoluted over time; they encourage a way of thinking wherein new features are designed to fit into the XML structure somehow, even if the existing syntax is already confusing, verbose or requires some separately-interpreted micro-grammar, instead of the alternative of making a tiny change to the parser to support a relatively simple addition, like the <code>&lt;&gt;</code> or <code>^</code> modifiers above.</p> <p>StardewUI is a mod, which means it is easy to change the parser, easy to roll out said updates, and has fewer users and UI scenarios to cover, so more effort can go into making easy things easy, instead of making nearly-impossible things possible. For scenarios that StarML can't cover, the Core Library is the escape hatch.</p>"},{"location":"framework/starml/#why-not-json","title":"Why not JSON?","text":"<p>In many ways, JSON is the lingua franca of Stardew modding; it is the notation used by every content pack, not only for Content Patcher but for every other framework out there. Why should StardewUI be different?</p> <p>While sharing some of the same concerns as HTML, such as double-parsing and character-escaping, it does route around other issues such as third-party libraries (Json.NET is technically third-party, but is already available in every SMAPI environment).</p> <p>To understand why it's not a good fit, we can take a look at what kind of structure might be required for a very simple view. In this example, we display a frame border, a single header line, and the names of a list of NPCs.</p> StarMLHypothetical JSON <pre><code>&lt;frame layout=\"800px content\"&gt;\n    &lt;lane orientation=\"vertical\"&gt;\n        &lt;label font=\"dialogue\" text=\"Header Text\" /&gt;\n        &lt;label *repeat={Npcs} text={DisplayName} /&gt;\n    &lt;/lane&gt;\n&lt;/frame&gt;\n</code></pre> <pre><code>{\n    \"Type\": \"Frame\",\n    \"Layout\": \"800px content\",\n    \"Children\": [\n        {\n            \"Type\": \"Lane\",\n            \"Orientation\": \"Vertical\",\n            \"Children\": [\n                {\n                    \"Type\": \"Label\",\n                    \"Font\": \"dialogue\",\n                    \"Text\": \"Header Text\"\n                },\n                {\n                    \"Type\": \"Repeat\",\n                    \"Collection\": \"{{Npcs}}\",\n                    \"Content\": {\n                        \"Type\": \"Label\",\n                        \"Text\": \"{{DisplayName}}\"\n                    }\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <p>Notice how much longer, more verbose, and more indented the JSON version is? Now picture how it would look in a view that is 5 levels deep, or 10. This is also the best case scenario for syntax, assuming we make some negative tradeoffs on the parsing side and use <code>JObject</code> instead of any concrete type, which is what allows us to use dictionary-style attributes for <code>Orientation</code>, <code>Font</code> and so on instead of defining yet another <code>\"Attributes\": [...]</code> array with objects inside it.</p> <p>At scale, the JSON version becomes unreadable; it is difficult to look at this data and even understand what it is supposed to do in broad strokes, to say nothing of keeping track of which indentation level you're at, what the context is at that level, etc. JSON can be used to represent a syntax tree, but it is not very good at it (or any other tree).</p> <p>JSON is native to the web; the \"J\" stands for \"JavaScript\", and yet it is not used by any mainstream web frameworks for defining the UI. This is because, while JSON is a good format for data storage, a full user interface cannot be represented very efficiently as plain data; it is not what we call ergonomic. That is exactly the problem that markup languages like HTML evolved to solve, and why we see similar mechanisms continue to evolve organically in every domain from .NET to Qt to Rust.</p>"},{"location":"framework/templates/","title":"Templates","text":"<p>Templates are a very quick-to-use and lightweight method for reusing snippets of markup, reducing repetition and making it easier to customize/mod a UI.</p> <p>The main differences from included views are:</p> <ul> <li>Each template is scoped to the StarML (<code>.sml</code>) file that declares it and cannot be used outside that file<sup>1</sup>;</li> <li>Templates are processed before data binding and are typically more efficient than includes;</li> <li>Elements inside templates are allowed to use template attributes (<code>{&amp;attr}</code>) and event arguments (<code>&amp;attr</code>) which are replaced by the actual attributes provided to the template.</li> </ul> <p>The ideal use of templates is in situations where there will be several similar but not quite identical elements, or when the overall structure is clearly a UI decision and not data-dependent, making use of <code>*repeat</code> infeasible or impractical. Examples:</p> <ul> <li>Form rows in a settings page, for setting up a uniform arrangement of label, tooltip, configuration widget, etc.</li> <li>Tab pages with similar primary layout but different individual sections and features;</li> <li>Organizational UI where the same thing (e.g. game <code>Item</code>) can be moved between multiple sections or containers, and should preserve its appearance in each section.</li> </ul> <p>Of course, templates can also be used with <code>*repeat</code> and any other attributes as a way of refactoring, especially in complex templates that would otherwise be heavily nested.</p>"},{"location":"framework/templates/#declaration-and-usage","title":"Declaration and Usage","text":"<p>Declaring a template is simple: just add a <code>&lt;template&gt;</code> element to the top level of a StarML file. Then, use it by writing a tag with the same name.</p> <p>Example</p> <pre><code>&lt;lane orientation=\"vertical\"&gt;\n    &lt;hello npc=\"Robin\" /&gt;\n    &lt;hello npc=\"Sebastian\" /&gt;\n&lt;/lane&gt;\n\n&lt;template name=\"hello\"&gt;\n    &lt;lane&gt;\n        &lt;image sprite={@Mods/MyMod/Sprites/UI:Wave} /&gt;\n        &lt;label text={&amp;npc} /&gt;\n    &lt;/lane&gt;\n&lt;/template&gt;\n</code></pre> <p>Template elements can appear before or after the main view, though we recommend putting them after so that it is easier to understand the overall \"flow\" of a view by reading from top to bottom.</p> <p>Multiple templates can be added to the same file:</p> <p>Example</p> <pre><code>&lt;lane orientation=\"vertical\"&gt;\n    &lt;hello npc=\"Robin\" /&gt;\n    &lt;goodbye npc=\"Sebastian\" /&gt;\n&lt;/lane&gt;\n\n&lt;template name=\"hello\"&gt;\n    &lt;lane&gt;\n        &lt;image sprite={@Mods/MyMod/Sprites/UI:Wave} /&gt;\n        &lt;label text={&amp;npc} /&gt;\n    &lt;/lane&gt;\n&lt;/template&gt;\n\n&lt;template name=\"goodbye\"&gt;\n    &lt;lane&gt;\n        &lt;image sprite={@Mods/MyMod/Sprites/UI:SadFace} /&gt;\n        &lt;label text={&amp;npc} /&gt;\n    &lt;/lane&gt;\n&lt;/template&gt;\n</code></pre> <p>Templates can even be nested:</p> <p>Example</p> <p>Important: Templates that reference other templates must appear in the order that they are used, with the \"outer\" template being declared before the \"inner\" template.</p> <pre><code>&lt;lane orientation=\"vertical\"&gt;\n    &lt;hello npc=\"Robin\" /&gt;\n    &lt;goodbye npc=\"Sebastian\" /&gt;\n&lt;/lane&gt;\n\n&lt;template name=\"hello\"&gt;\n    &lt;greeting npc={&amp;npc} sprite={@Mods/MyMod/Sprites/UI:Wave} /&gt;\n&lt;/template&gt;\n\n&lt;template name=\"goodbye\"&gt;\n    &lt;greeting npc={&amp;npc} sprite={@Mods/MyMod/Sprites/UI:SadFace} /&gt;\n&lt;/template&gt;\n\n&lt;template name=\"greeting\"&gt;\n    &lt;lane&gt;\n        &lt;image sprite={&amp;sprite} /&gt;\n        &lt;label text={&amp;npc} /&gt;\n    &lt;/lane&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"framework/templates/#template-attributes","title":"Template Attributes","text":"<p>In the above examples, you will have probably noticed the unusual attributes such as <code>{&amp;npc}</code> and <code>{&amp;sprite}</code>. These are template attributes, a special type of attribute allowed only within <code>&lt;template&gt;</code> elements.</p> <p>All template attributes are implicit and don't require any special declaration. The attribute <code>{&amp;npc}</code> means: \"take the <code>npc</code> attribute that was provided to the template and substitute it here.\"</p> <p>Since the entire attribute is substituted, it means that for our hypothetical <code>hello</code> template:</p> <pre><code>&lt;template name=\"hello\"&gt;\n    &lt;lane&gt;\n        &lt;image sprite={@Mods/MyMod/Sprites/UI:Wave} /&gt;\n        &lt;label text={&amp;npc} /&gt;\n    &lt;/lane&gt;\n&lt;/template&gt;\n</code></pre> <p>Any of the following substitutions are valid:</p> <pre><code>&lt;hello npc=\"Clint\" /&gt;\n&lt;hello npc={NpcName} /&gt;\n&lt;hello npc={#CustomNpcName} /&gt;\n</code></pre> <p>All of the above will have the exact same behavior as the equivalent StarML written without any templates.</p>"},{"location":"framework/templates/#event-arguments","title":"Event Arguments","text":"<p>Template attributes can also be passed to event arguments by omitting the braces:</p> <pre><code>&lt;hello-button npc=\"Leah\" /&gt;\n\n&lt;template name=\"hello-button\"&gt;\n    &lt;button text={&amp;npc} left-click=|Greet(\"Hello\", &amp;npc)| /&gt;\n&lt;/template&gt;\n</code></pre> <p>This works the same as attribute substitution, with one important caveat: it will not allow the use of any argument flavor that is not also one of the supported by event arguments.</p> <p>Specifically, literals and context bindings are allowed:</p> <p>OK</p> <pre><code>&lt;hello-button npc=\"Sandy\" /&gt;\n&lt;hello-button npc={NpcName} /&gt;\n</code></pre> <p>But translation and asset bindings are not allowed:</p> <p>Broken</p> <pre><code>&lt;hello-button npc={@Path/To/Asset} /&gt;\n&lt;hello-button npc={#CustomNpcName} /&gt;\n</code></pre> <p>The more surprising of the two above might be the translation binding; however, translations are not currently allowed in event arguments, which means that they cannot be passed from template attributes to event arguments either.</p>"},{"location":"framework/templates/#outlets","title":"Outlets","text":"<p>Templates support the equivalent of children outlets, using the <code>&lt;outlet&gt;</code> tag, which is only valid from within a <code>&lt;template&gt;</code>. When an instance of the template is created, any child nodes will be inserted into the outlet; if there are no children, the the outlet is removed.</p> <p>Example</p> <p>This view from the form example uses an outlet:</p> <pre><code>&lt;form-row title={#ExampleForm.TurboBoost.Title}&gt;\n    &lt;checkbox is-checked={&lt;&gt;EnableTurboBoost} /&gt;\n&lt;/form-row&gt;\n\n&lt;template name=\"form-row\"&gt;\n    &lt;lane layout=\"stretch content\" margin=\"16,0\" vertical-content-alignment=\"middle\"&gt;\n        &lt;label layout=\"280px content\" margin=\"0,8\" text={&amp;title} /&gt;\n        &lt;outlet /&gt;\n    &lt;/lane&gt;\n&lt;/template&gt;\n</code></pre> <p>Which is equivalent to writing:</p> <pre><code>&lt;lane layout=\"stretch content\" margin=\"16,0\" vertical-content-alignment=\"middle\"&gt;\n    &lt;label layout=\"280px content\" margin=\"0,8\" text={#ExampleForm.TurboBoost.Title} /&gt;\n    &lt;checkbox is-checked={&lt;&gt;EnableTurboBoost} /&gt;\n&lt;/lane&gt;\n</code></pre> <p>Named outlets, and outlets with multiple children, are also supported. To create and use a named outlet:</p> <ol> <li>Add an <code>&lt;outlet&gt;</code> tag with non-blank <code>name</code> attribute to the template;</li> <li>When using the template, add one or more elements with an <code>*outlet</code> attribute.</li> </ol> <p>Example</p> <p>Modifying the above example to include an additional, named outlet:</p> <pre><code>&lt;form-row title={#ExampleForm.TurboBoost.Title}&gt;\n    &lt;checkbox is-checked={&lt;&gt;EnableTurboBoost} /&gt;\n    &lt;label text=\"(highly recommended!)\" /&gt;\n    &lt;image *outlet=\"overlay\"\n           layout=\"stretch\"\n           fit=\"stretch\"\n           sprite={@Mods/MyMod/Sprites/UI:TurboBoostOverlay} /&gt;\n&lt;/form-row&gt;\n\n&lt;template name=\"form-row-with-overlay\"&gt;\n    &lt;panel&gt;\n        &lt;lane layout=\"stretch content\" margin=\"16,0\" vertical-content-alignment=\"middle\"&gt;\n            &lt;label layout=\"280px content\" margin=\"0,8\" text={&amp;title} /&gt;\n            &lt;outlet /&gt;\n        &lt;/lane&gt;\n        &lt;outlet name=\"overlay\" /&gt;\n    &lt;/panel&gt;\n&lt;/template&gt;\n</code></pre> <p>Expands to:</p> <pre><code>&lt;panel&gt;\n    &lt;lane layout=\"stretch content\" margin=\"16,0\" vertical-content-alignment=\"middle\"&gt;\n        &lt;label layout=\"280px content\" margin=\"0,8\" text={#ExampleForm.TurboBoost.Title} /&gt;\n        &lt;checkbox is-checked={&lt;&gt;EnableTurboBoost} /&gt;\n        &lt;label text=\"(highly recommended!)\" /&gt;\n    &lt;/lane&gt;\n    &lt;image layout=\"stretch\" fit=\"stretch\" sprite={@Mods/MyMod/Sprites/UI:TurboBoostOverlay} /&gt;\n&lt;/panel&gt;\n</code></pre> <p>Template outlets come with a few caveats:</p> <ul> <li>They cannot cause any of the normal child limits to be broken. For example, if an <code>&lt;outlet&gt;</code> is the child of a <code>&lt;frame&gt;</code>, then that outlet can only have a single child.</li> <li>Named template outlets are not recommended to be used in the same scope as a view with named outlets, such as an Expander; doing so may break or cause unexpected behavior.</li> <li>The <code>&lt;outlet&gt;</code> tag is not a real view, and any children of the <code>&lt;outlet&gt;</code> itself (as opposed to children of the template instance) will be ignored.</li> <li>Outlets, like template attributes, are expanded inline, so keep this in mind for binding context redirects and any other data binding behavior; the outlet children will have the same context as the real parent in the expanded view.</li> </ul> <ol> <li> <p>This behavior is likely to change in a future version that supports template inclusions.\u00a0\u21a9</p> </li> </ol>"},{"location":"getting-started/","title":"Getting Started","text":"<p>If you've made a Stardew mod before, then setting up StardewUI should be a snap; it's the same as any other SMAPI integration.</p>"},{"location":"getting-started/#installing-the-framework","title":"Installing the Framework","text":"<p>StardewUI is prerelease, so it isn't published on Nexus Mods or any other mod site yet.</p> <ol> <li>Download the latest release. Make sure you download the <code>StardewUI x.y.z.zip</code> file, not the source code.</li> <li>Open the .zip file and extract the <code>StardewUI</code> folder into your <code>Stardew Valley\\Mods</code> folder.</li> </ol> <p>The framework is now ready to use from your own mods.</p>"},{"location":"getting-started/#adding-the-api","title":"Adding the API","text":"<p>If this is your first time working with a framework mod, have a look at SMAPI's guide to using an API. The abridged version is:</p> <ol> <li>Download the entire <code>IViewEngine.cs</code> to somewhere in your mod's source directory. (You can right-click, \"Save link as...\" from this page.)</li> <li>From wherever you want to invoke the API\u2014typically <code>ModEntry.cs</code>\u2014add to the top of the file:     <pre><code>using StardewUI.Framework;\n</code></pre></li> <li>Declare a field for the API:     <pre><code>private IViewEngine viewEngine;\n</code></pre></li> <li>Obtain the API in a <code>GameLaunched</code> handler:     <pre><code>viewEngine = Helper.ModRegistry.GetApi&lt;IViewEngine&gt;(\"focustense.StardewUI\");\n</code></pre></li> </ol>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>At this point, you don't have any views or other assets; in order to get an actual UI up and running, you'll need to:</p> <ol> <li>Decide on a directory where your views and other assets will live inside your mod. (1)</li> <li>Register your asset path(s) so that the framework can find them.</li> <li>Create a new view file using the <code>.sml</code> extension. See editor setup for recommended editors/configurations.</li> <li>Ensure that the asset will be copied to your mod output. In Visual Studio, the file properties should look as follows: <p></p> </li> <li>Author the view. See the StarML guide, or checkout the examples if you're feeling impatient.</li> <li>Use the <code>IViewEngine</code> API you added earlier to display the view.</li> </ol> <ol> <li>We recommend <code>assets/views</code> for views and <code>assets/sprites</code> for sprites to be consistent with the examples and reference guides, but you can use any location(s) you prefer.</li> </ol> <p>Note that steps 1-2 only need to be done one time. As long as you keep all your assets in one place (directory), then any new ones you add will be automatically picked up by the framework; no need to register every asset individually.</p> <p>That's it! Have fun creating great UIs.</p>"},{"location":"getting-started/adding-ui-assets/","title":"Adding UI Assets","text":"<p>StardewUI has its own asset system based on SMAPI's own content APIs but providing some additional features: convention-based registration and hot reload.</p>"},{"location":"getting-started/adding-ui-assets/#conventions","title":"Conventions","text":"<p>Assets are registered by convention in StardewUI. You only need to specify where your assets are located, and it handles the translation between file names and asset names for you.</p> <p>Suppose your mod looks as follows:</p> <p> ModName     assets        sprites           ui.json           ui.png        views           config.sml           gifts.sml     IViewEngine.cs     ModEntry.cs</p> <p>For now, don't worry about what the various files do; the important thing is that views are in the directory <code>assets/views</code>, and the asset prefix is a setting you provide. If you choose a prefix of <code>Mods/author.ModName/Views</code>, then the asset names for these assets will be:</p> <ul> <li><code>Mods/author.ModName/Views/Config</code></li> <li><code>Mods/author.ModName/Views/Gifts</code></li> </ul> <p>That is, without the <code>assets/views</code> path and without the <code>.sml</code> extension.</p>"},{"location":"getting-started/adding-ui-assets/#adding-views","title":"Adding Views","text":"<p>The actual \"UI\" in StardewUI is based on Views. When using the framework\u2014which this part of the guide is based on\u2014your views will be in the form of <code>.sml</code> (StarML) files.</p> <p>To create a view, simply create the <code>.sml</code> file in your desired location, such as the <code>assets/views/config.sml</code> used above. Refer to the StarML guide or examples for more info on authoring views, i.e. what the actual contents of the file should be.</p> <p>Important</p> <p>Like any other mod content asset, you need to make sure that it is deployed with your mod build; Visual Studio, VSCode, Rider, etc. do not automatically do this for you. To do this: - Set Build Action to \"Content\" - Set Copy to Output Directory to \"Copy always\" or \"Copy if newer\"</p> <p> </p> <p>If you are not using any standard IDE or cannot find these settings, then you must add them to the <code>.csproj</code> file, e.g.</p> <pre><code>&lt;ItemGroup&gt;\n  &lt;None Remove=\"assets\\views\\config.sml\" /&gt;\n&lt;/ItemGroup&gt;\n\n&lt;ItemGroup&gt;\n  &lt;Content Include=\"assets\\views\\config.sml\"&gt;\n    &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;\n  &lt;/Content&gt;\n&lt;/ItemGroup&gt;\n</code></pre> <p>Once the physical files are set up, you can register the view folder \u2013 not the individual views \u2013 using the API:</p> <pre><code>viewEngine.RegisterViews(\"Mods/author.ModName/Views\", \"assets/views\");\n</code></pre> <p>That's it\u2014just a single line!</p>"},{"location":"getting-started/adding-ui-assets/#adding-sprites","title":"Adding Sprites","text":"<p>Stardew Valley's visuals, like those of most 2D games, are based around sprites. All of Stardew's image assets and most mod assets are in the form of \"sprite sheets\", more formally known as a texture atlas, in which a single image (i.e. <code>.png</code> file) contains many individual \"objects\", each occupying its own rectangular region.</p> <p>Neither Stardew nor SMAPI have an explicit concept of a sprite. Since StardewUI needs to deal quite heavily with sprites, it defines its own Sprite type, which includes not only the source image and rectangular region but also information pertaining to 9-slice scaling, which is how it is able to display elements such as frame borders and menu backgrounds without having them appear awkwardly stretched.</p> <p>A limited set of built-in sprites are available without any additional setup:</p> <ul> <li>The UiSprites class contains sprites that are common for building UIs and menus in particular; these are available to StarML via an asset binding of the form <code>@Mods/StardewUI/Sprites/{Name}</code>; for example, <code>@Mods/StardewUI/Sprites/CaretRight</code>.</li> <li>To use the sprite of an in-game <code>Item</code>, use an asset binding with <code>Item/</code> prefix followed by the qualified ID; for example, <code>@Item/(O)24</code> will produce the image of a parsnip.</li> </ul> <p>However, Stardew Valley has thousands of individual sprites, and if you want to use anything that is not built-in, including any custom sprite that you've produced yourself, then you will need to register it as an asset.</p> <p>You can accomplish this with model binding by providing a <code>Texture2D</code> or <code>Tuple&lt;Texture2D, Rectangle&gt;</code> property, as described in conversion reference, but the recommended way to deal with sprites is to register them with StardewUI.</p> <p>In addition to allowing them to be used as asset bindings, like the <code>UiSprites</code>, StardewUI will also handle any cache management and hot reload for registered sprites, ensuring that (a) the UI will never crash because of an invalid (disposed) texture and (b) hot reload works correctly, and any changes to the game content, such as seasonal themes, are reflected immediately in the UI, even the UI is already on the screen.</p> <p>The process is almost the same whether you intend to use vanilla assets or provide custom images/sprites in your mod. Sprites are registered by convention, similar to views:</p> <pre><code>viewEngine.RegisterSprites($\"Mods/author.ModName/Sprites\", \"assets/sprites\");\n</code></pre> <p>Continue reading for an explanation of what goes in <code>assets/sprites</code>.</p>"},{"location":"getting-started/adding-ui-assets/#vanilla-sprites","title":"Vanilla Sprites","text":"<p>If you intend to take many images from a single texture atlas (\"sprite sheet\") then it is convenient to declare them all in one place. StardewUI provides a simple JSON structure for doing so. Suppose we are interested in the icons of various buffs:</p> assets/sprites/buffs.json<pre><code>{\n    \"Texture\": \"TileSheets/BuffsIcons\",\n    \"Sprites\": {\n        \"Fishing\": {\n            \"SourceRect\": \"16, 0, 16, 16\"\n        },\n        \"Mining\": {\n            \"SourceRect\": \"32, 0, 16, 16\"\n        },\n        \"MonsterMusk\": {\n            \"SourceRect\": \"0, 32, 16, 16\"\n        }\n    }\n}\n</code></pre> <p>This instructs StardewUI to use the <code>LooseSprites/BuffsIcons</code> texture as the source, and provides the rectangular regions (in the form <code>\"left, top, width, height\"</code>) of the individual sprites we want. It just so happens that these are all 16x16, but that will not necessarily always be the case; <code>LooseSprites/Cursors</code>, for example, is notorious for both its enormous size and its total irregularity.</p>"},{"location":"getting-started/adding-ui-assets/#nine-slicing","title":"Nine-Slicing","text":"<p>Another advantage of the JSON format is that you can specify 9-slice scaling options. Suppose we want to use this image as a background (note: all images in this section have been scaled up 8x for clarity):</p> <p></p> <p>The Cursors sheet doesn't have this exact size; what it has instead is:</p> <p></p> <p>If we simply stretched this image to an arbitrary size, we would not get a good result:</p> <p></p> <p>Instead, we distinguish between the image's borders, which are not meant to stretch, and the center or middle slices which can stretch in one or both directions:</p> <p></p> <p>What we get are nine slices:</p> Left Middle Right Top No Stretch Stretch Horizontal No Stretch Middle Stretch Vertical Stretch H + V Stretch Vertical Bottom No Stretch Stretch Horizontal No Stretch <p>In this specific case, it should be apparent that there are:</p> <ul> <li>2 border pixels on the left</li> <li>3 border pixels on top</li> <li>3 border pixels on the right</li> <li>2 border pixels on the bottom.</li> </ul> <p>To configure this in the JSON:</p> assets/sprites/cursors.json<pre><code>{\n    \"Texture\": \"LooseSprites/Cursors\",\n    \"Sprites\": {\n        \"SpecialBorder\": {\n            \"SourceRect\": \"129, 338, 7, 9\",\n            \"FixedEdges\": \"2, 3, 3, 2\",\n            \"Scale\": 4\n        }\n    }\n}\n</code></pre> <p>One additional property we've specified here is <code>Scale: 4</code>. This tells StardewUI to first scale uniformly by 4x, then do the 9-slicing. The reason for this is that the Cursors image is based on a 16x16 \"tile\" size, but menus and other UI are based on a 64x64 \"tile\" size. Compare the version without scale to the version with scale:</p> Unscaled Scaled <p>The unscaled version might look better in a web browser, but it will look strange in the game, appearing far too \"HD\" compared to the content around it and clashing with other UI.</p> <p>Apply scaling according to the reference size vs. actual screen size. If you are using sprites from <code>Maps/MenuTiles</code>, those are already designed for a 64x64 tile size and should not be scaled (no <code>Scale</code> field), only sliced (<code>FixedEdges</code> field).</p>"},{"location":"getting-started/adding-ui-assets/#custommodded-sprites","title":"Custom/Modded Sprites","text":"<p>If the sprites you want to use are your own sprites, designed specifically for your mod (i.e. not simply replacing a vanilla asset, in which case you should configure StardewUI with the vanilla sprite instead), then the configuration requires only a few small tweaks from vanilla:</p> <ol> <li>Place your <code>.png</code> and <code>.json</code> files in the same directory, and give them the same name, e.g. <code>assets/sprites/ui.png</code> and <code>assets/sprites/ui.json</code>.</li> <li> <p>Remove the \"Texture\" line from the JSON file, so that it only contains <code>Sprites</code>. For instance, as used in one of the examples:</p> assets/sprites/ui.json<pre><code>{\n    \"Sprites\": {\n        \"Checked\": {\n            \"SourceRect\": \"0, 0, 9, 9\",\n        },\n        \"Unchecked\": {\n            \"SourceRect\": \"9, 0, 9, 9\",\n        }\n    }\n}\n</code></pre> </li> </ol> <p>Aside from the addition of the <code>.png</code> file and the removal of the <code>Texture</code> field, it is exactly the same as a vanilla sprite.</p>"},{"location":"getting-started/adding-ui-assets/#referencing-sprites","title":"Referencing Sprites","text":"<p>When using JSON configuration, the primary asset is the Texture and JSON data itself. To reference an individual sprite, use the form: <code>{AssetPrefix}/{SpriteSheetName}:{SpriteName}</code>.</p> <p>For example, using the previous example of buff sprites, along with the modded sprites, we might end up with the following template:</p> <pre><code>&lt;frame background={@Mods/author.ModName/Sprites/Cursors:SpecialBorder}&gt;\n    &lt;image layout=\"36px 36px\" sprite={@Mods/author.ModName/Sprites/UI:Checked} /&gt;\n&lt;/frame&gt;\n</code></pre>"},{"location":"getting-started/displaying-ui/","title":"Displaying UI","text":"<p>Before you can display any UI, you'll need to have:</p> <ol> <li>Initialized the Framework API;</li> <li>Authored one or more StarML views and set them up to be deployed; and</li> <li>Registered the asset path of your view(s).</li> </ol> <p>Once all those steps are completed, it's time to bring that UI to life.</p>"},{"location":"getting-started/displaying-ui/#menus","title":"Menus","text":"<p>To create a menu from a StardewUI view, use the <code>CreateMenu</code> methods:</p> Menu From AssetMenu From Markup <pre><code>var context = new SomeViewModel(...);\nIClickableMenu menu = viewEngine.CreateMenuFromAsset(\n    \"Mods/authorName.ModName/Views/SomeView\",\n    context);\n</code></pre> <pre><code>var context = new SomeViewModel();\nstring markup =\n    @\"&lt;lane layout=\"\"500px content\"\" orientation=\"\"vertical\"\"&gt;\n        &lt;label font=\"\"dialogue\"\" text=\"\"Things\"\" /&gt;\n        &lt;label *repeat={Things} text={DisplayName} /&gt;\n    &lt;/lane&gt;\";\nIClickableMenu menu = viewEngine.CreateMenuFromMarkup(markup, context);\n</code></pre> <p>Where <code>Mods/authorName.ModName/Views/SomeView</code> is the concatenation of the view's asset prefix, e.g. <code>Mods/authorName.ModName/Views</code>, with the StarML file name/path, e.g. <code>SomeView</code> (excluding the <code>.sml</code> extension).</p> <p>Once created, the menu is shown the same way as a vanilla menu, e.g. by assigning it to <code>Game1.activeClickableMenu</code>, or as a child menu of another menu, or to <code>TitleMenu.subMenu</code>, and so on.</p> <p>Danger</p> <p>The <code>CreateMenuFromMarkup</code> method is only intended for testing, or for very unusual scenarios where the UI needs to be constructed completely on the fly and the combination of data bindings and structural attributes such as <code>*switch</code> and <code>*if</code> aren't sufficient, which should be rare.</p> <p>Programmatically-constructed StarML must be parsed every time the view is created and won't benefit from hot reload or from many of StardewUI's performance optimizations.</p> <p><code>CreateMenuFromAsset</code> is always the recommended entry point and should be used whenever possible.</p> <p>Several complete examples are provided in the test mod:</p> <pre><code>var context = new\n{\n    HeaderText = \"Example Menu Title\",\n    ItemData = ItemRegistry.GetData(\"(O)117\"),\n};\nGame1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n    \"Mods/focustense.StardewUITest/Views/TestView\",\n    context);\n</code></pre>"},{"location":"getting-started/displaying-ui/#menu-controllers","title":"Menu Controllers","text":"<p>Menus are analogous to the \"window\" in a web or desktop app. While the StarML document always results in a View, underneath it there is a more complex mechanism responsible for backgrounds, input handling, pausing game state, ensuring only one menu can be active, and so on. This is the the Menu itself\u2014the implementation of <code>IActiveClickableMenu</code> which also acts as the bridge between Stardew Valley and StardewUI.</p> <p>Most UIs do not need to change anything about how the <code>ViewMenu</code> works; it is set up so that its defaults accommodate 80-90% of usage scenarios. For those scenarios that require more precise control over aspects of the menu that cannot be controlled by either the StarML markup or a reference to the <code>IClickableMenu</code>, StardewUI provides an alternative set of APIs for working with <code>IMenuController</code>.</p> <p>The controller allows you to:</p> <ul> <li>Change how the menu is closed: prevent closing, respond to events before/after closing, or replace the default <code>Close</code> implementation entirely for menus that need to be integrated into other frameworks;</li> <li>Display the clickable Close button or \"red X\" found at the top-right of many Stardew Valley menus, and optionally customize its image or location;</li> <li>Change absolute position, screen dimming, gutters, and other aspects affecting the \"exterior\" of the menu.</li> </ul> <p>The full set of controller customizations are documented in the <code>IMenuController</code> reference.</p> <p>Any standard menu is easy to replace with a menu controller by simply changing the API call from <code>CreateMenuFromAsset</code> to <code>CreateMenuControllerFromAsset</code> and referring to the controller's <code>Menu</code> when ready. The previous example would be changed to:</p> <pre><code>var context = new\n{\n    HeaderText = \"Example Menu Title\",\n    ItemData = ItemRegistry.GetData(\"(O)117\"),\n};\nvar controller = viewEngine.CreateMenuControllerFromAsset(\n    \"Mods/focustense.StardewUITest/Views/TestView\",\n    context);\ncontroller.DimmingAmount = 0.5f; // Example customization\nGame1.activeClickableMenu = controller.Menu;\n</code></pre>"},{"location":"getting-started/displaying-ui/#hud","title":"HUD","text":"<p>The game's HUD \u2013 Heads Up Display \u2013 refers to the persistent UI that is drawn over top of the game world, such as the date/time widget, health/energy bars, and so on.</p>"},{"location":"getting-started/displaying-ui/#using-the-api","title":"Using the API","text":"<p>The recommended way to display HUD-style UI is to create a Drawable from StarML. The API for this is very similar to the menu API:</p> Drawable From AssetDrawable From Markup <pre><code>IViewDrawable drawable =\n    viewEngine.CreateDrawableFromAsset(\"Mods/authorName.ModName/Views/SomeView\");\ndrawable.Context = new SomeViewModel(...);\n// Optional, only needed if the view is not fixed-size\ndrawable.MaxSize = new(maxWidth, maxHeight);\n</code></pre> <pre><code>var context = new SomeViewModel();\nstring markup =\n    @\"&lt;lane layout=\"\"500px content\"\" orientation=\"\"vertical\"\"&gt;\n        &lt;label font=\"\"dialogue\"\" text=\"\"Things\"\" /&gt;\n        &lt;label *repeat={Things} text={DisplayName} /&gt;\n    &lt;/lane&gt;\";\nIViewDrawable drawable = viewEngine.CreateDrawableFromMarkup(markup);\ndrawable.Context = new SomeViewModel(...);\n// Optional, only needed if the view is not fixed-size\ndrawable.MaxSize = new(maxWidth, maxHeight);\n</code></pre> <p>Danger</p> <p>Avoid using the <code>CreateDrawableFromMarkup</code> variant in release builds for the same reasons described in menus.</p> <p><code>IViewDrawable</code> implements <code>IDisposable</code>. If you are done with an instance and never going to draw it again, make sure to call its <code>Dispose()</code> method. StardewUI will attempt to detect unreachable drawables and stop updating them, but this is less reliable and will take longer than a drawable that was disposed correctly, potentially degrading game performance over time.</p> <p>The test mod also has a simple HUD example:</p> <pre><code>private void ToggleHud()\n{\n    if (hudWidget is not null)\n    {\n        hudWidget.Dispose();\n        hudWidget = null;\n    }\n    else\n    {\n        hudWidget = viewEngine.CreateDrawableFromAsset(\n            \"Mods/focustense.StardewUITest/Views/Example-Hud\");\n        hudWidget.Context = new { Title = \"I'm a HUD!\" };\n    }\n}\n</code></pre>"},{"location":"getting-started/displaying-ui/#using-views-directly","title":"Using Views Directly","text":"<p>Advanced usage warning</p> <p>This section is provided for disambiguation, since there are more differences between the Core Library and Framework usage for HUD-style UI than there are for menus. If you aren't already using the Core Library to handle specialized scenarios or extend the framework, ignore this section and use the drawable API instead.</p> <p>When working with the core library, the <code>IViewDrawable</code> abstraction is not involved; instead, <code>IView</code> can be used directly with a <code>SpriteBatch</code>.</p> <p>A Fishing Sea uses this older method for its HUD:</p> <p>Example</p> <pre><code>internal sealed class ModEntry : Mod\n{\n    private IView? seedFishPreview;\n\n    public override void Entry(IModHelper helper)\n    {\n        seedFishPreview = new SeedFishInfoView();\n\n        helper.Events.Display.RenderedHud += Display_RenderedHud;\n    }\n\n    private void Display_RenderedHud(object? sender, RenderedHudEventArgs e)\n    {\n        seedFishPreview.Measure(new(500, 500));\n        var overlayBatch = new PropagatedSpriteBatch(\n            spriteBatch,\n            Transform.FromTranslation(new Vector2(0, 100))\n        );\n        SeedFishPreview.Draw(overlayBatch);\n    }\n}\n</code></pre> <p>The above is substantially simplified from the actual mod code for brevity. There are only 3 steps to the process:</p> <ol> <li>Create an <code>IView</code> or <code>IDrawable</code> instance and save it (do not recreate the view on every frame).</li> <li>Each frame, call its <code>Measure</code> method, providing the maximum width/height it should be allowed to use; the actual width/height may be smaller.</li> <li>After measuring\u2014usually immediately afterward\u2014Call the view's <code>Draw</code> method with the desired position.</li> </ol> <p>Important</p> <p>Unless the view is completely static (that is, neither its content nor its position ever changes), you must call <code>Measure</code> on every frame. This method is responsible for layout, and changes to a view's properties, such as the text of a label, will not be reflected until the next layout. Do not be concerned about frame performance; StardewUI is very careful to limit work to the parts that changed.</p>"},{"location":"getting-started/displaying-ui/#other-scenarios","title":"Other Scenarios","text":"<p>These are considered advanced usage and not recommended for StardewUI beginners; to learn more, head to the respective page:</p> <ul> <li>Overlays</li> </ul>"},{"location":"getting-started/editor-setup/","title":"Editor Setup","text":"<p>StardewUI doesn't require you to use any special editor, but StarML, like JSON or HTML, is much easier to write correctly when using an editor with syntax highlighting.</p> <p>Some editors may behave acceptably if told to treat <code>.sml</code> as either HTML or XML, but the results vary widely across editors.</p>"},{"location":"getting-started/editor-setup/#recommended-editors","title":"Recommended Editors","text":"<p>These are the editors with full support for StarML, provided as extensions.</p> <ul> <li>Visual Studio, using the StardewUI Extension. Best for C# developers on Windows.</li> <li>Visual Studio Code, using the vscode-starml extension.</li> </ul> <p>When using one of these editors with the corresponding extension installed, <code>.sml</code> (or <code>.starml</code>) files will be recognized as StarML and have correct highlighting for all types of syntax elements (tags, literal attributes, structural attributes, all the different attribute flavors).</p>"},{"location":"getting-started/editor-setup/#alternative-editors","title":"Alternative Editors","text":"<p>If you cannot use any of the recommended editors, then the following have been tested to have partial/incomplete highlighting:</p> <ul> <li>Notepad++ using the StarML User Defined Language (see also: Import a UDL)</li> </ul> <p>These options produce sane results that highlight the basic structure of the document correctly, but may struggle with certain aspects; for example, binding modifiers may be interpreted as tags or otherwise break the attribute highlighting.</p>"},{"location":"getting-started/hot-reload/","title":"Hot Reload","text":"<p>When using the recommended asset registration for views and sprites, StardewUI can watch for changes to asset files (<code>.sml</code>, <code>.png</code> and <code>json</code>) and update them immediately, even while the game is running and while the specific UI (menu, HUD, etc.) is open. This can be very useful for troubleshooting layout issues, making small tweaks toward a pixel-perfect UI, or simply using a playground for experimentation.</p>"},{"location":"getting-started/hot-reload/#enabling-hot-reload","title":"Enabling Hot Reload","text":"<p>Once you have a reference to the API, turning on hot reload is a single method call:</p> <pre><code>viewEngine.EnableHotReloading();\n</code></pre> <p>A good place to do this is after the asset registrations, as in the Example Mod.</p> <p>For best results, it is recommended to turn off the game setting labeled \"Pause When Game Window Is Inactive\":</p> <p></p> <p>Disabling this setting forces the game to process update ticks even while you are working in a separate window\u2014such as your code editor. This gives you truly instant hot reload, without having to switch back to the game window.</p>"},{"location":"getting-started/hot-reload/#file-locations","title":"File Locations","text":"<p>Hot reload works on the mod assets; it does not know the original source of those assets.</p> <p>Important</p> <p>In order for hot reloading to work, make sure you are directly editing or copying your edits to the deployed files; that is, the file inside your <code>Stardew Valley\\Mods\\&lt;ModName&gt;</code> folder. See the source sync section below for a possible alternative, depending on your project setup.</p>"},{"location":"getting-started/hot-reload/#source-sync","title":"Source Sync","text":"<p>StardewUI can provide a built-in sync from your project assets directory to the deployed mod assets directory in order to work around the aforementioned limitation, and allow hot-reloading from your usual IDE or editor. There are two ways to enable this:</p> <ol> <li> <p>Use the extension from the <code>ViewEngineExtensions</code> class, copied with the <code>IViewEngine</code> definition. For \"ordinary\" project structures, this is the most convenient as it will auto-detect the source path based on the caller.</p> <pre><code>viewEngine.EnableHotReloadingWithSourceSync();\n</code></pre> </li> <li> <p>Provide your own path to the <code>EnableHotReloading</code> method. Use this strategy if your project structure is unusual, or if the previous method does not work for any other reason.</p> <pre><code>// Replace C:\\Projects\\MyMod with the actual path to your mod source.\nviewEngine.EnableHotReloading(@\"C:\\Projects\\MyMod\");\n</code></pre> </li> </ol> <p>For either of the above to function, your source directory must have the same asset structure as the deployed mod. For example, if views have been registered for the path <code>assets/views</code>, then the source directory must be the directory containing <code>assets</code>, which in turn contains <code>views</code>.</p> <p>This will almost always be the case for projects using ModBuildConfig that don't use their own custom build/deployment actions for assets, but you may need to tweak it if your project is set up differently.</p> <p>Warning \u2013 Visual Studio Compatibility</p> <p>Source sync currently has issues with Visual Studio which render it inoperable, due to VS creating temporary files and moving entire directories instead of simply writing to the source file. Other editors, including Visual Studio Code, should function correctly.</p>"},{"location":"getting-started/hot-reload/#performance","title":"Performance","text":"<p>When hot-reload is enabled, StardewUI must monitor your mod directory. While the overhead of doing so is generally low, having many mods do this at the same time(1) could cause lag/jank or other performance problems in game. To be polite to other modders, and players, it is recommended to turn off hot reload in the released version of your mod, since players will not be using the feature themselves.</p> <ol> <li>The Framework API is partially scoped to each mod using it, and Hot Reload is a per-mod setting.</li> </ol> <p>There are two ways to do this:</p> <ol> <li>Remove the call to <code>EnableHotReloading()</code> before building your mod for release; or</li> <li> <p>Use conditional compilation. A simple and effective solution is to enable hot reloading in Debug mode only, as you will presumably be shipping the Release version.</p> <pre><code>#if DEBUG\n    viewEngine.EnableHotReloading();\n#endif\n</code></pre> </li> </ol> <p>Conditional compilation is the recommended approach, as it is a permanent solution and avoids having hot-reloading accidentally enabled in a release build.</p>"},{"location":"library/","title":"Core Library","text":"<p>StardewUI's Core Library is all of the mundane, engine-room components and functionality running underneath the magic of the framework.</p> <p>When you display a view written with StarML, the framework does not translate that directly to pixels on the screen; instead, it is transformed into a view tree\u2014a hierarchy of layout views and content views, which handle everything that isn't related to data binding.</p> <p>StardewUI Views are identical in concept to Qt widgets, Android views or HTML elements; they are responsible for performing layout, handling user interaction and ultimately drawing themselves to the screen, or SpriteBatch as is used in Stardew Valley.</p>"},{"location":"library/#features","title":"Features","text":"<p>Core library features are loosely divided into the same categories as code namespaces:</p> <ul> <li>Graphics: Abstractions for game sprites, the MonoGame SpriteBatch, and everything else that deals directly with \"pixels on the screen\".</li> <li>Input: A variety of useful tools for dealing with user input (text entry, button repeat/throttling, etc.) that Stardew Valley and SMAPI don't provide themselves, or hide behind implementation details.</li> <li>Layout: Essential types and tools for describing layouts: positions, alignments and other dimensions.</li> <li>Widgets: All the standard views.</li> <li>Overlays: System for displaying views as either dismissable overlays, such as dropdowns, or full-screen (\"modal dialog\") style, such as the keybinding editor.</li> <li>Animation: Animates properties of views. Includes the common HoverScale that can be attached to any image to make it zoom on mouseover.</li> <li>Diagnostics: Primarily performance tracing.</li> </ul>"},{"location":"library/#usage","title":"Usage","text":"<p>When you use the UI Framework, the Core Library is designed to work behind the scenes. However, there are some cases when you might need to use it directly, e.g. if you are writing extensions.</p> <p>Unless you are specifically opting out of all framework features, the correct way to reference the Core Library is via SMAPI's ModBuildConfig, which most mods should normally already be using; the reference can be added either directly, or indirectly via ModManifestBuilder.</p>"},{"location":"library/#using-modmanifestbuilder","title":"Using <code>ModManifestBuilder</code>","text":"<p>Simply add the reference to your <code>.csproj</code> file using <code>SMAPIDependency</code>, and set the attribute <code>Reference=\"true\"</code>.</p> <p>Example</p> <pre><code>&lt;ItemGroup&gt;\n    &lt;SMAPIDependency Include=\"focustense.StardewUI\" Version=\"0.4.0\" Reference=\"true\" /&gt;\n&lt;/ItemGroup&gt;\n\n&lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"Pathoschild.Stardew.ModBuildConfig\" Version=\"4.1.1\" /&gt;\n    &lt;PackageReference Include=\"Leclair.Stardew.ModManifestBuilder\" Version=\"2.3.1\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre>"},{"location":"library/#using-modbuildconfig","title":"Using ModBuildConfig","text":"<p>SMAPI defines a <code>GameModsPath</code> variable which you can use to reference the StardewUI assembly relative to the game path, instead of a physical directory on your machine:</p> <p>Example</p> <pre><code>&lt;ItemGroup&gt;\n    &lt;Reference Include=\"StardewUI\"&gt;\n        &lt;HintPath&gt;$(GameModsPath)\\StardewUI\\StardewUI.dll&lt;/HintPath&gt;\n        &lt;Private&gt;false&lt;/Private&gt;\n    &lt;/Reference&gt;\n&lt;/ItemGroup&gt;\n\n&lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"Pathoschild.Stardew.ModBuildConfig\" Version=\"4.1.1\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre> <p>Note that when you add a direct assembly reference\u2014as opposed to the more common API integration method\u2014it is extremely important to also add the mod as a required dependency in your <code>manifest.json</code>, otherwise SMAPI may not load the mods in the correct order, resulting in your mod failing to load, and this failure may be intermittent or platform-specific, e.g. loads correctly on Windows but not Linux or vice versa.</p> <p>Example</p> <pre><code>{\n    \"Name\": \"ModName\",\n    // Other fields omitted from example: Author, Version, Description, UniqueID, etc.\n    \"Dependencies\": [\n       {\n          \"UniqueID\": \"focustense.StardewUI\",\n          \"MinimumVersion\": \"0.4.0\"\n       }\n    ]\n}\n</code></pre> <p>These instructions only apply to the <code>ModBuildConfig</code> method, because <code>ModManifestBuilder</code> does it automatically for you.</p> <p>Although <code>MinimumVersion</code> is optional for manifest dependencies, you should always include it for any StardewUI versions prior to 1.0. StardewUI follows semantic versioning and any versions prior to 1.0 are considered development versions that may introduce breaking changes.</p>"},{"location":"library/#using-submoduleshared-project","title":"Using Submodule/Shared Project","text":"<p>Danger</p> <p>Submodule/shared project imports are only for users who are not interested in any of the framework features, and need a completely standalone solution for their project.</p> <p>Visual Studio Shared Projects are a 10-year-old technology that has never been clearly documented; the best resources available are a few obsolete documentation pages and blog posts. They do work, and are fairly common to see in Stardew Modding Monorepos, but have many quirks, tend to behave oddly and in frustrating ways within the IDE, and most importantly, are compiled as your own source code, meaning they generate new types inside your mod and are therefore not compatible with the types inside <code>StardewUI.dll</code>. If you try to use them together, you will run into cryptic errors like <code>No value converter registered for Edges -&gt; Edges</code>.</p> <p>Git submodules (AKA \"sob modules\") have many problems of their own and are widely hated for many good reasons. An alternative is git subtree, which solves some but not all of the problems of submodules, and solves none of the problems of Shared Projects.</p> <p>Consider carefully before choosing this option, because it may complicate your project maintenance and is effectively exclusive with the Framework; you can only use one or the other, and switching to the Framework later on may be difficult if there have been breaking changes, or if you depend on any internal types.</p> <p>If you have elected to use the Core Library Shared Project (please read the warnings above) then use the following process for including it:</p> <ol> <li><code>cd</code> into your mod's solution directory.     (This is the directory containing the <code>.sln</code> file, not the <code>.csproj</code>)</li> <li>Add the submodule: <code>git submodule add https://github.com/focustense/StardewUI.git</code></li> <li>Add the shared project to your solution. In Visual Studio, right-click on the Solution in the Solution Explorer, then Add -&gt; Existing Project..., find and select the <code>StardewUI.shproj</code> inside the <code>StardewUI\\Core</code> folder created in step 1.</li> <li>Add a project reference to your mod. In Visual Studio, right-click on on your Project (not the solution, and not the StardewUI project; the project for your mod), then Add -&gt; Shared Project Reference, and tick <code>StardewUI</code>. If you don't see <code>StardewUI</code> in the list, then you made a mistake in one of the previous steps.</li> <li>Double-check; if you open your <code>.csproj</code> file in VS or a text editor, it should have the following line:    <code>&lt;Import Project=\"..\\StardewUI\\Core\\StardewUI.projitems\" Label=\"Shared\" /&gt;</code></li> </ol> <p>Once imported, you can reference StardewUI's types directly, including ComponentView and ViewMenu which are the entry points for most user-defined views and menus, and what the Framework uses internally.</p> <p>A few other considerations and tips for shared project users:</p> <ul> <li> <p>Since you are depending on the source code, expect things to break if you update (pull).</p> <p>While there is still some risk of this even when using the other, recommended methods, breaking changes to the Framework/API should normally be reflected in the project's semantic versioning, whereas potentially breaking changes to the source will not. If you fork or modify the shared project in any way or use any of its <code>internal</code> types or members, there is a good chance that your solution will no longer compile after an update.</p> </li> <li> <p>If you update/pull the shared project, and Visual Studio starts behaving strangely (not showing the correct files, producing compilation errors that make no sense, etc.), try closing Visual Studio, deleting the <code>.vs</code> folder inside your solution, and reopening it.</p> <p>The exact nature of this bug isn't clear, but sometimes Visual Studio, MSBuild, and even the <code>dotnet</code> tool can keep holding onto old state, even if you clean and rebuild. Deleting and re-importing the entire submodule will not fix the problem, but deleting <code>.vs</code> usually will.</p> </li> </ul> <p>Why use a submodule/shared project?</p> <p>With all the ominous warnings above, you might be wondering \"why would anyone use the submodule/shared project method?\" There are two reasons why this usage is still available and (somewhat) supported, despite being strongly recommended against:</p> <ol> <li> <p>You want to avoid any dependencies in your mod for personal or philosophical reasons. If you are offended by the idea of depending on GMCM, SpaceCore, etc., then you might not want to depend on StardewUI either.</p> </li> <li> <p>You don't plan on maintaining your mod long-term, and want to be immune from any future changes to StardewUI; i.e. you're willing to trade off the benefits of any new features, bug fixes, performance improvements, etc. for the guarantee of not being broken by outside changes.</p> </li> </ol> <p>While your users would undoubtedly prefer that you maintain your mods, and most users really do not mind adding one more shared dependency to their mod list, we recognize that this may not suit all authors, which is why the shared project is only \"soft-deprecated\" and not officially obsolete or removed.</p>"},{"location":"library/custom-views/","title":"Custom Views","text":"<p>If the standard views aren't enough to implement a particular design, StardewUI supports the creation of custom views.</p> <p>There are several types of custom views, each best suited for a different scenario.</p>"},{"location":"library/custom-views/#reusable-widgets","title":"Reusable Widgets","text":"<p>Strategy: <code>ComponentView</code> </p> <p>A custom view can simply be a collection of standard views (or a combination of standard views and other custom views) that are designed to work together, and in a particular way. Many of the standard views follow this pattern themselves; for example, a Checkbox is nothing more than a Lane with an Image and Label, with some properties and event handlers to tie them together.</p> <p>It is usually possible to do this using StarML alone, via the use of included views. However, this may start to feel awkward or clumsy if internal UI/layout state finds its way into the data model; or the view may require the use of overlays or animation which are cumbersome or impractical to control via the data binding system. For those cases, the solution tends to be a small amount of code that performs the same basic function as a StarML-based view, but without the requirement of a backing data model and with more flexibility to interact directly with the view properties and sometimes with the outside environment.</p> <p>These types of widgets are referred to as component views and the process for implementing one is simple and straightforward:</p> <ol> <li>Create a class inheriting from <code>ComponentView</code> or <code>ComponentView&lt;T&gt;</code>, where <code>T</code> is the type of the \"root\" view\u2014generally one of the standard layout views.</li> <li>Implement the <code>CreateView</code> method by creating the entire view tree. If some aspects of the tree are dynamic\u2014for example, the aforementioned <code>Checkbox</code> may or may not include a text label\u2014then create the \"initial\" or \"default\" state of the tree here.</li> <li>If any views within the view tree are meant to be controlled by properties, or otherwise change in response to user input or other view state, then add fields for those views and assign their values in <code>CreateView</code><sup>1</sup>.</li> <li>Add properties, event handlers, and any other logic required to coordinate behavior and state between different views in the tree.</li> <li>For any new properties, ensure that property notifications are sent, i.e. by calling <code>OnPropertyChanged</code> when the value changes. Also forward the <code>PropertyChanged</code> event and any other important events from the root view and/or descendants, if they are meant to be handled from a StarML template.</li> </ol> Note on <code>DecoratorView</code> <p>For rare scenarios where the entire inner view needs to change, there are also decorator views. These have the same concept, but the <code>View</code> has to be set directly, which means it is also nullable; inheriting from <code>DecoratorView&lt;T&gt;</code> is therefore more difficult and error prone than <code>ComponentView&lt;T&gt;</code> because a decorator's code has to be null-safe everywhere. Component views are inherently null-safe because the view tree is created on construction.</p> <p>The only built-in view that uses <code>DecoratorView</code> directly is the internal <code>DynamicDropDownList</code> used to automagically detect data binding types and recreate the internal dropdown via reflection. Unless you are dealing with a similarly specialized scenario, prioritize <code>ComponentView</code> first and only use <code>DecoratorView</code> when necessary.</p> <p>The relative simplicity of the implementation does not mean it can only be used for views with simple behavior; the Drop-Down List and Slider are fairly complex widgets, but both are based on <code>ComponentView</code>.</p> <p>Rather than provide contrived examples here, the best reference for implementing component views is the StardewUI source itself. All of the following widgets are component views:</p> <ul> <li>Buttons</li> <li>Checkboxes</li> <li>Drop-down lists</li> <li>Expanders</li> <li>Sliders</li> </ul> <p>There is no difference between a <code>ComponentView</code>-based widget in StardewUI's core library and one implemented in a mod or addon; standard views do not receive any special treatment.</p>"},{"location":"library/custom-views/#custom-layout-or-drawing","title":"Custom Layout or Drawing","text":"<p>Strategy: <code>View</code> </p> <p>Views that are not component views will most often inherit from the <code>View</code> base class, which is designed so that it is relatively easy to create a very simple view, with many methods to situationally override as the scenario becomes more complex.</p> <p>The main reason to use a <code>View</code> subclass instead of <code>ComponentView</code> is when it needs direct control over the layout or drawing phases. While the standard layouts should cover the majority of possible UI designs, it is always possible to run into situations that don't fit the mold, e.g. if an equivalent to WPF's WrapPanel were required. Similarly, if you wanted to draw using a custom effect (shader) instead of basic text and sprites, or need to control clipping (as in the Marquee), or are desaturating and re-tinting some other view, then <code>ComponentView</code> doesn't offer enough flexibility and you will need to inherit from <code>View</code> instead.</p> <p>As the heading suggests, there are only two required method implementations for <code>View</code>:</p> <ul> <li><code>OnMeasure(Vector2)</code>, the view's contribution to the combined measure and layout pass;</li> <li><code>OnDrawContent(ISpriteBatch)</code>, which is where the actual rendering occurs.</li> </ul> <p>The Spacer source demonstrates the bare minimum, although the spacer does not actually do anything other than occupy space, so a custom <code>View</code> will be more involved. For a more comprehensive example, see the source for the test addon's Carousel view, also shown in the Carousel example.</p> <p>The main thing that <code>OnMeasure</code> must always do before returning is set the view's <code>ContentSize</code>, as this and only this is what layout views use to arrange content. If <code>ContentSize</code> is not set, the view will be \"laid out\" with a size of zero, and anything it tries to draw may overlap with or be overwritten by other views.</p> <p>Almost every <code>OnMeasure</code> method should start with the line:</p> <pre><code>var limits = Layout.GetLimits(availableSize);\n</code></pre> <p>This translates the view's LayoutParameters into an actual pixel size representing the maximum width and height available for use by that view. The <code>availableSize</code> argument is what the parent is willing to give; the <code>limits</code> derived from <code>GetLimits</code> are what the view is willing to take.</p> <p>Similarly, <code>ContentSize</code> should normally be set using some variant of:</p> <pre><code>ContentSize = Layout.Resolve(availableSize, () =&gt; childrenSize);\n</code></pre> <p>Where <code>maxChildSize</code> is the accumulated size of all child views after layout has finished on them. Using <code>Resolve</code> in this context ensures that the length type of each dimension and other constraints such as min/max width and height are all respected.</p> <p>Aside from setting <code>ContentSize</code>, <code>OnMeasure</code> is also the place to perform any updates in response to the view's size or content changing; for example, performing layout on a NineSlice, breaking/wrapping text into lines, etc.</p>"},{"location":"library/custom-views/#view-performance","title":"View Performance","text":"<p>As a <code>View</code> implementer, it becomes your responsibility to ensure that the layout and rendering methods are efficient and not janky. To start with, avoid doing anything complex in the draw method. Drawing should, in most cases, require no calculations, no <code>new</code> objects except for scoped state (e.g. saved transforms and clip states from <code>ISpriteBatch</code>), and definitely no writing any mutable state, whether internal or external.</p> <p>Expensive operations should happen during layout instead. Layout is cached, while drawing is not; <code>OnMeasure</code> only runs when something has actually changed that requires a new layout, whereas <code>OnDrawContent</code> runs every single frame during which the UI is on screen.</p> <p>To ensure that layout is, in fact, correctly cached, the majority of views should implement two other methods:</p> <ul> <li><code>IsContentDirty()</code>, which queries whether any state has changed and therefore whether the view actually needs layout this frame;</li> <li><code>ResetDirty()</code>, which runs at the end of every successful layout and ensures that <code>IsContentDirty()</code> returns <code>false</code> on the next frame, unless something else changes between the reset and the next frame.</li> </ul> <p>Some useful tools are provided to help facilitate dirty checks, mainly <code>DirtyTracker&lt;T&gt;</code> for single properties and <code>DirtyTrackingList&lt;T&gt;</code> for collections, the latter being especially useful for tracking collections of child views. These are ubiquitous throughout StardewUI's own library code and are designed to minimize the amount of boilerplate needed.</p> <p>A typical implementation requires only a <code>readonly</code> field declaration, a property wrapper, and lines in the dirty-check and reset methods.</p> <p>Example</p> <pre><code>public class MyView : View\n{\n    public string Text\n    {\n        get =&gt; text.Value;\n        set\n        {\n            if (text.SetIfChanged(value))\n            {\n                OnPropertyChanged(nameof(Text));\n            }\n        }\n    }\n\n    private readonly DirtyTracker&lt;string&gt; text = new(\"\");\n\n    protected override bool IsContentDirty()\n    {\n        return text.IsDirty;\n    }\n\n    protected override void OnDrawContent(ISpriteBatch b) { ... }\n\n    protected override void OnMeasure(Vector2 availableSize) { ... }\n\n    protected override void ResetDirty()\n    {\n        text.ResetDirty();\n    }\n}\n</code></pre> <p>Always make sure that dirty checks are properly paired with dirty resets, otherwise the view may never reach a clean state, forcing layout to happen for the entire view tree on every frame.</p>"},{"location":"library/custom-views/#view-children","title":"View Children","text":"<p>When subclassing <code>View</code> for the purposes of layout, as opposed to custom drawing, additional considerations are required for managing child views. The more complex the layout, the more (potentially) involved the process will be.</p> <p>Roughly, the steps for implementing a layout view are:</p> <ol> <li>Decide whether the view can have only one child, like a Frame, or multiple children, such as a Panel. By convention, single-child views tend to refer to <code>Content</code> instead of <code>Children</code>, but this makes no difference to the layout system or to the StarML renderer.</li> <li>Add a dirty-tracking field; for a single child, a <code>DirtyTracker&lt;IView&gt;</code> and for a list, use <code>DirtyTrackingList&lt;IView&gt;</code>.</li> <li>Add an accessor property, dirty-check and dirty-reset as described in View Performance above. When implementing dirty checking, be sure to check both the tracker itself and the tracked view(s). For example, the logic for a list of children is: <code>children.IsDirty || children.Any(child =&gt; child.IsDirty())</code></li> <li>Perform child layout in <code>OnMeasure</code>. This depends on the specifics of your layout, so there is no standard set of sub-steps to follow, but the Grid and Panel implementations are good places to start. It is usually a good idea to store the results in a <code>List&lt;ViewChild&gt;</code> or other collection of <code>ViewChild</code>, as other methods will need to retrieve that specific type.</li> <li>Implement (override) <code>GetLocalChildren</code> and <code>FindFocusableDescendant</code>. The former is required to propagate events and updates, and the latter is required for focus searches. You can also override <code>GetLocalChildrenAt</code> if the view might have a very large number of children and a more optimal implementation than the default linear search is available, but this is optional.</li> </ol> <p>You'll notice that all of the overridable <code>View</code> methods use local coordinates, so they do not need to be concerned about screen positions or their overall place in the hierarchy. Except for certain edge cases such as negative margins, a view's boundaries are always from <code>(0, 0)</code> to its <code>OuterSize</code> (which is <code>ContentSize</code> plus padding, border and margins).</p>"},{"location":"library/custom-views/#focus-search","title":"Focus Search","text":"<p>The most difficult aspect of implementing any custom layout is generally going to be the focus search behavior, i.e. the <code>FindFocusableDescendant</code> method.</p> <p>Focus search is analogous to HTML tab index, Qt tab order and so on, with one crucial difference: Stardew Valley does not have true explicit input/accessibility focus. Instead, the \"focused\" element is whichever focusable control is underneath the mouse/gamepad cursor at that exact moment. Focus search is therefore defined as determining the \"best\" (generally what users would perceive as nearest) focusable view in a given direction.</p> <p>There are no specific instructions because, like the <code>OnMeasure</code> implementation, it is completely dependent on the specific layout; a layout that arranges children in a horizontal line is going to have a very different implementation from one that arranges them in a grid, or in the same overlapping position. However, the following tips should prove helpful in getting to a correct implementation:</p> <ul> <li>All focus searches are recursive; if a direct child is not focusable, one of its own children/descendants may be. Therefore, when \"considering\" a child as a candidate for focus search, layout views must recursively run the focus search on that child.</li> <li>As a corollary to the above, finding an adjacent child that fails focus search (returns <code>null</code> from <code>FocusSearch</code>) does not mean that the search should stop; it means that the next child in the same direction must be queried, and so on until a match is found or there are no more views left.</li> <li>Focus search is not constrained to the container; it is a normal and expected part of the flow for focus to move from the last child of one layout view to the first child of another layout view. Do not expect the <code>contentPosition</code> to always be within the view's boundary, and do not skip focus searches when this occurs. Instead, try to return whichever focusable view the cursor might land on (or near) if it moved continuously from its current position\u2014which may be negative or out of bounds\u2014in the specified <code>direction</code>.</li> <li>Use the <code>ViewChild.IsInDirection</code> helper to help with matching instead of writing <code>switch</code> statements/expressions.</li> <li>If the <code>contentPosition</code> is completely out of bounds on both axes, or if movement in the specified <code>direction</code> will never intersect with any point within the layout boundaries, then return <code>null</code>.</li> </ul> <p>D-pad navigation in a non-uniform layout can often be ambiguous and there is not necessarily a single \"right answer\" for any given focus search. Instead, try to ensure that every focusable control on screen is reachable somehow, even if the path to get there seems slightly unintuitive.</p>"},{"location":"library/custom-views/#general-interactivity","title":"General Interactivity","text":"<p>The <code>View</code> base class already provides everything required to emit events such as <code>Click</code>, <code>PointerEnter</code> and <code>PointerLeave</code> with no additional code. However, it may be the case that the custom view is expected to have its own consistent behavior, independent of whatever event handlers are attached. For example, a Text Input must handle clicks in order to move the caret; it should not rely on the caller setting up an event handler to do this.</p> <p>These situations are actually rare. <code>TextInput</code> handles its own click events and Scrollable Views handle mouse wheel events; aside from these two instances, there are no built-in views that override the default event emitters, but it can be done when needed.</p> <p>The overridable event-related methods are:</p> <ul> <li><code>OnButtonPress</code></li> <li><code>OnClick</code></li> <li><code>OnDrag</code></li> <li><code>OnDrop</code></li> <li><code>OnPointerMove</code></li> <li><code>OnWheel</code></li> </ul> <p>Other public events, such as <code>LeftClick</code> and <code>DragEnd</code>, are derived from the implementations of the above methods.</p> <p>Warning</p> <p>When overriding the above event-raising methods, remember to invoke the base method, e.g. <code>base.OnClick(e)</code>, unless you actually intend to prevent regular event handlers from detecting the same event. Suppressing overrides may also want to set the <code>Handled</code> property in order to suppress the event not only from their own children, but also their ancestors and siblings.</p>"},{"location":"library/custom-views/#starting-from-scratch","title":"Starting from Scratch","text":"<p>Strategy: <code>IView</code> </p> <p>Danger</p> <p>Advanced users only. You are now heading into the untamed wilderness without a map. There are no guards, no guardrails, nor even many useful signposts. You should only be attempting this if you have already attempted all the other methods and found it impossible to achieve what you want.</p> <p>Implementing IView directly is essentially opting out of the entire built-in layout, drawing and event system and deciding to make your own. StardewUI allows this\u2014all view trees are based on the <code>IView</code> interface and not the <code>View</code> base class\u2014however, it requires significantly more code to achieve, and significantly more care and testing to get right.</p> <p>Most <code>IView</code> implementations that are not based on <code>View</code> are really just \"pass-through\" or \"wrapper\" views that take some inner <code>IView</code> and forward most of the properties and events; the most prominent of these is ComponentView, which many widgets and the Framework's internal <code>DocumentView</code> are based on. Even then, the implementation is fairly complex; refer to the DecoratorView source as an example of what is involved.</p> <p>From-scratch implementations have to take on all the responsibilities of a <code>View</code> and also:</p> <ul> <li>Translating coordinates from screen-space or parent-space to local space;</li> <li>Implementing their own dirty-checking cycle, since there is no automatically-called <code>Reset</code> method;</li> <li>Handling and dispatching game update ticks, as well as all the events described in general interactivity;</li> <li>Providing their own margins, padding, or any other non-content dimensions that can affect the difference between the different bounds and size properties (e.g. ActualBounds vs. ContentBounds), and defining their own <code>OuterSize</code> implementation;</li> <li>Implementing accessors for all the basic view attributes: focusability, visibility, tags, tooltips, and so on.</li> </ul> <p>A full guide to implementing <code>IView</code> would be out of scope for this page. Consider it the \"I Know What I'm Doing Mode\" of StardewUI and only reach for this option if you are certain that you know what you're doing.</p> <ol> <li> <p>For projects enforcing nullable reference types, initialize the field to <code>null!</code> in order to prevent the error/warning; since <code>ComponentView</code> invokes <code>CreateView</code> from its constructor, it is virtually impossible for them to be <code>null</code> when referenced from any user code.\u00a0\u21a9</p> </li> </ol>"},{"location":"library/overlays/","title":"Overlays","text":"<p>An overlay is some piece of UI\u2014most often a component view\u2014that renders on top of other UI.</p> <p>What makes overlays distinct from overlapping layout views like panels is that overlays \"break out\" of the layout of their parent ViewMenu and any views inside it. They can choose to display adjacent to some other view, such as the item list in an open drop-down list, or act like a full-screen submenu, such as the overlay used for key bindings.</p> <p>While this is achievable to some degree with <code>IClickableMenu.SetChildMenu</code> in vanilla Stardew Valley code, UI overlays have a number of advantages:</p> <ul> <li>They are much more lightweight in terms of both implementation and performance, requiring nothing more than an <code>IView</code>, and hooking into the event loop of whichever <code>ViewMenu&lt;T&gt;</code> spawned it.</li> <li>Cursor focus is automatically moved inside an overlay when it opens, and constrained to that overlay until it is closed.</li> <li>Mouse users can click anywhere outside an active overlay to dismiss it, much like any modern modal dialog. (The menu key, by default Esc or E, also still works here.)</li> <li>Menus remember the focus at the instant an overlay was opened, and can return the focus back to where it was when the overlay is closed.</li> <li>Overlays form a back-to-front stack, and any overlay can be removed even if it is not the topmost/innermost at the time.</li> </ul> <p>Any view can open an overlay, but the most common reason to use one is to provide a space-conserving \"read-only\" view that can be clicked on to enter a modal \"edit mode\", as is done for drop-downs and keybind editors. When done carefully, it is possible to create flows that are impossible with normal layout, but still appear completely ordinary to users who may not even realize that an overlay is open.</p> <p>Anything that implements <code>IOverlay</code> can be an overlay, but most implementations will either use a floating overlay or a full-screen overlay.</p>"},{"location":"library/overlays/#floating-overlays","title":"Floating Overlays","text":"<p>An overlay with no background or dimming can be called a \"floating\" overlay, being literally meant to float on top of some other UI. It can be positioned anywhere on the screen, but because this type of overlay normally exists to provide a sense of continuity with the UI that triggered it, will most often be positioned relative to some other view.</p> <p>The Overlay class can turn any existing <code>View</code> into a floating overlay, and has several properties to help with the aforementioned alignment. Consider the case of a drop-down menu, presented as a mockup here:</p> <p></p> <p>The \"overlay\" here is the box with gray background; it is not part of the normal layout of a drop-down list, which simply shows the current name and dropdown arrow. We can note a few things about its size and position:</p> <ul> <li>Its size is independent from the main dropdown, and its actual width is much larger due to having an unusually long item.</li> <li>The overlay's right edge is aligned with the dropdown's right edge; its left edge is allowed to vary according to the list's width.</li> <li>The overlay's top edge is aligned with the dropdown's bottom edge; i.e. it displays directly below the dropdown control.</li> </ul> <p>The four <code>Alignment</code> properties are all necessary to fully specify this:</p> <ul> <li><code>HorizontalAlignment</code> and <code>HorizontalParentAlignment</code> are both <code>End</code>: align the overlay's right/end edge to the owner's right/end edge.</li> <li><code>VerticalAlignment</code> is <code>Start</code> and <code>VerticalParentAlignment</code> is <code>End</code>: align the overlay's top/start edge to the owner's bottom/end edge.</li> </ul> <p>The code for this is similar to:</p> <pre><code>Overlay.Push(\n    new Overlay(\n        overlayView,\n        this, // Parent view; can specify \"this\" if triggered from a View.\n        horizontalAlignment: Alignment.End,\n        horizontalParentAlignment: Alignment.End,\n        verticalAlignment: Alignment.Start,\n        verticalParentAlignment: Alignment.End\n    ));\n</code></pre> <p>If no <code>parent</code> is specified, then all alignments are interpreted relative to the screen; absolute positioning can be achieved by omitting the <code>parent</code> or setting it to <code>null</code>, and then setting ParentOffset to the desired top-left coordinate.</p>"},{"location":"library/overlays/#full-screen-overlays","title":"Full-Screen Overlays","text":"<p>If an overlay should behave like a dialog box\u2014sometimes referred to as a modal\u2014then there is a FullScreenOverlay class to inherit from which makes this easier to achieve than the equivalent using a regular <code>Overlay</code>:</p> <ul> <li>Similar to a <code>ComponentView</code>, it owns its own view; instead of passing one into the constructor, as is the case with <code>Overlay</code>, you implement the <code>CreateView</code> method, as you would for <code>ComponentView</code>.</li> <li>It automatically dims the entire screen underneath the overlay; the amount can be adjusted via the <code>DimmingAmount</code> property.</li> <li>Unlike <code>Overlay</code>, it has an overridable <code>Update</code> method in case it needs to do some extra work every frame.</li> <li>Although the alignment properties exist, because they are part of the <code>IView</code> interface, they normally don't need to be set, since the default alignment is to center the content and default behavior is to cover the whole screen.</li> </ul> <p>The difference between <code>Overlay</code> and <code>FullScreenOverlay</code> is not as stark as the difference between component views and custom layouts; <code>FullScreenOverlay</code> is simply a convenience class and can be swapped out for a more general <code>Overlay</code> at any point.</p> <p>The keybind editor is an example of using a full-screen overlay; see the source of KeybindOverlay for an example implementation.</p>"},{"location":"library/overlays/#displaying-and-removing-overlays","title":"Displaying and Removing Overlays","text":"<p>Overlays form a visual stack; not a literal <code>Stack&lt;T&gt;</code>, but a back-to-front order that is used for focus capture, event propagation, z-ordering/dimming, etc. The \"front\" overlay receives all input, but all visible overlays are shown and continue to receive updates.</p> <p>The most common operations will be Pushing an overlay to the front:</p> <pre><code>Overlay.Push(new MyOverlay(...));\n</code></pre> <p>and Removing an overlay from wherever it happens to be:</p> <pre><code>Overlay.Remove(myOverlay);\n</code></pre> <p>There is also a <code>Pop</code> method, as the stack-like semantic implies, which removes the overlay currently at the front. However, this method is mainly used by the framework itself, e.g. to close an overlay when one of the cancel buttons is pressed or when the mouse is clicked outside the overlay. If you need to close your own overlay, then it is better to <code>Remove</code> it explicitly, in case it is not actually at the top of the stack.</p>"},{"location":"library/overlays/#overlay-context","title":"Overlay Context","text":"<p>The static <code>Push</code>, <code>Pop</code> and <code>Remove</code> methods of the <code>Overlay</code> class are all wrappers around <code>OverlayContext</code>. Context is actually instanced per <code>ViewMenu</code>, but since all UI is single-threaded, StardewUI applies some magic behind the scenes so that <code>OverlayContext.Current</code> is always pointing to the correct context from whichever call site uses it, similar to the way <code>Game1</code> always reflects the current player/viewport in split-screen mode.</p> <p>This type is public, so if for some reason you need to look at the entire stack, e.g. to determine if your overlay is at the front, then <code>OverlayContext</code> can provide it; simply obtain the context via <code>OverlayContext.Current</code>, and inspect its overlays in either back-to-front or front-to-back order.</p> <p>Directly accessing or manipulating the context is rare, so only use it when there is a specific reason, e.g. if you are writing framework-level code.</p>"},{"location":"library/standard-views/","title":"Standard Views","text":""},{"location":"library/standard-views/#layouts","title":"Layouts","text":""},{"location":"library/standard-views/#frame","title":"Frame","text":"<p>Applies decorations and alignment to an inner view.</p> <p>Frames are very similar to panels, but support customizable backgrounds, borders and shadows, and only allow a single content view. Use them for menu borders, group boxes, item placeholders, and anywhere else that content needs to stand out or be visually divided from other content.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;frame layout=\"400px 200px\"\n       background={@Mods/StardewUI/Sprites/MenuBackground}\n       border={@Mods/StardewUI/Sprites/MenuBorder}\n       border-thickness=\"36, 36, 40, 36\"\n       horizontal-content-alignment=\"middle\"\n       vertical-content-alignment=\"middle\"\n       padding=\"32,16,32,24\"&gt;\n    &lt;label font=\"dialogue\" text=\"Frame Content\" /&gt;\n&lt;/frame&gt;\n</code></pre> <pre><code>void ShowFrameExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/FrameTestView\",\n        null);\n}\n</code></pre>"},{"location":"library/standard-views/#grid","title":"Grid","text":"<p>Lays out items as a uniform grid (AKA table), where \"uniform\" means that each \"cell\" has the same size. Can be oriented either horizontally (ordered left-to-right, then wrapping to the next row) or vertically (ordered top-to-bottom, then wrapping to the next column).</p> <p>Choose from either type of <code>item-layout</code>:</p> <ul> <li>Fixed length (<code>length: nn</code>), where the width (or height, in vertical orientation) is constant and the grid wraps whenever it reaches the end of the row; or</li> <li>Fixed count (<code>count: nn</code>), where the number of items per row (or column, in vertical orientation) is constant and the grid automatically adjusts their size to fit.</li> </ul> <p>Note</p> <p>Grids must have a size independent of their content in the direction of their orientation; i.e. a grid with horizontal orientation must have a width other than <code>content</code>, and a grid with vertical orientation must have a height other than <code>content</code>.</p> <p>While it might seem logical to combine <code>item-layout=\"count: n\"</code> with a fixed-size child layout such as <code>&lt;image layout=\"64px 64px\" /&gt;</code> in order to create a dynamically-sized grid, this isn't how it works in practice; the size of a grid cell can only be determined based on the grid's own properties, not the content inside it. If you expect to have a variable number of rows/columns and a variable width/height, use nested Lanes instead.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;grid layout=\"400px 300px\"\n      item-layout=\"length: 64\"\n      item-spacing=\"16,16\"\n      horizontal-item-alignment=\"middle\"&gt;\n    &lt;image layout=\"stretch content\" *repeat={Items} sprite={this} /&gt;\n&lt;/grid&gt;\n</code></pre> <pre><code>void ShowGridExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/GridTestView\",\n        EdiblesViewModel.LoadFromGameData());\n}\n</code></pre> <p>Note: For the source of <code>EdiblesViewModel</code>, see the Scrolling Item Grid example.</p>"},{"location":"library/standard-views/#lane","title":"Lane","text":"<p>Lays out items in a straight line, either horizontally or vertically.</p> <p>Can align items to any edge, and supports dynamically sized items; e.g. if an item with <code>stretch</code> length is placed in a lane with other, fixed-length items, then the <code>stretch</code> item will resize to whatever width is left over.</p> <p>Lanes are the bread and butter of content layout; almost any UI design can be represented as some combination of horizontal and vertical lanes.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;lane orientation=\"vertical\"&gt;\n    &lt;label margin=\"0, 0, 0, 4\" font=\"dialogue\" text=\"Choose Item\" /&gt;\n    &lt;label *repeat={Items} margin=\"16, 4\" text={Text} /&gt;\n&lt;/lane&gt;\n</code></pre> <pre><code>partial class LaneTestItem(string name) : INotifyPropertyChanged\n{\n    public string Text =&gt; $\"{IsSelected ? '&gt;' : '*'} {name}\";\n\n    [Notify] private bool isSelected;\n}\n\nclass LaneTestViewModel()\n{\n    public List&lt;LaneTestItem&gt; Items { get; set; } = [\n        new(\"Item1\") { IsSelected = true },\n        new(\"Item2\"),\n        new(\"Item3\"),\n        new(\"Item4\"),\n    ];\n}\n\nvoid ShowLaneExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/LaneTestView\",\n        new LaneTestViewModel());\n}\n</code></pre>"},{"location":"library/standard-views/#panel","title":"Panel","text":"<p>Lays out and draws multiple items in the same space, in a back-to-front order.</p> <p>Panels are similar to frames, but instead of decoration, their main purpose is intentional overlap\u2014for example, drawing some text or a small icon on top of another image.</p> <p>All children are given the same bounding rectangle for layout, and can be \"positioned\" using alignment and margins. By default, the order that the children are added is the order in which they will be drawn, i.e. the last element will be drawn over top of any previous elements, but this can be overridden by adding a <code>z-index</code> attribute to one or more elements.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;panel layout=\"64px\" vertical-content-alignment=\"end\"&gt;\n    &lt;image layout=\"stretch\" margin=\"4\" sprite={ItemData} /&gt;\n    &lt;lane vertical-content-alignment=\"end\"&gt;\n        &lt;image layout=\"24px\" sprite={Quality} /&gt;\n        &lt;spacer layout=\"stretch 0px\" /&gt;\n        &lt;digits number={Count} /&gt;\n    &lt;/lane&gt;\n&lt;/panel&gt;\n</code></pre> <p>Note</p> <p>Binding the image's <code>sprite</code> to an <code>ItemQuality</code> enum requires a custom converter.</p> <pre><code>enum ItemQuality { Silver, Gold, Iridium }\n\nclass PanelTestViewModel\n{\n    public ParsedItemData ItemData { get; set; }\n    public ItemQuality Quality { get; set; }\n    public int Count { get; set; }\n}\n\nvoid ShowPanelExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/PanelTestView\",\n        new PanelTestViewModel()\n        {\n            ItemData = ItemRegistry.GetData(\"(O)266\"), // Pizza\n            Quality = ItemQuality.Iridium,\n            Count = 39\n        });\n}\n</code></pre>"},{"location":"library/standard-views/#scrollable-view","title":"Scrollable View","text":"<p>A rectangular area that can be scrolled to show off-screen content. Combines both the scrollable container, which holds the element's children, and the scrollbar itself, which is automatically synchronized with the content and shown/hidden when necessary.</p> <p>Scrollable views can be used to hold simple lists, grids, or an entire complex UI with many different widgets such as a configuration menu. All scrolling behavior such as the mouse wheel and gamepad's right stick movement are built in, and the container will scroll automatically when elements inside the container are <code>focusable</code>.</p> <p>Tip</p> <p>To improve discoverability, set a <code>peeking</code> value large enough so that the user can always see whether there is more content to scroll through.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;scrollable layout=\"200px 300px\" peeking=\"64\"&gt;\n    &lt;lane orientation=\"vertical\"&gt;\n        &lt;label *repeat={Items} text={this} focusable=\"true\" /&gt;\n    &lt;/lane&gt;\n&lt;/scrollable&gt;\n</code></pre> <pre><code>class ScrollableTestViewModel(int count)\n{\n    public IReadOnlyList&lt;string&gt; Items { get; } =\n        Enumerable.Range(0, count).Select(i =&gt; $\"Item {i + 1}\").ToArray();\n}\n\nvoid ShowScrollableExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/ScrollableTestView\",\n        new ScrollableTestViewModel(100));\n}\n</code></pre>"},{"location":"library/standard-views/#content","title":"Content","text":""},{"location":"library/standard-views/#banner","title":"Banner","text":"<p>Displays banner-style text.</p> <p>This is most often used for \"scroll text\" as shown in the example below. However, the background is optional, and customizable; the real function of this widget is to draw text with the special \"title font\", which is not available as a normal SpriteFont and therefore cannot be used with labels.</p> <p>In addition to being used with backgrounds as menu titles, banners are also commonly used without backgrounds as section headings in longer vertical menus.</p> DemoUsage (StarML) <p></p> <pre><code>&lt;banner background={@Mods/StardewUI/Sprites/BannerBackground}\n        background-border-thickness=\"48,0\"\n        padding=\"12\"\n        text=\"Important Announcement\" /&gt;\n</code></pre>"},{"location":"library/standard-views/#image","title":"Image","text":"<p>Draws a Sprite. Functionally very similar to interacting with the SpriteBatch, but significantly more streamlined for use in UI layouts:</p> <ul> <li>Built-in 9-slice scaling; simply set the edge lengths on the input sprite.</li> <li>Has multiple fit options; choose whether the image should be scaled uniformly to fit inside the layout area (letterboxing or pillarboxing), covering the layout area (clipping) or stretched non-uniformly across the area.</li> <li>Shadows, tint, alignment, uniform rotation and other quality-of-life features.</li> </ul> <p>Static images are usually bound to some sprite asset, as shown in the example below. For dynamic images, several common implicit conversions are available.</p> DemoUsage (StarML) <p></p> <pre><code>&lt;image layout=\"stretch content\"\n       sprite={@Mods/focustense.StardewUITest/Sprites/Cursors:TrainFront} /&gt;\n</code></pre>"},{"location":"library/standard-views/#label","title":"Label","text":"<p>Draws text as a single line or paragraph.</p> <p>Existing newlines are preserved, and all measurements (e.g. breaking) are handled as part of the layout; the text can be limited in length using <code>max-lines</code>, or can be given unlimited length and placed inside a <code>content</code>-sized container or <code>scrollable</code>.</p> <p>The <code>font</code> will accept any <code>SpriteFont</code> if you have a custom font, otherwise the built-in game values are <code>small</code> (default), <code>dialogue</code> (large) and <code>tiny</code> (not actually tiny, but the game calls it <code>tinyFont</code>). MonoGame does not support font sizes per font, but this can be simulated via <code>scale</code>, which also applies to layout\u2014i.e. will affect how much space is occupied by the label and/or how many lines can be displayed.</p> <p>Aside from banners, the <code>label</code> element should be all that the majority of UIs ever need for text.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;label max-lines=\"6\" text={Text} /&gt;\n</code></pre> <pre><code>class LabelTestViewModel\n{\n    public string Text { get; set; }\n}\n\nvoid ShowLabelExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/LabelTestView\",\n        new LabelTestViewModel()\n        {\n            Text = \"Out in the kitchen. That skillet good and greasy John Henry \"\n                 + \"has been the ruin of me, the buggies and the hacks all \"\n                 + \"formed in line steel driving crew weevil cold wind blows \"\n                 + \"constant sorrow, turkey in the straw, five dollars one arm \"\n                 + \"round my whiskey keg sun would never shine when I was a \"\n                 + \"little boy aces backed with eights, wheel hoss baby on her \"\n                 + \"knee handsome stranger Jack-a-Diamonds out in the kitchen.\"\n        });\n}\n</code></pre> <p>(Filler text generated from Hillbilly Ipsum)</p>"},{"location":"library/standard-views/#spacer","title":"Spacer","text":"<p>Adds space between other elements. Has no visual appearance on its own.</p> <p>The most common usage of this is to align elements to opposite edges of a layout view such as a Lane. For example, a title-bar-like control normally has title text and optional icon on the left side, and actions on the right side.</p> <p>Alignment cannot be specified on individual elements, since only layout views control layout. One way to handle separate alignments would be to use a panel with additional panels, lanes, etc. as children, each aligning to a different edge. However, for cases where overlap is not required or expected, it is simpler and quicker to add a spacer with one of its dimensions set to <code>stretch</code>.</p> DemoUsage (StarML) <p></p> <pre><code>&lt;lane layout=\"300px content\"&gt;\n    &lt;label text=\"Hello\" /&gt;\n    &lt;spacer layout=\"stretch 0px\" /&gt;\n    &lt;label text=\"World\" /&gt;\n&lt;/lane&gt;\n</code></pre> <p>Spacers can also be fixed-width and/or fixed-height; there is no requirement for <code>stretch</code>, it is only the most common usage.</p>"},{"location":"library/standard-views/#tiny-number-label","title":"Tiny Number Label","text":"<p>Called <code>&lt;digits&gt;</code> in StarML for conciseness, but originally named after the utility function <code>drawTinyDigits</code> in Stardew Valley. Displays numbers, and only numbers, using sprites that are much smaller than built-in label fonts will generally allow. Typically shown on top of an item to indicate the quantity or stack size.</p> DemoUsage (StarML) <p></p> <p>(image enlarged for clarity)</p> <pre><code>&lt;digits number=\"529\" /&gt;\n</code></pre>"},{"location":"library/standard-views/#interactivity","title":"Interactivity","text":""},{"location":"library/standard-views/#button","title":"Button","text":"<p>Your basic clickable button. Supports an optional alternate hover background and shadow, although the vanilla game generally does not do this for its own buttons.</p> <p>Most buttons are text buttons, and can be set up easily with just the <code>text</code> attribute. However, you can also customize what is inside the button, similar to a frame, by removing the <code>text</code> attribute and adding a child element instead. Both examples are shown below.</p> DemoUsage (StarML) <p> </p> <p>Text Only</p> <pre><code>&lt;button text=\"Click Me\" /&gt;\n</code></pre> <p>Custom</p> <pre><code>&lt;button&gt;\n    &lt;lane padding=\"8\" vertical-content-alignment=\"middle\"&gt;\n        &lt;image layout=\"content stretch\"\n               sprite={@Mods/focustense.StardewUITest/Sprites/Cursors:AttackIcon} /&gt;\n        &lt;label margin=\"16, 0, 0, 0\" text=\"Attack Buffs\" /&gt;\n    &lt;/lane&gt;\n&lt;/button&gt;\n</code></pre>"},{"location":"library/standard-views/#checkbox","title":"Checkbox","text":"<p>An image that can be toggled between two states (generally, on or off) by clicking on it. The image is customizable; default sprites are used in the example below.</p> <p>Includes a <code>label-text</code> property that adds text next to the image; importantly, the text can also be clicked to toggle the option, which improves usability by providing a much larger target in which the click can land.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;checkbox label-text=\"Enable killer pumpkins\"\n          is-checked={&lt;&gt;EnableKillerPumpkins} /&gt;\n</code></pre> <pre><code>partial class CheckboxTestViewModel : INotifyPropertyChanged\n{\n    [Notify] private bool enableKillerPumpkins;\n}\n\nvoid ShowCheckboxExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/CheckboxTestView\",\n        new CheckboxTestViewModel());\n}\n</code></pre> <p>Tip</p> <p>Don't forget to use a two-way binding or output binding in order to receive the value of <code>is-checked</code> in your model; this is much simpler and more efficient than using the <code>click</code> event.</p>"},{"location":"library/standard-views/#drop-down-list","title":"Drop-Down List","text":"<p>Provides a drop-down (AKA pull-down) menu to select from a list of options.</p> <p>These are better-behaved than the vanilla drop-down lists in Stardew Valley; they follow the standard drop-down design of click to open, and click again to select/close, and gamepad cursors automatically move to the selected option when the list is opened and back to the toggle button when the list is closed.</p> <p>It is usually a good idea to set <code>option-min-width</code> so that the selection box does not change size depending on the length of the selected item.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;dropdown options={Weapons}\n          option-format={Format}\n          option-min-width=\"200\"\n          selected-option={&lt;&gt;SelectedWeapon} /&gt;\n</code></pre> <pre><code>enum WeaponType { Sword, Club, Dagger, Slingshot, Special }\n\npartial class DropDownTestViewModel : INotifyPropertyChanged\n{\n    public Func&lt;WeaponType, string&gt; Format { get; } = wt =&gt; wt switch\n    {\n        WeaponType.Sword =&gt; \"Slashy\",\n        WeaponType.Club =&gt; \"Smashy\",\n        WeaponType.Dagger =&gt; \"Stabby\",\n        WeaponType.Slingshot =&gt; \"Stretchy\",\n        _ =&gt; \"Banana\"\n    };\n\n    public IReadOnlyList&lt;WeaponType&gt; Weapons { get; } =\n        Enum.GetValues&lt;WeaponType&gt;();\n\n    [Notify] private WeaponType selectedWeapon;\n}\n\nvoid ShowDropDownExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/DropDownTestView\",\n        new DropDownTestViewModel());\n}\n</code></pre> <p>Option Types</p> <p>Drop-down lists in StarML use a special, dynamically-typed wrapper over the generic DropDownList which enables it to adjust to any option type; the example above defines a completely new option named <code>WeaponType</code>.</p> <p>In order for this to work, all option-related properties must use the same type. These properties are the ones shown above: <code>options</code>, <code>option-format</code> and <code>selected-option</code>. Any type can be used for all three, as long as the entire view model is consistent.</p>"},{"location":"library/standard-views/#expander","title":"Expander","text":"<p>An expandable panel with built-in behavior to toggle expand/collapse on click. The header is always visible, while the content is only visible when expanded.</p> <p>Includes its own (customizable) caret sprite to show the current expanded state.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;frame layout=\"420px 380px\"\n       background={@Mods/StardewUI/Sprites/ControlBorder}\n       padding=\"32,16,32,24\"&gt;\n    &lt;lane layout=\"stretch content\" orientation=\"vertical\"&gt;\n        &lt;expander layout=\"stretch content\"\n                  margin=\"0,0,0,4\"\n                  header-padding=\"0,12\"\n                  header-background-tint=\"#99c\"\n                  is-expanded={&lt;&gt;IsExpanded}&gt;\n            &lt;label *outlet=\"header\" text={HeaderText} /&gt;\n            &lt;image layout=\"stretch 300px\"\n                   horizontal-alignment=\"middle\"\n                   sprite={@Mods/focustense.StardewUITest/Sprites/Cursors:Balloon} /&gt;\n        &lt;/expander&gt;\n        &lt;label text=\"Additional content below expander\" /&gt;\n    &lt;/lane&gt;\n&lt;/frame&gt;\n</code></pre> <pre><code>partial class ExpanderTestViewModel : INotifyPropertyChanged\n{\n    public string HeaderText =&gt; IsExpanded ? \"Hide Details\" : \"Show Details\";\n\n    [Notify] private bool isExpanded;\n}\n\nvoid ShowExpanderExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/ExpanderTestView\",\n        new ExpanderTestViewModel());\n}\n</code></pre>"},{"location":"library/standard-views/#keybind","title":"Keybind","text":"<p>Displays the current, non-editable value of a single SMAPI <code>Keybind</code>.</p> <p>Requires a <code>sprite-map</code> in order to display correctly. The shipped version of StardewUI includes a built-in map asset, shown below; it can either be used without any arguments (i.e. ending in <code>/Buttons</code>) or with an argument list in the following format:</p> <p><code>keyboardTheme-mouseTheme-sliceScale</code>.</p> <p>Valid values for either theme are <code>dark</code>, <code>light</code>, <code>stardew</code> (orange) or <code>default</code> which behaves the same as <code>stardew</code>. Controller buttons are always shown in a dark style.</p> <p>For <code>sliceScale</code>, smaller numbers make the border edges thinner; for a <code>button-height</code> of 64px, a scale of <code>0.5</code> is typically good. Adjust to preference; typically, the smaller the button is, the smaller the ideal scale should be.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;keybind button-height=\"64\"\n         sprite-map={@Mods/StardewUI/SpriteMaps/Buttons:default-default-0.5}\n         empty-text=\"Not set\"\n         keybind={Hotkey} /&gt;\n</code></pre> <pre><code>class KeybindTestViewModel\n{\n    public Keybind Hotkey { get; set; } =\n        new(SButton.LeftStick, SButton.ControllerA);\n}\n\nvoid ShowKeybindExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/KeybindTestView\",\n        new KeybindTestViewModel());\n}\n</code></pre> <p>Note: The example image shows two appearances, one for keyboard bindings and one for controllers. The example code will only produce one, but both images are produced from the exact same view, populated with different keybind values.</p>"},{"location":"library/standard-views/#keybind-editor","title":"Keybind Editor","text":"<p>An editable version of the keybind view supporting the same options, except taking a <code>keybind-list</code> instead of a <code>keybind</code> for adding multiple bindings. Includes built-in overlay to capture input when adding/changing a binding.</p> <p>Although it is designed to work with multiple keybindings (SMAPI <code>KeybindList</code>), the behavior can be adjusted to work with only a single keybinding or even a single button, by changing the <code>editable-type</code> property (see KeybindType for details). If no <code>editable-type</code> is specified, the binding cannot be edited. When the value is <code>MultipleKeybinds</code>, as shown below, the overlay includes an \"add\" button whose text can be customized with the <code>add-button-text</code> attribute.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;keybind-editor button-height=\"64\"\n                sprite-map={@Mods/StardewUI/SpriteMaps/Buttons:default-default-0.5}\n                editable-type=\"MultipleKeybinds\"\n                add-button-text=\"Add\"\n                empty-text=\"Not set\"\n                focusable=\"true\"\n                keybind-list={&lt;&gt;Keybinds} /&gt;\n</code></pre> <pre><code>partial class KeybindListTestViewModel : INotifyPropertyChanged\n{\n    [Notify]\n    private KeybindList keybinds = new(\n        new Keybind(SButton.LeftControl, SButton.F5),\n        new Keybind(SButton.LeftStick, SButton.ControllerA));\n}\n\nvoid ShowKeybindEditorExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/KeybindEditorTestView\",\n        new KeybindListTestViewModel());\n}\n</code></pre>"},{"location":"library/standard-views/#slider","title":"Slider","text":"<p>A draggable thumb inside a fixed-width track, ideal for editing numeric values.</p> <p>All sliders are <code>float</code> based, but can be given the visual appearance of an integer slider by setting <code>interval</code> to a whole number. Use the <code>min</code> and <code>max</code> attributes to control the range, and <code>value-format</code> to customize how the label next to the track/thumb appears.</p> <p>Controller-based editing simply requires pressing the d-pad or left stick while the slider is focused.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;slider track-width=\"200\"\n        min=\"10\"\n        max=\"100\"\n        interval=\"5\"\n        value-format={Format}\n        value={&lt;&gt;Money} /&gt;\n</code></pre> <pre><code>partial class SliderTestViewModel : INotifyPropertyChanged\n{\n    public Func&lt;float, string&gt; Format { get; } =\n        value =&gt; $\"{value} million dollars\";\n\n    [Notify] private float money = 10;\n}\n\nvoid ShowSliderExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/SliderTestView\",\n        new SliderTestViewModel());\n}\n</code></pre>"},{"location":"library/standard-views/#tab","title":"Tab","text":"<p>A rectangular content frame with rounded top, which shifts its position slightly to indicate whether or not it is active.</p> <p>Generally used as part of a tab group where only one tab can be active at a time.</p> <p>In addition to supporting data binding on the active state, the tab automatically activates or \"presses\" on click, and raises events on activation and deactivation.</p> <p>When using the default sprite, the background will stretch and any inner content (i.e. whether text or image) can generally be represented.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;lane z-index=\"1\"&gt;\n    &lt;tab *repeat={Tabs}\n         layout=\"64px\"\n         tooltip={Name}\n         active={&lt;&gt;Active}\n         activate=|^OnTabActivated(Name)|&gt;\n        &lt;image layout=\"32px\" sprite={Sprite} vertical-alignment=\"middle\" /&gt;\n    &lt;/tab&gt;\n&lt;/lane&gt;\n</code></pre> <pre><code>partial class TabData(string name, Texture2D texture, Rectangle sourceRect)\n    : INotifyPropertyChanged\n{\n    public string Name { get; } = name;\n    public Tuple&lt;Texture2D, Rectangle&gt; Sprite { get; } =\n        Tuple.Create(texture, sourceRect);\n\n    [Notify] private bool active;\n}\n\npartial class TabsViewModel\n{\n    public IReadOnlyList&lt;TabData&gt; Tabs { get; set; } = [];\n\n    public void OnTabActivated(string name)\n    {\n        foreach (var tab in Tabs)\n        {\n            if (tab.Name != name)\n            {\n                tab.Active = false;\n            }\n        }\n    }\n}\n\nprivate void ShowTabsExample()\n{\n    var context = new TabsViewModel()\n    {\n        Tabs =\n        [\n            new(\"Home\", Game1.mouseCursors, new(20, 388, 8, 8)) { Active = true },\n            new(\"Social\", Game1.mouseCursors, new(36, 374, 7, 8)),\n            new(\"Money\", Game1.mouseCursors, new(4, 388, 8, 8)),\n            new(\"Seasons\", Game1.mouseCursors, new(420, 1204, 8, 8)),\n        ],\n    };\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/TabTestView\",\n        context);\n}\n</code></pre>"},{"location":"library/standard-views/#text-input","title":"Text Input","text":"<p>An input box similar to the one where you enter your farm name, Favorite Thing, etc. Supports a movable caret (cursor) using the mouse, arrow keys, or home/end keys; also supports gamepad input using Stardew's on-screen keyboard.</p> <p>The appearance is highly customizable, with editable fonts, colors, background and caret images, shadows and more. Consult the API reference for details.</p> DemoUsage (StarML)Usage (C#) <p></p> <pre><code>&lt;textinput layout=\"stretch 54px\" text={&lt;&gt;Text} /&gt;\n</code></pre> <pre><code>partial class TextInputTestViewModel : INotifyPropertyChanged\n{\n    [Notify] private string text = \"\";\n}\n\nvoid ShowTextInputExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/TextInputTestView\",\n        new TextInputTestViewModel()\n        {\n            Text = \"It was the best of times, it was the blurst of times.\"\n        });\n}\n</code></pre> <p>Tip</p> <p>Set a fixed or <code>stretch</code> width and height for text input boxes; they don't do well with the default <code>content</code> layout since the content changes and may initially be empty.</p>"},{"location":"library/standard-views/#extras","title":"Extras","text":""},{"location":"library/standard-views/#marquee","title":"Marquee","text":"<p>A not-very-serious widget named after the long-deprecated HTML Marquee element. Scrolls content infinitely similar to a classic electronic billboard.</p> <p>This was mostly done as a demonstration of what's possible in StardewUI, e.g. with a custom view. The inner content does not have to be simple text; anything from images to entire UIs can be auto-scrolled this way, but since the scrolling is a drawing trick rather than a layout trick, it is not recommended to put any interactive (focusable) elements inside the marquee.</p> DemoUsage (StarML)Usage (C#) <p> </p> <pre><code>&lt;marquee layout=\"stretch content\" padding=\"0,4\" speed=\"150\" extra-distance=\"80\"&gt;\n    &lt;label text={Text} /&gt;\n&lt;/marquee&gt;\n</code></pre> <pre><code>class MarqueeTestViewModel\n{\n    public string Text { get; set; }\n}\n\nvoid ShowMarqueeExample()\n{\n    Game1.activeClickableMenu = viewEngine.CreateMenuFromAsset(\n        $\"Mods/focustense.StardewUITest/Views/MarqueeTestView\",\n        new MarqueeTestViewModel()\n        {\n            Text = \"Pickle my bones in alcohol stranger, and I ain't \"\n                 + \"comin' back Jimmy crack corn and I don't care \" +\n                 + \"wildwood flower died when I was young run, what I had done.\"\n        });\n}\n</code></pre> <p>(Filler text generated from Hillbilly Ipsum)</p> <p>Tip</p> <p>Be sure to set a <code>layout</code> on the marquee element that does not depend on content size, otherwise the entire marquee will stretch out of bounds and potentially off-screen instead of clipping the content.</p>"},{"location":"reference/stardewui/","title":"StardewUI","text":""},{"location":"reference/stardewui/#stardewui-namespace","title":"StardewUI Namespace","text":""},{"location":"reference/stardewui/#classes","title":"Classes","text":"Name Description DirectionExtensions Helpers for working with Direction. DuckPropertyAttribute Specifies a property name to use for duck-type conversions, if different from the member name. DuckTypeAttribute Specifies that a type is eligible for duck-type conversions in data bindings. Tags Typesafe heterogeneous container for associating arbitrary data with a view or other UI object. UI Entry point for Stardew UI. Must be called from Entry(IModHelper). UiViewport Utilities relating to the game's UI viewport. View Base class for typical widgets wanting to implement IView. ViewChild Provides information about a view that is the child of another view. Used for interactions. ViewExtensions Commonly-used extensions for the IView interface and related types. ViewMenu&lt;T&gt; Generic menu implementation based on a root IView."},{"location":"reference/stardewui/#interfaces","title":"Interfaces","text":"Name Description IView Represents some arbitrary UI element or layout."},{"location":"reference/stardewui/#enums","title":"Enums","text":"Name Description Direction Cardinal directions used in UI, matching gamepad stick/button directions for navigation. MenuActivationMode Available behaviors for opening a ViewMenu&lt;T&gt;. MenuCloseBehavior Available behaviors for closing a ViewMenu&lt;T&gt;."},{"location":"reference/stardewui/direction/","title":"Direction","text":""},{"location":"reference/stardewui/direction/#enum-direction","title":"Enum Direction","text":""},{"location":"reference/stardewui/direction/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Cardinal directions used in UI, matching gamepad stick/button directions for navigation.</p> <pre><code>public enum Direction\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 Direction</p>"},{"location":"reference/stardewui/direction/#fields","title":"Fields","text":"Name Value Description North 0 \"Up\" in screen space. East 1 \"Right\" in screen space. South 2 \"Down\" in screen space. West 3 \"Left\" in screen space."},{"location":"reference/stardewui/directionextensions/","title":"DirectionExtensions","text":""},{"location":"reference/stardewui/directionextensions/#class-directionextensions","title":"Class DirectionExtensions","text":""},{"location":"reference/stardewui/directionextensions/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Helpers for working with Direction.</p> <pre><code>public static class DirectionExtensions\n</code></pre> <p>Inheritance Object \u21e6 DirectionExtensions</p>"},{"location":"reference/stardewui/directionextensions/#members","title":"Members","text":""},{"location":"reference/stardewui/directionextensions/#methods","title":"Methods","text":"Name Description GetOrientation(Direction) Gets the orientation axis associated with a given <code>direction</code>, i.e. whether it flows horizontally or vertically. IsHorizontal(Direction) Returns <code>true</code> if the specified <code>direction</code> is along the horizontal (width) axis, otherwise <code>false</code>. IsVertical(Direction) Returns <code>true</code> if the specified <code>direction</code> is along the vertical (height) axis, otherwise <code>false</code>."},{"location":"reference/stardewui/directionextensions/#details","title":"Details","text":""},{"location":"reference/stardewui/directionextensions/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/directionextensions/#getorientationdirection","title":"GetOrientation(Direction)","text":"<p>Gets the orientation axis associated with a given <code>direction</code>, i.e. whether it flows horizontally or vertically.</p> <pre><code>public static StardewUI.Layout.Orientation GetOrientation(StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/directionextensions/#parameters","title":"Parameters","text":"<p><code>direction</code> Direction</p>"},{"location":"reference/stardewui/directionextensions/#returns","title":"Returns","text":"<p>Orientation</p>"},{"location":"reference/stardewui/directionextensions/#ishorizontaldirection","title":"IsHorizontal(Direction)","text":"<p>Returns <code>true</code> if the specified <code>direction</code> is along the horizontal (width) axis, otherwise <code>false</code>.</p> <pre><code>public static bool IsHorizontal(StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/directionextensions/#parameters_1","title":"Parameters","text":"<p><code>direction</code> Direction</p>"},{"location":"reference/stardewui/directionextensions/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/directionextensions/#isverticaldirection","title":"IsVertical(Direction)","text":"<p>Returns <code>true</code> if the specified <code>direction</code> is along the vertical (height) axis, otherwise <code>false</code>.</p> <pre><code>public static bool IsVertical(StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/directionextensions/#parameters_2","title":"Parameters","text":"<p><code>direction</code> Direction</p>"},{"location":"reference/stardewui/directionextensions/#returns_2","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/duckpropertyattribute/","title":"DuckPropertyAttribute","text":""},{"location":"reference/stardewui/duckpropertyattribute/#class-duckpropertyattribute","title":"Class DuckPropertyAttribute","text":""},{"location":"reference/stardewui/duckpropertyattribute/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Specifies a property name to use for duck-type conversions, if different from the member name.</p> <pre><code>[System.AttributeUsage]\npublic class DuckPropertyAttribute : System.Attribute\n</code></pre> <p>Inheritance Object \u21e6 Attribute \u21e6 DuckPropertyAttribute</p>"},{"location":"reference/stardewui/duckpropertyattribute/#remarks","title":"Remarks","text":"<p>This attribute is applied to the type being converted from, unlike DuckTypeAttribute which applies to the target type. It is used to match a target property with a different name, or to match multiple target properties with a single source field. </p> <p>Multiple copies of the attribute can be used to match multiple target properties, with <code>targetTypeName</code> being used to optionally filter which type conversions it will apply to, if the data type might be used in more than one kind of conversion.</p>"},{"location":"reference/stardewui/duckpropertyattribute/#members","title":"Members","text":""},{"location":"reference/stardewui/duckpropertyattribute/#constructors","title":"Constructors","text":"Name Description DuckPropertyAttribute(string, string) Specifies a property name to use for duck-type conversions, if different from the member name."},{"location":"reference/stardewui/duckpropertyattribute/#properties","title":"Properties","text":"Name Description TargetPropertyName The name of the property to match on the target type. TargetTypeName Name of the conversion target type (i.e. type with DuckTypeAttribute) to which this rename applies, not including the namespace or generic arguments. If not set, the property will be available under the specified TargetPropertyName for all conversions. TypeId (Inherited from Attribute)"},{"location":"reference/stardewui/duckpropertyattribute/#methods","title":"Methods","text":"Name Description Equals(Object) (Inherited from Attribute) GetHashCode() (Inherited from Attribute) IsDefaultAttribute() (Inherited from Attribute) Match(Object) (Inherited from Attribute)"},{"location":"reference/stardewui/duckpropertyattribute/#details","title":"Details","text":""},{"location":"reference/stardewui/duckpropertyattribute/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/duckpropertyattribute/#duckpropertyattributestring-string","title":"DuckPropertyAttribute(string, string)","text":"<p>Specifies a property name to use for duck-type conversions, if different from the member name.</p> <pre><code>public DuckPropertyAttribute(string targetPropertyName, string targetTypeName);\n</code></pre>"},{"location":"reference/stardewui/duckpropertyattribute/#parameters","title":"Parameters","text":"<p><code>targetPropertyName</code> string The name of the property to match on the target type.</p> <p><code>targetTypeName</code> string Name of the conversion target type (i.e. type with DuckTypeAttribute) to which this rename applies, not including the namespace or generic arguments. If not set, the property will be available under the specified <code>targetPropertyName</code> for all conversions.</p>"},{"location":"reference/stardewui/duckpropertyattribute/#remarks_1","title":"Remarks","text":"<p>This attribute is applied to the type being converted from, unlike DuckTypeAttribute which applies to the target type. It is used to match a target property with a different name, or to match multiple target properties with a single source field. </p> <p>Multiple copies of the attribute can be used to match multiple target properties, with <code>targetTypeName</code> being used to optionally filter which type conversions it will apply to, if the data type might be used in more than one kind of conversion.</p>"},{"location":"reference/stardewui/duckpropertyattribute/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/duckpropertyattribute/#targetpropertyname","title":"TargetPropertyName","text":"<p>The name of the property to match on the target type.</p> <pre><code>public string TargetPropertyName { get; }\n</code></pre>"},{"location":"reference/stardewui/duckpropertyattribute/#property-value","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/duckpropertyattribute/#targettypename","title":"TargetTypeName","text":"<p>Name of the conversion target type (i.e. type with DuckTypeAttribute) to which this rename applies, not including the namespace or generic arguments. If not set, the property will be available under the specified TargetPropertyName for all conversions.</p> <pre><code>public string TargetTypeName { get; }\n</code></pre>"},{"location":"reference/stardewui/duckpropertyattribute/#property-value_1","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/ducktypeattribute/","title":"DuckTypeAttribute","text":""},{"location":"reference/stardewui/ducktypeattribute/#class-ducktypeattribute","title":"Class DuckTypeAttribute","text":""},{"location":"reference/stardewui/ducktypeattribute/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Specifies that a type is eligible for duck-type conversions in data bindings.</p> <pre><code>[System.AttributeUsage]\npublic class DuckTypeAttribute : System.Attribute\n</code></pre> <p>Inheritance Object \u21e6 Attribute \u21e6 DuckTypeAttribute</p>"},{"location":"reference/stardewui/ducktypeattribute/#remarks","title":"Remarks","text":"<p>This attribute is not used by the core library, only the data binding framework. When a type is decorated with it, values of normally non-convertible types, such as user-defined types in a separate mod, can become eligible for conversion to the decorated type and have converters generated at runtime, as long as the external type's properties are sufficient to satisfy one of the decorated type's constructors; or, in the case of default constructors, when the external type can contribute at least one property value. </p> <p>Duck type conversions always match using the combined property type and (case-insensitive) name. The name of the decorated type's property or constructor argument must match the name of the property on the source type, unless DuckPropertyAttribute is specified, in which case it must match the specified name(s).</p>"},{"location":"reference/stardewui/ducktypeattribute/#members","title":"Members","text":""},{"location":"reference/stardewui/ducktypeattribute/#constructors","title":"Constructors","text":"Name Description DuckTypeAttribute()"},{"location":"reference/stardewui/ducktypeattribute/#properties","title":"Properties","text":"Name Description TypeId (Inherited from Attribute)"},{"location":"reference/stardewui/ducktypeattribute/#methods","title":"Methods","text":"Name Description Equals(Object) (Inherited from Attribute) GetHashCode() (Inherited from Attribute) IsDefaultAttribute() (Inherited from Attribute) Match(Object) (Inherited from Attribute)"},{"location":"reference/stardewui/ducktypeattribute/#details","title":"Details","text":""},{"location":"reference/stardewui/ducktypeattribute/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/ducktypeattribute/#ducktypeattribute","title":"DuckTypeAttribute()","text":"<pre><code>public DuckTypeAttribute();\n</code></pre>"},{"location":"reference/stardewui/iview/","title":"IView","text":""},{"location":"reference/stardewui/iview/#interface-iview","title":"Interface IView","text":""},{"location":"reference/stardewui/iview/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Represents some arbitrary UI element or layout.</p> <pre><code>public interface IView : System.IDisposable, \n    System.ComponentModel.INotifyPropertyChanged\n</code></pre> <p>Implements IDisposable, INotifyPropertyChanged</p>"},{"location":"reference/stardewui/iview/#members","title":"Members","text":""},{"location":"reference/stardewui/iview/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0). ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins. FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants. IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls. Layout The current layout parameters, which determine how Measure(Vector2) will behave. Name Simple name for this view, used in log/debug output; does not affect behavior. Opacity Opacity (alpha level) of the view. OuterSize The true computed layout size resulting from a single Measure(Vector2) pass. PointerEventsEnabled Whether this view should receive pointer events like Click or Drag. ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it. Tags The user-defined tags for this view. Tooltip Tooltip data to display on hover, if any. Visibility Drawing visibility for this view. ZIndex Z order for this view within its direct parent. Higher indices draw later (on top)."},{"location":"reference/stardewui/iview/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds. Draw(ISpriteBatch) Draws the content for this view. FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position. GetChildAt(Vector2) Finds the child at a given position. GetChildPosition(IView) Computes or retrieves the position of a given direct child. GetChildren() Gets the current children of this view. GetChildrenAt(Vector2) Finds all children at a given position. GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened. HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds. IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2). Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions. OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path. OnClick(ClickEventArgs) Called when a click is received within this view's bounds. OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held). OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs). OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs. OnUpdate(TimeSpan) Runs on every update tick. OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds. ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view."},{"location":"reference/stardewui/iview/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed. Click Event raised when the view receives a click initiated from any button. Drag Event raised when the view is being dragged using the mouse. DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation. DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation. LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A). PointerEnter Event raised when the pointer enters the view. PointerLeave Event raised when the pointer exits the view. PointerMove Event raised when the pointer moves within the view. RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X). Wheel Event raised when the scroll wheel moves."},{"location":"reference/stardewui/iview/#details","title":"Details","text":""},{"location":"reference/stardewui/iview/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/iview/#actualbounds","title":"ActualBounds","text":"<p>The bounds of this view relative to the origin (0, 0).</p> <pre><code>StardewUI.Layout.Bounds ActualBounds { get; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value","title":"Property Value","text":"<p>Bounds</p>"},{"location":"reference/stardewui/iview/#remarks","title":"Remarks","text":"<p>Typically, a view's bounds is the rectangle from (0, 0) having size of OuterSize, but there may be a difference especially in the case of negative margins. The various sizes affect layout flow and can even be negative - for example, in a left-to-right layout, a view with left margin -100, right margin 20 and inner width 30 (no padding) has an X size of -50, indicating that it actually (correctly) causes adjacent views to be pulled left along with it. However, <code>ActualBounds</code> always has a positive Size, and if an implicit content offset is being applied (e.g. because of negative margins) then it will be reflected in Position and not affect the Size; the previous example would have position X = -100 and size X = 50 (30 content + 20 right margin). </p> <p>In terms of usage, OuterSize is generally used for the layout itself (Measure(Vector2) and OnMeasure(Vector2) of parent views) whereas ActualBounds is preferred for click and focus targeting.</p>"},{"location":"reference/stardewui/iview/#contentbounds","title":"ContentBounds","text":"<p>The true bounds of this view's content; i.e. ActualBounds excluding margins.</p> <pre><code>StardewUI.Layout.Bounds ContentBounds { get; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value_1","title":"Property Value","text":"<p>Bounds</p>"},{"location":"reference/stardewui/iview/#floatingbounds","title":"FloatingBounds","text":"<p>Contains the bounds of all floating elements in this view tree, including the current view and all descendants.</p> <pre><code>System.Collections.Generic.IEnumerable&lt;StardewUI.Layout.Bounds&gt; FloatingBounds { get; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value_2","title":"Property Value","text":"<p>IEnumerable&lt;Bounds&gt;</p>"},{"location":"reference/stardewui/iview/#isfocusable","title":"IsFocusable","text":"<p>Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.</p> <pre><code>bool IsFocusable { get; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/iview/#remarks_1","title":"Remarks","text":"<p>In other game UI code this is more typically referred to as \"snap\", since there is no true input focus. However, focus is the more general term and better explains what is happening with e.g. a text box.</p>"},{"location":"reference/stardewui/iview/#layout","title":"Layout","text":"<p>The current layout parameters, which determine how Measure(Vector2) will behave.</p> <pre><code>StardewUI.Layout.LayoutParameters Layout { get; set; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value_4","title":"Property Value","text":"<p>LayoutParameters</p>"},{"location":"reference/stardewui/iview/#name","title":"Name","text":"<p>Simple name for this view, used in log/debug output; does not affect behavior.</p> <pre><code>string Name { get; set; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value_5","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/iview/#opacity","title":"Opacity","text":"<p>Opacity (alpha level) of the view.</p> <pre><code>float Opacity { get; set; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value_6","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/iview/#remarks_2","title":"Remarks","text":"<p>Affects this view and all descendants; used to control opacity of an entire control or layout area.</p>"},{"location":"reference/stardewui/iview/#outersize","title":"OuterSize","text":"<p>The true computed layout size resulting from a single Measure(Vector2) pass.</p> <pre><code>Microsoft.Xna.Framework.Vector2 OuterSize { get; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value_7","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/iview/#pointereventsenabled","title":"PointerEventsEnabled","text":"<p>Whether this view should receive pointer events like Click or Drag.</p> <pre><code>bool PointerEventsEnabled { get; set; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value_8","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/iview/#remarks_3","title":"Remarks","text":"<p>By default, all views receive pointer events; this may be disabled for views that intentionally overlap other views but shouldn't block their input, such as local non-modal overlays.</p>"},{"location":"reference/stardewui/iview/#scrollwithchildren","title":"ScrollWithChildren","text":"<p>If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.</p> <pre><code>StardewUI.Layout.Orientation? ScrollWithChildren { get; set; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value_9","title":"Property Value","text":"<p>Nullable&lt;Orientation&gt;</p>"},{"location":"reference/stardewui/iview/#remarks_4","title":"Remarks","text":"<p>For example, if the view lays out children horizontally, and some children may occupy only a very small amount of space near the top while others are much taller vertically or positioned near the bottom, it might be desirable to configure this with Vertical, so that the entire \"row\" is positioned within the scrollable viewport. </p> <p>In other words, \"if any part of me is made visible via scrolling, then all of me should be visible\".</p>"},{"location":"reference/stardewui/iview/#tags","title":"Tags","text":"<p>The user-defined tags for this view.</p> <pre><code>StardewUI.Tags Tags { get; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value_10","title":"Property Value","text":"<p>Tags</p>"},{"location":"reference/stardewui/iview/#tooltip","title":"Tooltip","text":"<p>Tooltip data to display on hover, if any.</p> <pre><code>StardewUI.Data.TooltipData Tooltip { get; set; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value_11","title":"Property Value","text":"<p>TooltipData</p>"},{"location":"reference/stardewui/iview/#visibility","title":"Visibility","text":"<p>Drawing visibility for this view.</p> <pre><code>StardewUI.Layout.Visibility Visibility { get; set; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value_12","title":"Property Value","text":"<p>Visibility</p>"},{"location":"reference/stardewui/iview/#zindex","title":"ZIndex","text":"<p>Z order for this view within its direct parent. Higher indices draw later (on top).</p> <pre><code>int ZIndex { get; set; }\n</code></pre>"},{"location":"reference/stardewui/iview/#property-value_13","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/iview/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/iview/#containspointvector2","title":"ContainsPoint(Vector2)","text":"<p>Checks if a given point, relative to the view's origin, is within its bounds.</p> <pre><code>bool ContainsPoint(Microsoft.Xna.Framework.Vector2 point);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters","title":"Parameters","text":"<p><code>point</code> Vector2 The point to test.</p>"},{"location":"reference/stardewui/iview/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if <code>point</code> is within the view bounds; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/iview/#drawispritebatch","title":"Draw(ISpriteBatch)","text":"<p>Draws the content for this view.</p> <pre><code>void Draw(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_1","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/iview/#remarks_5","title":"Remarks","text":"<p>No positional argument is included because ISpriteBatch handles its own transformations; the top-left coordinates of this view are always (0, 0).</p>"},{"location":"reference/stardewui/iview/#focussearchvector2-direction","title":"FocusSearch(Vector2, Direction)","text":"<p>Finds the next focusable component in a given direction that does not overlap with a current position.</p> <pre><code>StardewUI.Input.FocusSearchResult FocusSearch(Microsoft.Xna.Framework.Vector2 position, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_2","title":"Parameters","text":"<p><code>position</code> Vector2 The current cursor position, relative to this view. May have dimensions that are negative or outside the view bounds, indicating that the cursor is not currently within the view.</p> <p><code>direction</code> Direction The direction of cursor movement.</p>"},{"location":"reference/stardewui/iview/#returns_1","title":"Returns","text":"<p>FocusSearchResult</p> <p>The next focusable view reached by moving in the specified <code>direction</code>, or <code>null</code> if there are no focusable descendants that are possible to reach in that direction.</p>"},{"location":"reference/stardewui/iview/#remarks_6","title":"Remarks","text":"<p>If <code>position</code> is out of bounds, it does not necessarily mean that the view should return <code>null</code>; the expected result depends on the <code>direction</code> also. The base case is when the focus position is already in bounds, and in this case a view should return whichever view can be reached by moving from the edge of that view along a straight line in the specified <code>direction</code>. However, focus search is recursive and the result should reflect the \"best\" candidate for focus if the cursor were to move into this view's bounds. For example, in a 1D horizontal layout the rules might be: </p> <ul> <li>If the <code>direction</code> is East, and the position's X value is negative, then the result should the leftmost focusable child, regardless of Y value.</li> <li>If the direction is South, and the X position is within the view's horizontal bounds, and the Y value is negative or greater than the view's height, then result should be whichever child intersects with that X position.</li> <li>If the direction is West and the X position is negative, or the direction is East and the X position is greater than the view's width, then the result should be <code>null</code> as there is literally nothing the view knows about in that direction.</li> </ul> <p>There are no strict rules for how a view performs focus search, but in general it is assumed that a view implementation understands its own layout and can accommodate accordingly; for example, a grid would follow essentially the same rules as our \"list\" example above, with additional considerations for navigating rows. \"Ragged\" 2D layouts might have complex rules requiring explicit neighbors, and therefore are typically easier to implement as nested lanes.</p>"},{"location":"reference/stardewui/iview/#getchildatvector2","title":"GetChildAt(Vector2)","text":"<p>Finds the child at a given position.</p> <pre><code>StardewUI.ViewChild GetChildAt(Microsoft.Xna.Framework.Vector2 position);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_3","title":"Parameters","text":"<p><code>position</code> Vector2 The search position, relative to the view's top-left coordinate.</p>"},{"location":"reference/stardewui/iview/#returns_2","title":"Returns","text":"<p>ViewChild</p> <p>The view at <code>position</code>, or <code>null</code> if there is no match.</p>"},{"location":"reference/stardewui/iview/#remarks_7","title":"Remarks","text":"<p>If multiple children overlap the same position, then this returns the topmost child.</p>"},{"location":"reference/stardewui/iview/#getchildpositioniview","title":"GetChildPosition(IView)","text":"<p>Computes or retrieves the position of a given direct child.</p> <pre><code>Microsoft.Xna.Framework.Vector2? GetChildPosition(StardewUI.IView childView);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_4","title":"Parameters","text":"<p><code>childView</code> IView The child of this view.</p>"},{"location":"reference/stardewui/iview/#returns_3","title":"Returns","text":"<p>Nullable&lt;Vector2&gt;</p> <p>The local coordinates of the <code>childView</code>, or <code>null</code> if the <code>childView</code> is not a current or direct child.</p>"},{"location":"reference/stardewui/iview/#remarks_8","title":"Remarks","text":"<p>Implementation of this may be O(N) and therefore it should not be called every frame; it is intended for use in directional movement and other user-initiated events.</p>"},{"location":"reference/stardewui/iview/#getchildren","title":"GetChildren()","text":"<p>Gets the current children of this view.</p> <pre><code>System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetChildren();\n</code></pre>"},{"location":"reference/stardewui/iview/#returns_4","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/iview/#getchildrenatvector2","title":"GetChildrenAt(Vector2)","text":"<p>Finds all children at a given position.</p> <pre><code>System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetChildrenAt(Microsoft.Xna.Framework.Vector2 position);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_5","title":"Parameters","text":"<p><code>position</code> Vector2 The search position, relative to the view's top-left coordinate.</p>"},{"location":"reference/stardewui/iview/#returns_5","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p> <p>A sequence of views at the specified <code>position</code>, in front-to-back (reverse ZIndex) order.</p>"},{"location":"reference/stardewui/iview/#getdefaultfocuschild","title":"GetDefaultFocusChild()","text":"<p>Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.</p> <pre><code>StardewUI.ViewChild GetDefaultFocusChild();\n</code></pre>"},{"location":"reference/stardewui/iview/#returns_6","title":"Returns","text":"<p>ViewChild</p> <p>The child view and position where initial focus should be, either directly or indirectly as a result of a descendant receiving focus. If this IView is itself IsFocusable, then the result may be a ViewChild referencing this view.</p>"},{"location":"reference/stardewui/iview/#hasoutofboundscontent","title":"HasOutOfBoundsContent()","text":"<p>Checks if the view has content or elements that are all or partially outside the ActualBounds.</p> <pre><code>bool HasOutOfBoundsContent();\n</code></pre>"},{"location":"reference/stardewui/iview/#returns_7","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/iview/#remarks_9","title":"Remarks","text":"<p>This may be the case for e.g. floating elements, and covers not only the view's immediate content/children but also that of any descendants.</p>"},{"location":"reference/stardewui/iview/#isdirty","title":"IsDirty()","text":"<p>Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).</p> <pre><code>bool IsDirty();\n</code></pre>"},{"location":"reference/stardewui/iview/#returns_8","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the view must be measured again; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/iview/#remarks_10","title":"Remarks","text":"<p>Typically, a view will be considered dirty if and only if one of the following are true: </p> <ul> <li>The Layout has changed</li> <li>The content has changed in a way that could affect layout, e.g. the text has changed in a Content configuration</li> <li>The <code>availableSize</code> is not the same as the previously-seen value (see remarks in Measure(Vector2))</li> </ul> <p>A correct implementation is important for performance, as full layout can be very expensive to run on every frame.</p>"},{"location":"reference/stardewui/iview/#measurevector2","title":"Measure(Vector2)","text":"<p>Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.</p> <pre><code>bool Measure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_6","title":"Parameters","text":"<p><code>availableSize</code> Vector2 The width/height that is still available in the container/parent.</p>"},{"location":"reference/stardewui/iview/#returns_9","title":"Returns","text":"<p>Boolean</p> <p>Whether or not any layout was performed as a result of this pass. Callers may use this to propagate layout back up the tree, or perform expensive follow-up actions.</p>"},{"location":"reference/stardewui/iview/#remarks_11","title":"Remarks","text":"<p>Most views should save the value of <code>availableSize</code> for use in IsDirty() checks.</p>"},{"location":"reference/stardewui/iview/#onbuttonpressbuttoneventargs","title":"OnButtonPress(ButtonEventArgs)","text":"<p>Called when a button press is received while this view is in the focus path.</p> <pre><code>void OnButtonPress(StardewUI.Events.ButtonEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_7","title":"Parameters","text":"<p><code>e</code> ButtonEventArgs The event data.</p>"},{"location":"reference/stardewui/iview/#onclickclickeventargs","title":"OnClick(ClickEventArgs)","text":"<p>Called when a click is received within this view's bounds.</p> <pre><code>void OnClick(StardewUI.Events.ClickEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_8","title":"Parameters","text":"<p><code>e</code> ClickEventArgs The event data.</p>"},{"location":"reference/stardewui/iview/#ondragpointereventargs","title":"OnDrag(PointerEventArgs)","text":"<p>Called when the view is being dragged (mouse moved while left button held).</p> <pre><code>void OnDrag(StardewUI.Events.PointerEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_9","title":"Parameters","text":"<p><code>e</code> PointerEventArgs The event data.</p>"},{"location":"reference/stardewui/iview/#ondroppointereventargs","title":"OnDrop(PointerEventArgs)","text":"<p>Called when the mouse button is released after at least one OnDrag(PointerEventArgs).</p> <pre><code>void OnDrop(StardewUI.Events.PointerEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_10","title":"Parameters","text":"<p><code>e</code> PointerEventArgs The event data.</p>"},{"location":"reference/stardewui/iview/#onpointermovepointermoveeventargs","title":"OnPointerMove(PointerMoveEventArgs)","text":"<p>Called when a pointer movement related to this view occurs.</p> <pre><code>void OnPointerMove(StardewUI.Events.PointerMoveEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_11","title":"Parameters","text":"<p><code>e</code> PointerMoveEventArgs The event data.</p>"},{"location":"reference/stardewui/iview/#remarks_12","title":"Remarks","text":"<p>This can either be the pointer entering the view, leaving the view, or moving within the view. The method is used to trigger events such as PointerEnter and PointerLeave.</p>"},{"location":"reference/stardewui/iview/#onupdatetimespan","title":"OnUpdate(TimeSpan)","text":"<p>Runs on every update tick.</p> <pre><code>void OnUpdate(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_12","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan Time elapsed since last game tick.</p>"},{"location":"reference/stardewui/iview/#remarks_13","title":"Remarks","text":"<p>Provided as an escape hatch for very unusual scenarios like responding to flips in the game's gamepadControls state. </p> <p>Override this at your own extreme peril. Frequently performing any layout-affecting logic in this function can negate the performance benefits of a retained-mode UI and cause the UI to become sluggish or even completely unresponsive.  Do not use it for animation; use Animator instead.</p>"},{"location":"reference/stardewui/iview/#onwheelwheeleventargs","title":"OnWheel(WheelEventArgs)","text":"<p>Called when a wheel event is received within this view's bounds.</p> <pre><code>void OnWheel(StardewUI.Events.WheelEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_13","title":"Parameters","text":"<p><code>e</code> WheelEventArgs The event data.</p>"},{"location":"reference/stardewui/iview/#scrollintoviewienumerableviewchild-vector2","title":"ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)","text":"<p>Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.</p> <pre><code>bool ScrollIntoView(System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; path, out Microsoft.Xna.Framework.Vector2 distance);\n</code></pre>"},{"location":"reference/stardewui/iview/#parameters_14","title":"Parameters","text":"<p><code>path</code> IEnumerable&lt;ViewChild&gt; The path to the view that should be visible, starting from (and not including) this view; each element has the local position within its own parent, so the algorithm can run recursively. This is a slice of the same path returned in a FocusSearchResult.</p> <p><code>distance</code> Vector2 The total distance that was scrolled, including distance scrolled by descendants.</p>"},{"location":"reference/stardewui/iview/#returns_10","title":"Returns","text":"<p>Boolean</p> <p>Whether or not the scroll was successful; <code>false</code> prevents the request from bubbling.</p>"},{"location":"reference/stardewui/iview/#events_1","title":"Events","text":""},{"location":"reference/stardewui/iview/#buttonpress","title":"ButtonPress","text":"<p>Event raised when any button on any input device is pressed.</p> <pre><code>event EventHandler&lt;StardewUI.Events.ButtonEventArgs&gt;? ButtonPress;\n</code></pre>"},{"location":"reference/stardewui/iview/#event-type","title":"Event Type","text":"<p>EventHandler&lt;ButtonEventArgs&gt;</p>"},{"location":"reference/stardewui/iview/#remarks_14","title":"Remarks","text":"<p>Only the views in the current focus path should receive these events.</p>"},{"location":"reference/stardewui/iview/#click","title":"Click","text":"<p>Event raised when the view receives a click initiated from any button.</p> <pre><code>event EventHandler&lt;StardewUI.Events.ClickEventArgs&gt;? Click;\n</code></pre>"},{"location":"reference/stardewui/iview/#event-type_1","title":"Event Type","text":"<p>EventHandler&lt;ClickEventArgs&gt;</p>"},{"location":"reference/stardewui/iview/#drag","title":"Drag","text":"<p>Event raised when the view is being dragged using the mouse.</p> <pre><code>event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? Drag;\n</code></pre>"},{"location":"reference/stardewui/iview/#event-type_2","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/iview/#dragend","title":"DragEnd","text":"<p>Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.</p> <pre><code>event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? DragEnd;\n</code></pre>"},{"location":"reference/stardewui/iview/#event-type_3","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/iview/#dragstart","title":"DragStart","text":"<p>Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.</p> <pre><code>event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? DragStart;\n</code></pre>"},{"location":"reference/stardewui/iview/#event-type_4","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/iview/#leftclick","title":"LeftClick","text":"<p>Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).</p> <pre><code>event EventHandler&lt;StardewUI.Events.ClickEventArgs&gt;? LeftClick;\n</code></pre>"},{"location":"reference/stardewui/iview/#event-type_5","title":"Event Type","text":"<p>EventHandler&lt;ClickEventArgs&gt;</p>"},{"location":"reference/stardewui/iview/#remarks_15","title":"Remarks","text":"<p>Using this event is a shortcut for handling Click and checking for IsPrimaryButton().</p>"},{"location":"reference/stardewui/iview/#pointerenter","title":"PointerEnter","text":"<p>Event raised when the pointer enters the view.</p> <pre><code>event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? PointerEnter;\n</code></pre>"},{"location":"reference/stardewui/iview/#event-type_6","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/iview/#pointerleave","title":"PointerLeave","text":"<p>Event raised when the pointer exits the view.</p> <pre><code>event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? PointerLeave;\n</code></pre>"},{"location":"reference/stardewui/iview/#event-type_7","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/iview/#pointermove","title":"PointerMove","text":"<p>Event raised when the pointer moves within the view.</p> <pre><code>event EventHandler&lt;StardewUI.Events.PointerMoveEventArgs&gt;? PointerMove;\n</code></pre>"},{"location":"reference/stardewui/iview/#event-type_8","title":"Event Type","text":"<p>EventHandler&lt;PointerMoveEventArgs&gt;</p>"},{"location":"reference/stardewui/iview/#rightclick","title":"RightClick","text":"<p>Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).</p> <pre><code>event EventHandler&lt;StardewUI.Events.ClickEventArgs&gt;? RightClick;\n</code></pre>"},{"location":"reference/stardewui/iview/#event-type_9","title":"Event Type","text":"<p>EventHandler&lt;ClickEventArgs&gt;</p>"},{"location":"reference/stardewui/iview/#remarks_16","title":"Remarks","text":"<p>Using this event is a shortcut for handling Click and checking for IsSecondaryButton().</p>"},{"location":"reference/stardewui/iview/#wheel","title":"Wheel","text":"<p>Event raised when the scroll wheel moves.</p> <pre><code>event EventHandler&lt;StardewUI.Events.WheelEventArgs&gt;? Wheel;\n</code></pre>"},{"location":"reference/stardewui/iview/#event-type_10","title":"Event Type","text":"<p>EventHandler&lt;WheelEventArgs&gt;</p>"},{"location":"reference/stardewui/menuactivationmode/","title":"MenuActivationMode","text":""},{"location":"reference/stardewui/menuactivationmode/#enum-menuactivationmode","title":"Enum MenuActivationMode","text":""},{"location":"reference/stardewui/menuactivationmode/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Available behaviors for opening a ViewMenu&lt;T&gt;.</p> <pre><code>public enum MenuActivationMode\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 MenuActivationMode</p>"},{"location":"reference/stardewui/menuactivationmode/#fields","title":"Fields","text":"Name Value Description Standalone 0 Opens the menu as standalone, replacing any previously-open menu and all of its descendants. Child 1 Opens the menu as a child of the frontmost game menu that is already active. Sibling 2 Replaces the frontmost game menu that is already active, but keeps all of its ancestors."},{"location":"reference/stardewui/menuclosebehavior/","title":"MenuCloseBehavior","text":""},{"location":"reference/stardewui/menuclosebehavior/#enum-menuclosebehavior","title":"Enum MenuCloseBehavior","text":""},{"location":"reference/stardewui/menuclosebehavior/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Available behaviors for closing a ViewMenu&lt;T&gt;.</p> <pre><code>public enum MenuCloseBehavior\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 MenuCloseBehavior</p>"},{"location":"reference/stardewui/menuclosebehavior/#fields","title":"Fields","text":"Name Value Description Default 0 Use the game's default closing logic. Custom 1 Block the game's default closing logic, but allow the menu to be closed explicitly via its Close() method. Disabled 2 Do not allow the menu to be closed by any means."},{"location":"reference/stardewui/tags/","title":"Tags","text":""},{"location":"reference/stardewui/tags/#class-tags","title":"Class Tags","text":""},{"location":"reference/stardewui/tags/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Typesafe heterogeneous container for associating arbitrary data with a view or other UI object.</p> <pre><code>public class Tags\n</code></pre> <p>Inheritance Object \u21e6 Tags</p>"},{"location":"reference/stardewui/tags/#members","title":"Members","text":""},{"location":"reference/stardewui/tags/#constructors","title":"Constructors","text":"Name Description Tags()"},{"location":"reference/stardewui/tags/#fields","title":"Fields","text":"Name Description Empty Empty tags that can be used as a placeholder."},{"location":"reference/stardewui/tags/#methods","title":"Methods","text":"Name Description Create&lt;T&gt;(T) Creates a new Tags holding a single initial value. Create&lt;T1, T2&gt;(T1, T2) Creates a new Tags holding two initial values. Create&lt;T1, T2, T3&gt;(T1, T2, T3) Creates a new Tags holding three initial values. Equals(Object) (Overrides Object.<code>Equals(Object)</code>) Get&lt;T&gt;() Gets the tag value of the specified type, if one exists. GetHashCode() (Overrides Object.<code>GetHashCode()</code>) Set&lt;T&gt;(T) Replaces the tag value of the specified type."},{"location":"reference/stardewui/tags/#details","title":"Details","text":""},{"location":"reference/stardewui/tags/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/tags/#tags","title":"Tags()","text":"<pre><code>public Tags();\n</code></pre>"},{"location":"reference/stardewui/tags/#fields_1","title":"Fields","text":""},{"location":"reference/stardewui/tags/#empty","title":"Empty","text":"<p>Empty tags that can be used as a placeholder.</p> <pre><code>public static readonly StardewUI.Tags Empty;\n</code></pre>"},{"location":"reference/stardewui/tags/#field-value","title":"Field Value","text":"<p>Tags</p>"},{"location":"reference/stardewui/tags/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/tags/#creatett","title":"Create&lt;T&gt;(T)","text":"<p>Creates a new Tags holding a single initial value.</p> <pre><code>public static StardewUI.Tags Create&lt;T&gt;(T value);\n</code></pre>"},{"location":"reference/stardewui/tags/#parameters","title":"Parameters","text":"<p><code>value</code> \u00a0 T The tag value.</p>"},{"location":"reference/stardewui/tags/#returns","title":"Returns","text":"<p>Tags</p>"},{"location":"reference/stardewui/tags/#createt1-t2t1-t2","title":"Create&lt;T1, T2&gt;(T1, T2)","text":"<p>Creates a new Tags holding two initial values.</p> <pre><code>public static StardewUI.Tags Create&lt;T1, T2&gt;(T1 value1, T2 value2);\n</code></pre>"},{"location":"reference/stardewui/tags/#parameters_1","title":"Parameters","text":"<p><code>value1</code> \u00a0 T1 The first value.</p> <p><code>value2</code> \u00a0 T2 The second value.</p>"},{"location":"reference/stardewui/tags/#returns_1","title":"Returns","text":"<p>Tags</p>"},{"location":"reference/stardewui/tags/#createt1-t2-t3t1-t2-t3","title":"Create&lt;T1, T2, T3&gt;(T1, T2, T3)","text":"<p>Creates a new Tags holding three initial values.</p> <pre><code>public static StardewUI.Tags Create&lt;T1, T2, T3&gt;(T1 value1, T2 value2, T3 value3);\n</code></pre>"},{"location":"reference/stardewui/tags/#parameters_2","title":"Parameters","text":"<p><code>value1</code> \u00a0 T1 The first value.</p> <p><code>value2</code> \u00a0 T2 The second value.</p> <p><code>value3</code> \u00a0 T3 The third value.</p>"},{"location":"reference/stardewui/tags/#returns_2","title":"Returns","text":"<p>Tags</p>"},{"location":"reference/stardewui/tags/#equalsobject","title":"Equals(Object)","text":"<pre><code>public override bool Equals(System.Object obj);\n</code></pre>"},{"location":"reference/stardewui/tags/#parameters_3","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"reference/stardewui/tags/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/tags/#gett","title":"Get&lt;T&gt;()","text":"<p>Gets the tag value of the specified type, if one exists.</p> <pre><code>public T Get&lt;T&gt;();\n</code></pre>"},{"location":"reference/stardewui/tags/#returns_4","title":"Returns","text":"<p><code>T</code></p> <p>The stored value of type <code>T</code>, if any; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/tags/#gethashcode","title":"GetHashCode()","text":"<pre><code>public override int GetHashCode();\n</code></pre>"},{"location":"reference/stardewui/tags/#returns_5","title":"Returns","text":"<p>Int32</p>"},{"location":"reference/stardewui/tags/#settt","title":"Set&lt;T&gt;(T)","text":"<p>Replaces the tag value of the specified type.</p> <pre><code>public void Set&lt;T&gt;(T value);\n</code></pre>"},{"location":"reference/stardewui/tags/#parameters_4","title":"Parameters","text":"<p><code>value</code> \u00a0 T The new tag value.</p>"},{"location":"reference/stardewui/ui/","title":"UI","text":""},{"location":"reference/stardewui/ui/#class-ui","title":"Class UI","text":""},{"location":"reference/stardewui/ui/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Entry point for Stardew UI. Must be called from Entry(IModHelper).</p> <pre><code>public static class UI\n</code></pre> <p>Inheritance Object \u21e6 UI</p>"},{"location":"reference/stardewui/ui/#members","title":"Members","text":""},{"location":"reference/stardewui/ui/#methods","title":"Methods","text":"Name Description Initialize(IModHelper, IMonitor) Initialize the framework. RegisterAddon(IAddon) Registers a UI add-on (mod extension)."},{"location":"reference/stardewui/ui/#details","title":"Details","text":""},{"location":"reference/stardewui/ui/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/ui/#initializeimodhelper-imonitor","title":"Initialize(IModHelper, IMonitor)","text":"<p>Initialize the framework.</p> <pre><code>public static void Initialize(StardewModdingAPI.IModHelper helper, StardewModdingAPI.IMonitor monitor);\n</code></pre>"},{"location":"reference/stardewui/ui/#parameters","title":"Parameters","text":"<p><code>helper</code> \u00a0 IModHelper Helper for the calling mod.</p> <p><code>monitor</code> \u00a0 IMonitor SMAPI logging helper.</p>"},{"location":"reference/stardewui/ui/#registeraddoniaddon","title":"RegisterAddon(IAddon)","text":"<p>Registers a UI add-on (mod extension).</p> <pre><code>public static void RegisterAddon(StardewUI.Framework.Addons.IAddon addon);\n</code></pre>"},{"location":"reference/stardewui/ui/#parameters_1","title":"Parameters","text":"<p><code>addon</code> IAddon The add-on definition.</p>"},{"location":"reference/stardewui/ui/#remarks","title":"Remarks","text":"<p>Add-ons are resolved in the game's GameLaunched event. Therefore, mods providing add-ons must register them as early as possible, typically in their Entry(IModHelper) method, but if that is too early, then in a <code>GameLaunched</code> handler of their own with a high EventPriority. </p> <p>Types provided by add-ons (views, converters, etc.) will not actually be used until a UI is created, so add-ons may employ lazy/deferred loading if they need to postpone some critical operations until after the game is fully loaded, other APIs are initialized, etc.</p>"},{"location":"reference/stardewui/uiviewport/","title":"UiViewport","text":""},{"location":"reference/stardewui/uiviewport/#class-uiviewport","title":"Class UiViewport","text":""},{"location":"reference/stardewui/uiviewport/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Utilities relating to the game's UI viewport.</p> <pre><code>public static class UiViewport\n</code></pre> <p>Inheritance Object \u21e6 UiViewport</p>"},{"location":"reference/stardewui/uiviewport/#members","title":"Members","text":""},{"location":"reference/stardewui/uiviewport/#methods","title":"Methods","text":"Name Description GetMaxSize() Gets the maximum size for the entire viewport."},{"location":"reference/stardewui/uiviewport/#details","title":"Details","text":""},{"location":"reference/stardewui/uiviewport/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/uiviewport/#getmaxsize","title":"GetMaxSize()","text":"<p>Gets the maximum size for the entire viewport.</p> <pre><code>public static Microsoft.Xna.Framework.Point GetMaxSize();\n</code></pre>"},{"location":"reference/stardewui/uiviewport/#returns","title":"Returns","text":"<p>Point</p> <p>The game's uiViewport, constrained to the viewport of the current GraphicsDevice.</p>"},{"location":"reference/stardewui/view/","title":"View","text":""},{"location":"reference/stardewui/view/#class-view","title":"Class View","text":""},{"location":"reference/stardewui/view/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Base class for typical widgets wanting to implement IView.</p> <pre><code>public class View : StardewUI.IView, System.IDisposable, \n    System.ComponentModel.INotifyPropertyChanged\n</code></pre> <p>Inheritance Object \u21e6 View</p> <p>Implements IView, IDisposable, INotifyPropertyChanged</p>"},{"location":"reference/stardewui/view/#remarks","title":"Remarks","text":"<p>Use of this class isn't required, but provides some useful behaviors so that view types don't need to keep re-implementing them, such as a standard Measure(Vector2) implementation that skips unnecessary layouts.</p>"},{"location":"reference/stardewui/view/#members","title":"Members","text":""},{"location":"reference/stardewui/view/#constructors","title":"Constructors","text":"Name Description View() Initializes a new instance of View."},{"location":"reference/stardewui/view/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0). BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins. ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically. Draggable Whether or not this view should fire drag events such as DragStart and Drag. FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants. FloatingElements The floating elements to display relative to this view. Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children. InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin. IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls. LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks. Layout Layout settings for this view; determines how its dimensions will be computed. LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries. Margin Margins (whitespace outside border) for this view. Name Simple name for this view, used in log/debug output; does not affect behavior. Opacity Opacity (alpha level) of the view. OuterSize The size of the entire area occupied by this view including margins, border and padding. Padding Padding (whitespace inside border) for this view. PointerEventsEnabled Whether this view should receive pointer events like Click or Drag. ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it. Tags The user-defined tags for this view. Tooltip Localized tooltip to display on hover, if any. Visibility Visibility for this view. ZIndex Z order for this view within its direct parent. Higher indices draw later (on top)."},{"location":"reference/stardewui/view/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds. Dispose() Draw(ISpriteBatch) Draws the content for this view. FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found. FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position. GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border. GetChildAt(Vector2) Finds the child at a given position. GetChildPosition(IView) Computes or retrieves the position of a given direct child. GetChildren() Gets the current children of this view. GetChildrenAt(Vector2) Finds all children at a given position. GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened. GetLocalChildren() Gets the view's children with positions relative to the content area. GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area. HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds. IsContentDirty() Checks whether or not the internal content/layout has changed. IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2). LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message. Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions. OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path. OnClick(ClickEventArgs) Called when a click is received within this view's bounds. OnDispose() Performs additional cleanup when Dispose() is called. OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held). OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one. OnDrawContent(ISpriteBatch) Draws the inner content of this view. OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs). OnMeasure(Vector2) Performs the internal layout. OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs. OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event. OnPropertyChanged(string) Raises the PropertyChanged event. OnUpdate(TimeSpan) Runs on every update tick. OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds. ResetDirty() Resets any dirty state associated with this view. ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view. ToString() (Overrides Object.<code>ToString()</code>)"},{"location":"reference/stardewui/view/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed. Click Event raised when the view receives a click. Drag Event raised when the view is being dragged using the mouse. DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation. DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation. LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A). PointerEnter Event raised when the pointer enters the view. PointerLeave Event raised when the pointer exits the view. PointerMove Event raised when the pointer moves within the view. PropertyChanged RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X). Wheel Event raised when the scroll wheel moves."},{"location":"reference/stardewui/view/#details","title":"Details","text":""},{"location":"reference/stardewui/view/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/view/#view","title":"View()","text":"<p>Initializes a new instance of View.</p> <pre><code>public View();\n</code></pre>"},{"location":"reference/stardewui/view/#remarks_1","title":"Remarks","text":"<p>The view's Name will default to the simple name of its most derived Type.</p>"},{"location":"reference/stardewui/view/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/view/#actualbounds","title":"ActualBounds","text":"<p>The bounds of this view relative to the origin (0, 0).</p> <pre><code>public StardewUI.Layout.Bounds ActualBounds { get; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value","title":"Property Value","text":"<p>Bounds</p>"},{"location":"reference/stardewui/view/#remarks_2","title":"Remarks","text":"<p>Typically, a view's bounds is the rectangle from (0, 0) having size of OuterSize, but there may be a difference especially in the case of negative margins. The various sizes affect layout flow and can even be negative - for example, in a left-to-right layout, a view with left margin -100, right margin 20 and inner width 30 (no padding) has an X size of -50, indicating that it actually (correctly) causes adjacent views to be pulled left along with it. However, <code>ActualBounds</code> always has a positive Size, and if an implicit content offset is being applied (e.g. because of negative margins) then it will be reflected in Position and not affect the Size; the previous example would have position X = -100 and size X = 50 (30 content + 20 right margin). </p> <p>In terms of usage, OuterSize is generally used for the layout itself (Measure(Vector2) and OnMeasure(Vector2) of parent views) whereas ActualBounds is preferred for click and focus targeting.</p>"},{"location":"reference/stardewui/view/#bordersize","title":"BorderSize","text":"<p>The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 BorderSize { get; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_1","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/view/#contentbounds","title":"ContentBounds","text":"<p>The true bounds of this view's content; i.e. ActualBounds excluding margins.</p> <pre><code>public StardewUI.Layout.Bounds ContentBounds { get; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_2","title":"Property Value","text":"<p>Bounds</p>"},{"location":"reference/stardewui/view/#contentsize","title":"ContentSize","text":"<p>The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 ContentSize { get; protected set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_3","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/view/#draggable","title":"Draggable","text":"<p>Whether or not this view should fire drag events such as DragStart and Drag.</p> <pre><code>public bool Draggable { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_4","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/view/#floatingbounds","title":"FloatingBounds","text":"<p>Contains the bounds of all floating elements in this view tree, including the current view and all descendants.</p> <pre><code>public System.Collections.Generic.IEnumerable&lt;StardewUI.Layout.Bounds&gt; FloatingBounds { get; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_5","title":"Property Value","text":"<p>IEnumerable&lt;Bounds&gt;</p>"},{"location":"reference/stardewui/view/#floatingelements","title":"FloatingElements","text":"<p>The floating elements to display relative to this view.</p> <pre><code>public System.Collections.Generic.IList&lt;StardewUI.Layout.FloatingElement&gt; FloatingElements { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_6","title":"Property Value","text":"<p>IList&lt;FloatingElement&gt;</p>"},{"location":"reference/stardewui/view/#focusable","title":"Focusable","text":"<p>Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.</p> <pre><code>public bool Focusable { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_7","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/view/#remarks_3","title":"Remarks","text":"<p>All views are non-focusable by default and must have their focus enabled explicitly. Subclasses may choose to override the default value if they should always be focusable.</p>"},{"location":"reference/stardewui/view/#innersize","title":"InnerSize","text":"<p>The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 InnerSize { get; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_8","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/view/#isfocusable","title":"IsFocusable","text":"<p>Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.</p> <pre><code>public bool IsFocusable { get; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_9","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/view/#remarks_4","title":"Remarks","text":"<p>In other game UI code this is more typically referred to as \"snap\", since there is no true input focus. However, focus is the more general term and better explains what is happening with e.g. a text box.</p>"},{"location":"reference/stardewui/view/#lastavailablesize","title":"LastAvailableSize","text":"<p>The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.</p> <pre><code>protected Microsoft.Xna.Framework.Vector2 LastAvailableSize { get; private set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_10","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/view/#layout","title":"Layout","text":"<p>Layout settings for this view; determines how its dimensions will be computed.</p> <pre><code>public StardewUI.Layout.LayoutParameters Layout { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_11","title":"Property Value","text":"<p>LayoutParameters</p>"},{"location":"reference/stardewui/view/#layoutoffset","title":"LayoutOffset","text":"<p>Pixel offset of the view's content, which is applied to all pointer events and child queries.</p> <pre><code>protected Microsoft.Xna.Framework.Vector2 LayoutOffset { get; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_12","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/view/#remarks_5","title":"Remarks","text":"<p>A non-zero offset means that the nominal positions of any view children (e.g. as obtained from GetChildren()) are different from their actual drawing positions on screen, for example in the case of a ScrollContainer that is not at the default scroll position. </p> <p>If a view will internally shift content in this way without affecting layout, it should update the LayoutOffset property to ensure correctness of pointer events and coordinate-related queries such as GetLocalChildrenAt(Vector2), instead of attempting to correct for that offset locally.</p>"},{"location":"reference/stardewui/view/#margin","title":"Margin","text":"<p>Margins (whitespace outside border) for this view.</p> <pre><code>public StardewUI.Layout.Edges Margin { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_13","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/view/#name","title":"Name","text":"<p>Simple name for this view, used in log/debug output; does not affect behavior.</p> <pre><code>public string Name { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_14","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/view/#opacity","title":"Opacity","text":"<p>Opacity (alpha level) of the view.</p> <pre><code>public float Opacity { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_15","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/view/#remarks_6","title":"Remarks","text":"<p>Affects this view and all descendants; used to control opacity of an entire control or layout area.</p>"},{"location":"reference/stardewui/view/#outersize","title":"OuterSize","text":"<p>The size of the entire area occupied by this view including margins, border and padding.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 OuterSize { get; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_16","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/view/#padding","title":"Padding","text":"<p>Padding (whitespace inside border) for this view.</p> <pre><code>public StardewUI.Layout.Edges Padding { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_17","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/view/#pointereventsenabled","title":"PointerEventsEnabled","text":"<p>Whether this view should receive pointer events like Click or Drag.</p> <pre><code>public bool PointerEventsEnabled { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_18","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/view/#remarks_7","title":"Remarks","text":"<p>By default, all views receive pointer events; this may be disabled for views that intentionally overlap other views but shouldn't block their input, such as local non-modal overlays.</p>"},{"location":"reference/stardewui/view/#scrollwithchildren","title":"ScrollWithChildren","text":"<p>If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.</p> <pre><code>public StardewUI.Layout.Orientation? ScrollWithChildren { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_19","title":"Property Value","text":"<p>Nullable&lt;Orientation&gt;</p>"},{"location":"reference/stardewui/view/#remarks_8","title":"Remarks","text":"<p>For example, if the view lays out children horizontally, and some children may occupy only a very small amount of space near the top while others are much taller vertically or positioned near the bottom, it might be desirable to configure this with Vertical, so that the entire \"row\" is positioned within the scrollable viewport. </p> <p>In other words, \"if any part of me is made visible via scrolling, then all of me should be visible\".</p>"},{"location":"reference/stardewui/view/#tags","title":"Tags","text":"<p>The user-defined tags for this view.</p> <pre><code>public StardewUI.Tags Tags { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_20","title":"Property Value","text":"<p>Tags</p>"},{"location":"reference/stardewui/view/#tooltip","title":"Tooltip","text":"<p>Localized tooltip to display on hover, if any.</p> <pre><code>public StardewUI.Data.TooltipData Tooltip { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_21","title":"Property Value","text":"<p>TooltipData</p>"},{"location":"reference/stardewui/view/#visibility","title":"Visibility","text":"<p>Visibility for this view.</p> <pre><code>public StardewUI.Layout.Visibility Visibility { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_22","title":"Property Value","text":"<p>Visibility</p>"},{"location":"reference/stardewui/view/#zindex","title":"ZIndex","text":"<p>Z order for this view within its direct parent. Higher indices draw later (on top).</p> <pre><code>public int ZIndex { get; set; }\n</code></pre>"},{"location":"reference/stardewui/view/#property-value_23","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/view/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/view/#containspointvector2","title":"ContainsPoint(Vector2)","text":"<p>Checks if a given point, relative to the view's origin, is within its bounds.</p> <pre><code>public bool ContainsPoint(Microsoft.Xna.Framework.Vector2 point);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters","title":"Parameters","text":"<p><code>point</code> Vector2 The point to test.</p>"},{"location":"reference/stardewui/view/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if <code>point</code> is within the view bounds; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/view/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose();\n</code></pre>"},{"location":"reference/stardewui/view/#drawispritebatch","title":"Draw(ISpriteBatch)","text":"<p>Draws the content for this view.</p> <pre><code>public void Draw(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_1","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/view/#remarks_9","title":"Remarks","text":"<p>Drawing always happens after the measure pass, so ContentSize should be known and stable at this time, as long as the implementation itself is stable.</p>"},{"location":"reference/stardewui/view/#findfocusabledescendantvector2-direction","title":"FindFocusableDescendant(Vector2, Direction)","text":"<p>Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.</p> <pre><code>protected virtual StardewUI.Input.FocusSearchResult FindFocusableDescendant(Microsoft.Xna.Framework.Vector2 contentPosition, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_2","title":"Parameters","text":"<p><code>contentPosition</code> Vector2 The search position, relative to where this view's content starts (after applying margin, borders and padding).</p> <p><code>direction</code> Direction The search direction.</p>"},{"location":"reference/stardewui/view/#returns_1","title":"Returns","text":"<p>FocusSearchResult</p>"},{"location":"reference/stardewui/view/#remarks_10","title":"Remarks","text":"<p>This is the same as FocusSearch(Vector2, Direction) but in pre-transformed content coordinates, and does not require checking for \"self-focus\" as FocusSearch(Vector2, Direction) already does this. The default implementation simply returns <code>null</code> as most views do not have children; subclasses with children must override this.</p>"},{"location":"reference/stardewui/view/#focussearchvector2-direction","title":"FocusSearch(Vector2, Direction)","text":"<p>Finds the next focusable component in a given direction that does not overlap with a current position.</p> <pre><code>public StardewUI.Input.FocusSearchResult FocusSearch(Microsoft.Xna.Framework.Vector2 position, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_3","title":"Parameters","text":"<p><code>position</code> Vector2 The current cursor position, relative to this view. May have dimensions that are negative or outside the view bounds, indicating that the cursor is not currently within the view.</p> <p><code>direction</code> Direction The direction of cursor movement.</p>"},{"location":"reference/stardewui/view/#returns_2","title":"Returns","text":"<p>FocusSearchResult</p>"},{"location":"reference/stardewui/view/#remarks_11","title":"Remarks","text":"<p>This will first call FindFocusableDescendant(Vector2, Direction) to see if the specific view type wants to implement its own focus search. If there is no focusable descendant, then this will return a reference to the current view if IsFocusable is <code>true</code> and the position is not already within the view's bounds - meaning, any focusable view can accept focus from any direction, but will not consider itself a result if it is already focused (since we are trying to \"move\" focus).</p>"},{"location":"reference/stardewui/view/#getborderthickness","title":"GetBorderThickness()","text":"<p>Measures the thickness of each edge of the border, if the view has a border.</p> <pre><code>protected virtual StardewUI.Layout.Edges GetBorderThickness();\n</code></pre>"},{"location":"reference/stardewui/view/#returns_3","title":"Returns","text":"<p>Edges</p> <p>The border edge thicknesses.</p>"},{"location":"reference/stardewui/view/#remarks_12","title":"Remarks","text":"<p>Used only by views that will implement a border via OnDrawBorder(ISpriteBatch). The border thickness is considered during layout, and generally treated as additional Padding for the purposes of setting allowed content size. </p> <p>Borders usually have a static size, but if the thickness can change, then implementations must account for it in their dirty checking (IsContentDirty()).</p>"},{"location":"reference/stardewui/view/#getchildatvector2","title":"GetChildAt(Vector2)","text":"<p>Finds the child at a given position.</p> <pre><code>public StardewUI.ViewChild GetChildAt(Microsoft.Xna.Framework.Vector2 position);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_4","title":"Parameters","text":"<p><code>position</code> Vector2 The search position, relative to the view's top-left coordinate.</p>"},{"location":"reference/stardewui/view/#returns_4","title":"Returns","text":"<p>ViewChild</p> <p>The view at <code>position</code>, or <code>null</code> if there is no match.</p>"},{"location":"reference/stardewui/view/#remarks_13","title":"Remarks","text":"<p>If multiple children overlap the same position, then this returns the topmost child.</p>"},{"location":"reference/stardewui/view/#getchildpositioniview","title":"GetChildPosition(IView)","text":"<p>Computes or retrieves the position of a given direct child.</p> <pre><code>public Microsoft.Xna.Framework.Vector2? GetChildPosition(StardewUI.IView childView);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_5","title":"Parameters","text":"<p><code>childView</code> IView The child of this view.</p>"},{"location":"reference/stardewui/view/#returns_5","title":"Returns","text":"<p>Nullable&lt;Vector2&gt;</p> <p>The local coordinates of the <code>childView</code>, or <code>null</code> if the <code>childView</code> is not a current or direct child.</p>"},{"location":"reference/stardewui/view/#remarks_14","title":"Remarks","text":"<p>Implementation of this may be O(N) and therefore it should not be called every frame; it is intended for use in directional movement and other user-initiated events.</p>"},{"location":"reference/stardewui/view/#getchildren","title":"GetChildren()","text":"<p>Gets the current children of this view.</p> <pre><code>public System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetChildren();\n</code></pre>"},{"location":"reference/stardewui/view/#returns_6","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/view/#getchildrenatvector2","title":"GetChildrenAt(Vector2)","text":"<p>Finds all children at a given position.</p> <pre><code>public System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetChildrenAt(Microsoft.Xna.Framework.Vector2 position);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_6","title":"Parameters","text":"<p><code>position</code> Vector2 The search position, relative to the view's top-left coordinate.</p>"},{"location":"reference/stardewui/view/#returns_7","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p> <p>A sequence of views at the specified <code>position</code>, in front-to-back (reverse ZIndex) order.</p>"},{"location":"reference/stardewui/view/#getdefaultfocuschild","title":"GetDefaultFocusChild()","text":"<p>Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.</p> <pre><code>public virtual StardewUI.ViewChild GetDefaultFocusChild();\n</code></pre>"},{"location":"reference/stardewui/view/#returns_8","title":"Returns","text":"<p>ViewChild</p> <p>The child view and position where initial focus should be, either directly or indirectly as a result of a descendant receiving focus. If this IView is itself IsFocusable, then the result may be a ViewChild referencing this view.</p>"},{"location":"reference/stardewui/view/#getlocalchildren","title":"GetLocalChildren()","text":"<p>Gets the view's children with positions relative to the content area.</p> <pre><code>protected virtual System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetLocalChildren();\n</code></pre>"},{"location":"reference/stardewui/view/#returns_9","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/view/#remarks_15","title":"Remarks","text":"<p>This has the same signature as GetChildren() but assumes that coordinates are in the same space as those used in OnDrawContent(ISpriteBatch), i.e. not accounting for margin/border/padding. These coordinates are automatically adjusted in the GetChildren() to be relative to the entire view. </p> <p>The default implementation returns an empty sequence. Composite views must override this method in order for user interactions to behave correctly.</p>"},{"location":"reference/stardewui/view/#getlocalchildrenatvector2","title":"GetLocalChildrenAt(Vector2)","text":"<p>Searches for all views at a given position relative to the content area.</p> <pre><code>protected virtual System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetLocalChildrenAt(Microsoft.Xna.Framework.Vector2 contentPosition);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_7","title":"Parameters","text":"<p><code>contentPosition</code> Vector2 The search position, relative to where this view's content starts (after applying margin, borders and padding).</p>"},{"location":"reference/stardewui/view/#returns_10","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p> <p>The views at the specified <code>contentPosition</code>, in original layout order.</p>"},{"location":"reference/stardewui/view/#remarks_16","title":"Remarks","text":"<p>The default implementation performs a linear search on all children and returns all whose bounds overlap the specified <code>contentPosition</code>. Views can override this to provide optimized implementations for their layout, or handle overlapping views.</p>"},{"location":"reference/stardewui/view/#hasoutofboundscontent","title":"HasOutOfBoundsContent()","text":"<p>Checks if the view has content or elements that are all or partially outside the ActualBounds.</p> <pre><code>public bool HasOutOfBoundsContent();\n</code></pre>"},{"location":"reference/stardewui/view/#returns_11","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/view/#remarks_17","title":"Remarks","text":"<p>This may be the case for e.g. floating elements, and covers not only the view's immediate content/children but also that of any descendants.</p>"},{"location":"reference/stardewui/view/#iscontentdirty","title":"IsContentDirty()","text":"<p>Checks whether or not the internal content/layout has changed.</p> <pre><code>protected virtual bool IsContentDirty();\n</code></pre>"},{"location":"reference/stardewui/view/#returns_12","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if content has changed; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/view/#remarks_18","title":"Remarks","text":"<p>The base implementation of IsDirty() only checks if the base layout attributes have changed, i.e. Layout, Margin, Padding, etc. It does not know about content/data in any subclasses; those that accept content parameters (like text) will typically use DirtyTracker&lt;T&gt; to hold that content and should implement this method to check their IsDirty states.</p>"},{"location":"reference/stardewui/view/#isdirty","title":"IsDirty()","text":"<p>Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).</p> <pre><code>public bool IsDirty();\n</code></pre>"},{"location":"reference/stardewui/view/#returns_13","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the view must be measured again; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/view/#remarks_19","title":"Remarks","text":"<p>Typically, a view will be considered dirty if and only if one of the following are true: </p> <ul> <li>The Layout has changed</li> <li>The content has changed in a way that could affect layout, e.g. the text has changed in a Content configuration</li> <li>The <code>availableSize</code> is not the same as the previously-seen value (see remarks in Measure(Vector2))</li> </ul> <p>A correct implementation is important for performance, as full layout can be very expensive to run on every frame.</p>"},{"location":"reference/stardewui/view/#logfocussearchstring","title":"LogFocusSearch(string)","text":"<p>Outputs a debug log entry with the current view type, name and specified message.</p> <pre><code>protected void LogFocusSearch(string message);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_8","title":"Parameters","text":"<p><code>message</code> string The message to log in addition to the view type and name.</p>"},{"location":"reference/stardewui/view/#remarks_20","title":"Remarks","text":"<p>Used primarily for debugging focus searches and requires the <code>DEBUG_FOCUS_SEARCH</code> compiler flag.</p>"},{"location":"reference/stardewui/view/#measurevector2","title":"Measure(Vector2)","text":"<p>Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.</p> <pre><code>public bool Measure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_9","title":"Parameters","text":"<p><code>availableSize</code> Vector2 The width/height that is still available in the container/parent.</p>"},{"location":"reference/stardewui/view/#returns_14","title":"Returns","text":"<p>Boolean</p> <p>Whether or not any layout was performed as a result of this pass. Callers may use this to propagate layout back up the tree, or perform expensive follow-up actions.</p>"},{"location":"reference/stardewui/view/#remarks_21","title":"Remarks","text":"<p>Most views should save the value of <code>availableSize</code> for use in IsDirty() checks.</p>"},{"location":"reference/stardewui/view/#onbuttonpressbuttoneventargs","title":"OnButtonPress(ButtonEventArgs)","text":"<p>Called when a button press is received while this view is in the focus path.</p> <pre><code>public virtual void OnButtonPress(StardewUI.Events.ButtonEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_10","title":"Parameters","text":"<p><code>e</code> ButtonEventArgs The event data.</p>"},{"location":"reference/stardewui/view/#onclickclickeventargs","title":"OnClick(ClickEventArgs)","text":"<p>Called when a click is received within this view's bounds.</p> <pre><code>public virtual void OnClick(StardewUI.Events.ClickEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_11","title":"Parameters","text":"<p><code>e</code> ClickEventArgs The event data.</p>"},{"location":"reference/stardewui/view/#ondispose","title":"OnDispose()","text":"<p>Performs additional cleanup when Dispose() is called.</p> <pre><code>protected virtual void OnDispose();\n</code></pre>"},{"location":"reference/stardewui/view/#remarks_22","title":"Remarks","text":"<p>The default implementation is a stub. Subclasses may override this if they require separate cleanup.</p>"},{"location":"reference/stardewui/view/#ondragpointereventargs","title":"OnDrag(PointerEventArgs)","text":"<p>Called when the view is being dragged (mouse moved while left button held).</p> <pre><code>public virtual void OnDrag(StardewUI.Events.PointerEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_12","title":"Parameters","text":"<p><code>e</code> PointerEventArgs The event data.</p>"},{"location":"reference/stardewui/view/#ondrawborderispritebatch","title":"OnDrawBorder(ISpriteBatch)","text":"<p>Draws the view's border, if it has one.</p> <pre><code>protected virtual void OnDrawBorder(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_13","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/view/#remarks_23","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying Margin but before Padding.</p>"},{"location":"reference/stardewui/view/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected virtual void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_14","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/view/#remarks_24","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/view/#ondroppointereventargs","title":"OnDrop(PointerEventArgs)","text":"<p>Called when the mouse button is released after at least one OnDrag(PointerEventArgs).</p> <pre><code>public virtual void OnDrop(StardewUI.Events.PointerEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_15","title":"Parameters","text":"<p><code>e</code> PointerEventArgs The event data.</p>"},{"location":"reference/stardewui/view/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected virtual void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_16","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/view/#remarks_25","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/view/#onpointermovepointermoveeventargs","title":"OnPointerMove(PointerMoveEventArgs)","text":"<p>Called when a pointer movement related to this view occurs.</p> <pre><code>public virtual void OnPointerMove(StardewUI.Events.PointerMoveEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_17","title":"Parameters","text":"<p><code>e</code> PointerMoveEventArgs The event data.</p>"},{"location":"reference/stardewui/view/#remarks_26","title":"Remarks","text":"<p>This can either be the pointer entering the view, leaving the view, or moving within the view. The method is used to trigger events such as PointerEnter and PointerLeave.</p>"},{"location":"reference/stardewui/view/#onpropertychangedpropertychangedeventargs","title":"OnPropertyChanged(PropertyChangedEventArgs)","text":"<p>Raises the PropertyChanged event.</p> <pre><code>protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs args);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_18","title":"Parameters","text":"<p><code>args</code> PropertyChangedEventArgs The event arguments.</p>"},{"location":"reference/stardewui/view/#onpropertychangedstring","title":"OnPropertyChanged(string)","text":"<p>Raises the PropertyChanged event.</p> <pre><code>protected virtual void OnPropertyChanged(string propertyName);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_19","title":"Parameters","text":"<p><code>propertyName</code> string The name of the property that was changed.</p>"},{"location":"reference/stardewui/view/#onupdatetimespan","title":"OnUpdate(TimeSpan)","text":"<p>Runs on every update tick.</p> <pre><code>public virtual void OnUpdate(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_20","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan Time elapsed since last game tick.</p>"},{"location":"reference/stardewui/view/#remarks_27","title":"Remarks","text":"<p>When overriding OnUpdate(TimeSpan), be sure to call <code>base.OnUpdate()</code> to ensure that any view children also receive their updates.</p>"},{"location":"reference/stardewui/view/#onwheelwheeleventargs","title":"OnWheel(WheelEventArgs)","text":"<p>Called when a wheel event is received within this view's bounds.</p> <pre><code>public virtual void OnWheel(StardewUI.Events.WheelEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_21","title":"Parameters","text":"<p><code>e</code> WheelEventArgs The event data.</p>"},{"location":"reference/stardewui/view/#resetdirty","title":"ResetDirty()","text":"<p>Resets any dirty state associated with this view.</p> <pre><code>protected virtual void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/view/#remarks_28","title":"Remarks","text":"<p>This is called at the end of Measure(Vector2), so that on the next pass, all state appears clean unless it was marked dirty after the last pass completed. The default implementation is a no-op; subclasses should use it to clear any private dirty state, e.g. via ResetDirty().</p>"},{"location":"reference/stardewui/view/#scrollintoviewienumerableviewchild-vector2","title":"ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)","text":"<p>Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.</p> <pre><code>public virtual bool ScrollIntoView(System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; path, out Microsoft.Xna.Framework.Vector2 distance);\n</code></pre>"},{"location":"reference/stardewui/view/#parameters_22","title":"Parameters","text":"<p><code>path</code> IEnumerable&lt;ViewChild&gt; The path to the view that should be visible, starting from (and not including) this view; each element has the local position within its own parent, so the algorithm can run recursively. This is a slice of the same path returned in a FocusSearchResult.</p> <p><code>distance</code> Vector2 The total distance that was scrolled, including distance scrolled by descendants.</p>"},{"location":"reference/stardewui/view/#returns_15","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/view/#remarks_29","title":"Remarks","text":"<p>The default implementation does no scrolling of its own, only passes the request down to the child and aborts if the child returns <code>true</code>. Scrollable views must override this to provide scrolling behavior.</p>"},{"location":"reference/stardewui/view/#tostring","title":"ToString()","text":"<pre><code>public override string ToString();\n</code></pre>"},{"location":"reference/stardewui/view/#returns_16","title":"Returns","text":"<p>string</p>"},{"location":"reference/stardewui/view/#events_1","title":"Events","text":""},{"location":"reference/stardewui/view/#buttonpress","title":"ButtonPress","text":"<p>Event raised when any button on any input device is pressed.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.ButtonEventArgs&gt;? ButtonPress;\n</code></pre>"},{"location":"reference/stardewui/view/#event-type","title":"Event Type","text":"<p>EventHandler&lt;ButtonEventArgs&gt;</p>"},{"location":"reference/stardewui/view/#remarks_30","title":"Remarks","text":"<p>Only the views in the current focus path should receive these events.</p>"},{"location":"reference/stardewui/view/#click","title":"Click","text":"<p>Event raised when the view receives a click.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.ClickEventArgs&gt;? Click;\n</code></pre>"},{"location":"reference/stardewui/view/#event-type_1","title":"Event Type","text":"<p>EventHandler&lt;ClickEventArgs&gt;</p>"},{"location":"reference/stardewui/view/#drag","title":"Drag","text":"<p>Event raised when the view is being dragged using the mouse.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? Drag;\n</code></pre>"},{"location":"reference/stardewui/view/#event-type_2","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/view/#dragend","title":"DragEnd","text":"<p>Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? DragEnd;\n</code></pre>"},{"location":"reference/stardewui/view/#event-type_3","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/view/#dragstart","title":"DragStart","text":"<p>Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? DragStart;\n</code></pre>"},{"location":"reference/stardewui/view/#event-type_4","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/view/#leftclick","title":"LeftClick","text":"<p>Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).</p> <pre><code>public event EventHandler&lt;StardewUI.Events.ClickEventArgs&gt;? LeftClick;\n</code></pre>"},{"location":"reference/stardewui/view/#event-type_5","title":"Event Type","text":"<p>EventHandler&lt;ClickEventArgs&gt;</p>"},{"location":"reference/stardewui/view/#pointerenter","title":"PointerEnter","text":"<p>Event raised when the pointer enters the view.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? PointerEnter;\n</code></pre>"},{"location":"reference/stardewui/view/#event-type_6","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/view/#pointerleave","title":"PointerLeave","text":"<p>Event raised when the pointer exits the view.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? PointerLeave;\n</code></pre>"},{"location":"reference/stardewui/view/#event-type_7","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/view/#pointermove","title":"PointerMove","text":"<p>Event raised when the pointer moves within the view.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.PointerMoveEventArgs&gt;? PointerMove;\n</code></pre>"},{"location":"reference/stardewui/view/#event-type_8","title":"Event Type","text":"<p>EventHandler&lt;PointerMoveEventArgs&gt;</p>"},{"location":"reference/stardewui/view/#propertychanged","title":"PropertyChanged","text":"<pre><code>public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;\n</code></pre>"},{"location":"reference/stardewui/view/#event-type_9","title":"Event Type","text":"<p>PropertyChangedEventHandler</p>"},{"location":"reference/stardewui/view/#rightclick","title":"RightClick","text":"<p>Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).</p> <pre><code>public event EventHandler&lt;StardewUI.Events.ClickEventArgs&gt;? RightClick;\n</code></pre>"},{"location":"reference/stardewui/view/#event-type_10","title":"Event Type","text":"<p>EventHandler&lt;ClickEventArgs&gt;</p>"},{"location":"reference/stardewui/view/#wheel","title":"Wheel","text":"<p>Event raised when the scroll wheel moves.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.WheelEventArgs&gt;? Wheel;\n</code></pre>"},{"location":"reference/stardewui/view/#event-type_11","title":"Event Type","text":"<p>EventHandler&lt;WheelEventArgs&gt;</p>"},{"location":"reference/stardewui/viewchild/","title":"ViewChild","text":""},{"location":"reference/stardewui/viewchild/#class-viewchild","title":"Class ViewChild","text":""},{"location":"reference/stardewui/viewchild/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Provides information about a view that is the child of another view. Used for interactions.</p> <pre><code>public record ViewChild : StardewUI.Layout.IOffsettable&lt;StardewUI.ViewChild&gt;, \n    IEquatable&lt;StardewUI.ViewChild&gt;\n</code></pre> <p>Inheritance Object \u21e6 ViewChild</p> <p>Implements IOffsettable&lt;ViewChild&gt;, IEquatable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/viewchild/#members","title":"Members","text":""},{"location":"reference/stardewui/viewchild/#constructors","title":"Constructors","text":"Name Description ViewChild(IView, Vector2) Provides information about a view that is the child of another view. Used for interactions."},{"location":"reference/stardewui/viewchild/#properties","title":"Properties","text":"Name Description EqualityContract Position The position of the <code>View</code>, relative to the parent. View The child view."},{"location":"reference/stardewui/viewchild/#methods","title":"Methods","text":"Name Description Center() Gets the point at the exact center of the view. CenterPoint() Gets the nearest whole pixel point at the exact center of the view. ContainsPoint(Vector2) Checks if a given point, relative to the view's parent, is within the bounds of this child. FocusSearch(Vector2, Direction) Performs a focus search on the referenced view. GetActualBounds() Returns a Bounds representing the parent-relative layout bounds of this child. GetContentBounds() Returns a Bounds representing the parent-relative content bounds of this child. GetFloatingBounds() Returns a sequence of Bounds representing the parent-relative bounds of this child's own floating elements and those of all its descendants. IsInDirection(Vector2, Direction) Checks if a view can be reached by travelling from a given point in a given direction. Offset(Vector2) Offsets the position by a given distance."},{"location":"reference/stardewui/viewchild/#details","title":"Details","text":""},{"location":"reference/stardewui/viewchild/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/viewchild/#viewchildiview-vector2","title":"ViewChild(IView, Vector2)","text":"<p>Provides information about a view that is the child of another view. Used for interactions.</p> <pre><code>public ViewChild(StardewUI.IView View, Microsoft.Xna.Framework.Vector2 Position);\n</code></pre>"},{"location":"reference/stardewui/viewchild/#parameters","title":"Parameters","text":"<p><code>View</code> IView The child view.</p> <p><code>Position</code> Vector2 The position of the <code>View</code>, relative to the parent.</p>"},{"location":"reference/stardewui/viewchild/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/viewchild/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/viewchild/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/viewchild/#position","title":"Position","text":"<p>The position of the <code>View</code>, relative to the parent.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 Position { get; set; }\n</code></pre>"},{"location":"reference/stardewui/viewchild/#property-value_1","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/viewchild/#view","title":"View","text":"<p>The child view.</p> <pre><code>public StardewUI.IView View { get; set; }\n</code></pre>"},{"location":"reference/stardewui/viewchild/#property-value_2","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/viewchild/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/viewchild/#center","title":"Center()","text":"<p>Gets the point at the exact center of the view.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 Center();\n</code></pre>"},{"location":"reference/stardewui/viewchild/#returns","title":"Returns","text":"<p>Vector2</p>"},{"location":"reference/stardewui/viewchild/#centerpoint","title":"CenterPoint()","text":"<p>Gets the nearest whole pixel point at the exact center of the view.</p> <pre><code>public Microsoft.Xna.Framework.Point CenterPoint();\n</code></pre>"},{"location":"reference/stardewui/viewchild/#returns_1","title":"Returns","text":"<p>Point</p>"},{"location":"reference/stardewui/viewchild/#containspointvector2","title":"ContainsPoint(Vector2)","text":"<p>Checks if a given point, relative to the view's parent, is within the bounds of this child.</p> <pre><code>public bool ContainsPoint(Microsoft.Xna.Framework.Vector2 point);\n</code></pre>"},{"location":"reference/stardewui/viewchild/#parameters_1","title":"Parameters","text":"<p><code>point</code> Vector2 The point to test.</p>"},{"location":"reference/stardewui/viewchild/#returns_2","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if <code>point</code> is within the parent-relative bounds of this child; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/viewchild/#focussearchvector2-direction","title":"FocusSearch(Vector2, Direction)","text":"<p>Performs a focus search on the referenced view.</p> <pre><code>public StardewUI.Input.FocusSearchResult FocusSearch(Microsoft.Xna.Framework.Vector2 contentPosition, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/viewchild/#parameters_2","title":"Parameters","text":"<p><code>contentPosition</code> Vector2 The current position, relative to the parent that owns this child.</p> <p><code>direction</code> Direction The direction of cursor movement.</p>"},{"location":"reference/stardewui/viewchild/#returns_3","title":"Returns","text":"<p>FocusSearchResult</p> <p>The next focusable view reached by moving in the specified <code>direction</code>, or <code>null</code> if there are no focusable descendants that are possible to reach in that direction.</p>"},{"location":"reference/stardewui/viewchild/#remarks","title":"Remarks","text":"<p>This is equivalent to FocusSearch(Vector2, Direction) but implicitly handles its own Position, so it can be used recursively without directly adjusting any coordinates.</p>"},{"location":"reference/stardewui/viewchild/#getactualbounds","title":"GetActualBounds()","text":"<p>Returns a Bounds representing the parent-relative layout bounds of this child.</p> <pre><code>public StardewUI.Layout.Bounds GetActualBounds();\n</code></pre>"},{"location":"reference/stardewui/viewchild/#returns_4","title":"Returns","text":"<p>Bounds</p>"},{"location":"reference/stardewui/viewchild/#remarks_1","title":"Remarks","text":"<p>Equivalent to the ActualBounds offset by this child's Position.</p>"},{"location":"reference/stardewui/viewchild/#getcontentbounds","title":"GetContentBounds()","text":"<p>Returns a Bounds representing the parent-relative content bounds of this child.</p> <pre><code>public StardewUI.Layout.Bounds GetContentBounds();\n</code></pre>"},{"location":"reference/stardewui/viewchild/#returns_5","title":"Returns","text":"<p>Bounds</p>"},{"location":"reference/stardewui/viewchild/#remarks_2","title":"Remarks","text":"<p>Equivalent to the ContentBounds offset by this child's Position.</p>"},{"location":"reference/stardewui/viewchild/#getfloatingbounds","title":"GetFloatingBounds()","text":"<p>Returns a sequence of Bounds representing the parent-relative bounds of this child's own floating elements and those of all its descendants.</p> <pre><code>public System.Collections.Generic.IEnumerable&lt;StardewUI.Layout.Bounds&gt; GetFloatingBounds();\n</code></pre>"},{"location":"reference/stardewui/viewchild/#returns_6","title":"Returns","text":"<p>IEnumerable&lt;Bounds&gt;</p>"},{"location":"reference/stardewui/viewchild/#isindirectionvector2-direction","title":"IsInDirection(Vector2, Direction)","text":"<p>Checks if a view can be reached by travelling from a given point in a given direction.</p> <pre><code>public bool IsInDirection(Microsoft.Xna.Framework.Vector2 origin, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/viewchild/#parameters_3","title":"Parameters","text":"<p><code>origin</code> Vector2 The origin point.</p> <p><code>direction</code> Direction The direction from <code>origin</code>.</p>"},{"location":"reference/stardewui/viewchild/#returns_7","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the view's boundaries either already contain the <code>origin</code> or are in the specified <code>direction</code> from the <code>origin</code>; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/viewchild/#offsetvector2","title":"Offset(Vector2)","text":"<p>Offsets the position by a given distance.</p> <pre><code>public StardewUI.ViewChild Offset(Microsoft.Xna.Framework.Vector2 distance);\n</code></pre>"},{"location":"reference/stardewui/viewchild/#parameters_4","title":"Parameters","text":"<p><code>distance</code> Vector2 The offset distance.</p>"},{"location":"reference/stardewui/viewchild/#returns_8","title":"Returns","text":"<p>ViewChild</p> <p>A copy of the current ViewChild having the same View and a Position offset by <code>distance</code>.</p>"},{"location":"reference/stardewui/viewextensions/","title":"ViewExtensions","text":""},{"location":"reference/stardewui/viewextensions/#class-viewextensions","title":"Class ViewExtensions","text":""},{"location":"reference/stardewui/viewextensions/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Commonly-used extensions for the IView interface and related types.</p> <pre><code>public static class ViewExtensions\n</code></pre> <p>Inheritance Object \u21e6 ViewExtensions</p>"},{"location":"reference/stardewui/viewextensions/#members","title":"Members","text":""},{"location":"reference/stardewui/viewextensions/#methods","title":"Methods","text":"Name Description GetDefaultFocusPath(IView) Retrieves a path to the default focus child/descendant of a view. GetPathToPosition(IView, Vector2) Retrieves a path to the view at a given position. GetPathToView(IView, IView) Retrieves the path to a descendant view. ResolveChildPath(IView, IEnumerable&lt;IView&gt;) Takes an existing view path and resolves it with child coordinates for the view at each level. ToGlobalPositions(IEnumerable&lt;ViewChild&gt;) Converts a view path in parent-relative coordinates (e.g. from GetPathToPosition(IView, Vector2) and transforms each element to have an absolute Position. ZOrder(IEnumerable&lt;ViewChild&gt;) Sorts a sequence of children in ascending z-order. ZOrderDescending(IEnumerable&lt;ViewChild&gt;) Sorts a sequence of children in descending z-order."},{"location":"reference/stardewui/viewextensions/#details","title":"Details","text":""},{"location":"reference/stardewui/viewextensions/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/viewextensions/#getdefaultfocuspathiview","title":"GetDefaultFocusPath(IView)","text":"<p>Retrieves a path to the default focus child/descendant of a view.</p> <pre><code>public static System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetDefaultFocusPath(StardewUI.IView view);\n</code></pre>"},{"location":"reference/stardewui/viewextensions/#parameters","title":"Parameters","text":"<p><code>view</code> IView The view at which to start the search.</p>"},{"location":"reference/stardewui/viewextensions/#returns","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p> <p>A sequence of ViewChild elements with the IView and position (relative to parent) at each level, starting with the specified <code>view</code> and ending with the lowest-level IView in the default focus path. If no focusable descendant is found, returns an empty sequence.</p>"},{"location":"reference/stardewui/viewextensions/#getpathtopositioniview-vector2","title":"GetPathToPosition(IView, Vector2)","text":"<p>Retrieves a path to the view at a given position.</p> <pre><code>public static System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetPathToPosition(StardewUI.IView view, Microsoft.Xna.Framework.Vector2 position);\n</code></pre>"},{"location":"reference/stardewui/viewextensions/#parameters_1","title":"Parameters","text":"<p><code>view</code> IView The view at which to start the search.</p> <p><code>position</code> Vector2 The position to search for, in coordinates relative to the <code>view</code>.</p>"},{"location":"reference/stardewui/viewextensions/#returns_1","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p> <p>A sequence of ViewChild elements with the IView and position (relative to parent) at each level, starting with the specified <code>view</code> and ending with the lowest-level IView that still overlaps with the specified <code>position</code>. If no match is found, returns an empty sequence.</p>"},{"location":"reference/stardewui/viewextensions/#getpathtoviewiview-iview","title":"GetPathToView(IView, IView)","text":"<p>Retrieves the path to a descendant view.</p> <pre><code>public static System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetPathToView(StardewUI.IView view, StardewUI.IView descendant);\n</code></pre>"},{"location":"reference/stardewui/viewextensions/#parameters_2","title":"Parameters","text":"<p><code>view</code> IView The view at which to start the search.</p> <p><code>descendant</code> IView The descendant view to search for.</p>"},{"location":"reference/stardewui/viewextensions/#returns_2","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p> <p>A sequence of ViewChild elements with the IView and position (relative to parent) at each level, starting with the specified <code>view</code> and ending with the specified <code>descendant</code>. If no match is found, returns <code>null</code>.</p>"},{"location":"reference/stardewui/viewextensions/#remarks","title":"Remarks","text":"<p>This method has worst-case O(N) performance, so avoid calling it in tight loops such as draw methods, and cache the result whenever possible.</p>"},{"location":"reference/stardewui/viewextensions/#resolvechildpathiview-ienumerableiview","title":"ResolveChildPath(IView, IEnumerable&lt;IView&gt;)","text":"<p>Takes an existing view path and resolves it with child coordinates for the view at each level.</p> <pre><code>public static System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; ResolveChildPath(StardewUI.IView view, System.Collections.Generic.IEnumerable&lt;StardewUI.IView&gt; path);\n</code></pre>"},{"location":"reference/stardewui/viewextensions/#parameters_3","title":"Parameters","text":"<p><code>view</code> IView The root view.</p> <p><code>path</code> IEnumerable&lt;IView&gt; The path from root down to some descendant, such as the path returned by GetPathToPosition(IView, Vector2).</p>"},{"location":"reference/stardewui/viewextensions/#returns_3","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p> <p>A sequence of ViewChild elements, starting at the <code>view</code>, where each child's Position is the child's most current location within its parent.</p>"},{"location":"reference/stardewui/viewextensions/#toglobalpositionsienumerableviewchild","title":"ToGlobalPositions(IEnumerable&lt;ViewChild&gt;)","text":"<p>Converts a view path in parent-relative coordinates (e.g. from GetPathToPosition(IView, Vector2) and transforms each element to have an absolute Position.</p> <pre><code>public static System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; ToGlobalPositions(System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; path);\n</code></pre>"},{"location":"reference/stardewui/viewextensions/#parameters_4","title":"Parameters","text":"<p><code>path</code> IEnumerable&lt;ViewChild&gt; The path from root down to leaf view.</p>"},{"location":"reference/stardewui/viewextensions/#returns_4","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p> <p>The <code>path</code> with positions in global coordinates.</p>"},{"location":"reference/stardewui/viewextensions/#remarks_1","title":"Remarks","text":"<p>Since ViewChild does not specify whether the position is local (parent) or global (absolute), it is not possible to validate the incoming sequence and prevent a \"double transformation\". Callers are responsible for knowing whether or not the input sequence is local or global.</p>"},{"location":"reference/stardewui/viewextensions/#zorderienumerableviewchild","title":"ZOrder(IEnumerable&lt;ViewChild&gt;)","text":"<p>Sorts a sequence of children in ascending z-order.</p> <pre><code>public static System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; ZOrder(System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; children);\n</code></pre>"},{"location":"reference/stardewui/viewextensions/#parameters_5","title":"Parameters","text":"<p><code>children</code> IEnumerable&lt;ViewChild&gt; The view children.</p>"},{"location":"reference/stardewui/viewextensions/#returns_5","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p> <p>The <code>children</code> ordered by the view's ZIndex and original sequence order.</p>"},{"location":"reference/stardewui/viewextensions/#remarks_2","title":"Remarks","text":"<p>Order is preserved between views with the same ZIndex, so the resulting sequence will have a primary order of z-index (lower indices first) and a secondary order of original sequence position. This is the correct order for drawing views.</p>"},{"location":"reference/stardewui/viewextensions/#zorderdescendingienumerableviewchild","title":"ZOrderDescending(IEnumerable&lt;ViewChild&gt;)","text":"<p>Sorts a sequence of children in descending z-order.</p> <pre><code>public static System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; ZOrderDescending(System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; children);\n</code></pre>"},{"location":"reference/stardewui/viewextensions/#parameters_6","title":"Parameters","text":"<p><code>children</code> IEnumerable&lt;ViewChild&gt; The view children.</p>"},{"location":"reference/stardewui/viewextensions/#returns_6","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/viewextensions/#remarks_3","title":"Remarks","text":"<p>The resulting sequence will have an order such that views with higher ZIndex appear first, and views with the same z-index will appear in the reverse order of the original sequence. This is the correct order for handling cursor events and any other actions that need to operate on the \"topmost\" view first.</p>"},{"location":"reference/stardewui/viewmenu-1/","title":"ViewMenu&lt;T&gt;","text":""},{"location":"reference/stardewui/viewmenu-1/#class-viewmenut","title":"Class ViewMenu&lt;T&gt;","text":""},{"location":"reference/stardewui/viewmenu-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI Assembly: StardewUI.dll  </p> <p>Generic menu implementation based on a root IView.</p> <pre><code>public class ViewMenu&lt;T&gt; : StardewValley.Menus.IClickableMenu, \n    System.IDisposable\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> </p> <p>Inheritance Object \u21e6 IClickableMenu \u21e6 ViewMenu&lt;T&gt;</p> <p>Implements IDisposable</p>"},{"location":"reference/stardewui/viewmenu-1/#members","title":"Members","text":""},{"location":"reference/stardewui/viewmenu-1/#constructors","title":"Constructors","text":"Name Description ViewMenu&lt;T&gt;(Edges, Boolean) Initializes a new instance of ViewMenu&lt;T&gt;."},{"location":"reference/stardewui/viewmenu-1/#fields","title":"Fields","text":"Name Description _childMenu (Inherited from IClickableMenu) _dependencies (Inherited from IClickableMenu) _parentMenu (Inherited from IClickableMenu) allClickableComponents (Inherited from IClickableMenu) behaviorBeforeCleanup (Inherited from IClickableMenu) closeSound (Inherited from IClickableMenu) currentlySnappedComponent (Inherited from IClickableMenu) destroy (Inherited from IClickableMenu) exitFunction (Inherited from IClickableMenu) height (Inherited from IClickableMenu) upperRightCloseButton (Inherited from IClickableMenu) width (Inherited from IClickableMenu) xPositionOnScreen (Inherited from IClickableMenu) yPositionOnScreen (Inherited from IClickableMenu)"},{"location":"reference/stardewui/viewmenu-1/#properties","title":"Properties","text":"Name Description CloseButtonOffset Offset from the menu view's top-right edge to draw the close button, if a CloseButtonSprite is also specified. CloseButtonSprite The sprite to draw for the close button shown on the upper right. If no value is specified, then no close button will be drawn. The default behavior is to not show any close button. DimmingAmount Amount of dimming between 0 and 1; i.e. opacity of the background underlay. Gutter Gets or sets the menu's gutter edges, which constrain the portion of the viewport in which any part of the menu may be drawn. Position (Inherited from IClickableMenu) View The view to display with this menu."},{"location":"reference/stardewui/viewmenu-1/#methods","title":"Methods","text":"Name Description _ShouldAutoSnapPrioritizeAlignedElements() (Inherited from IClickableMenu) actionOnRegionChange(Int32, Int32) (Inherited from IClickableMenu) AddDependency() (Inherited from IClickableMenu) applyMovementKey(Int32) Initiates a focus search in the specified direction.(Overrides IClickableMenu.applyMovementKey(Int32)) applyMovementKey(Keys) (Inherited from IClickableMenu) areGamePadControlsImplemented() Returns whether or not the menu wants exclusive gamepad controls.(Overrides IClickableMenu.areGamePadControlsImplemented()) automaticSnapBehavior(Int32, Int32, Int32) (Inherited from IClickableMenu) BuildTooltip(IEnumerable&lt;ViewChild&gt;) Builds/formats a tooltip given the sequence of views from root to the lowest-level hovered child. cleanupBeforeExit() (Inherited from IClickableMenu) clickAway() (Inherited from IClickableMenu) Close() Closes this menu, either by removing it from the parent if it is a child menu, or removing it as the game's active menu if it is standalone. CreateView() Creates the view. CustomClose() When overridden in a derived class, provides an alternative method to close the menu instead of the default logic in exitThisMenu(Boolean). customSnapBehavior(Int32, Int32, Int32) (Inherited from IClickableMenu) Dispose() draw(SpriteBatch) Draws the current menu content.(Overrides IClickableMenu.draw(SpriteBatch)) draw(SpriteBatch, Int32, Int32, Int32) (Inherited from IClickableMenu) drawBackground(SpriteBatch) (Inherited from IClickableMenu) drawBorderLabel(SpriteBatch, string, SpriteFont, Int32, Int32) (Inherited from IClickableMenu) drawHorizontalPartition(SpriteBatch, Int32, Boolean, Int32, Int32, Int32) (Inherited from IClickableMenu) drawMouse(SpriteBatch, Boolean, Int32) (Inherited from IClickableMenu) drawVerticalIntersectingPartition(SpriteBatch, Int32, Int32, Int32, Int32, Int32) (Inherited from IClickableMenu) drawVerticalPartition(SpriteBatch, Int32, Boolean, Int32, Int32, Int32, Int32) (Inherited from IClickableMenu) drawVerticalUpperIntersectingPartition(SpriteBatch, Int32, Int32, Int32, Int32, Int32) (Inherited from IClickableMenu) emergencyShutDown() (Inherited from IClickableMenu) exitThisMenu(Boolean) (Inherited from IClickableMenu) exitThisMenuNoSound() (Inherited from IClickableMenu) gamePadButtonHeld(Buttons) (Inherited from IClickableMenu) gameWindowSizeChanged(Rectangle, Rectangle) (Inherited from IClickableMenu) GetChildMenu() (Inherited from IClickableMenu) GetCloseBehavior() Gets the current close behavior for the menu. getComponentWithID(Int32) (Inherited from IClickableMenu) getCurrentlySnappedComponent() (Inherited from IClickableMenu) GetOriginPosition(Point, Point) Computes the origin (top left) position of the menu for a given viewport and offset. GetParentMenu() (Inherited from IClickableMenu) HasDependencies() (Inherited from IClickableMenu) initialize(Int32, Int32, Int32, Int32, Boolean) (Inherited from IClickableMenu) initializeUpperRightCloseButton() (Inherited from IClickableMenu) IsActive() (Inherited from IClickableMenu) IsAutomaticSnapValid(Int32, ClickableComponent, ClickableComponent) (Inherited from IClickableMenu) isWithinBounds(Int32, Int32) (Inherited from IClickableMenu) leftClickHeld(Int32, Int32) Invoked on every frame in which a mouse button is down, regardless of the state in the previous frame.(Overrides IClickableMenu.leftClickHeld(Int32, Int32)) moveCursorInDirection(Int32) (Inherited from IClickableMenu) noSnappedComponentFound(Int32, Int32, Int32) (Inherited from IClickableMenu) OnClosed(EventArgs) Invokes the Closed event handler. Open(MenuActivationMode) Opens this menu, i.e. makes it active if it is not already active. overrideSnappyMenuCursorMovementBan() (Inherited from IClickableMenu) performHoverAction(Int32, Int32) Invoked on every frame with the mouse's current coordinates.(Overrides IClickableMenu.performHoverAction(Int32, Int32)) populateClickableComponentList() (Overrides IClickableMenu.populateClickableComponentList()) readyToClose() Checks if the menu is allowed to be closed by the game's default input handling.(Overrides IClickableMenu.readyToClose()) receiveGamePadButton(Buttons) Invoked whenever a controller button is newly pressed.(Overrides IClickableMenu.receiveGamePadButton(Buttons)) receiveKeyPress(Keys) Invoked whenever a keyboard key is newly pressed.(Overrides IClickableMenu.receiveKeyPress(Keys)) receiveLeftClick(Int32, Int32, Boolean) Invoked whenever the left mouse button is newly pressed.(Overrides IClickableMenu.receiveLeftClick(Int32, Int32, Boolean)) receiveRightClick(Int32, Int32, Boolean) Invoked whenever the right mouse button is newly pressed.(Overrides IClickableMenu.receiveRightClick(Int32, Int32, Boolean)) receiveScrollWheelAction(Int32) Invoked whenever the mouse wheel is used. Only works with vertical scrolls.(Overrides IClickableMenu.receiveScrollWheelAction(Int32)) releaseLeftClick(Int32, Int32) Invoked whenever the left mouse button is just released, after being pressed/held on the last frame.(Overrides IClickableMenu.releaseLeftClick(Int32, Int32)) RemoveDependency() (Inherited from IClickableMenu) SetChildMenu(IClickableMenu) (Inherited from IClickableMenu) setCurrentlySnappedComponentTo(Int32) (Inherited from IClickableMenu) setUpForGamePadMode() (Inherited from IClickableMenu) shouldClampGamePadCursor() (Inherited from IClickableMenu) shouldDrawCloseButton() Returns whether or not to draw a button on the upper right that closes the menu when clicked.(Overrides IClickableMenu.shouldDrawCloseButton()) showWithoutTransparencyIfOptionIsSet() (Inherited from IClickableMenu) snapCursorToCurrentSnappedComponent() (Inherited from IClickableMenu) snapToDefaultClickableComponent() (Inherited from IClickableMenu) update(GameTime) Runs on every update tick.(Overrides IClickableMenu.update(GameTime))"},{"location":"reference/stardewui/viewmenu-1/#events","title":"Events","text":"Name Description Closed Event raised when the menu is closed."},{"location":"reference/stardewui/viewmenu-1/#details","title":"Details","text":""},{"location":"reference/stardewui/viewmenu-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/viewmenu-1/#viewmenutedges-bool","title":"ViewMenu&lt;T&gt;(Edges, bool)","text":"<p>Initializes a new instance of ViewMenu&lt;T&gt;.</p> <pre><code>public ViewMenu&lt;T&gt;(StardewUI.Layout.Edges gutter, bool forceDefaultFocus);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters","title":"Parameters","text":"<p><code>gutter</code> Edges Gutter edges, in which no content should be drawn. Used for overscan, or general aesthetics.</p> <p><code>forceDefaultFocus</code> Boolean Whether to always focus (snap the cursor to) the default element, even if the menu was triggered by keyboard/mouse.</p>"},{"location":"reference/stardewui/viewmenu-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/viewmenu-1/#closebuttonoffset","title":"CloseButtonOffset","text":"<p>Offset from the menu view's top-right edge to draw the close button, if a CloseButtonSprite is also specified.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 CloseButtonOffset { get; set; }\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#property-value","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/viewmenu-1/#closebuttonsprite","title":"CloseButtonSprite","text":"<p>The sprite to draw for the close button shown on the upper right. If no value is specified, then no close button will be drawn. The default behavior is to not show any close button.</p> <pre><code>public StardewUI.Graphics.Sprite CloseButtonSprite { get; set; }\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#property-value_1","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/viewmenu-1/#dimmingamount","title":"DimmingAmount","text":"<p>Amount of dimming between 0 and 1; i.e. opacity of the background underlay.</p> <pre><code>public float DimmingAmount { get; set; }\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#property-value_2","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/viewmenu-1/#remarks","title":"Remarks","text":"<p>Underlay is only drawn when game options do not force clear backgrounds.</p>"},{"location":"reference/stardewui/viewmenu-1/#gutter","title":"Gutter","text":"<p>Gets or sets the menu's gutter edges, which constrain the portion of the viewport in which any part of the menu may be drawn.</p> <pre><code>protected StardewUI.Layout.Edges Gutter { get; set; }\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#property-value_3","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/viewmenu-1/#remarks_1","title":"Remarks","text":"<p>Gutters effectively shrink the viewport for both measurement (size calculation) and layout (centering) by clipping the screen edges.</p>"},{"location":"reference/stardewui/viewmenu-1/#view","title":"View","text":"<p>The view to display with this menu.</p> <pre><code>public T View { get; }\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#property-value_4","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/viewmenu-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/viewmenu-1/#applymovementkeyint","title":"applyMovementKey(int)","text":"<p>Initiates a focus search in the specified direction.</p> <pre><code>public override void applyMovementKey(int directionValue);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_1","title":"Parameters","text":"<p><code>directionValue</code> Int32 An integer value corresponding to the direction; one of 0 (up), 1 (right), 2 (down) or 3 (left).</p>"},{"location":"reference/stardewui/viewmenu-1/#aregamepadcontrolsimplemented","title":"areGamePadControlsImplemented()","text":"<p>Returns whether or not the menu wants exclusive gamepad controls.</p> <pre><code>public override bool areGamePadControlsImplemented();\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#returns","title":"Returns","text":"<p>Boolean</p> <p>Always <code>false</code>.</p>"},{"location":"reference/stardewui/viewmenu-1/#remarks_2","title":"Remarks","text":"<p>This implementation always returns <code>false</code>. Contrary to what the name in Stardew's code implies, this setting is not required for receiveGamePadButton(Buttons) to work; instead, when enabled, it suppresses the game's default mapping of button presses to clicks, and would therefore require reimplementing key-repeat and other basic behaviors. There is no reason to enable it here.</p>"},{"location":"reference/stardewui/viewmenu-1/#buildtooltipienumerableviewchild","title":"BuildTooltip(IEnumerable&lt;ViewChild&gt;)","text":"<p>Builds/formats a tooltip given the sequence of views from root to the lowest-level hovered child.</p> <pre><code>protected virtual StardewUI.Data.TooltipData BuildTooltip(System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; path);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_2","title":"Parameters","text":"<p><code>path</code> IEnumerable&lt;ViewChild&gt; Sequence of all elements, and their relative positions, that the mouse coordinates are currently within.</p>"},{"location":"reference/stardewui/viewmenu-1/#returns_1","title":"Returns","text":"<p>TooltipData</p> <p>The tooltip string to display, or <code>null</code> to not show any tooltip.</p>"},{"location":"reference/stardewui/viewmenu-1/#remarks_3","title":"Remarks","text":"<p>The default implementation reads the value of the last (lowest-level) view with a non-null Tooltip, and breaks Text and Title lines longer than 640px, which is the default vanilla tooltip width.</p>"},{"location":"reference/stardewui/viewmenu-1/#close","title":"Close()","text":"<p>Closes this menu, either by removing it from the parent if it is a child menu, or removing it as the game's active menu if it is standalone.</p> <pre><code>public void Close();\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#createview","title":"CreateView()","text":"<p>Creates the view.</p> <pre><code>protected virtual T CreateView();\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#returns_2","title":"Returns","text":"<p><code>T</code></p> <p>The created view.</p>"},{"location":"reference/stardewui/viewmenu-1/#remarks_4","title":"Remarks","text":"<p>Subclasses will generally create an entire tree in this method and store references to any views that might require content updates.</p>"},{"location":"reference/stardewui/viewmenu-1/#customclose","title":"CustomClose()","text":"<p>When overridden in a derived class, provides an alternative method to close the menu instead of the default logic in exitThisMenu(Boolean).</p> <pre><code>protected virtual void CustomClose();\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#remarks_5","title":"Remarks","text":"<p>The method will only be called when the menu is closed (either programmatically or via the UI) while GetCloseBehavior() is returning Custom.</p>"},{"location":"reference/stardewui/viewmenu-1/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose();\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#drawspritebatch","title":"draw(SpriteBatch)","text":"<p>Draws the current menu content.</p> <pre><code>public override void draw(Microsoft.Xna.Framework.Graphics.SpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_3","title":"Parameters","text":"<p><code>b</code> SpriteBatch The target batch.</p>"},{"location":"reference/stardewui/viewmenu-1/#getclosebehavior","title":"GetCloseBehavior()","text":"<p>Gets the current close behavior for the menu.</p> <pre><code>protected virtual StardewUI.MenuCloseBehavior GetCloseBehavior();\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#returns_3","title":"Returns","text":"<p>MenuCloseBehavior</p>"},{"location":"reference/stardewui/viewmenu-1/#remarks_6","title":"Remarks","text":"<p>The default implementation always returns Default. Subclasses may override this in order to use CustomClose(), or disable closure entirely.</p>"},{"location":"reference/stardewui/viewmenu-1/#getoriginpositionpoint-point","title":"GetOriginPosition(Point, Point)","text":"<p>Computes the origin (top left) position of the menu for a given viewport and offset.</p> <pre><code>protected virtual Microsoft.Xna.Framework.Point GetOriginPosition(Microsoft.Xna.Framework.Point viewportSize, Microsoft.Xna.Framework.Point gutterOffset);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_4","title":"Parameters","text":"<p><code>viewportSize</code> Point The available size of the viewport in which the menu is to be displayed.</p> <p><code>gutterOffset</code> Point The offset implied by any asymmetrical Gutter setting; for example, a gutter whose Left edge is <code>100</code> px and whose Right edge is only <code>50</code> px would have an X offset of <code>25</code> px (half the difference, because centered).</p>"},{"location":"reference/stardewui/viewmenu-1/#returns_4","title":"Returns","text":"<p>Point</p> <p>The origin (top left) position for the menu's root view.</p>"},{"location":"reference/stardewui/viewmenu-1/#leftclickheldint-int","title":"leftClickHeld(int, int)","text":"<p>Invoked on every frame in which a mouse button is down, regardless of the state in the previous frame.</p> <pre><code>public override void leftClickHeld(int x, int y);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_5","title":"Parameters","text":"<p><code>x</code> Int32 The mouse's current X position on screen.</p> <p><code>y</code> Int32 The mouse's current Y position on screen.</p>"},{"location":"reference/stardewui/viewmenu-1/#onclosedeventargs","title":"OnClosed(EventArgs)","text":"<p>Invokes the Closed event handler.</p> <pre><code>protected virtual void OnClosed(System.EventArgs e);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_6","title":"Parameters","text":"<p><code>e</code> EventArgs The event arguments.</p>"},{"location":"reference/stardewui/viewmenu-1/#openmenuactivationmode","title":"Open(MenuActivationMode)","text":"<p>Opens this menu, i.e. makes it active if it is not already active.</p> <pre><code>public void Open(StardewUI.MenuActivationMode activationMode);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_7","title":"Parameters","text":"<p><code>activationMode</code> MenuActivationMode The activation behavior which determines which (if any) other active menu this one can replace. Ignored when the game's title menu is open.</p>"},{"location":"reference/stardewui/viewmenu-1/#performhoveractionint-int","title":"performHoverAction(int, int)","text":"<p>Invoked on every frame with the mouse's current coordinates.</p> <pre><code>public override void performHoverAction(int x, int y);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_8","title":"Parameters","text":"<p><code>x</code> Int32 The mouse's current X position on screen.</p> <p><code>y</code> Int32 The mouse's current Y position on screen.</p>"},{"location":"reference/stardewui/viewmenu-1/#remarks_7","title":"Remarks","text":"<p>Essentially the same as update(GameTime) but slightly more convenient for mouse hover/movement effects because of the arguments provided.</p>"},{"location":"reference/stardewui/viewmenu-1/#populateclickablecomponentlist","title":"populateClickableComponentList()","text":"<pre><code>public override void populateClickableComponentList();\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#remarks_8","title":"Remarks","text":"<p>Always a no-op for menus in StardewUI.</p>"},{"location":"reference/stardewui/viewmenu-1/#readytoclose","title":"readyToClose()","text":"<p>Checks if the menu is allowed to be closed by the game's default input handling.</p> <pre><code>public override bool readyToClose();\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#returns_5","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/viewmenu-1/#receivegamepadbuttonbuttons","title":"receiveGamePadButton(Buttons)","text":"<p>Invoked whenever a controller button is newly pressed.</p> <pre><code>public override void receiveGamePadButton(Microsoft.Xna.Framework.Input.Buttons b);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_9","title":"Parameters","text":"<p><code>b</code> Buttons The button that was pressed.</p>"},{"location":"reference/stardewui/viewmenu-1/#receivekeypresskeys","title":"receiveKeyPress(Keys)","text":"<p>Invoked whenever a keyboard key is newly pressed.</p> <pre><code>public override void receiveKeyPress(Microsoft.Xna.Framework.Input.Keys key);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_10","title":"Parameters","text":"<p><code>key</code> Keys The key that was pressed.</p>"},{"location":"reference/stardewui/viewmenu-1/#receiveleftclickint-int-bool","title":"receiveLeftClick(int, int, bool)","text":"<p>Invoked whenever the left mouse button is newly pressed.</p> <pre><code>public override void receiveLeftClick(int x, int y, bool playSound);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_11","title":"Parameters","text":"<p><code>x</code> Int32 The mouse's current X position on screen.</p> <p><code>y</code> Int32 The mouse's current Y position on screen.</p> <p><code>playSound</code> Boolean Currently not used.</p>"},{"location":"reference/stardewui/viewmenu-1/#receiverightclickint-int-bool","title":"receiveRightClick(int, int, bool)","text":"<p>Invoked whenever the right mouse button is newly pressed.</p> <pre><code>public override void receiveRightClick(int x, int y, bool playSound);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_12","title":"Parameters","text":"<p><code>x</code> Int32 The mouse's current X position on screen.</p> <p><code>y</code> Int32 The mouse's current Y position on screen.</p> <p><code>playSound</code> Boolean Currently not used.</p>"},{"location":"reference/stardewui/viewmenu-1/#receivescrollwheelactionint","title":"receiveScrollWheelAction(int)","text":"<p>Invoked whenever the mouse wheel is used. Only works with vertical scrolls.</p> <pre><code>public override void receiveScrollWheelAction(int value);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_13","title":"Parameters","text":"<p><code>value</code> Int32 A value indicating the desired vertical scroll direction; negative values indicate \"down\" and positive values indicate \"up\".</p>"},{"location":"reference/stardewui/viewmenu-1/#releaseleftclickint-int","title":"releaseLeftClick(int, int)","text":"<p>Invoked whenever the left mouse button is just released, after being pressed/held on the last frame.</p> <pre><code>public override void releaseLeftClick(int x, int y);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_14","title":"Parameters","text":"<p><code>x</code> Int32 The mouse's current X position on screen.</p> <p><code>y</code> Int32 The mouse's current Y position on screen.</p>"},{"location":"reference/stardewui/viewmenu-1/#shoulddrawclosebutton","title":"shouldDrawCloseButton()","text":"<p>Returns whether or not to draw a button on the upper right that closes the menu when clicked.</p> <pre><code>public override bool shouldDrawCloseButton();\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#returns_6","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/viewmenu-1/#remarks_9","title":"Remarks","text":"<p>Regardless of this value, a close button will never be drawn unless CloseButtonSprite is set.</p>"},{"location":"reference/stardewui/viewmenu-1/#updategametime","title":"update(GameTime)","text":"<p>Runs on every update tick.</p> <pre><code>public override void update(Microsoft.Xna.Framework.GameTime time);\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#parameters_15","title":"Parameters","text":"<p><code>time</code> GameTime The current GameTime including the time elapsed since last update tick.</p>"},{"location":"reference/stardewui/viewmenu-1/#events_1","title":"Events","text":""},{"location":"reference/stardewui/viewmenu-1/#closed","title":"Closed","text":"<p>Event raised when the menu is closed.</p> <pre><code>public event EventHandler&lt;System.EventArgs&gt;? Closed;\n</code></pre>"},{"location":"reference/stardewui/viewmenu-1/#event-type","title":"Event Type","text":"<p>EventHandler&lt;EventArgs&gt;</p>"},{"location":"reference/stardewui/animation/","title":"StardewUI.Animation","text":""},{"location":"reference/stardewui/animation/#stardewuianimation-namespace","title":"StardewUI.Animation Namespace","text":""},{"location":"reference/stardewui/animation/#classes","title":"Classes","text":"Name Description Animation&lt;T&gt; Defines a single animation. Animator Helpers for creating typed Animator&lt;T, V&gt; instances. Animator&lt;T, V&gt; Animates a single property of a single class. HoverScale Standalone scaling behavior that can be attached to any Image, causing it to scale up to a specified amount when hovered by the pointer. SpriteAnimator Animates the sprite of an Image, using equal duration for all frames in a list."},{"location":"reference/stardewui/animation/#delegates","title":"Delegates","text":"Name Description Lerp&lt;T&gt; Performs linear interpolation between two values."},{"location":"reference/stardewui/animation/animation-1/","title":"Animation&lt;T&gt;","text":""},{"location":"reference/stardewui/animation/animation-1/#class-animationt","title":"Class Animation&lt;T&gt;","text":""},{"location":"reference/stardewui/animation/animation-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Animation Assembly: StardewUI.dll  </p> <p>Defines a single animation.</p> <pre><code>public record Animation&lt;T&gt; : IEquatable&lt;StardewUI.Animation.Animation&lt;T&gt;&gt;\n</code></pre>"},{"location":"reference/stardewui/animation/animation-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The type of value being animated.</p> <p>Inheritance Object \u21e6 Animation&lt;T&gt;</p> <p>Implements IEquatable&lt;Animation&lt;T&gt;&gt;</p>"},{"location":"reference/stardewui/animation/animation-1/#members","title":"Members","text":""},{"location":"reference/stardewui/animation/animation-1/#constructors","title":"Constructors","text":"Name Description Animation&lt;T&gt;(T, T, TimeSpan) Defines a single animation."},{"location":"reference/stardewui/animation/animation-1/#properties","title":"Properties","text":"Name Description Duration Duration of the animation. EndValue The final value for the animated property. EqualityContract StartValue The initial value for the animated property."},{"location":"reference/stardewui/animation/animation-1/#details","title":"Details","text":""},{"location":"reference/stardewui/animation/animation-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/animation/animation-1/#animationtt-t-timespan","title":"Animation&lt;T&gt;(T, T, TimeSpan)","text":"<p>Defines a single animation.</p> <pre><code>public Animation&lt;T&gt;(T StartValue, T EndValue, System.TimeSpan Duration);\n</code></pre>"},{"location":"reference/stardewui/animation/animation-1/#parameters","title":"Parameters","text":"<p><code>StartValue</code> \u00a0 T The initial value for the animated property.</p> <p><code>EndValue</code> \u00a0 T The final value for the animated property.</p> <p><code>Duration</code> TimeSpan Duration of the animation.</p>"},{"location":"reference/stardewui/animation/animation-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/animation/animation-1/#duration","title":"Duration","text":"<p>Duration of the animation.</p> <pre><code>public System.TimeSpan Duration { get; set; }\n</code></pre>"},{"location":"reference/stardewui/animation/animation-1/#property-value","title":"Property Value","text":"<p>TimeSpan</p>"},{"location":"reference/stardewui/animation/animation-1/#endvalue","title":"EndValue","text":"<p>The final value for the animated property.</p> <pre><code>public T EndValue { get; set; }\n</code></pre>"},{"location":"reference/stardewui/animation/animation-1/#property-value_1","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/animation/animation-1/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/animation/animation-1/#property-value_2","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/animation/animation-1/#startvalue","title":"StartValue","text":"<p>The initial value for the animated property.</p> <pre><code>public T StartValue { get; set; }\n</code></pre>"},{"location":"reference/stardewui/animation/animation-1/#property-value_3","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/animation/animator-2/","title":"Animator&lt;T, V&gt;","text":""},{"location":"reference/stardewui/animation/animator-2/#class-animatort-v","title":"Class Animator&lt;T, V&gt;","text":""},{"location":"reference/stardewui/animation/animator-2/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Animation Assembly: StardewUI.dll  </p> <p>Animates a single property of a single class.</p> <pre><code>public class Animator&lt;T, V&gt;\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The target class that will receive the animation.</p> <p><code>V</code> The type of value belonging to <code>T</code> that should be animated.</p> <p>Inheritance Object \u21e6 Animator&lt;T, V&gt;</p>"},{"location":"reference/stardewui/animation/animator-2/#members","title":"Members","text":""},{"location":"reference/stardewui/animation/animator-2/#constructors","title":"Constructors","text":"Name Description Animator&lt;T, V&gt;(T, Func&lt;T, V&gt;, Lerp&lt;V&gt;, Action&lt;T, V&gt;) Initializes a new Animator&lt;T, V&gt;."},{"location":"reference/stardewui/animation/animator-2/#properties","title":"Properties","text":"Name Description AutoReverse Whether to automatically start playing in reverse after reaching the end. CurrentAnimation The current animation, if any, started by Start(Animation&lt;V&gt;) or any <code>Start</code> overloads. IsReversing Gets whether or not the animator is currently animating in Reverse(). Loop Whether or not the animation should automatically loop back to the beginning when finished. Paused Whether or not to pause animation. If <code>true</code>, the animator will hold at the current position and not progress until set to <code>false</code> again. Does not affect the CurrentAnimation."},{"location":"reference/stardewui/animation/animator-2/#methods","title":"Methods","text":"Name Description Forward() Causes the animator to animate in the forward direction toward animation's EndValue. Reset() Jumps to the first frame of the current animation, or the last frame if IsReversing is <code>true</code>. Reverse() Reverses the current animation, so that it gradually returns to the animation's StartValue. Start(Animation&lt;V&gt;) Starts a new animation. Start(V, V, TimeSpan?) Starts a new animation using the specified start/end values and duration. Start(V, TimeSpan) Starts a new animation that begins at the current value and ends at the specified value after the specified duration. Stop() Completely stops animating, removing the CurrentAnimation and resetting animation state such as Reverse() and Paused. Tick(TimeSpan) Continues animating in the current direction."},{"location":"reference/stardewui/animation/animator-2/#details","title":"Details","text":""},{"location":"reference/stardewui/animation/animator-2/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/animation/animator-2/#animatort-vt-funct-v-lerpv-actiont-v","title":"Animator&lt;T, V&gt;(T, Func&lt;T, V&gt;, Lerp&lt;V&gt;, Action&lt;T, V&gt;)","text":"<p>Initializes a new Animator&lt;T, V&gt;.</p> <pre><code>public Animator&lt;T, V&gt;(T target, Func&lt;T, V&gt; getValue, StardewUI.Animation.Lerp&lt;V&gt; lerpValue, Action&lt;T, V&gt; setValue);\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#parameters","title":"Parameters","text":"<p><code>target</code> \u00a0 T The object whose property will be animated.</p> <p><code>getValue</code> Func&lt;T, V&gt; Function to get the current value. Used for animations that don't explicit specify a start value, e.g. when using the Start(Animation&lt;V&gt;) overload.</p> <p><code>lerpValue</code> Lerp&lt;V&gt; Function to linearly interpolate between the start and end values.</p> <p><code>setValue</code> Action&lt;T, V&gt; Delegate to set the value on the <code>target</code>.</p>"},{"location":"reference/stardewui/animation/animator-2/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/animation/animator-2/#autoreverse","title":"AutoReverse","text":"<p>Whether to automatically start playing in reverse after reaching the end.</p> <pre><code>public bool AutoReverse { get; set; }\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/animation/animator-2/#currentanimation","title":"CurrentAnimation","text":"<p>The current animation, if any, started by Start(Animation&lt;V&gt;) or any <code>Start</code> overloads.</p> <pre><code>public StardewUI.Animation.Animation&lt;V&gt; CurrentAnimation { get; private set; }\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#property-value_1","title":"Property Value","text":"<p>Animation&lt;V&gt;</p>"},{"location":"reference/stardewui/animation/animator-2/#isreversing","title":"IsReversing","text":"<p>Gets whether or not the animator is currently animating in Reverse().</p> <pre><code>public bool IsReversing { get; private set; }\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#property-value_2","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/animation/animator-2/#loop","title":"Loop","text":"<p>Whether or not the animation should automatically loop back to the beginning when finished.</p> <pre><code>public bool Loop { get; set; }\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/animation/animator-2/#paused","title":"Paused","text":"<p>Whether or not to pause animation. If <code>true</code>, the animator will hold at the current position and not progress until set to <code>false</code> again. Does not affect the CurrentAnimation.</p> <pre><code>public bool Paused { get; set; }\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#property-value_4","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/animation/animator-2/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/animation/animator-2/#forward","title":"Forward()","text":"<p>Causes the animator to animate in the forward direction toward animation's EndValue.</p> <pre><code>public void Forward();\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#remarks","title":"Remarks","text":"<p>Does not restart the animation; if the animator is not reversed, then calling this has no effect.</p>"},{"location":"reference/stardewui/animation/animator-2/#reset","title":"Reset()","text":"<p>Jumps to the first frame of the current animation, or the last frame if IsReversing is <code>true</code>.</p> <pre><code>public void Reset();\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#remarks_1","title":"Remarks","text":"<p>Has no effect unless CurrentAnimation has been set by a previous call to one of the Start(Animation&lt;V&gt;) overloads.</p>"},{"location":"reference/stardewui/animation/animator-2/#reverse","title":"Reverse()","text":"<p>Reverses the current animation, so that it gradually returns to the animation's StartValue.</p> <pre><code>public void Reverse();\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#remarks_2","title":"Remarks","text":"<p>Calling Reverse() is different from starting a new animation with reversed start and end values; specifically, it will follow the timeline/curve backward from the current progress. If only 1/4 second of a 1-second animation elapsed in the forward direction, then the reverse animation will also only take 1/4 second.</p>"},{"location":"reference/stardewui/animation/animator-2/#startanimationv","title":"Start(Animation&lt;V&gt;)","text":"<p>Starts a new animation.</p> <pre><code>public void Start(StardewUI.Animation.Animation&lt;V&gt; animation);\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#parameters_1","title":"Parameters","text":"<p><code>animation</code> Animation&lt;V&gt; The animation settings.</p>"},{"location":"reference/stardewui/animation/animator-2/#startv-v-timespan","title":"Start(V, V, TimeSpan?)","text":"<p>Starts a new animation using the specified start/end values and duration.</p> <pre><code>public void Start(V startValue, V endValue, System.TimeSpan? duration);\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#parameters_2","title":"Parameters","text":"<p><code>startValue</code> \u00a0 V The initial value of the animation property. This will take effect immediately, even if it is far away from the current value; i.e. it may cause \"jumps\".</p> <p><code>endValue</code> \u00a0 V The final value to be reached once the <code>duration</code> ends.</p> <p><code>duration</code> Nullable&lt;TimeSpan&gt; Duration of the animation; defaults to 1 second if not specified.</p>"},{"location":"reference/stardewui/animation/animator-2/#startv-timespan","title":"Start(V, TimeSpan)","text":"<p>Starts a new animation that begins at the current value and ends at the specified value after the specified duration.</p> <pre><code>public void Start(V endValue, System.TimeSpan duration);\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#parameters_3","title":"Parameters","text":"<p><code>endValue</code> \u00a0 V The final value to be reached once the <code>duration</code> ends.</p> <p><code>duration</code> TimeSpan Duration of the animation; defaults to 1 second if not specified.</p>"},{"location":"reference/stardewui/animation/animator-2/#stop","title":"Stop()","text":"<p>Completely stops animating, removing the CurrentAnimation and resetting animation state such as Reverse() and Paused.</p> <pre><code>public void Stop();\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#remarks_3","title":"Remarks","text":"<p>This tries to put the animator in the same state it was in when first created. To preserve the current animation but pause progress and be able to resume later, set Paused instead. </p> <p>Calling this does not reset the animated object to the animation's starting value. To do this, call Reset() before calling Stop() (not after, as Reset() has no effect once the CurrentAnimation is cleared).</p>"},{"location":"reference/stardewui/animation/animator-2/#ticktimespan","title":"Tick(TimeSpan)","text":"<p>Continues animating in the current direction.</p> <pre><code>public void Tick(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/animation/animator-2/#parameters_4","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan Time elapsed since last tick.</p>"},{"location":"reference/stardewui/animation/animator/","title":"Animator","text":""},{"location":"reference/stardewui/animation/animator/#class-animator","title":"Class Animator","text":""},{"location":"reference/stardewui/animation/animator/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Animation Assembly: StardewUI.dll  </p> <p>Helpers for creating typed Animator&lt;T, V&gt; instances.</p> <pre><code>public static class Animator\n</code></pre> <p>Inheritance Object \u21e6 Animator</p>"},{"location":"reference/stardewui/animation/animator/#members","title":"Members","text":""},{"location":"reference/stardewui/animation/animator/#methods","title":"Methods","text":"Name Description On&lt;T, V&gt;(T, Func&lt;T, V&gt;, Lerp&lt;V&gt;, Action&lt;T, V&gt;) Creates a new Animator&lt;T, V&gt;. On&lt;T&gt;(T, Func&lt;T, Single&gt;, Action&lt;T, Single&gt;) Creates a new Animator&lt;T, V&gt; that animates a standard Single property."},{"location":"reference/stardewui/animation/animator/#details","title":"Details","text":""},{"location":"reference/stardewui/animation/animator/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/animation/animator/#ont-vt-funct-v-lerpv-actiont-v","title":"On&lt;T, V&gt;(T, Func&lt;T, V&gt;, Lerp&lt;V&gt;, Action&lt;T, V&gt;)","text":"<p>Creates a new Animator&lt;T, V&gt;.</p> <pre><code>public static StardewUI.Animation.Animator&lt;T, V&gt; On&lt;T, V&gt;(T target, Func&lt;T, V&gt; getValue, StardewUI.Animation.Lerp&lt;V&gt; lerpValue, Action&lt;T, V&gt; setValue);\n</code></pre>"},{"location":"reference/stardewui/animation/animator/#parameters","title":"Parameters","text":"<p><code>target</code> \u00a0 T The object whose property will be animated.</p> <p><code>getValue</code> Func&lt;T, V&gt; Function to get the current value. Used for animations that don't explicit specify a start value, e.g. when using the Start(Animation&lt;V&gt;) overload.</p> <p><code>lerpValue</code> Lerp&lt;V&gt; Function to linearly interpolate between the start and end values.</p> <p><code>setValue</code> Action&lt;T, V&gt; Delegate to set the value on the <code>target</code>.</p>"},{"location":"reference/stardewui/animation/animator/#returns","title":"Returns","text":"<p>Animator&lt;T, V&gt;</p>"},{"location":"reference/stardewui/animation/animator/#remarks","title":"Remarks","text":"<p>Calling this is the same as calling the constructor, but typically does not require explicit type arguments.</p>"},{"location":"reference/stardewui/animation/animator/#ontt-funct-single-actiont-single","title":"On&lt;T&gt;(T, Func&lt;T, Single&gt;, Action&lt;T, Single&gt;)","text":"<p>Creates a new Animator&lt;T, V&gt; that animates a standard Single property.</p> <pre><code>public static StardewUI.Animation.Animator&lt;T, System.Single&gt; On&lt;T&gt;(T target, Func&lt;T, System.Single&gt; getValue, Action&lt;T, System.Single&gt; setValue);\n</code></pre>"},{"location":"reference/stardewui/animation/animator/#parameters_1","title":"Parameters","text":"<p><code>target</code> \u00a0 T The object whose property will be animated.</p> <p><code>getValue</code> Func&lt;T, Single&gt; Function to get the current value. Used for animations that don't explicit specify a start value, e.g. when using the Start(Animation&lt;V&gt;) overload.</p> <p><code>setValue</code> Action&lt;T, Single&gt; Delegate to set the value on the <code>target</code>.</p>"},{"location":"reference/stardewui/animation/animator/#returns_1","title":"Returns","text":"<p>Animator&lt;T, Single&gt;</p>"},{"location":"reference/stardewui/animation/animator/#remarks_1","title":"Remarks","text":"<p>Calling this is the same as calling the constructor, but typically does not require explicit type arguments.</p>"},{"location":"reference/stardewui/animation/hoverscale/","title":"HoverScale","text":""},{"location":"reference/stardewui/animation/hoverscale/#class-hoverscale","title":"Class HoverScale","text":""},{"location":"reference/stardewui/animation/hoverscale/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Animation Assembly: StardewUI.dll  </p> <p>Standalone scaling behavior that can be attached to any Image, causing it to scale up to a specified amount when hovered by the pointer.</p> <pre><code>public class HoverScale\n</code></pre> <p>Inheritance Object \u21e6 HoverScale</p>"},{"location":"reference/stardewui/animation/hoverscale/#members","title":"Members","text":""},{"location":"reference/stardewui/animation/hoverscale/#methods","title":"Methods","text":"Name Description Attach(Image, Single, TimeSpan?) Attaches a new hover behavior to an image."},{"location":"reference/stardewui/animation/hoverscale/#details","title":"Details","text":""},{"location":"reference/stardewui/animation/hoverscale/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/animation/hoverscale/#attachimage-float-timespan","title":"Attach(Image, float, TimeSpan?)","text":"<p>Attaches a new hover behavior to an image.</p> <pre><code>public static void Attach(StardewUI.Widgets.Image image, float maxScale, System.TimeSpan? duration);\n</code></pre>"},{"location":"reference/stardewui/animation/hoverscale/#parameters","title":"Parameters","text":"<p><code>image</code> Image The image that will receive the hover behavior.</p> <p><code>maxScale</code> Single Target scale at the end of the animation; generally a number &gt; 1.</p> <p><code>duration</code> Nullable&lt;TimeSpan&gt; Duration of the animation; if not specified, defaults to 80 ms.</p>"},{"location":"reference/stardewui/animation/lerp-1/","title":"Lerp&lt;T&gt;","text":""},{"location":"reference/stardewui/animation/lerp-1/#delegate-lerpt","title":"Delegate Lerp&lt;T&gt;","text":""},{"location":"reference/stardewui/animation/lerp-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Animation Assembly: StardewUI.dll  </p> <p>Performs linear interpolation between two values.</p> <pre><code>public T Lerp&lt;T&gt;(T value1, T value2, float amount);\n</code></pre>"},{"location":"reference/stardewui/animation/lerp-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The type of value.</p>"},{"location":"reference/stardewui/animation/lerp-1/#parameters","title":"Parameters","text":"<p><code>value1</code> \u00a0 T The first, or \"start\" value to use at <code>amount</code> = <code>0.0</code>.</p> <p><code>value2</code> \u00a0 T The second, or \"end\" value to use at <code>amount</code> = <code>1.0</code>.</p> <p><code>amount</code> Single The interpolation amount between <code>0.0</code> and <code>1.0</code>.</p>"},{"location":"reference/stardewui/animation/spriteanimator/","title":"SpriteAnimator","text":""},{"location":"reference/stardewui/animation/spriteanimator/#class-spriteanimator","title":"Class SpriteAnimator","text":""},{"location":"reference/stardewui/animation/spriteanimator/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Animation Assembly: StardewUI.dll  </p> <p>Animates the sprite of an Image, using equal duration for all frames in a list.</p> <pre><code>public class SpriteAnimator\n</code></pre> <p>Inheritance Object \u21e6 SpriteAnimator</p>"},{"location":"reference/stardewui/animation/spriteanimator/#members","title":"Members","text":""},{"location":"reference/stardewui/animation/spriteanimator/#constructors","title":"Constructors","text":"Name Description SpriteAnimator(Image) Initializes a new instance of SpriteAnimator that animates the sprite on a specified image."},{"location":"reference/stardewui/animation/spriteanimator/#properties","title":"Properties","text":"Name Description FrameDuration Duration of each frame. Frames Frames to animate through. Paused Whether or not to pause animation. If <code>true</code>, the animator will hold at the current position and not progress until set to <code>false</code> again. StartDelay Delay before advancing from the first frame to the next frames."},{"location":"reference/stardewui/animation/spriteanimator/#methods","title":"Methods","text":"Name Description Reset() Resets the animation to the first frame, and waits any StartDelay required again. Tick(TimeSpan) Advances the animation."},{"location":"reference/stardewui/animation/spriteanimator/#details","title":"Details","text":""},{"location":"reference/stardewui/animation/spriteanimator/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/animation/spriteanimator/#spriteanimatorimage","title":"SpriteAnimator(Image)","text":"<p>Initializes a new instance of SpriteAnimator that animates the sprite on a specified image.</p> <pre><code>public SpriteAnimator(StardewUI.Widgets.Image image);\n</code></pre>"},{"location":"reference/stardewui/animation/spriteanimator/#parameters","title":"Parameters","text":"<p><code>image</code> Image The image to animate.</p>"},{"location":"reference/stardewui/animation/spriteanimator/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/animation/spriteanimator/#frameduration","title":"FrameDuration","text":"<p>Duration of each frame.</p> <pre><code>public System.TimeSpan FrameDuration { get; set; }\n</code></pre>"},{"location":"reference/stardewui/animation/spriteanimator/#property-value","title":"Property Value","text":"<p>TimeSpan</p>"},{"location":"reference/stardewui/animation/spriteanimator/#frames","title":"Frames","text":"<p>Frames to animate through.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Graphics.Sprite&gt; Frames { get; set; }\n</code></pre>"},{"location":"reference/stardewui/animation/spriteanimator/#property-value_1","title":"Property Value","text":"<p>IReadOnlyList&lt;Sprite&gt;</p>"},{"location":"reference/stardewui/animation/spriteanimator/#paused","title":"Paused","text":"<p>Whether or not to pause animation. If <code>true</code>, the animator will hold at the current position and not progress until set to <code>false</code> again.</p> <pre><code>public bool Paused { get; set; }\n</code></pre>"},{"location":"reference/stardewui/animation/spriteanimator/#property-value_2","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/animation/spriteanimator/#startdelay","title":"StartDelay","text":"<p>Delay before advancing from the first frame to the next frames.</p> <pre><code>public System.TimeSpan StartDelay { get; set; }\n</code></pre>"},{"location":"reference/stardewui/animation/spriteanimator/#property-value_3","title":"Property Value","text":"<p>TimeSpan</p>"},{"location":"reference/stardewui/animation/spriteanimator/#remarks","title":"Remarks","text":"<p>Repeats on every loop, but only applies to the first frame of each loop.</p>"},{"location":"reference/stardewui/animation/spriteanimator/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/animation/spriteanimator/#reset","title":"Reset()","text":"<p>Resets the animation to the first frame, and waits any StartDelay required again.</p> <pre><code>public void Reset();\n</code></pre>"},{"location":"reference/stardewui/animation/spriteanimator/#ticktimespan","title":"Tick(TimeSpan)","text":"<p>Advances the animation.</p> <pre><code>public void Tick(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/animation/spriteanimator/#parameters_1","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan The time elapsed since the previous tick.</p>"},{"location":"reference/stardewui/data/","title":"StardewUI.Data","text":""},{"location":"reference/stardewui/data/#stardewuidata-namespace","title":"StardewUI.Data Namespace","text":""},{"location":"reference/stardewui/data/#classes","title":"Classes","text":"Name Description TooltipData Provides data for all known variants of a menu tooltip."},{"location":"reference/stardewui/data/tooltipdata/","title":"TooltipData","text":""},{"location":"reference/stardewui/data/tooltipdata/#class-tooltipdata","title":"Class TooltipData","text":""},{"location":"reference/stardewui/data/tooltipdata/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Data Assembly: StardewUI.dll  </p> <p>Provides data for all known variants of a menu tooltip.</p> <pre><code>public record TooltipData : IEquatable&lt;StardewUI.Data.TooltipData&gt;\n</code></pre> <p>Inheritance Object \u21e6 TooltipData</p> <p>Implements IEquatable&lt;TooltipData&gt;</p>"},{"location":"reference/stardewui/data/tooltipdata/#members","title":"Members","text":""},{"location":"reference/stardewui/data/tooltipdata/#constructors","title":"Constructors","text":"Name Description TooltipData(string, string, Item, Int32?, Int32, string, Int32, CraftingRecipe, IList&lt;Item&gt;) Provides data for all known variants of a menu tooltip."},{"location":"reference/stardewui/data/tooltipdata/#properties","title":"Properties","text":"Name Description AdditionalCraftingMaterials List of additional items required for crafting that are not included in the CraftingRecipe. CraftingRecipe Crafting recipe to show, if the tooltip is for a craftable item. CurrencyAmount Amount of money associated with the tooltip action, generally a buy or sell price. CurrencySymbol The currency associated with any CurrencyAmount; has no effect unless CurrencyAmount is also specified. <p>The meaning of each value is dependent on game implementation, but at the time of writing the available options are: <code>0</code> = coins, <code>1</code> = star tokens (silver star), <code>2</code> = casino tokens, and <code>4</code> = Qi gems. </p> <p>|  | EqualityContract |  |  | Item | The specific game item, if any, that is the \"topic\" of this tooltip, used to show additional item-specific information such as buffs, durations and recovery values. |  | RequiredItemAmount | The number of items required, e.g. for trade, when RequiredItemId is specified. |  | RequiredItemId | Item ID to show as a required item, usually used as an alternative to CurrencySymbol for non-currency trades, such as the Desert Trader. |  | Text | The primary description text to display. Tooltips converted from a simple string will have this field populated. |  | Title | Bolded title to display above the Text, with a separator in between. | </p>"},{"location":"reference/stardewui/data/tooltipdata/#methods","title":"Methods","text":"Name Description ConstrainTextWidth(Int32) Constraints the tooltip to a specified pixel width by breaking lines for the Text and Title."},{"location":"reference/stardewui/data/tooltipdata/#details","title":"Details","text":""},{"location":"reference/stardewui/data/tooltipdata/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/data/tooltipdata/#tooltipdatastring-string-item-int-int-string-int-craftingrecipe-ilistitem","title":"TooltipData(string, string, Item, int?, int, string, int, CraftingRecipe, IList&lt;Item&gt;)","text":"<p>Provides data for all known variants of a menu tooltip.</p> <pre><code>public TooltipData(string Text, string Title, StardewValley.Item Item, int? CurrencyAmount, int CurrencySymbol, string RequiredItemId, int RequiredItemAmount, StardewValley.CraftingRecipe CraftingRecipe, System.Collections.Generic.IList&lt;StardewValley.Item&gt; AdditionalCraftingMaterials);\n</code></pre>"},{"location":"reference/stardewui/data/tooltipdata/#parameters","title":"Parameters","text":"<p><code>Text</code> string The primary description text to display. Tooltips converted from a simple string will have this field populated.</p> <p><code>Title</code> string Bolded title to display above the Text, with a separator in between.</p> <p><code>Item</code> \u00a0 Item The specific game item, if any, that is the \"topic\" of this tooltip, used to show additional item-specific information such as buffs, durations and recovery values.</p> <p><code>CurrencyAmount</code> Nullable&lt;Int32&gt; Amount of money associated with the tooltip action, generally a buy or sell price.</p> <p><code>CurrencySymbol</code> Int32  The currency associated with any CurrencyAmount; has no effect unless CurrencyAmount is also specified. </p> <p>The meaning of each value is dependent on game implementation, but at the time of writing the available options are: <code>0</code> = coins, <code>1</code> = star tokens (silver star), <code>2</code> = casino tokens, and <code>4</code> = Qi gems. </p> <p><code>RequiredItemId</code> string Item ID to show as a required item, usually used as an alternative to CurrencySymbol for non-currency trades, such as the Desert Trader.</p> <p><code>RequiredItemAmount</code> Int32 The number of items required, e.g. for trade, when RequiredItemId is specified.</p> <p><code>CraftingRecipe</code> \u00a0 CraftingRecipe Crafting recipe to show, if the tooltip is for a craftable item.</p> <p><code>AdditionalCraftingMaterials</code> IList List of additional items required for crafting that are not included in the CraftingRecipe."},{"location":"reference/stardewui/data/tooltipdata/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/data/tooltipdata/#additionalcraftingmaterials","title":"AdditionalCraftingMaterials","text":"<p>List of additional items required for crafting that are not included in the CraftingRecipe.</p> <pre><code>public System.Collections.Generic.IList&lt;StardewValley.Item&gt; AdditionalCraftingMaterials { get; set; }\n</code></pre>"},{"location":"reference/stardewui/data/tooltipdata/#property-value","title":"Property Value","text":"<p>IList"},{"location":"reference/stardewui/data/tooltipdata/#craftingrecipe","title":"CraftingRecipe","text":"<p>Crafting recipe to show, if the tooltip is for a craftable item.</p> <pre><code>public StardewValley.CraftingRecipe CraftingRecipe { get; set; }\n</code></pre>"},{"location":"reference/stardewui/data/tooltipdata/#property-value_1","title":"Property Value","text":"<p>CraftingRecipe</p>"},{"location":"reference/stardewui/data/tooltipdata/#currencyamount","title":"CurrencyAmount","text":"<p>Amount of money associated with the tooltip action, generally a buy or sell price.</p> <pre><code>public int? CurrencyAmount { get; set; }\n</code></pre>"},{"location":"reference/stardewui/data/tooltipdata/#property-value_2","title":"Property Value","text":"<p>Nullable&lt;Int32&gt;</p>"},{"location":"reference/stardewui/data/tooltipdata/#currencysymbol","title":"CurrencySymbol","text":"<p>The currency associated with any CurrencyAmount; has no effect unless CurrencyAmount is also specified. </p> <p>The meaning of each value is dependent on game implementation, but at the time of writing the available options are: <code>0</code> = coins, <code>1</code> = star tokens (silver star), <code>2</code> = casino tokens, and <code>4</code> = Qi gems. </p> <pre><code>public int CurrencySymbol { get; set; }\n</code></pre>"},{"location":"reference/stardewui/data/tooltipdata/#property-value_3","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/data/tooltipdata/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/data/tooltipdata/#property-value_4","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/data/tooltipdata/#item","title":"Item","text":"<p>The specific game item, if any, that is the \"topic\" of this tooltip, used to show additional item-specific information such as buffs, durations and recovery values.</p> <pre><code>public StardewValley.Item Item { get; set; }\n</code></pre>"},{"location":"reference/stardewui/data/tooltipdata/#property-value_5","title":"Property Value","text":"<p>Item</p>"},{"location":"reference/stardewui/data/tooltipdata/#requireditemamount","title":"RequiredItemAmount","text":"<p>The number of items required, e.g. for trade, when RequiredItemId is specified.</p> <pre><code>public int RequiredItemAmount { get; set; }\n</code></pre>"},{"location":"reference/stardewui/data/tooltipdata/#property-value_6","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/data/tooltipdata/#requireditemid","title":"RequiredItemId","text":"<p>Item ID to show as a required item, usually used as an alternative to CurrencySymbol for non-currency trades, such as the Desert Trader.</p> <pre><code>public string RequiredItemId { get; set; }\n</code></pre>"},{"location":"reference/stardewui/data/tooltipdata/#property-value_7","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/data/tooltipdata/#text","title":"Text","text":"<p>The primary description text to display. Tooltips converted from a simple string will have this field populated.</p> <pre><code>public string Text { get; set; }\n</code></pre>"},{"location":"reference/stardewui/data/tooltipdata/#property-value_8","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/data/tooltipdata/#title","title":"Title","text":"<p>Bolded title to display above the Text, with a separator in between.</p> <pre><code>public string Title { get; set; }\n</code></pre>"},{"location":"reference/stardewui/data/tooltipdata/#property-value_9","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/data/tooltipdata/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/data/tooltipdata/#constraintextwidthint","title":"ConstrainTextWidth(int)","text":"<p>Constraints the tooltip to a specified pixel width by breaking lines for the Text and Title.</p> <pre><code>public StardewUI.Data.TooltipData ConstrainTextWidth(int maxWidth);\n</code></pre>"},{"location":"reference/stardewui/data/tooltipdata/#parameters_1","title":"Parameters","text":"<p><code>maxWidth</code> Int32 The desired maximum pixel width for the displayed tooltip.</p>"},{"location":"reference/stardewui/data/tooltipdata/#returns","title":"Returns","text":"<p>TooltipData</p> <p>A TooltipData instance with any necessary line breaks added to its text properties in order to keep the displayed width equal to or less than <code>maxWidth</code>.</p>"},{"location":"reference/stardewui/diagnostics/","title":"StardewUI.Diagnostics","text":""},{"location":"reference/stardewui/diagnostics/#stardewuidiagnostics-namespace","title":"StardewUI.Diagnostics Namespace","text":""},{"location":"reference/stardewui/diagnostics/#classes","title":"Classes","text":"Name Description Trace Provides methods to toggle tracing and write to the current trace."},{"location":"reference/stardewui/diagnostics/#interfaces","title":"Interfaces","text":"Name Description ITraceWriter Abstract output writer for performance traces."},{"location":"reference/stardewui/diagnostics/itracewriter/","title":"ITraceWriter","text":""},{"location":"reference/stardewui/diagnostics/itracewriter/#interface-itracewriter","title":"Interface ITraceWriter","text":""},{"location":"reference/stardewui/diagnostics/itracewriter/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Diagnostics Assembly: StardewUI.dll  </p> <p>Abstract output writer for performance traces.</p> <pre><code>public interface ITraceWriter\n</code></pre>"},{"location":"reference/stardewui/diagnostics/itracewriter/#remarks","title":"Remarks","text":"<p>This is an internal helper meant for use by the Trace utility and should not be used directly by mods.</p>"},{"location":"reference/stardewui/diagnostics/itracewriter/#members","title":"Members","text":""},{"location":"reference/stardewui/diagnostics/itracewriter/#properties","title":"Properties","text":"Name Description IsTracing Whether or not a trace has been started, and not yet ended."},{"location":"reference/stardewui/diagnostics/itracewriter/#methods","title":"Methods","text":"Name Description BeginSlice(string) Begins tracking a new operation (slice). BeginTrace() Starts a new trace. EndTrace() Ends the current trace and writes all recorded data to a new trace file in the output directory."},{"location":"reference/stardewui/diagnostics/itracewriter/#details","title":"Details","text":""},{"location":"reference/stardewui/diagnostics/itracewriter/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/diagnostics/itracewriter/#istracing","title":"IsTracing","text":"<p>Whether or not a trace has been started, and not yet ended.</p> <pre><code>bool IsTracing { get; }\n</code></pre>"},{"location":"reference/stardewui/diagnostics/itracewriter/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/diagnostics/itracewriter/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/diagnostics/itracewriter/#beginslicestring","title":"BeginSlice(string)","text":"<p>Begins tracking a new operation (slice).</p> <pre><code>System.IDisposable BeginSlice(string name);\n</code></pre>"},{"location":"reference/stardewui/diagnostics/itracewriter/#parameters","title":"Parameters","text":"<p><code>name</code> string The name that should appear in the trace log/visualization.</p>"},{"location":"reference/stardewui/diagnostics/itracewriter/#returns","title":"Returns","text":"<p>IDisposable</p> <p>A disposable instance which, when disposed, stops tracking this operation and records the duration it took, for subsequent writing to the trace file.</p>"},{"location":"reference/stardewui/diagnostics/itracewriter/#remarks_1","title":"Remarks","text":"<p>Slices must be disposed in the opposite order in which they are created, otherwise the final trace may be considered invalid.</p>"},{"location":"reference/stardewui/diagnostics/itracewriter/#begintrace","title":"BeginTrace()","text":"<p>Starts a new trace.</p> <pre><code>void BeginTrace();\n</code></pre>"},{"location":"reference/stardewui/diagnostics/itracewriter/#endtrace","title":"EndTrace()","text":"<p>Ends the current trace and writes all recorded data to a new trace file in the output directory.</p> <pre><code>void EndTrace();\n</code></pre>"},{"location":"reference/stardewui/diagnostics/trace/","title":"Trace","text":""},{"location":"reference/stardewui/diagnostics/trace/#class-trace","title":"Class Trace","text":""},{"location":"reference/stardewui/diagnostics/trace/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Diagnostics Assembly: StardewUI.dll  </p> <p>Provides methods to toggle tracing and write to the current trace.</p> <pre><code>public static class Trace\n</code></pre> <p>Inheritance Object \u21e6 Trace</p>"},{"location":"reference/stardewui/diagnostics/trace/#members","title":"Members","text":""},{"location":"reference/stardewui/diagnostics/trace/#properties","title":"Properties","text":"Name Description IsTracing Gets or sets whether tracing is active."},{"location":"reference/stardewui/diagnostics/trace/#methods","title":"Methods","text":"Name Description Begin(string) Begins tracking a new operation (slice). Begin(Func&lt;string&gt;, string) Begins tracking a new operation (slice). Begin(Object, string) Begins tracking a new operation (slice)."},{"location":"reference/stardewui/diagnostics/trace/#details","title":"Details","text":""},{"location":"reference/stardewui/diagnostics/trace/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/diagnostics/trace/#istracing","title":"IsTracing","text":"<p>Gets or sets whether tracing is active.</p> <pre><code>public static bool IsTracing { get; set; }\n</code></pre>"},{"location":"reference/stardewui/diagnostics/trace/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/diagnostics/trace/#remarks","title":"Remarks","text":"<p>While inactive, all calls to any of the Begin(string) overloads are ignored and return <code>null</code>. If tracing is active, then setting this to <code>false</code> will cause the trace file to be written automatically.</p>"},{"location":"reference/stardewui/diagnostics/trace/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/diagnostics/trace/#beginstring","title":"Begin(string)","text":"<p>Begins tracking a new operation (slice).</p> <pre><code>public static System.IDisposable Begin(string name);\n</code></pre>"},{"location":"reference/stardewui/diagnostics/trace/#parameters","title":"Parameters","text":"<p><code>name</code> string The name that should appear in the trace log/visualization.</p>"},{"location":"reference/stardewui/diagnostics/trace/#returns","title":"Returns","text":"<p>IDisposable</p> <p>A disposable instance which, when disposed, stops tracking this operation and records the duration it took, for subsequent writing to the trace file.</p>"},{"location":"reference/stardewui/diagnostics/trace/#remarks_1","title":"Remarks","text":"<p>Slices must be disposed in the opposite order in which they are created, otherwise the final trace may be considered invalid.</p>"},{"location":"reference/stardewui/diagnostics/trace/#beginfuncstring-string","title":"Begin(Func&lt;string&gt;, string)","text":"<p>Begins tracking a new operation (slice).</p> <pre><code>public static System.IDisposable Begin(Func&lt;string&gt; callerName, string memberName);\n</code></pre>"},{"location":"reference/stardewui/diagnostics/trace/#parameters_1","title":"Parameters","text":"<p><code>callerName</code> Func&lt;string&gt; Reference to the name (e.g. type name) of the object performing the traced operation.</p> <p><code>memberName</code> string Name of the member (method or property) about to begin execution.</p>"},{"location":"reference/stardewui/diagnostics/trace/#returns_1","title":"Returns","text":"<p>IDisposable</p> <p>A disposable instance which, when disposed, stops tracking this operation and records the duration it took, for subsequent writing to the trace file.</p>"},{"location":"reference/stardewui/diagnostics/trace/#remarks_2","title":"Remarks","text":"<p>Slices must be disposed in the opposite order in which they are created, otherwise the final trace may be considered invalid.</p>"},{"location":"reference/stardewui/diagnostics/trace/#beginobject-string","title":"Begin(Object, string)","text":"<p>Begins tracking a new operation (slice).</p> <pre><code>public static System.IDisposable Begin(System.Object caller, string memberName);\n</code></pre>"},{"location":"reference/stardewui/diagnostics/trace/#parameters_2","title":"Parameters","text":"<p><code>caller</code> Object Reference to the object performing the traced operation.</p> <p><code>memberName</code> string Name of the member (method or property) about to begin execution.</p>"},{"location":"reference/stardewui/diagnostics/trace/#returns_2","title":"Returns","text":"<p>IDisposable</p> <p>A disposable instance which, when disposed, stops tracking this operation and records the duration it took, for subsequent writing to the trace file.</p>"},{"location":"reference/stardewui/diagnostics/trace/#remarks_3","title":"Remarks","text":"<p>Slices must be disposed in the opposite order in which they are created, otherwise the final trace may be considered invalid.</p>"},{"location":"reference/stardewui/events/","title":"StardewUI.Events","text":""},{"location":"reference/stardewui/events/#stardewuievents-namespace","title":"StardewUI.Events Namespace","text":""},{"location":"reference/stardewui/events/#classes","title":"Classes","text":"Name Description BubbleEventArgs Base class for events that can bubble up to parents from descendant views. ButtonEventArgs Event arguments for an event relating to a button (or key) of some input device. ClickEventArgs Event arguments for a controller or mouse click. PointerEventArgs Base class for any event involving the cursor/pointer, e.g. clicks. PointerMoveEventArgs Event arguments for pointer movement relative to some view. WheelEventArgs Event arguments for mouse wheel/scroll wheel actions."},{"location":"reference/stardewui/events/bubbleeventargs/","title":"BubbleEventArgs","text":""},{"location":"reference/stardewui/events/bubbleeventargs/#class-bubbleeventargs","title":"Class BubbleEventArgs","text":""},{"location":"reference/stardewui/events/bubbleeventargs/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Events Assembly: StardewUI.dll  </p> <p>Base class for events that can bubble up to parents from descendant views.</p> <pre><code>public class BubbleEventArgs : System.EventArgs\n</code></pre> <p>Inheritance Object \u21e6 EventArgs \u21e6 BubbleEventArgs</p>"},{"location":"reference/stardewui/events/bubbleeventargs/#members","title":"Members","text":""},{"location":"reference/stardewui/events/bubbleeventargs/#constructors","title":"Constructors","text":"Name Description BubbleEventArgs()"},{"location":"reference/stardewui/events/bubbleeventargs/#properties","title":"Properties","text":"Name Description Handled Whether or not the view receiving the event handled the event. Set to <code>true</code> to prevent bubbling."},{"location":"reference/stardewui/events/bubbleeventargs/#details","title":"Details","text":""},{"location":"reference/stardewui/events/bubbleeventargs/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/events/bubbleeventargs/#bubbleeventargs","title":"BubbleEventArgs()","text":"<pre><code>public BubbleEventArgs();\n</code></pre>"},{"location":"reference/stardewui/events/bubbleeventargs/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/events/bubbleeventargs/#handled","title":"Handled","text":"<p>Whether or not the view receiving the event handled the event. Set to <code>true</code> to prevent bubbling.</p> <pre><code>public bool Handled { get; set; }\n</code></pre>"},{"location":"reference/stardewui/events/bubbleeventargs/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/events/buttoneventargs/","title":"ButtonEventArgs","text":""},{"location":"reference/stardewui/events/buttoneventargs/#class-buttoneventargs","title":"Class ButtonEventArgs","text":""},{"location":"reference/stardewui/events/buttoneventargs/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Events Assembly: StardewUI.dll  </p> <p>Event arguments for an event relating to a button (or key) of some input device.</p> <pre><code>public class ButtonEventArgs : StardewUI.Events.PointerEventArgs, \n    StardewUI.Layout.IOffsettable&lt;StardewUI.Events.ButtonEventArgs&gt;\n</code></pre> <p>Inheritance Object \u21e6 EventArgs \u21e6 BubbleEventArgs \u21e6 PointerEventArgs \u21e6 ButtonEventArgs</p> <p>Implements IOffsettable&lt;ButtonEventArgs&gt;</p>"},{"location":"reference/stardewui/events/buttoneventargs/#members","title":"Members","text":""},{"location":"reference/stardewui/events/buttoneventargs/#constructors","title":"Constructors","text":"Name Description ButtonEventArgs(Vector2, SButton) Event arguments for an event relating to a button (or key) of some input device."},{"location":"reference/stardewui/events/buttoneventargs/#properties","title":"Properties","text":"Name Description Button The button that triggered the event. Handled Whether or not the view receiving the event handled the event. Set to <code>true</code> to prevent bubbling.(Inherited from BubbleEventArgs) Position The position, relative to the view receiving the event, of the pointer when the event occurred.(Inherited from PointerEventArgs)"},{"location":"reference/stardewui/events/buttoneventargs/#methods","title":"Methods","text":"Name Description Offset(Vector2) Creates a clone of this instance with an offset applied to its position."},{"location":"reference/stardewui/events/buttoneventargs/#details","title":"Details","text":""},{"location":"reference/stardewui/events/buttoneventargs/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/events/buttoneventargs/#buttoneventargsvector2-sbutton","title":"ButtonEventArgs(Vector2, SButton)","text":"<p>Event arguments for an event relating to a button (or key) of some input device.</p> <pre><code>public ButtonEventArgs(Microsoft.Xna.Framework.Vector2 position, StardewModdingAPI.SButton button);\n</code></pre>"},{"location":"reference/stardewui/events/buttoneventargs/#parameters","title":"Parameters","text":"<p><code>position</code> Vector2 The position of the mouse cursor when the button was pressed.</p> <p><code>button</code> \u00a0 SButton The button that triggered the event.</p>"},{"location":"reference/stardewui/events/buttoneventargs/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/events/buttoneventargs/#button","title":"Button","text":"<p>The button that triggered the event.</p> <pre><code>public StardewModdingAPI.SButton Button { get; }\n</code></pre>"},{"location":"reference/stardewui/events/buttoneventargs/#property-value","title":"Property Value","text":"<p>SButton</p>"},{"location":"reference/stardewui/events/buttoneventargs/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/events/buttoneventargs/#offsetvector2","title":"Offset(Vector2)","text":"<p>Creates a clone of this instance with an offset applied to its position.</p> <pre><code>public StardewUI.Events.ButtonEventArgs Offset(Microsoft.Xna.Framework.Vector2 distance);\n</code></pre>"},{"location":"reference/stardewui/events/buttoneventargs/#parameters_1","title":"Parameters","text":"<p><code>distance</code> Vector2 The offset distance.</p>"},{"location":"reference/stardewui/events/buttoneventargs/#returns","title":"Returns","text":"<p>ButtonEventArgs</p>"},{"location":"reference/stardewui/events/clickeventargs/","title":"ClickEventArgs","text":""},{"location":"reference/stardewui/events/clickeventargs/#class-clickeventargs","title":"Class ClickEventArgs","text":""},{"location":"reference/stardewui/events/clickeventargs/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Events Assembly: StardewUI.dll  </p> <p>Event arguments for a controller or mouse click.</p> <pre><code>public class ClickEventArgs : StardewUI.Events.PointerEventArgs, \n    StardewUI.Layout.IOffsettable&lt;StardewUI.Events.ClickEventArgs&gt;\n</code></pre> <p>Inheritance Object \u21e6 EventArgs \u21e6 BubbleEventArgs \u21e6 PointerEventArgs \u21e6 ClickEventArgs</p> <p>Implements IOffsettable&lt;ClickEventArgs&gt;</p>"},{"location":"reference/stardewui/events/clickeventargs/#members","title":"Members","text":""},{"location":"reference/stardewui/events/clickeventargs/#constructors","title":"Constructors","text":"Name Description ClickEventArgs(Vector2, SButton) Event arguments for a controller or mouse click."},{"location":"reference/stardewui/events/clickeventargs/#properties","title":"Properties","text":"Name Description Button The specific button that triggered the click. Handled Whether or not the view receiving the event handled the event. Set to <code>true</code> to prevent bubbling.(Inherited from BubbleEventArgs) Position The position, relative to the view receiving the event, of the pointer when the event occurred.(Inherited from PointerEventArgs)"},{"location":"reference/stardewui/events/clickeventargs/#methods","title":"Methods","text":"Name Description IsPrimaryButton() Gets whether the pressed Button is the default for primary actions. IsSecondaryButton() Gets whether the pressed Button is the default for secondary (context) actions. Offset(Vector2) Creates a clone of this instance with an offset applied to its position."},{"location":"reference/stardewui/events/clickeventargs/#details","title":"Details","text":""},{"location":"reference/stardewui/events/clickeventargs/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/events/clickeventargs/#clickeventargsvector2-sbutton","title":"ClickEventArgs(Vector2, SButton)","text":"<p>Event arguments for a controller or mouse click.</p> <pre><code>public ClickEventArgs(Microsoft.Xna.Framework.Vector2 position, StardewModdingAPI.SButton button);\n</code></pre>"},{"location":"reference/stardewui/events/clickeventargs/#parameters","title":"Parameters","text":"<p><code>position</code> Vector2</p> <p><code>button</code> \u00a0 SButton The specific button that triggered the click.</p>"},{"location":"reference/stardewui/events/clickeventargs/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/events/clickeventargs/#button","title":"Button","text":"<p>The specific button that triggered the click.</p> <pre><code>public StardewModdingAPI.SButton Button { get; }\n</code></pre>"},{"location":"reference/stardewui/events/clickeventargs/#property-value","title":"Property Value","text":"<p>SButton</p>"},{"location":"reference/stardewui/events/clickeventargs/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/events/clickeventargs/#isprimarybutton","title":"IsPrimaryButton()","text":"<p>Gets whether the pressed Button is the default for primary actions.</p> <pre><code>public bool IsPrimaryButton();\n</code></pre>"},{"location":"reference/stardewui/events/clickeventargs/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the pressed Button is either MouseLeft or the configured gamepad action button; otherwise, <code>false</code>.</p>"},{"location":"reference/stardewui/events/clickeventargs/#issecondarybutton","title":"IsSecondaryButton()","text":"<p>Gets whether the pressed Button is the default for secondary (context) actions.</p> <pre><code>public bool IsSecondaryButton();\n</code></pre>"},{"location":"reference/stardewui/events/clickeventargs/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the pressed Button is either MouseRight or the configured gamepad tool-use button; otherwise, <code>false</code>.</p>"},{"location":"reference/stardewui/events/clickeventargs/#offsetvector2","title":"Offset(Vector2)","text":"<p>Creates a clone of this instance with an offset applied to its position.</p> <pre><code>public StardewUI.Events.ClickEventArgs Offset(Microsoft.Xna.Framework.Vector2 distance);\n</code></pre>"},{"location":"reference/stardewui/events/clickeventargs/#parameters_1","title":"Parameters","text":"<p><code>distance</code> Vector2 The offset distance.</p>"},{"location":"reference/stardewui/events/clickeventargs/#returns_2","title":"Returns","text":"<p>ClickEventArgs</p>"},{"location":"reference/stardewui/events/pointereventargs/","title":"PointerEventArgs","text":""},{"location":"reference/stardewui/events/pointereventargs/#class-pointereventargs","title":"Class PointerEventArgs","text":""},{"location":"reference/stardewui/events/pointereventargs/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Events Assembly: StardewUI.dll  </p> <p>Base class for any event involving the cursor/pointer, e.g. clicks.</p> <pre><code>public class PointerEventArgs : StardewUI.Events.BubbleEventArgs, \n    StardewUI.Layout.IOffsettable&lt;StardewUI.Events.PointerEventArgs&gt;\n</code></pre> <p>Inheritance Object \u21e6 EventArgs \u21e6 BubbleEventArgs \u21e6 PointerEventArgs</p> <p>Implements IOffsettable&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/events/pointereventargs/#members","title":"Members","text":""},{"location":"reference/stardewui/events/pointereventargs/#constructors","title":"Constructors","text":"Name Description PointerEventArgs(Vector2) Base class for any event involving the cursor/pointer, e.g. clicks."},{"location":"reference/stardewui/events/pointereventargs/#properties","title":"Properties","text":"Name Description Handled Whether or not the view receiving the event handled the event. Set to <code>true</code> to prevent bubbling.(Inherited from BubbleEventArgs) Position The position, relative to the view receiving the event, of the pointer when the event occurred."},{"location":"reference/stardewui/events/pointereventargs/#methods","title":"Methods","text":"Name Description Offset(Vector2) Creates a clone of this instance with an offset applied to its position."},{"location":"reference/stardewui/events/pointereventargs/#details","title":"Details","text":""},{"location":"reference/stardewui/events/pointereventargs/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/events/pointereventargs/#pointereventargsvector2","title":"PointerEventArgs(Vector2)","text":"<p>Base class for any event involving the cursor/pointer, e.g. clicks.</p> <pre><code>public PointerEventArgs(Microsoft.Xna.Framework.Vector2 position);\n</code></pre>"},{"location":"reference/stardewui/events/pointereventargs/#parameters","title":"Parameters","text":"<p><code>position</code> Vector2 The position, relative to the view receiving the event, of the pointer when the event occurred.</p>"},{"location":"reference/stardewui/events/pointereventargs/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/events/pointereventargs/#position","title":"Position","text":"<p>The position, relative to the view receiving the event, of the pointer when the event occurred.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 Position { get; }\n</code></pre>"},{"location":"reference/stardewui/events/pointereventargs/#property-value","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/events/pointereventargs/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/events/pointereventargs/#offsetvector2","title":"Offset(Vector2)","text":"<p>Creates a clone of this instance with an offset applied to its position.</p> <pre><code>public StardewUI.Events.PointerEventArgs Offset(Microsoft.Xna.Framework.Vector2 distance);\n</code></pre>"},{"location":"reference/stardewui/events/pointereventargs/#parameters_1","title":"Parameters","text":"<p><code>distance</code> Vector2 The offset distance.</p>"},{"location":"reference/stardewui/events/pointereventargs/#returns","title":"Returns","text":"<p>PointerEventArgs</p>"},{"location":"reference/stardewui/events/pointermoveeventargs/","title":"PointerMoveEventArgs","text":""},{"location":"reference/stardewui/events/pointermoveeventargs/#class-pointermoveeventargs","title":"Class PointerMoveEventArgs","text":""},{"location":"reference/stardewui/events/pointermoveeventargs/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Events Assembly: StardewUI.dll  </p> <p>Event arguments for pointer movement relative to some view.</p> <pre><code>public class PointerMoveEventArgs : StardewUI.Events.PointerEventArgs, \n    StardewUI.Layout.IOffsettable&lt;StardewUI.Events.PointerMoveEventArgs&gt;\n</code></pre> <p>Inheritance Object \u21e6 EventArgs \u21e6 BubbleEventArgs \u21e6 PointerEventArgs \u21e6 PointerMoveEventArgs</p> <p>Implements IOffsettable&lt;PointerMoveEventArgs&gt;</p>"},{"location":"reference/stardewui/events/pointermoveeventargs/#members","title":"Members","text":""},{"location":"reference/stardewui/events/pointermoveeventargs/#constructors","title":"Constructors","text":"Name Description PointerMoveEventArgs(Vector2, Vector2) Event arguments for pointer movement relative to some view."},{"location":"reference/stardewui/events/pointermoveeventargs/#properties","title":"Properties","text":"Name Description Handled Whether or not the view receiving the event handled the event. Set to <code>true</code> to prevent bubbling.(Inherited from BubbleEventArgs) Position The position, relative to the view receiving the event, of the pointer when the event occurred.(Inherited from PointerEventArgs) PreviousPosition The previously-tracked position of the pointer."},{"location":"reference/stardewui/events/pointermoveeventargs/#methods","title":"Methods","text":"Name Description Offset(Vector2) Creates a clone of this instance with an offset applied to its position."},{"location":"reference/stardewui/events/pointermoveeventargs/#details","title":"Details","text":""},{"location":"reference/stardewui/events/pointermoveeventargs/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/events/pointermoveeventargs/#pointermoveeventargsvector2-vector2","title":"PointerMoveEventArgs(Vector2, Vector2)","text":"<p>Event arguments for pointer movement relative to some view.</p> <pre><code>public PointerMoveEventArgs(Microsoft.Xna.Framework.Vector2 previousPosition, Microsoft.Xna.Framework.Vector2 position);\n</code></pre>"},{"location":"reference/stardewui/events/pointermoveeventargs/#parameters","title":"Parameters","text":"<p><code>previousPosition</code> Vector2 The previously-tracked position of the pointer.</p> <p><code>position</code> Vector2 The new pointer position.</p>"},{"location":"reference/stardewui/events/pointermoveeventargs/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/events/pointermoveeventargs/#previousposition","title":"PreviousPosition","text":"<p>The previously-tracked position of the pointer.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 PreviousPosition { get; }\n</code></pre>"},{"location":"reference/stardewui/events/pointermoveeventargs/#property-value","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/events/pointermoveeventargs/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/events/pointermoveeventargs/#offsetvector2","title":"Offset(Vector2)","text":"<p>Creates a clone of this instance with an offset applied to its position.</p> <pre><code>public StardewUI.Events.PointerMoveEventArgs Offset(Microsoft.Xna.Framework.Vector2 distance);\n</code></pre>"},{"location":"reference/stardewui/events/pointermoveeventargs/#parameters_1","title":"Parameters","text":"<p><code>distance</code> Vector2 The offset distance.</p>"},{"location":"reference/stardewui/events/pointermoveeventargs/#returns","title":"Returns","text":"<p>PointerMoveEventArgs</p>"},{"location":"reference/stardewui/events/wheeleventargs/","title":"WheelEventArgs","text":""},{"location":"reference/stardewui/events/wheeleventargs/#class-wheeleventargs","title":"Class WheelEventArgs","text":""},{"location":"reference/stardewui/events/wheeleventargs/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Events Assembly: StardewUI.dll  </p> <p>Event arguments for mouse wheel/scroll wheel actions.</p> <pre><code>public class WheelEventArgs : StardewUI.Events.PointerEventArgs, \n    StardewUI.Layout.IOffsettable&lt;StardewUI.Events.WheelEventArgs&gt;\n</code></pre> <p>Inheritance Object \u21e6 EventArgs \u21e6 BubbleEventArgs \u21e6 PointerEventArgs \u21e6 WheelEventArgs</p> <p>Implements IOffsettable&lt;WheelEventArgs&gt;</p>"},{"location":"reference/stardewui/events/wheeleventargs/#members","title":"Members","text":""},{"location":"reference/stardewui/events/wheeleventargs/#constructors","title":"Constructors","text":"Name Description WheelEventArgs(Vector2, Direction) Event arguments for mouse wheel/scroll wheel actions."},{"location":"reference/stardewui/events/wheeleventargs/#properties","title":"Properties","text":"Name Description Direction Direction of the wheel movement. Handled Whether or not the view receiving the event handled the event. Set to <code>true</code> to prevent bubbling.(Inherited from BubbleEventArgs) Position The position, relative to the view receiving the event, of the pointer when the event occurred.(Inherited from PointerEventArgs)"},{"location":"reference/stardewui/events/wheeleventargs/#methods","title":"Methods","text":"Name Description Offset(Vector2) Creates a clone of this instance with an offset applied to its position."},{"location":"reference/stardewui/events/wheeleventargs/#details","title":"Details","text":""},{"location":"reference/stardewui/events/wheeleventargs/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/events/wheeleventargs/#wheeleventargsvector2-direction","title":"WheelEventArgs(Vector2, Direction)","text":"<p>Event arguments for mouse wheel/scroll wheel actions.</p> <pre><code>public WheelEventArgs(Microsoft.Xna.Framework.Vector2 position, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/events/wheeleventargs/#parameters","title":"Parameters","text":"<p><code>position</code> Vector2</p> <p><code>direction</code> Direction Direction of the wheel movement.</p>"},{"location":"reference/stardewui/events/wheeleventargs/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/events/wheeleventargs/#direction","title":"Direction","text":"<p>Direction of the wheel movement.</p> <pre><code>public StardewUI.Direction Direction { get; }\n</code></pre>"},{"location":"reference/stardewui/events/wheeleventargs/#property-value","title":"Property Value","text":"<p>Direction</p>"},{"location":"reference/stardewui/events/wheeleventargs/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/events/wheeleventargs/#offsetvector2","title":"Offset(Vector2)","text":"<p>Creates a clone of this instance with an offset applied to its position.</p> <pre><code>public StardewUI.Events.WheelEventArgs Offset(Microsoft.Xna.Framework.Vector2 distance);\n</code></pre>"},{"location":"reference/stardewui/events/wheeleventargs/#parameters_1","title":"Parameters","text":"<p><code>distance</code> Vector2 The offset distance.</p>"},{"location":"reference/stardewui/events/wheeleventargs/#returns","title":"Returns","text":"<p>WheelEventArgs</p>"},{"location":"reference/stardewui/framework/","title":"StardewUI.Framework","text":""},{"location":"reference/stardewui/framework/#stardewuiframework-namespace","title":"StardewUI.Framework Namespace","text":""},{"location":"reference/stardewui/framework/#classes","title":"Classes","text":"Name Description BackoffRule Defines the rules for exponential backoff. BackoffState State of an exponential backoff, e.g. as used in a <code>StardewUI.Framework.BackoffTracker&lt;T&gt;</code>. ModConfig Configuration settings for StardewUI.Framework. PerformanceConfig Configuration sub-settings providing control over performance tweaks. UIException Base class for all exceptions specific to StardewUI."},{"location":"reference/stardewui/framework/#interfaces","title":"Interfaces","text":"Name Description IAnyCast A marker interface that, when used in place of Object, forces the framework to attempt an explicit conversion/cast to the expected destination type. IMenuController Wrapper for a mod-managed IClickableMenu that allows further customization of menu-level properties not accessible to StarML or data binding. IViewDrawable Provides methods to update and draw a simple, non-interactive UI component, such as a HUD widget. IViewEngine Public API for StardewUI, abstracting away all implementation details of views and trees."},{"location":"reference/stardewui/framework/backoffrule/","title":"BackoffRule","text":""},{"location":"reference/stardewui/framework/backoffrule/#class-backoffrule","title":"Class BackoffRule","text":""},{"location":"reference/stardewui/framework/backoffrule/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework Assembly: StardewUI.dll  </p> <p>Defines the rules for exponential backoff.</p> <pre><code>public class BackoffRule\n</code></pre> <p>Inheritance Object \u21e6 BackoffRule</p>"},{"location":"reference/stardewui/framework/backoffrule/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/backoffrule/#constructors","title":"Constructors","text":"Name Description BackoffRule(TimeSpan, TimeSpan, Single) Defines the rules for exponential backoff."},{"location":"reference/stardewui/framework/backoffrule/#fields","title":"Fields","text":"Name Description Default Standard backoff rule deemed suitable for most types of UI retries."},{"location":"reference/stardewui/framework/backoffrule/#properties","title":"Properties","text":"Name Description InitialDuration Gets the duration to wait before the first retry attempt."},{"location":"reference/stardewui/framework/backoffrule/#methods","title":"Methods","text":"Name Description GetNextDuration(TimeSpan) Gets the duration to wait before the next retry attempt."},{"location":"reference/stardewui/framework/backoffrule/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/backoffrule/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/backoffrule/#backoffruletimespan-timespan-float","title":"BackoffRule(TimeSpan, TimeSpan, float)","text":"<p>Defines the rules for exponential backoff.</p> <pre><code>public BackoffRule(System.TimeSpan initialDuration, System.TimeSpan maxDuration, float multiplier);\n</code></pre>"},{"location":"reference/stardewui/framework/backoffrule/#parameters","title":"Parameters","text":"<p><code>initialDuration</code> TimeSpan Duration to wait before the first retry attempt.</p> <p><code>maxDuration</code> TimeSpan Maximum duration to wait before any retry attempt; i.e. no matter how many retries have already occurred for a given key, it will not extend the duration any longer than this.</p> <p><code>multiplier</code> Single Amount to multiply the current duration on each subsequent retry, starting from <code>initialDuration</code> and going no higher than <code>maxDuration</code>.</p>"},{"location":"reference/stardewui/framework/backoffrule/#fields_1","title":"Fields","text":""},{"location":"reference/stardewui/framework/backoffrule/#default","title":"Default","text":"<p>Standard backoff rule deemed suitable for most types of UI retries.</p> <pre><code>public static readonly StardewUI.Framework.BackoffRule Default;\n</code></pre>"},{"location":"reference/stardewui/framework/backoffrule/#field-value","title":"Field Value","text":"<p>BackoffRule</p>"},{"location":"reference/stardewui/framework/backoffrule/#remarks","title":"Remarks","text":"<p>Uses an initial delay of 50 ms, maximum delay of 5 s, and multiplier of 4.</p>"},{"location":"reference/stardewui/framework/backoffrule/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/backoffrule/#initialduration","title":"InitialDuration","text":"<p>Gets the duration to wait before the first retry attempt.</p> <pre><code>public System.TimeSpan InitialDuration { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/backoffrule/#property-value","title":"Property Value","text":"<p>TimeSpan</p>"},{"location":"reference/stardewui/framework/backoffrule/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/backoffrule/#getnextdurationtimespan","title":"GetNextDuration(TimeSpan)","text":"<p>Gets the duration to wait before the next retry attempt.</p> <pre><code>public System.TimeSpan GetNextDuration(System.TimeSpan previousDuration);\n</code></pre>"},{"location":"reference/stardewui/framework/backoffrule/#parameters_1","title":"Parameters","text":"<p><code>previousDuration</code> TimeSpan The wait duration that was used on the previous attempt.</p>"},{"location":"reference/stardewui/framework/backoffrule/#returns","title":"Returns","text":"<p>TimeSpan</p>"},{"location":"reference/stardewui/framework/backoffstate/","title":"BackoffState","text":""},{"location":"reference/stardewui/framework/backoffstate/#class-backoffstate","title":"Class BackoffState","text":""},{"location":"reference/stardewui/framework/backoffstate/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework Assembly: StardewUI.dll  </p> <p>State of an exponential backoff, e.g. as used in a <code>StardewUI.Framework.BackoffTracker&lt;T&gt;</code>.</p> <pre><code>public class BackoffState\n</code></pre> <p>Inheritance Object \u21e6 BackoffState</p>"},{"location":"reference/stardewui/framework/backoffstate/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/backoffstate/#constructors","title":"Constructors","text":"Name Description BackoffState(TimeSpan) State of an exponential backoff, e.g. as used in a <code>StardewUI.Framework.BackoffTracker&lt;T&gt;</code>."},{"location":"reference/stardewui/framework/backoffstate/#properties","title":"Properties","text":"Name Description Duration The most recent duration waited/waiting for a retry. Elapsed Time elapsed waiting for the current/next retry."},{"location":"reference/stardewui/framework/backoffstate/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/backoffstate/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/backoffstate/#backoffstatetimespan","title":"BackoffState(TimeSpan)","text":"<p>State of an exponential backoff, e.g. as used in a <code>StardewUI.Framework.BackoffTracker&lt;T&gt;</code>.</p> <pre><code>public BackoffState(System.TimeSpan initialDuration);\n</code></pre>"},{"location":"reference/stardewui/framework/backoffstate/#parameters","title":"Parameters","text":"<p><code>initialDuration</code> TimeSpan The initial duration to wait for a retry.</p>"},{"location":"reference/stardewui/framework/backoffstate/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/backoffstate/#duration","title":"Duration","text":"<p>The most recent duration waited/waiting for a retry.</p> <pre><code>public System.TimeSpan Duration { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/backoffstate/#property-value","title":"Property Value","text":"<p>TimeSpan</p>"},{"location":"reference/stardewui/framework/backoffstate/#elapsed","title":"Elapsed","text":"<p>Time elapsed waiting for the current/next retry.</p> <pre><code>public System.TimeSpan Elapsed { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/backoffstate/#property-value_1","title":"Property Value","text":"<p>TimeSpan</p>"},{"location":"reference/stardewui/framework/ianycast/","title":"IAnyCast","text":""},{"location":"reference/stardewui/framework/ianycast/#interface-ianycast","title":"Interface IAnyCast","text":""},{"location":"reference/stardewui/framework/ianycast/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework Assembly: StardewUI.dll  </p> <p>A marker interface that, when used in place of Object, forces the framework to attempt an explicit conversion/cast to the expected destination type.</p> <pre><code>public interface IAnyCast\n</code></pre>"},{"location":"reference/stardewui/framework/ianycast/#remarks","title":"Remarks","text":"<p>Casts are normally only permitted when the source type is actually assignable to the destination type. <code>IAnyCast</code> is used to indicate that the source is intentionally ambiguous or boxed, and the real type cannot be known until the conversion is attempted, at which point it is assumed to be assignment-compatible or have an explicit conversion operator.</p>"},{"location":"reference/stardewui/framework/ianycast/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/ianycast/#properties","title":"Properties","text":"Name Description Value The boxed value."},{"location":"reference/stardewui/framework/ianycast/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/ianycast/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/ianycast/#value","title":"Value","text":"<p>The boxed value.</p> <pre><code>System.Object Value { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/ianycast/#property-value","title":"Property Value","text":"<p>Object</p>"},{"location":"reference/stardewui/framework/imenucontroller/","title":"IMenuController","text":""},{"location":"reference/stardewui/framework/imenucontroller/#interface-imenucontroller","title":"Interface IMenuController","text":""},{"location":"reference/stardewui/framework/imenucontroller/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework Assembly: StardewUI.dll  </p> <p>Wrapper for a mod-managed IClickableMenu that allows further customization of menu-level properties not accessible to StarML or data binding.</p> <pre><code>public interface IMenuController : System.IDisposable\n</code></pre> <p>Implements IDisposable</p>"},{"location":"reference/stardewui/framework/imenucontroller/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/imenucontroller/#properties","title":"Properties","text":"Name Description CanClose Gets or sets a function that returns whether or not the menu can be closed. CloseAction Gets or sets an action that replaces the default menu-close behavior. CloseButtonOffset Offset from the menu view's top-right edge to draw the close button. DimmingAmount How much the menu should dim the entire screen underneath. Menu Gets the menu, which can be opened using activeClickableMenu, or as a child menu. PositionSelector Gets or sets a function that returns the top-left position of the menu."},{"location":"reference/stardewui/framework/imenucontroller/#methods","title":"Methods","text":"Name Description EnableCloseButton(Texture2D, Rectangle?, Single) Configures the menu to display a close button on the upper-right side. SetGutters(Int32, Int32, Int32, Int32) Configures the menu's gutter widths/heights."},{"location":"reference/stardewui/framework/imenucontroller/#events","title":"Events","text":"Name Description Closed Event raised after the menu has been closed. Closing Event raised when the menu is about to close."},{"location":"reference/stardewui/framework/imenucontroller/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/imenucontroller/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/imenucontroller/#canclose","title":"CanClose","text":"<p>Gets or sets a function that returns whether or not the menu can be closed.</p> <pre><code>Func&lt;System.Boolean&gt; CanClose { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/imenucontroller/#property-value","title":"Property Value","text":"<p>Func&lt;Boolean&gt;</p>"},{"location":"reference/stardewui/framework/imenucontroller/#remarks","title":"Remarks","text":"<p>This is equivalent to implementing readyToClose().</p>"},{"location":"reference/stardewui/framework/imenucontroller/#closeaction","title":"CloseAction","text":"<p>Gets or sets an action that replaces the default menu-close behavior.</p> <pre><code>System.Action CloseAction { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/imenucontroller/#property-value_1","title":"Property Value","text":"<p>Action</p>"},{"location":"reference/stardewui/framework/imenucontroller/#remarks_1","title":"Remarks","text":"<p>Most users should leave this property unset. It is intended for use in unusual contexts, such as replacing the mod settings in a Generic Mod Config Menu integration. Setting any non-null value to this property will suppress the default behavior of exitThisMenu(Boolean) entirely, so the caller is responsible for handling all possible scenarios (e.g. child of another menu, or sub-menu of the title menu).</p>"},{"location":"reference/stardewui/framework/imenucontroller/#closebuttonoffset","title":"CloseButtonOffset","text":"<p>Offset from the menu view's top-right edge to draw the close button.</p> <pre><code>Microsoft.Xna.Framework.Vector2 CloseButtonOffset { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/imenucontroller/#property-value_2","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/framework/imenucontroller/#remarks_2","title":"Remarks","text":"<p>Only applies when EnableCloseButton(Texture2D, Rectangle?, Single) has been called at least once.</p>"},{"location":"reference/stardewui/framework/imenucontroller/#dimmingamount","title":"DimmingAmount","text":"<p>How much the menu should dim the entire screen underneath.</p> <pre><code>float DimmingAmount { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/imenucontroller/#property-value_3","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/framework/imenucontroller/#remarks_3","title":"Remarks","text":"<p>The default dimming is appropriate for most menus, but if the menu is being drawn as a delegate of some other macro-menu, then it can be lowered or removed (set to <code>0</code>) entirely.</p>"},{"location":"reference/stardewui/framework/imenucontroller/#menu","title":"Menu","text":"<p>Gets the menu, which can be opened using activeClickableMenu, or as a child menu.</p> <pre><code>StardewValley.Menus.IClickableMenu Menu { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/imenucontroller/#property-value_4","title":"Property Value","text":"<p>IClickableMenu</p>"},{"location":"reference/stardewui/framework/imenucontroller/#positionselector","title":"PositionSelector","text":"<p>Gets or sets a function that returns the top-left position of the menu.</p> <pre><code>Func&lt;Microsoft.Xna.Framework.Point&gt; PositionSelector { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/imenucontroller/#property-value_5","title":"Property Value","text":"<p>Func&lt;Point&gt;</p>"},{"location":"reference/stardewui/framework/imenucontroller/#remarks_4","title":"Remarks","text":"<p>Setting any non-null value will disable the auto-centering functionality, and is equivalent to setting the xPositionOnScreen and yPositionOnScreen fields.</p>"},{"location":"reference/stardewui/framework/imenucontroller/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/imenucontroller/#enableclosebuttontexture2d-rectangle-float","title":"EnableCloseButton(Texture2D, Rectangle?, float)","text":"<p>Configures the menu to display a close button on the upper-right side.</p> <pre><code>void EnableCloseButton(Microsoft.Xna.Framework.Graphics.Texture2D texture, Microsoft.Xna.Framework.Rectangle? sourceRect, float scale);\n</code></pre>"},{"location":"reference/stardewui/framework/imenucontroller/#parameters","title":"Parameters","text":"<p><code>texture</code> Texture2D The source image/tile sheet containing the button image.</p> <p><code>sourceRect</code> Nullable&lt;Rectangle&gt; The location within the <code>texture</code> where the image is located, or <code>null</code> to draw the entire <code>texture</code>.</p> <p><code>scale</code> Single Scale to apply, if the destination size should be different from the size of the <code>sourceRect</code>.</p>"},{"location":"reference/stardewui/framework/imenucontroller/#remarks_5","title":"Remarks","text":"<p>If no <code>texture</code> is specified, then all other parameters are ignored and the default close button sprite is drawn. Otherwise, a custom sprite will be drawn using the specified parameters.</p>"},{"location":"reference/stardewui/framework/imenucontroller/#setguttersint-int-int-int","title":"SetGutters(int, int, int, int)","text":"<p>Configures the menu's gutter widths/heights.</p> <pre><code>void SetGutters(int left, int top, int right, int bottom);\n</code></pre>"},{"location":"reference/stardewui/framework/imenucontroller/#parameters_1","title":"Parameters","text":"<p><code>left</code> Int32 The gutter width on the left side of the viewport.</p> <p><code>top</code> Int32 The gutter height at the top of the viewport.</p> <p><code>right</code> Int32 The gutter width on the right side of the viewport. The default value of <code>-1</code> specifies that the <code>left</code> value should be mirrored on the right.</p> <p><code>bottom</code> Int32 The gutter height at the bottom of the viewport. The default value of <code>-1</code> specifies that the <code>top</code> value should be mirrored on the bottom.</p>"},{"location":"reference/stardewui/framework/imenucontroller/#remarks_6","title":"Remarks","text":"<p>Gutters are areas of the screen that the menu should not occupy. These are typically used with a menu whose root view uses Stretch() for one of its Layout dimensions, and allows limiting the max width/height relative to the viewport size. </p> <p>The historical reason for gutters is overscan, however they are still commonly used for aesthetic reasons.</p>"},{"location":"reference/stardewui/framework/imenucontroller/#events_1","title":"Events","text":""},{"location":"reference/stardewui/framework/imenucontroller/#closed","title":"Closed","text":"<p>Event raised after the menu has been closed.</p> <pre><code>event System.Action? Closed;\n</code></pre>"},{"location":"reference/stardewui/framework/imenucontroller/#event-type","title":"Event Type","text":"<p>Action</p>"},{"location":"reference/stardewui/framework/imenucontroller/#closing","title":"Closing","text":"<p>Event raised when the menu is about to close.</p> <pre><code>event System.Action? Closing;\n</code></pre>"},{"location":"reference/stardewui/framework/imenucontroller/#event-type_1","title":"Event Type","text":"<p>Action</p>"},{"location":"reference/stardewui/framework/imenucontroller/#remarks_7","title":"Remarks","text":"<p>This has the same lifecycle as cleanupBeforeExit().</p>"},{"location":"reference/stardewui/framework/iviewdrawable/","title":"IViewDrawable","text":""},{"location":"reference/stardewui/framework/iviewdrawable/#interface-iviewdrawable","title":"Interface IViewDrawable","text":""},{"location":"reference/stardewui/framework/iviewdrawable/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework Assembly: StardewUI.dll  </p> <p>Provides methods to update and draw a simple, non-interactive UI component, such as a HUD widget.</p> <pre><code>public interface IViewDrawable : System.IDisposable\n</code></pre> <p>Implements IDisposable</p>"},{"location":"reference/stardewui/framework/iviewdrawable/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/iviewdrawable/#properties","title":"Properties","text":"Name Description ActualSize The current size required for the content. Context The context, or \"model\", for the menu's view, which holds any data-dependent values. MaxSize The maximum size, in pixels, allowed for this content."},{"location":"reference/stardewui/framework/iviewdrawable/#methods","title":"Methods","text":"Name Description Draw(SpriteBatch, Vector2) Draws the current contents."},{"location":"reference/stardewui/framework/iviewdrawable/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/iviewdrawable/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/iviewdrawable/#actualsize","title":"ActualSize","text":"<p>The current size required for the content.</p> <pre><code>Microsoft.Xna.Framework.Vector2 ActualSize { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/iviewdrawable/#property-value","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/framework/iviewdrawable/#remarks","title":"Remarks","text":"<p>Use for calculating the correct position for a Draw(SpriteBatch, Vector2), especially for elements that should be aligned to the center or right edge of the viewport.</p>"},{"location":"reference/stardewui/framework/iviewdrawable/#context","title":"Context","text":"<p>The context, or \"model\", for the menu's view, which holds any data-dependent values.</p> <pre><code>System.Object Context { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/iviewdrawable/#property-value_1","title":"Property Value","text":"<p>Object</p>"},{"location":"reference/stardewui/framework/iviewdrawable/#remarks_1","title":"Remarks","text":"<p>The type must implement INotifyPropertyChanged in order for any changes to this data to be automatically reflected on the next Draw(SpriteBatch, Vector2).</p>"},{"location":"reference/stardewui/framework/iviewdrawable/#maxsize","title":"MaxSize","text":"<p>The maximum size, in pixels, allowed for this content.</p> <pre><code>Microsoft.Xna.Framework.Vector2? MaxSize { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/iviewdrawable/#property-value_2","title":"Property Value","text":"<p>Nullable&lt;Vector2&gt;</p>"},{"location":"reference/stardewui/framework/iviewdrawable/#remarks_2","title":"Remarks","text":"<p>If no value is specified, then the content is allowed to use the entire uiViewport.</p>"},{"location":"reference/stardewui/framework/iviewdrawable/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/iviewdrawable/#drawspritebatch-vector2","title":"Draw(SpriteBatch, Vector2)","text":"<p>Draws the current contents.</p> <pre><code>void Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch b, Microsoft.Xna.Framework.Vector2 position);\n</code></pre>"},{"location":"reference/stardewui/framework/iviewdrawable/#parameters","title":"Parameters","text":"<p><code>b</code> SpriteBatch Target sprite batch.</p> <p><code>position</code> Vector2 Position on the screen or viewport to use as the top-left corner.</p>"},{"location":"reference/stardewui/framework/iviewengine/","title":"IViewEngine","text":""},{"location":"reference/stardewui/framework/iviewengine/#interface-iviewengine","title":"Interface IViewEngine","text":""},{"location":"reference/stardewui/framework/iviewengine/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework Assembly: StardewUI.dll  </p> <p>Public API for StardewUI, abstracting away all implementation details of views and trees.</p> <pre><code>public interface IViewEngine\n</code></pre>"},{"location":"reference/stardewui/framework/iviewengine/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/iviewengine/#methods","title":"Methods","text":"Name Description CreateDrawableFromAsset(string) Creates an IViewDrawable from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher. CreateDrawableFromMarkup(string) Creates an IViewDrawable from arbitrary markup. CreateMenuControllerFromAsset(string, Object) Creates a menu from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher, and returns a controller for customizing the menu's behavior. CreateMenuControllerFromMarkup(string, Object) Creates a menu from arbitrary markup, and returns a controller for customizing the menu's behavior. CreateMenuFromAsset(string, Object) Creates a menu from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher. CreateMenuFromMarkup(string, Object) Creates a menu from arbitrary markup. EnableHotReloading(string) Starts monitoring this mod's directory for changes to assets managed by any of the <code>Register</code> methods, e.g. views and sprites. RegisterSprites(string, string) Registers a mod directory to be searched for sprite (and corresponding texture/sprite sheet data) assets. RegisterViews(string, string) Registers a mod directory to be searched for view (StarML) assets. Uses the <code>.sml</code> extension."},{"location":"reference/stardewui/framework/iviewengine/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/iviewengine/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/iviewengine/#createdrawablefromassetstring","title":"CreateDrawableFromAsset(string)","text":"<p>Creates an IViewDrawable from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher.</p> <pre><code>StardewUI.Framework.IViewDrawable CreateDrawableFromAsset(string assetName);\n</code></pre>"},{"location":"reference/stardewui/framework/iviewengine/#parameters","title":"Parameters","text":"<p><code>assetName</code> string The name of the StarML view asset in the content pipeline, e.g. <code>Mods/MyMod/Views/MyView</code>.</p>"},{"location":"reference/stardewui/framework/iviewengine/#returns","title":"Returns","text":"<p>IViewDrawable</p> <p>An IViewDrawable for drawing directly to the SpriteBatch of a rendering event or other draw handler.</p>"},{"location":"reference/stardewui/framework/iviewengine/#remarks","title":"Remarks","text":"<p>The Context and MaxSize can be provided after creation.</p>"},{"location":"reference/stardewui/framework/iviewengine/#createdrawablefrommarkupstring","title":"CreateDrawableFromMarkup(string)","text":"<p>Creates an IViewDrawable from arbitrary markup.</p> <pre><code>StardewUI.Framework.IViewDrawable CreateDrawableFromMarkup(string markup);\n</code></pre>"},{"location":"reference/stardewui/framework/iviewengine/#parameters_1","title":"Parameters","text":"<p><code>markup</code> string The markup in StarML format.</p>"},{"location":"reference/stardewui/framework/iviewengine/#returns_1","title":"Returns","text":"<p>IViewDrawable</p> <p>An IViewDrawable for drawing directly to the SpriteBatch of a rendering event or other draw handler.</p>"},{"location":"reference/stardewui/framework/iviewengine/#remarks_1","title":"Remarks","text":"<p>The Context and MaxSize can be provided after creation. </p> <p>Warning: Ad-hoc menus created this way cannot be cached, nor patched by other mods. Most mods should not use this API except for testing/experimentation.</p>"},{"location":"reference/stardewui/framework/iviewengine/#createmenucontrollerfromassetstring-object","title":"CreateMenuControllerFromAsset(string, Object)","text":"<p>Creates a menu from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher, and returns a controller for customizing the menu's behavior.</p> <pre><code>StardewUI.Framework.IMenuController CreateMenuControllerFromAsset(string assetName, System.Object context);\n</code></pre>"},{"location":"reference/stardewui/framework/iviewengine/#parameters_2","title":"Parameters","text":"<p><code>assetName</code> string The name of the StarML view asset in the content pipeline, e.g. <code>Mods/MyMod/Views/MyView</code>.</p> <p><code>context</code> Object The context, or \"model\", for the menu's view, which holds any data-dependent values. Note: The type must implement INotifyPropertyChanged in order for any changes to this data to be automatically reflected in the UI.</p>"},{"location":"reference/stardewui/framework/iviewengine/#returns_2","title":"Returns","text":"<p>IMenuController</p> <p>A controller object whose Menu is the created menu and whose other properties can be used to change menu-level behavior.</p>"},{"location":"reference/stardewui/framework/iviewengine/#remarks_2","title":"Remarks","text":"<p>The menu that is created is the same as the result of CreateMenuFromMarkup(string, Object). The menu is not automatically shown; to show it, use activeClickableMenu or equivalent.</p>"},{"location":"reference/stardewui/framework/iviewengine/#createmenucontrollerfrommarkupstring-object","title":"CreateMenuControllerFromMarkup(string, Object)","text":"<p>Creates a menu from arbitrary markup, and returns a controller for customizing the menu's behavior.</p> <pre><code>StardewUI.Framework.IMenuController CreateMenuControllerFromMarkup(string markup, System.Object context);\n</code></pre>"},{"location":"reference/stardewui/framework/iviewengine/#parameters_3","title":"Parameters","text":"<p><code>markup</code> string The markup in StarML format.</p> <p><code>context</code> Object The context, or \"model\", for the menu's view, which holds any data-dependent values. Note: The type must implement INotifyPropertyChanged in order for any changes to this data to be automatically reflected in the UI.</p>"},{"location":"reference/stardewui/framework/iviewengine/#returns_3","title":"Returns","text":"<p>IMenuController</p> <p>A controller object whose Menu is the created menu and whose other properties can be used to change menu-level behavior.</p>"},{"location":"reference/stardewui/framework/iviewengine/#remarks_3","title":"Remarks","text":"<p>Warning: Ad-hoc menus created this way cannot be cached, nor patched by other mods. Most mods should not use this API except for testing/experimentation.</p>"},{"location":"reference/stardewui/framework/iviewengine/#createmenufromassetstring-object","title":"CreateMenuFromAsset(string, Object)","text":"<p>Creates a menu from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher.</p> <pre><code>StardewValley.Menus.IClickableMenu CreateMenuFromAsset(string assetName, System.Object context);\n</code></pre>"},{"location":"reference/stardewui/framework/iviewengine/#parameters_4","title":"Parameters","text":"<p><code>assetName</code> string The name of the StarML view asset in the content pipeline, e.g. <code>Mods/MyMod/Views/MyView</code>.</p> <p><code>context</code> Object The context, or \"model\", for the menu's view, which holds any data-dependent values. Note: The type must implement INotifyPropertyChanged in order for any changes to this data to be automatically reflected in the UI.</p>"},{"location":"reference/stardewui/framework/iviewengine/#returns_4","title":"Returns","text":"<p>IClickableMenu</p> <p>A menu object which can be shown using the game's standard menu APIs such as activeClickableMenu.</p>"},{"location":"reference/stardewui/framework/iviewengine/#remarks_4","title":"Remarks","text":"<p>Does not make the menu active. To show it, use activeClickableMenu or equivalent.</p>"},{"location":"reference/stardewui/framework/iviewengine/#createmenufrommarkupstring-object","title":"CreateMenuFromMarkup(string, Object)","text":"<p>Creates a menu from arbitrary markup.</p> <pre><code>StardewValley.Menus.IClickableMenu CreateMenuFromMarkup(string markup, System.Object context);\n</code></pre>"},{"location":"reference/stardewui/framework/iviewengine/#parameters_5","title":"Parameters","text":"<p><code>markup</code> string The markup in StarML format.</p> <p><code>context</code> Object The context, or \"model\", for the menu's view, which holds any data-dependent values. Note: The type must implement INotifyPropertyChanged in order for any changes to this data to be automatically reflected in the UI.</p>"},{"location":"reference/stardewui/framework/iviewengine/#returns_5","title":"Returns","text":"<p>IClickableMenu</p> <p>A menu object which can be shown using the game's standard menu APIs such as activeClickableMenu.</p>"},{"location":"reference/stardewui/framework/iviewengine/#remarks_5","title":"Remarks","text":"<p>Warning: Ad-hoc menus created this way cannot be cached, nor patched by other mods. Most mods should not use this API except for testing/experimentation.</p>"},{"location":"reference/stardewui/framework/iviewengine/#enablehotreloadingstring","title":"EnableHotReloading(string)","text":"<p>Starts monitoring this mod's directory for changes to assets managed by any of the <code>Register</code> methods, e.g. views and sprites.</p> <pre><code>void EnableHotReloading(string sourceDirectory);\n</code></pre>"},{"location":"reference/stardewui/framework/iviewengine/#parameters_6","title":"Parameters","text":"<p><code>sourceDirectory</code> string Optional source directory to watch and sync changes from. If not specified, or not a valid source directory, then hot reload will only pick up changes from within the live mod directory.</p>"},{"location":"reference/stardewui/framework/iviewengine/#remarks_6","title":"Remarks","text":"<p>If the <code>sourceDirectory</code> argument is specified, and points to a directory with the same asset structure as the mod, then an additional sync will be set up such that files modified in the <code>sourceDirectory</code> while the game is running will be copied to the active mod directory and subsequently reloaded. In other words, pointing this at the mod's <code>.csproj</code> directory allows hot reloading from the source files instead of the deployed mod's files. </p> <p>Hot reload may impact game performance and should normally only be used during development and/or in debug mode.</p>"},{"location":"reference/stardewui/framework/iviewengine/#registerspritesstring-string","title":"RegisterSprites(string, string)","text":"<p>Registers a mod directory to be searched for sprite (and corresponding texture/sprite sheet data) assets.</p> <pre><code>void RegisterSprites(string assetPrefix, string modDirectory);\n</code></pre>"},{"location":"reference/stardewui/framework/iviewengine/#parameters_7","title":"Parameters","text":"<p><code>assetPrefix</code> string The prefix for all asset names, e.g. <code>Mods/MyMod/Sprites</code>. This can be any value but the same prefix must be used in <code>@AssetName</code> view bindings.</p> <p><code>modDirectory</code> string The physical directory where the asset files are located, relative to the mod directory. Typically a path such as <code>assets/sprites</code>.</p>"},{"location":"reference/stardewui/framework/iviewengine/#registerviewsstring-string","title":"RegisterViews(string, string)","text":"<p>Registers a mod directory to be searched for view (StarML) assets. Uses the <code>.sml</code> extension.</p> <pre><code>void RegisterViews(string assetPrefix, string modDirectory);\n</code></pre>"},{"location":"reference/stardewui/framework/iviewengine/#parameters_8","title":"Parameters","text":"<p><code>assetPrefix</code> string The prefix for all asset names, e.g. <code>Mods/MyMod/Views</code>. This can be any value but the same prefix must be used in <code>include</code> elements and in API calls to create views.</p> <p><code>modDirectory</code> string The physical directory where the asset files are located, relative to the mod directory. Typically a path such as <code>assets/views</code>.</p>"},{"location":"reference/stardewui/framework/modconfig/","title":"ModConfig","text":""},{"location":"reference/stardewui/framework/modconfig/#class-modconfig","title":"Class ModConfig","text":""},{"location":"reference/stardewui/framework/modconfig/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework Assembly: StardewUI.dll  </p> <p>Configuration settings for StardewUI.Framework.</p> <pre><code>public class ModConfig\n</code></pre> <p>Inheritance Object \u21e6 ModConfig</p>"},{"location":"reference/stardewui/framework/modconfig/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/modconfig/#constructors","title":"Constructors","text":"Name Description ModConfig()"},{"location":"reference/stardewui/framework/modconfig/#properties","title":"Properties","text":"Name Description Performance Settings related to performance optimization. Tracing Settings related to performance tracing."},{"location":"reference/stardewui/framework/modconfig/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/modconfig/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/modconfig/#modconfig","title":"ModConfig()","text":"<pre><code>public ModConfig();\n</code></pre>"},{"location":"reference/stardewui/framework/modconfig/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/modconfig/#performance","title":"Performance","text":"<p>Settings related to performance optimization.</p> <pre><code>public StardewUI.Framework.PerformanceConfig Performance { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/modconfig/#property-value","title":"Property Value","text":"<p>PerformanceConfig</p>"},{"location":"reference/stardewui/framework/modconfig/#tracing","title":"Tracing","text":"<p>Settings related to performance tracing.</p> <pre><code>public StardewUI.Framework.Diagnostics.TraceConfig Tracing { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/modconfig/#property-value_1","title":"Property Value","text":"<p>TraceConfig</p>"},{"location":"reference/stardewui/framework/performanceconfig/","title":"PerformanceConfig","text":""},{"location":"reference/stardewui/framework/performanceconfig/#class-performanceconfig","title":"Class PerformanceConfig","text":""},{"location":"reference/stardewui/framework/performanceconfig/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework Assembly: StardewUI.dll  </p> <p>Configuration sub-settings providing control over performance tweaks.</p> <pre><code>public class PerformanceConfig\n</code></pre> <p>Inheritance Object \u21e6 PerformanceConfig</p>"},{"location":"reference/stardewui/framework/performanceconfig/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/performanceconfig/#constructors","title":"Constructors","text":"Name Description PerformanceConfig()"},{"location":"reference/stardewui/framework/performanceconfig/#properties","title":"Properties","text":"Name Description EnableParallelDescriptors Whether to process member descriptors of a view or model in parallel. EnableReflectionWarmup Whether to warm up StardewUI's reflection cache on a background thread during game start."},{"location":"reference/stardewui/framework/performanceconfig/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/performanceconfig/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/performanceconfig/#performanceconfig","title":"PerformanceConfig()","text":"<pre><code>public PerformanceConfig();\n</code></pre>"},{"location":"reference/stardewui/framework/performanceconfig/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/performanceconfig/#enableparalleldescriptors","title":"EnableParallelDescriptors","text":"<p>Whether to process member descriptors of a view or model in parallel.</p> <pre><code>public bool EnableParallelDescriptors { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/performanceconfig/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/performanceconfig/#remarks","title":"Remarks","text":"<p>Parallel processing will often make first-time loads slower rather than faster, due to scheduling overhead and some synchronization. This may be beneficial if types with hundreds of fields/properties are involved.</p>"},{"location":"reference/stardewui/framework/performanceconfig/#enablereflectionwarmup","title":"EnableReflectionWarmup","text":"<p>Whether to warm up StardewUI's reflection cache on a background thread during game start.</p> <pre><code>public bool EnableReflectionWarmup { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/performanceconfig/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/performanceconfig/#remarks_1","title":"Remarks","text":"<p>This will usually improve first-time loads of menus by 10-20%, and tends to have no cost/imperceptible cost on app startup, since it uses only one background thread (no parallelism) and other startup tasks tend to run on main thread only.</p>"},{"location":"reference/stardewui/framework/uiexception/","title":"UIException","text":""},{"location":"reference/stardewui/framework/uiexception/#class-uiexception","title":"Class UIException","text":""},{"location":"reference/stardewui/framework/uiexception/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework Assembly: StardewUI.dll  </p> <p>Base class for all exceptions specific to StardewUI.</p> <pre><code>public class UIException : System.Exception\n</code></pre> <p>Inheritance Object \u21e6 Exception \u21e6 UIException</p>"},{"location":"reference/stardewui/framework/uiexception/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/uiexception/#constructors","title":"Constructors","text":"Name Description UIException() Initializes a new instance of the UIException class. UIException(string) Initializes a new instance of the UIException class with a specified error message. UIException(string, Exception) Initializes a new instance of the UIException class with a specified error message and a reference to the inner exception that is the cause of this exception."},{"location":"reference/stardewui/framework/uiexception/#properties","title":"Properties","text":"Name Description Data (Inherited from Exception) HelpLink (Inherited from Exception) HResult (Inherited from Exception) InnerException (Inherited from Exception) Message (Inherited from Exception) Source (Inherited from Exception) StackTrace (Inherited from Exception) TargetSite (Inherited from Exception)"},{"location":"reference/stardewui/framework/uiexception/#methods","title":"Methods","text":"Name Description GetBaseException() (Inherited from Exception) GetObjectData(SerializationInfo, StreamingContext) (Inherited from Exception) GetType() (Inherited from Exception) ToString() (Inherited from Exception)"},{"location":"reference/stardewui/framework/uiexception/#events","title":"Events","text":"Name Description SerializeObjectState (Inherited from Exception)"},{"location":"reference/stardewui/framework/uiexception/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/uiexception/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/uiexception/#uiexception","title":"UIException()","text":"<p>Initializes a new instance of the UIException class.</p> <pre><code>public UIException();\n</code></pre>"},{"location":"reference/stardewui/framework/uiexception/#uiexceptionstring","title":"UIException(string)","text":"<p>Initializes a new instance of the UIException class with a specified error message.</p> <pre><code>public UIException(string message);\n</code></pre>"},{"location":"reference/stardewui/framework/uiexception/#parameters","title":"Parameters","text":"<p><code>message</code> string The message that describes the error.</p>"},{"location":"reference/stardewui/framework/uiexception/#uiexceptionstring-exception","title":"UIException(string, Exception)","text":"<p>Initializes a new instance of the UIException class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> <pre><code>public UIException(string message, System.Exception innerException);\n</code></pre>"},{"location":"reference/stardewui/framework/uiexception/#parameters_1","title":"Parameters","text":"<p><code>message</code> string The error message that explains the reason for the exception.</p> <p><code>innerException</code> Exception The exception that is the cause of the current exception, or <code>null</code> if not specified.</p>"},{"location":"reference/stardewui/framework/addons/","title":"StardewUI.Framework.Addons","text":""},{"location":"reference/stardewui/framework/addons/#stardewuiframeworkaddons-namespace","title":"StardewUI.Framework.Addons Namespace","text":""},{"location":"reference/stardewui/framework/addons/#interfaces","title":"Interfaces","text":"Name Description IAddon Entry point for a UI add-on."},{"location":"reference/stardewui/framework/addons/iaddon/","title":"IAddon","text":""},{"location":"reference/stardewui/framework/addons/iaddon/#interface-iaddon","title":"Interface IAddon","text":""},{"location":"reference/stardewui/framework/addons/iaddon/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Addons Assembly: StardewUI.dll  </p> <p>Entry point for a UI add-on.</p> <pre><code>public interface IAddon\n</code></pre>"},{"location":"reference/stardewui/framework/addons/iaddon/#remarks","title":"Remarks","text":"<p>Add-ons are a plugin-like system that allow mods to extend the UI capabilities through new views, tags, converters, and other features. All add-ons must be registered via RegisterAddon(IAddon).</p>"},{"location":"reference/stardewui/framework/addons/iaddon/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/addons/iaddon/#properties","title":"Properties","text":"Name Description Dependencies List of dependencies, each corresponding to another Id, required by this addon. Id Unique ID for this addon. ValueConverterFactory Provides user-defined type conversions in addition to the standard conversions. ViewFactory Provides user-defined view types and enables them to be used with custom markup tags."},{"location":"reference/stardewui/framework/addons/iaddon/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/addons/iaddon/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/addons/iaddon/#dependencies","title":"Dependencies","text":"<p>List of dependencies, each corresponding to another Id, required by this addon.</p> <pre><code>System.Collections.Generic.IReadOnlyList&lt;string&gt; Dependencies { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/addons/iaddon/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;string&gt;</p>"},{"location":"reference/stardewui/framework/addons/iaddon/#remarks_1","title":"Remarks","text":"<p>Dependencies will always be loaded first. If any dependencies are missing, or if a cycle is detected (e.g. addon A depends on B which depends on A again) then the addon will be prevented from loading.</p>"},{"location":"reference/stardewui/framework/addons/iaddon/#id","title":"Id","text":"<p>Unique ID for this addon.</p> <pre><code>string Id { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/addons/iaddon/#property-value_1","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/addons/iaddon/#remarks_2","title":"Remarks","text":"<p>Prevents two copies of the same addon from trying to run at the same time, and allows other addons to depend on the features of this one by adding it to their Dependencies.</p>"},{"location":"reference/stardewui/framework/addons/iaddon/#valueconverterfactory","title":"ValueConverterFactory","text":"<p>Provides user-defined type conversions in addition to the standard conversions.</p> <pre><code>StardewUI.Framework.Converters.IValueConverterFactory ValueConverterFactory { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/addons/iaddon/#property-value_2","title":"Property Value","text":"<p>IValueConverterFactory</p>"},{"location":"reference/stardewui/framework/addons/iaddon/#remarks_3","title":"Remarks","text":"<p>All user-defined converters have lower priority than the built-in converters, except for the duck-type converters and StringConverterFactory which are always considered last. Within the set of user-defined converters, the priority is based on inverted load order; the last add-on that registered a converter able to handle a particular type conversion will be the one chosen, as long as none of the standard conversions can apply.</p>"},{"location":"reference/stardewui/framework/addons/iaddon/#viewfactory","title":"ViewFactory","text":"<p>Provides user-defined view types and enables them to be used with custom markup tags.</p> <pre><code>StardewUI.Framework.Binding.IViewFactory ViewFactory { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/addons/iaddon/#property-value_3","title":"Property Value","text":"<p>IViewFactory</p>"},{"location":"reference/stardewui/framework/addons/iaddon/#remarks_4","title":"Remarks","text":"<p>All user-defined views have lower priority than the built-in views; a UI add-on is not allowed to replace the behavior of a standard tag such as <code>&lt;label&gt;</code> or <code>&lt;lane&gt;</code>. Within the set of user-defined views, the priority is based on inverted load order; the last add-on to associate a particular tag with some view type will be the one to always handle that tag, as long as it is not a standard tag.</p>"},{"location":"reference/stardewui/framework/api/","title":"StardewUI.Framework.Api","text":""},{"location":"reference/stardewui/framework/api/#stardewuiframeworkapi-namespace","title":"StardewUI.Framework.Api Namespace","text":""},{"location":"reference/stardewui/framework/api/#classes","title":"Classes","text":"Name Description ViewEngine Implementation for the public IViewEngine API."},{"location":"reference/stardewui/framework/api/viewengine/","title":"ViewEngine","text":""},{"location":"reference/stardewui/framework/api/viewengine/#class-viewengine","title":"Class ViewEngine","text":""},{"location":"reference/stardewui/framework/api/viewengine/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Api Assembly: StardewUI.dll  </p> <p>Implementation for the public IViewEngine API.</p> <pre><code>public class ViewEngine : StardewUI.Framework.IViewEngine\n</code></pre> <p>Inheritance Object \u21e6 ViewEngine</p> <p>Implements IViewEngine</p>"},{"location":"reference/stardewui/framework/api/viewengine/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/api/viewengine/#constructors","title":"Constructors","text":"Name Description ViewEngine(IAssetCache, IModHelper, IViewNodeFactory) Initializes a new ViewEngine instance."},{"location":"reference/stardewui/framework/api/viewengine/#properties","title":"Properties","text":"Name Description SourceResolver Source resolver for resolving documents created by this view engine back to their original mod."},{"location":"reference/stardewui/framework/api/viewengine/#methods","title":"Methods","text":"Name Description CreateDrawableFromAsset(string) Creates an IViewDrawable from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher. CreateDrawableFromMarkup(string) Creates an IViewDrawable from arbitrary markup. CreateMenuControllerFromAsset(string, Object) Creates a menu from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher, and returns a controller for customizing the menu's behavior. CreateMenuControllerFromMarkup(string, Object) Creates a menu from arbitrary markup, and returns a controller for customizing the menu's behavior. CreateMenuFromAsset(string, Object) Creates a menu from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher. CreateMenuFromMarkup(string, Object) Creates a menu from arbitrary markup. EnableHotReloading(string) Starts monitoring this mod's directory for changes to assets managed by any of the <code>Register</code> methods, e.g. views and sprites. RegisterSprites(string, string) Registers a mod directory to be searched for sprite (and corresponding texture/sprite sheet data) assets. RegisterViews(string, string) Registers a mod directory to be searched for view (StarML) assets. Uses the <code>.sml</code> extension."},{"location":"reference/stardewui/framework/api/viewengine/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/api/viewengine/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/api/viewengine/#viewengineiassetcache-imodhelper-iviewnodefactory","title":"ViewEngine(IAssetCache, IModHelper, IViewNodeFactory)","text":"<p>Initializes a new ViewEngine instance.</p> <pre><code>public ViewEngine(StardewUI.Framework.Content.IAssetCache assetCache, StardewModdingAPI.IModHelper helper, StardewUI.Framework.Binding.IViewNodeFactory viewNodeFactory);\n</code></pre>"},{"location":"reference/stardewui/framework/api/viewengine/#parameters","title":"Parameters","text":"<p><code>assetCache</code> IAssetCache Cache for obtaining document assets. Used for asset-based views.</p> <p><code>helper</code> \u00a0 IModHelper SMAPI mod helper for the API consumer mod (not for StardewUI).</p> <p><code>viewNodeFactory</code> IViewNodeFactory Factory for creating and binding IViewNodes.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/api/viewengine/#sourceresolver","title":"SourceResolver","text":"<p>Source resolver for resolving documents created by this view engine back to their original mod.</p> <pre><code>public StardewUI.Framework.Content.ISourceResolver SourceResolver { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/api/viewengine/#property-value","title":"Property Value","text":"<p>ISourceResolver</p>"},{"location":"reference/stardewui/framework/api/viewengine/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/api/viewengine/#createdrawablefromassetstring","title":"CreateDrawableFromAsset(string)","text":"<p>Creates an IViewDrawable from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher.</p> <pre><code>public StardewUI.Framework.IViewDrawable CreateDrawableFromAsset(string assetName);\n</code></pre>"},{"location":"reference/stardewui/framework/api/viewengine/#parameters_1","title":"Parameters","text":"<p><code>assetName</code> string The name of the StarML view asset in the content pipeline, e.g. <code>Mods/MyMod/Views/MyView</code>.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#returns","title":"Returns","text":"<p>IViewDrawable</p> <p>An IViewDrawable for drawing directly to the SpriteBatch of a rendering event or other draw handler.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#remarks","title":"Remarks","text":"<p>The Context and MaxSize can be provided after creation.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#createdrawablefrommarkupstring","title":"CreateDrawableFromMarkup(string)","text":"<p>Creates an IViewDrawable from arbitrary markup.</p> <pre><code>public StardewUI.Framework.IViewDrawable CreateDrawableFromMarkup(string markup);\n</code></pre>"},{"location":"reference/stardewui/framework/api/viewengine/#parameters_2","title":"Parameters","text":"<p><code>markup</code> string The markup in StarML format.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#returns_1","title":"Returns","text":"<p>IViewDrawable</p> <p>An IViewDrawable for drawing directly to the SpriteBatch of a rendering event or other draw handler.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#remarks_1","title":"Remarks","text":"<p>The Context and MaxSize can be provided after creation. </p> <p>Warning: Ad-hoc menus created this way cannot be cached, nor patched by other mods. Most mods should not use this API except for testing/experimentation.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#createmenucontrollerfromassetstring-object","title":"CreateMenuControllerFromAsset(string, Object)","text":"<p>Creates a menu from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher, and returns a controller for customizing the menu's behavior.</p> <pre><code>public StardewUI.Framework.IMenuController CreateMenuControllerFromAsset(string assetName, System.Object context);\n</code></pre>"},{"location":"reference/stardewui/framework/api/viewengine/#parameters_3","title":"Parameters","text":"<p><code>assetName</code> string The name of the StarML view asset in the content pipeline, e.g. <code>Mods/MyMod/Views/MyView</code>.</p> <p><code>context</code> Object The context, or \"model\", for the menu's view, which holds any data-dependent values. Note: The type must implement INotifyPropertyChanged in order for any changes to this data to be automatically reflected in the UI.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#returns_2","title":"Returns","text":"<p>IMenuController</p> <p>A controller object whose Menu is the created menu and whose other properties can be used to change menu-level behavior.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#remarks_2","title":"Remarks","text":"<p>The menu that is created is the same as the result of CreateMenuFromMarkup(string, Object). The menu is not automatically shown; to show it, use activeClickableMenu or equivalent.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#createmenucontrollerfrommarkupstring-object","title":"CreateMenuControllerFromMarkup(string, Object)","text":"<p>Creates a menu from arbitrary markup, and returns a controller for customizing the menu's behavior.</p> <pre><code>public StardewUI.Framework.IMenuController CreateMenuControllerFromMarkup(string markup, System.Object context);\n</code></pre>"},{"location":"reference/stardewui/framework/api/viewengine/#parameters_4","title":"Parameters","text":"<p><code>markup</code> string The markup in StarML format.</p> <p><code>context</code> Object The context, or \"model\", for the menu's view, which holds any data-dependent values. Note: The type must implement INotifyPropertyChanged in order for any changes to this data to be automatically reflected in the UI.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#returns_3","title":"Returns","text":"<p>IMenuController</p> <p>A controller object whose Menu is the created menu and whose other properties can be used to change menu-level behavior.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#remarks_3","title":"Remarks","text":"<p>Warning: Ad-hoc menus created this way cannot be cached, nor patched by other mods. Most mods should not use this API except for testing/experimentation.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#createmenufromassetstring-object","title":"CreateMenuFromAsset(string, Object)","text":"<p>Creates a menu from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher.</p> <pre><code>public StardewValley.Menus.IClickableMenu CreateMenuFromAsset(string assetName, System.Object context);\n</code></pre>"},{"location":"reference/stardewui/framework/api/viewengine/#parameters_5","title":"Parameters","text":"<p><code>assetName</code> string The name of the StarML view asset in the content pipeline, e.g. <code>Mods/MyMod/Views/MyView</code>.</p> <p><code>context</code> Object The context, or \"model\", for the menu's view, which holds any data-dependent values. Note: The type must implement INotifyPropertyChanged in order for any changes to this data to be automatically reflected in the UI.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#returns_4","title":"Returns","text":"<p>IClickableMenu</p> <p>A menu object which can be shown using the game's standard menu APIs such as activeClickableMenu.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#remarks_4","title":"Remarks","text":"<p>Does not make the menu active. To show it, use activeClickableMenu or equivalent.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#createmenufrommarkupstring-object","title":"CreateMenuFromMarkup(string, Object)","text":"<p>Creates a menu from arbitrary markup.</p> <pre><code>public StardewValley.Menus.IClickableMenu CreateMenuFromMarkup(string markup, System.Object context);\n</code></pre>"},{"location":"reference/stardewui/framework/api/viewengine/#parameters_6","title":"Parameters","text":"<p><code>markup</code> string The markup in StarML format.</p> <p><code>context</code> Object The context, or \"model\", for the menu's view, which holds any data-dependent values. Note: The type must implement INotifyPropertyChanged in order for any changes to this data to be automatically reflected in the UI.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#returns_5","title":"Returns","text":"<p>IClickableMenu</p> <p>A menu object which can be shown using the game's standard menu APIs such as activeClickableMenu.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#remarks_5","title":"Remarks","text":"<p>Warning: Ad-hoc menus created this way cannot be cached, nor patched by other mods. Most mods should not use this API except for testing/experimentation.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#enablehotreloadingstring","title":"EnableHotReloading(string)","text":"<p>Starts monitoring this mod's directory for changes to assets managed by any of the <code>Register</code> methods, e.g. views and sprites.</p> <pre><code>public void EnableHotReloading(string sourceDirectory);\n</code></pre>"},{"location":"reference/stardewui/framework/api/viewengine/#parameters_7","title":"Parameters","text":"<p><code>sourceDirectory</code> string Optional source directory to watch and sync changes from. If not specified, or not a valid source directory, then hot reload will only pick up changes from within the live mod directory.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#remarks_6","title":"Remarks","text":"<p>If the <code>sourceDirectory</code> argument is specified, and points to a directory with the same asset structure as the mod, then an additional sync will be set up such that files modified in the <code>sourceDirectory</code> while the game is running will be copied to the active mod directory and subsequently reloaded. In other words, pointing this at the mod's <code>.csproj</code> directory allows hot reloading from the source files instead of the deployed mod's files. </p> <p>Hot reload may impact game performance and should normally only be used during development and/or in debug mode.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#registerspritesstring-string","title":"RegisterSprites(string, string)","text":"<p>Registers a mod directory to be searched for sprite (and corresponding texture/sprite sheet data) assets.</p> <pre><code>public void RegisterSprites(string assetPrefix, string modDirectory);\n</code></pre>"},{"location":"reference/stardewui/framework/api/viewengine/#parameters_8","title":"Parameters","text":"<p><code>assetPrefix</code> string The prefix for all asset names, e.g. <code>Mods/MyMod/Sprites</code>. This can be any value but the same prefix must be used in <code>@AssetName</code> view bindings.</p> <p><code>modDirectory</code> string The physical directory where the asset files are located, relative to the mod directory. Typically a path such as <code>assets/sprites</code>.</p>"},{"location":"reference/stardewui/framework/api/viewengine/#registerviewsstring-string","title":"RegisterViews(string, string)","text":"<p>Registers a mod directory to be searched for view (StarML) assets. Uses the <code>.sml</code> extension.</p> <pre><code>public void RegisterViews(string assetPrefix, string modDirectory);\n</code></pre>"},{"location":"reference/stardewui/framework/api/viewengine/#parameters_9","title":"Parameters","text":"<p><code>assetPrefix</code> string The prefix for all asset names, e.g. <code>Mods/MyMod/Views</code>. This can be any value but the same prefix must be used in <code>include</code> elements and in API calls to create views.</p> <p><code>modDirectory</code> string The physical directory where the asset files are located, relative to the mod directory. Typically a path such as <code>assets/views</code>.</p>"},{"location":"reference/stardewui/framework/binding/","title":"StardewUI.Framework.Binding","text":""},{"location":"reference/stardewui/framework/binding/#stardewuiframeworkbinding-namespace","title":"StardewUI.Framework.Binding Namespace","text":""},{"location":"reference/stardewui/framework/binding/#classes","title":"Classes","text":"Name Description AttributeBindingFactory A general IAttributeBindingFactory implementation using dependency injection for all resolution. BackoffNodeDecorator A transparent binding node whose purpose is to throttle failed updates and log any errors. BinaryCondition A condition based on the comparison of two values. BindingContext Context, or scope, of a bound view, providing the backing data and tools for accessing its properties. BindingDirectionExtensions Extension methods for the BindingDirection enum. BindingException The exception that is thrown when an unrecoverable error happens during data binding for a view. ConditionalNode A structural node that only passes through its child node when some condition passes. ContextUpdateTracker Tracks context instances that already had updates dispatched this frame, to prevent duplication. ContextUpdatingNodeDecorator A transparent binding node that propagates Update(TimeSpan) ticks to an eligible context. EventBindingFactory Reflection-based implementation of an IEventBindingFactory. IncludedViewNode Quasi-structural node that loads its content from a shared game asset. IViewNode.Child Child of an IViewNode, specifying the node data and the view outlet in which it should appear. ReflectionViewBinder An IViewBinder implementation using reflected view descriptors. RepeaterNode A structural node that accepts a collection (IEnumerable&lt;T&gt;) valued attribute and repeats its inner elements with each child bound to a collection element, in the same order as the collection. UnaryCondition A condition based on a single value that is convertible to a Boolean. ViewFactory A view factory based on per-tag delegates. Can be used as a base class for other view factories. ViewNode Internal structure of a view node, encapsulating dependencies required for data binding and lazy creation/updates. ViewNodeFactory Default in-game view engine."},{"location":"reference/stardewui/framework/binding/#interfaces","title":"Interfaces","text":"Name Description IAttributeBinding Binding instance for a single attribute on a single view. IAttributeBindingFactory Service for creating IAttributeBinding instances for the individual attributes of a bound view. ICondition A condition used in a ConditionalNode. IEventBinding Binding instance for a single event on a single view. IEventBindingFactory Service for creating IEventBinding instances for a view's events, and subscribing the handlers. IViewBinder Service for creating view bindings and their dependencies. IViewBinding Represents the binding state of an entire view; provides a single method to perform a once-per-frame update. IViewFactory Factory for creating views from tags. IViewNode Encapsulates a single bound node in a view tree. IViewNodeFactory High-level abstraction for translating node trees into bound view trees."},{"location":"reference/stardewui/framework/binding/#enums","title":"Enums","text":"Name Description BindingDirection The direction of data flow in a data binding."},{"location":"reference/stardewui/framework/binding/attributebindingfactory/","title":"AttributeBindingFactory","text":""},{"location":"reference/stardewui/framework/binding/attributebindingfactory/#class-attributebindingfactory","title":"Class AttributeBindingFactory","text":""},{"location":"reference/stardewui/framework/binding/attributebindingfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>A general IAttributeBindingFactory implementation using dependency injection for all resolution.</p> <pre><code>public class AttributeBindingFactory : \n    StardewUI.Framework.Binding.IAttributeBindingFactory\n</code></pre> <p>Inheritance Object \u21e6 AttributeBindingFactory</p> <p>Implements IAttributeBindingFactory</p>"},{"location":"reference/stardewui/framework/binding/attributebindingfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/attributebindingfactory/#constructors","title":"Constructors","text":"Name Description AttributeBindingFactory(IValueSourceFactory, IValueConverterFactory) A general IAttributeBindingFactory implementation using dependency injection for all resolution."},{"location":"reference/stardewui/framework/binding/attributebindingfactory/#methods","title":"Methods","text":"Name Description TryCreateBinding(IViewDescriptor, IAttribute, BindingContext, IResolutionScope) Attempts to creates a new attribute binding."},{"location":"reference/stardewui/framework/binding/attributebindingfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/attributebindingfactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/attributebindingfactory/#attributebindingfactoryivaluesourcefactory-ivalueconverterfactory","title":"AttributeBindingFactory(IValueSourceFactory, IValueConverterFactory)","text":"<p>A general IAttributeBindingFactory implementation using dependency injection for all resolution.</p> <pre><code>public AttributeBindingFactory(StardewUI.Framework.Sources.IValueSourceFactory valueSourceFactory, StardewUI.Framework.Converters.IValueConverterFactory valueConverterFactory);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/attributebindingfactory/#parameters","title":"Parameters","text":"<p><code>valueSourceFactory</code> IValueSourceFactory The factory responsible for creating IValueSource&lt;T&gt; instances from attribute data.</p> <p><code>valueConverterFactory</code> IValueConverterFactory The factory responsible for creating IValueConverter&lt;TSource, TDestination&gt; instances, used to convert bound values to the types required by the target view.</p>"},{"location":"reference/stardewui/framework/binding/attributebindingfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/attributebindingfactory/#trycreatebindingiviewdescriptor-iattribute-bindingcontext-iresolutionscope","title":"TryCreateBinding(IViewDescriptor, IAttribute, BindingContext, IResolutionScope)","text":"<p>Attempts to creates a new attribute binding.</p> <pre><code>public StardewUI.Framework.Binding.IAttributeBinding TryCreateBinding(StardewUI.Framework.Descriptors.IViewDescriptor viewDescriptor, StardewUI.Framework.Dom.IAttribute attribute, StardewUI.Framework.Binding.BindingContext context, StardewUI.Framework.Content.IResolutionScope resolutionScope);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/attributebindingfactory/#parameters_1","title":"Parameters","text":"<p><code>viewDescriptor</code> IViewDescriptor Descriptor for the bound view, providing access to its properties.</p> <p><code>attribute</code> IAttribute The attribute data.</p> <p><code>context</code> BindingContext The binding context, including the bound data and descriptor for the data type.</p> <p><code>resolutionScope</code> IResolutionScope Scope for resolving externalized attributes, such as translation keys.</p>"},{"location":"reference/stardewui/framework/binding/attributebindingfactory/#returns","title":"Returns","text":"<p>IAttributeBinding</p> <p>The created binding, or <code>null</code> if the arguments do not support creating a binding, such as an <code>attribute</code> bound to a <code>null</code> value of <code>context</code>.</p>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/","title":"BackoffNodeDecorator","text":""},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#class-backoffnodedecorator","title":"Class BackoffNodeDecorator","text":""},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>A transparent binding node whose purpose is to throttle failed updates and log any errors.</p> <pre><code>public class BackoffNodeDecorator : StardewUI.Framework.Binding.IViewNode, \n    System.IDisposable\n</code></pre> <p>Inheritance Object \u21e6 BackoffNodeDecorator</p> <p>Implements IViewNode, IDisposable</p>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#constructors","title":"Constructors","text":"Name Description BackoffNodeDecorator(IViewNode, BackoffRule) A transparent binding node whose purpose is to throttle failed updates and log any errors."},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#properties","title":"Properties","text":"Name Description Children The children of this node. Context The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes. Views The views for this node, if any have been created."},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#methods","title":"Methods","text":"Name Description Dispose() Print(StringBuilder, Boolean) Prints the string representation of this node. Reset() Clears any Views associated with this node and resets it to the default state before it was bound. Update(TimeSpan) Performs the regular per-frame update for this node."},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#backoffnodedecoratoriviewnode-backoffrule","title":"BackoffNodeDecorator(IViewNode, BackoffRule)","text":"<p>A transparent binding node whose purpose is to throttle failed updates and log any errors.</p> <pre><code>public BackoffNodeDecorator(StardewUI.Framework.Binding.IViewNode node, StardewUI.Framework.BackoffRule backoffRule);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#parameters","title":"Parameters","text":"<p><code>node</code> IViewNode The owned node.</p> <p><code>backoffRule</code> BackoffRule Configures the backoff duration and scaling when an update fails.</p>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#children","title":"Children","text":"<p>The children of this node.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Binding.IViewNode.Child&gt; Children { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;Child&gt;</p>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#remarks","title":"Remarks","text":"<p>Node children represent views in potentia. Every DOM node maps to (at least) one IViewNode, but views are created lazily and may not exist for nodes with conditional attributes or other rules.</p>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#context","title":"Context","text":"<p>The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes.</p> <pre><code>public StardewUI.Framework.Binding.BindingContext Context { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#property-value_1","title":"Property Value","text":"<p>BindingContext</p>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#views","title":"Views","text":"<p>The views for this node, if any have been created.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.IView&gt; Views { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#property-value_2","title":"Property Value","text":"<p>IReadOnlyList&lt;IView&gt;</p>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#printstringbuilder-bool","title":"Print(StringBuilder, bool)","text":"<p>Prints the string representation of this node.</p> <pre><code>public void Print(System.Text.StringBuilder sb, bool includeChildren);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#parameters_1","title":"Parameters","text":"<p><code>sb</code> StringBuilder The output builder to receive to the node's text.</p> <p><code>includeChildren</code> Boolean Whether or not to include the string representation of any/all child nodes between this node's opening and close tags. If this is <code>false</code> or there are no children, it will be formatted as a self-closing tag.</p>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#reset","title":"Reset()","text":"<p>Clears any Views associated with this node and resets it to the default state before it was bound.</p> <pre><code>public void Reset();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#remarks_1","title":"Remarks","text":"<p>Propagates the request down to Children, but is not required to clear Children and does not affect the Context assignment. </p> <p>This is used to \"unbind\" the target of a structural node like ConditionalNode and in some cases prepare it for subsequent reuse.</p>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#updatetimespan","title":"Update(TimeSpan)","text":"<p>Performs the regular per-frame update for this node.</p> <pre><code>public bool Update(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#parameters_2","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan Time elapsed since last update.</p>"},{"location":"reference/stardewui/framework/binding/backoffnodedecorator/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if any aspect of the view tree from this level downward was changed, i.e. as a result of a new Context, changed context properties, invalidated assets, or the View being created for the first time; <code>false</code> if no changes were made.</p>"},{"location":"reference/stardewui/framework/binding/binarycondition/","title":"BinaryCondition","text":""},{"location":"reference/stardewui/framework/binding/binarycondition/#class-binarycondition","title":"Class BinaryCondition","text":""},{"location":"reference/stardewui/framework/binding/binarycondition/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>A condition based on the comparison of two values.</p> <pre><code>public class BinaryCondition : StardewUI.Framework.Binding.ICondition, \n    System.IDisposable\n</code></pre> <p>Inheritance Object \u21e6 BinaryCondition</p> <p>Implements ICondition, IDisposable</p>"},{"location":"reference/stardewui/framework/binding/binarycondition/#remarks","title":"Remarks","text":"<p>Passes whenever both values are equal. Used for <code>*switch</code> and <code>*case</code> attributes. </p> <p>Any type may be used for either operand, but a conversion must be available from one of the types to the other type in order for the condition to ever pass. If the two types are different, and conversion both ways is possible, then priority will be given to the type implementing IEquatable&lt;T&gt; on itself; if the best type is still ambiguous, then left-&gt;right conversion will be chosen over right-&gt;left.</p>"},{"location":"reference/stardewui/framework/binding/binarycondition/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/binarycondition/#constructors","title":"Constructors","text":"Name Description BinaryCondition(IValueSourceFactory, IValueConverterFactory, IResolutionScope, IAttribute, IResolutionScope, IAttribute) A condition based on the comparison of two values."},{"location":"reference/stardewui/framework/binding/binarycondition/#properties","title":"Properties","text":"Name Description LeftContext The context used to derive the LHS value, if the left attribute is a context binding. LeftContextSelector Optional source for automatically updating the LeftContext. Passed Whether or not the condition was passing as of the last Update(). RightContext The context used to derive the RHS value, if the right attribute is a context binding. RightContextSelector Optional source for automatically updating the RightContext."},{"location":"reference/stardewui/framework/binding/binarycondition/#methods","title":"Methods","text":"Name Description Dispose() Update() Re-evaluates the condition and updates the Passed state."},{"location":"reference/stardewui/framework/binding/binarycondition/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/binarycondition/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/binarycondition/#binaryconditionivaluesourcefactory-ivalueconverterfactory-iresolutionscope-iattribute-iresolutionscope-iattribute","title":"BinaryCondition(IValueSourceFactory, IValueConverterFactory, IResolutionScope, IAttribute, IResolutionScope, IAttribute)","text":"<p>A condition based on the comparison of two values.</p> <pre><code>public BinaryCondition(StardewUI.Framework.Sources.IValueSourceFactory valueSourceFactory, StardewUI.Framework.Converters.IValueConverterFactory valueConverterFactory, StardewUI.Framework.Content.IResolutionScope leftScope, StardewUI.Framework.Dom.IAttribute leftAttribute, StardewUI.Framework.Content.IResolutionScope rightScope, StardewUI.Framework.Dom.IAttribute rightAttribute);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/binarycondition/#parameters","title":"Parameters","text":"<p><code>valueSourceFactory</code> IValueSourceFactory The factory responsible for creating IValueSource&lt;T&gt; instances from attribute data.</p> <p><code>valueConverterFactory</code> IValueConverterFactory The factory responsible for creating IValueConverter&lt;TSource, TDestination&gt; instances, used to convert bound values to the types required by the target view.</p> <p><code>leftScope</code> IResolutionScope Scope for resolving any externalized <code>leftAttribute</code> values, such as translation keys.</p> <p><code>leftAttribute</code> IAttribute The attribute containing the expression for the LHS operand.</p> <p><code>rightScope</code> IResolutionScope Scope for resolving any externalized <code>rightAttribute</code> values, such as translation keys.</p> <p><code>rightAttribute</code> IAttribute The attribute containing the expression for the RHS operand.</p>"},{"location":"reference/stardewui/framework/binding/binarycondition/#remarks_1","title":"Remarks","text":"<p>Passes whenever both values are equal. Used for <code>*switch</code> and <code>*case</code> attributes. </p> <p>Any type may be used for either operand, but a conversion must be available from one of the types to the other type in order for the condition to ever pass. If the two types are different, and conversion both ways is possible, then priority will be given to the type implementing IEquatable&lt;T&gt; on itself; if the best type is still ambiguous, then left-&gt;right conversion will be chosen over right-&gt;left.</p>"},{"location":"reference/stardewui/framework/binding/binarycondition/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/binarycondition/#leftcontext","title":"LeftContext","text":"<p>The context used to derive the LHS value, if the left attribute is a context binding.</p> <pre><code>public StardewUI.Framework.Binding.BindingContext LeftContext { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/binarycondition/#property-value","title":"Property Value","text":"<p>BindingContext</p>"},{"location":"reference/stardewui/framework/binding/binarycondition/#leftcontextselector","title":"LeftContextSelector","text":"<p>Optional source for automatically updating the LeftContext.</p> <pre><code>public Func&lt;StardewUI.Framework.Binding.BindingContext&gt; LeftContextSelector { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/binarycondition/#property-value_1","title":"Property Value","text":"<p>Func&lt;BindingContext&gt;</p>"},{"location":"reference/stardewui/framework/binding/binarycondition/#remarks_2","title":"Remarks","text":"<p>If specified, then this selector will be automatically run on every Update() and assigned to the LeftContext; otherwise, the LeftContext must be set explicitly in order to change the evaluation context for the left-hand value.</p>"},{"location":"reference/stardewui/framework/binding/binarycondition/#passed","title":"Passed","text":"<p>Whether or not the condition was passing as of the last Update().</p> <pre><code>public bool Passed { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/binarycondition/#property-value_2","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/binding/binarycondition/#rightcontext","title":"RightContext","text":"<p>The context used to derive the RHS value, if the right attribute is a context binding.</p> <pre><code>public StardewUI.Framework.Binding.BindingContext RightContext { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/binarycondition/#property-value_3","title":"Property Value","text":"<p>BindingContext</p>"},{"location":"reference/stardewui/framework/binding/binarycondition/#rightcontextselector","title":"RightContextSelector","text":"<p>Optional source for automatically updating the RightContext.</p> <pre><code>public Func&lt;StardewUI.Framework.Binding.BindingContext&gt; RightContextSelector { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/binarycondition/#property-value_4","title":"Property Value","text":"<p>Func&lt;BindingContext&gt;</p>"},{"location":"reference/stardewui/framework/binding/binarycondition/#remarks_3","title":"Remarks","text":"<p>If specified, then this selector will be automatically run on every Update() and assigned to the RightContext; otherwise, the RightContext must be set explicitly in order to change the evaluation context for the right-hand value.</p>"},{"location":"reference/stardewui/framework/binding/binarycondition/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/binarycondition/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/binarycondition/#update","title":"Update()","text":"<p>Re-evaluates the condition and updates the Passed state.</p> <pre><code>public void Update();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingcontext/","title":"BindingContext","text":""},{"location":"reference/stardewui/framework/binding/bindingcontext/#class-bindingcontext","title":"Class BindingContext","text":""},{"location":"reference/stardewui/framework/binding/bindingcontext/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Context, or scope, of a bound view, providing the backing data and tools for accessing its properties.</p> <pre><code>public record BindingContext : \n    IEquatable&lt;StardewUI.Framework.Binding.BindingContext&gt;\n</code></pre> <p>Inheritance Object \u21e6 BindingContext</p> <p>Implements IEquatable&lt;BindingContext&gt;</p>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/bindingcontext/#constructors","title":"Constructors","text":"Name Description BindingContext(IObjectDescriptor, Object, BindingContext) Context, or scope, of a bound view, providing the backing data and tools for accessing its properties."},{"location":"reference/stardewui/framework/binding/bindingcontext/#properties","title":"Properties","text":"Name Description Data The bound data. Descriptor Descriptor of the Data type, used to read current values. EqualityContract Parent The parent context from which this context was derived, if any."},{"location":"reference/stardewui/framework/binding/bindingcontext/#methods","title":"Methods","text":"Name Description Create(Object, BindingContext) Creates a BindingContext from the specified data, automatically building a new descriptor if the data type has not been previously seen. Redirect(ContextRedirect) Resolves a redirected context, using this context as the starting point."},{"location":"reference/stardewui/framework/binding/bindingcontext/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/bindingcontext/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/bindingcontext/#bindingcontextiobjectdescriptor-object-bindingcontext","title":"BindingContext(IObjectDescriptor, Object, BindingContext)","text":"<p>Context, or scope, of a bound view, providing the backing data and tools for accessing its properties.</p> <pre><code>public BindingContext(StardewUI.Framework.Descriptors.IObjectDescriptor Descriptor, System.Object Data, StardewUI.Framework.Binding.BindingContext Parent);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#parameters","title":"Parameters","text":"<p><code>Descriptor</code> IObjectDescriptor Descriptor of the Data type, used to read current values.</p> <p><code>Data</code> Object The bound data.</p> <p><code>Parent</code> BindingContext The parent context from which this context was derived, if any.</p>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/bindingcontext/#data","title":"Data","text":"<p>The bound data.</p> <pre><code>public System.Object Data { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#property-value","title":"Property Value","text":"<p>Object</p>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#descriptor","title":"Descriptor","text":"<p>Descriptor of the Data type, used to read current values.</p> <pre><code>public StardewUI.Framework.Descriptors.IObjectDescriptor Descriptor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#property-value_1","title":"Property Value","text":"<p>IObjectDescriptor</p>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#property-value_2","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#parent","title":"Parent","text":"<p>The parent context from which this context was derived, if any.</p> <pre><code>public StardewUI.Framework.Binding.BindingContext Parent { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#property-value_3","title":"Property Value","text":"<p>BindingContext</p>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/bindingcontext/#createobject-bindingcontext","title":"Create(Object, BindingContext)","text":"<p>Creates a BindingContext from the specified data, automatically building a new descriptor if the data type has not been previously seen.</p> <pre><code>public static StardewUI.Framework.Binding.BindingContext Create(System.Object data, StardewUI.Framework.Binding.BindingContext parent);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#parameters_1","title":"Parameters","text":"<p><code>data</code> Object The bound data.</p> <p><code>parent</code> BindingContext The parent context from which this context was derived, if any.</p>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#returns","title":"Returns","text":"<p>BindingContext</p> <p>A new BindingContext whose Data is the specified <code>data</code> and whose Descriptor is the descriptor of <code>data</code>'s runtime type.</p>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#redirectcontextredirect","title":"Redirect(ContextRedirect)","text":"<p>Resolves a redirected context, using this context as the starting point.</p> <pre><code>public StardewUI.Framework.Binding.BindingContext Redirect(StardewUI.Framework.Dom.ContextRedirect redirect);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#parameters_2","title":"Parameters","text":"<p><code>redirect</code> ContextRedirect The redirect data.</p>"},{"location":"reference/stardewui/framework/binding/bindingcontext/#returns_1","title":"Returns","text":"<p>BindingContext</p> <p>The resolved BindingContext, or <code>null</code> if the <code>redirect</code> does not resolve to a valid context.</p>"},{"location":"reference/stardewui/framework/binding/bindingdirection/","title":"BindingDirection","text":""},{"location":"reference/stardewui/framework/binding/bindingdirection/#enum-bindingdirection","title":"Enum BindingDirection","text":""},{"location":"reference/stardewui/framework/binding/bindingdirection/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>The direction of data flow in a data binding.</p> <pre><code>public enum BindingDirection\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 BindingDirection</p>"},{"location":"reference/stardewui/framework/binding/bindingdirection/#fields","title":"Fields","text":"Name Value Description In 0 An input binding, i.e. the view receives its value from the context. Out 1 An output binding, i.e. the view publishes its value to the context. InOut 2 A binding that is both input and output, i.e. the view receives its value from the context and also publishes its value to the context, depending on where the most recent change occurred."},{"location":"reference/stardewui/framework/binding/bindingdirectionextensions/","title":"BindingDirectionExtensions","text":""},{"location":"reference/stardewui/framework/binding/bindingdirectionextensions/#class-bindingdirectionextensions","title":"Class BindingDirectionExtensions","text":""},{"location":"reference/stardewui/framework/binding/bindingdirectionextensions/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Extension methods for the BindingDirection enum.</p> <pre><code>public static class BindingDirectionExtensions\n</code></pre> <p>Inheritance Object \u21e6 BindingDirectionExtensions</p>"},{"location":"reference/stardewui/framework/binding/bindingdirectionextensions/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/bindingdirectionextensions/#methods","title":"Methods","text":"Name Description IsIn(BindingDirection) Gets whether or not a direction includes an input binding, i.e. is either In or InOut. IsOut(BindingDirection) Gets whether or not a direction includes an output binding, i.e. is either Out or InOut."},{"location":"reference/stardewui/framework/binding/bindingdirectionextensions/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/bindingdirectionextensions/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/bindingdirectionextensions/#isinbindingdirection","title":"IsIn(BindingDirection)","text":"<p>Gets whether or not a direction includes an input binding, i.e. is either In or InOut.</p> <pre><code>public static bool IsIn(StardewUI.Framework.Binding.BindingDirection direction);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingdirectionextensions/#parameters","title":"Parameters","text":"<p><code>direction</code> BindingDirection The binding direction.</p>"},{"location":"reference/stardewui/framework/binding/bindingdirectionextensions/#returns","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/binding/bindingdirectionextensions/#isoutbindingdirection","title":"IsOut(BindingDirection)","text":"<p>Gets whether or not a direction includes an output binding, i.e. is either Out or InOut.</p> <pre><code>public static bool IsOut(StardewUI.Framework.Binding.BindingDirection direction);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingdirectionextensions/#parameters_1","title":"Parameters","text":"<p><code>direction</code> BindingDirection The binding direction.</p>"},{"location":"reference/stardewui/framework/binding/bindingdirectionextensions/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/binding/bindingexception/","title":"BindingException","text":""},{"location":"reference/stardewui/framework/binding/bindingexception/#class-bindingexception","title":"Class BindingException","text":""},{"location":"reference/stardewui/framework/binding/bindingexception/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>The exception that is thrown when an unrecoverable error happens during data binding for a view.</p> <pre><code>public class BindingException : System.Exception\n</code></pre> <p>Inheritance Object \u21e6 Exception \u21e6 BindingException</p>"},{"location":"reference/stardewui/framework/binding/bindingexception/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/bindingexception/#constructors","title":"Constructors","text":"Name Description BindingException() Initializes a new instance of the BindingException class. BindingException(string) Initializes a new instance of the BindingException class with a specified error message. BindingException(string, SNode) Initializes a new instance of the BindingException class with a specified error message and a reference to the failed node. BindingException(string, Exception) Initializes a new instance of the BindingException class with a specified error message and a reference to the inner exception that is the cause of this exception. BindingException(string, SNode, Exception) Initializes a new instance of the BindingException class with a specified error message and references to the failed node and inner exception that are the cause of this exception."},{"location":"reference/stardewui/framework/binding/bindingexception/#properties","title":"Properties","text":"Name Description Data (Inherited from Exception) HelpLink (Inherited from Exception) HResult (Inherited from Exception) InnerException (Inherited from Exception) Message (Inherited from Exception) Node The specific node that failed to bind, if known. Source (Inherited from Exception) StackTrace (Inherited from Exception) TargetSite (Inherited from Exception)"},{"location":"reference/stardewui/framework/binding/bindingexception/#methods","title":"Methods","text":"Name Description GetBaseException() (Inherited from Exception) GetObjectData(SerializationInfo, StreamingContext) (Inherited from Exception) GetType() (Inherited from Exception) ToString() (Inherited from Exception)"},{"location":"reference/stardewui/framework/binding/bindingexception/#events","title":"Events","text":"Name Description SerializeObjectState (Inherited from Exception)"},{"location":"reference/stardewui/framework/binding/bindingexception/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/bindingexception/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/bindingexception/#bindingexception","title":"BindingException()","text":"<p>Initializes a new instance of the BindingException class.</p> <pre><code>public BindingException();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingexception/#bindingexceptionstring","title":"BindingException(string)","text":"<p>Initializes a new instance of the BindingException class with a specified error message.</p> <pre><code>public BindingException(string message);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingexception/#parameters","title":"Parameters","text":"<p><code>message</code> string The message that describes the error.</p>"},{"location":"reference/stardewui/framework/binding/bindingexception/#bindingexceptionstring-snode","title":"BindingException(string, SNode)","text":"<p>Initializes a new instance of the BindingException class with a specified error message and a reference to the failed node.</p> <pre><code>public BindingException(string message, StardewUI.Framework.Dom.SNode node);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingexception/#parameters_1","title":"Parameters","text":"<p><code>message</code> string The message that describes the error.</p> <p><code>node</code> SNode The specific node that failed to bind.</p>"},{"location":"reference/stardewui/framework/binding/bindingexception/#bindingexceptionstring-exception","title":"BindingException(string, Exception)","text":"<p>Initializes a new instance of the BindingException class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> <pre><code>public BindingException(string message, System.Exception innerException);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingexception/#parameters_2","title":"Parameters","text":"<p><code>message</code> string The error message that explains the reason for the exception.</p> <p><code>innerException</code> Exception The exception that is the cause of the current exception, or <code>null</code> if not specified.</p>"},{"location":"reference/stardewui/framework/binding/bindingexception/#bindingexceptionstring-snode-exception","title":"BindingException(string, SNode, Exception)","text":"<p>Initializes a new instance of the BindingException class with a specified error message and references to the failed node and inner exception that are the cause of this exception.</p> <pre><code>public BindingException(string message, StardewUI.Framework.Dom.SNode node, System.Exception innerException);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingexception/#parameters_3","title":"Parameters","text":"<p><code>message</code> string The error message that explains the reason for the exception.</p> <p><code>node</code> SNode The specific node that failed to bind.</p> <p><code>innerException</code> Exception The exception that is the cause of the current exception, or <code>null</code> if not specified.</p>"},{"location":"reference/stardewui/framework/binding/bindingexception/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/bindingexception/#node","title":"Node","text":"<p>The specific node that failed to bind, if known.</p> <pre><code>public StardewUI.Framework.Dom.SNode Node { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/bindingexception/#property-value","title":"Property Value","text":"<p>SNode</p>"},{"location":"reference/stardewui/framework/binding/conditionalnode/","title":"ConditionalNode","text":""},{"location":"reference/stardewui/framework/binding/conditionalnode/#class-conditionalnode","title":"Class ConditionalNode","text":""},{"location":"reference/stardewui/framework/binding/conditionalnode/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>A structural node that only passes through its child node when some condition passes.</p> <pre><code>public class ConditionalNode : StardewUI.Framework.Binding.IViewNode, \n    System.IDisposable\n</code></pre> <p>Inheritance Object \u21e6 ConditionalNode</p> <p>Implements IViewNode, IDisposable</p>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/conditionalnode/#constructors","title":"Constructors","text":"Name Description ConditionalNode(IViewNode, ICondition) A structural node that only passes through its child node when some condition passes."},{"location":"reference/stardewui/framework/binding/conditionalnode/#properties","title":"Properties","text":"Name Description Children The children of this node. Context The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes. Views The views for this node, if any have been created."},{"location":"reference/stardewui/framework/binding/conditionalnode/#methods","title":"Methods","text":"Name Description Dispose() Print(StringBuilder, Boolean) Prints the string representation of this node. Reset() Clears any Views associated with this node and resets it to the default state before it was bound. ToString() (Overrides Object.<code>ToString()</code>) Update(TimeSpan) Performs the regular per-frame update for this node."},{"location":"reference/stardewui/framework/binding/conditionalnode/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/conditionalnode/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/conditionalnode/#conditionalnodeiviewnode-icondition","title":"ConditionalNode(IViewNode, ICondition)","text":"<p>A structural node that only passes through its child node when some condition passes.</p> <pre><code>public ConditionalNode(StardewUI.Framework.Binding.IViewNode innerNode, StardewUI.Framework.Binding.ICondition condition);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#parameters","title":"Parameters","text":"<p><code>innerNode</code> IViewNode The node to conditionally render.</p> <p><code>condition</code> ICondition The condition to evaluate.</p>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/conditionalnode/#children","title":"Children","text":"<p>The children of this node.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Binding.IViewNode.Child&gt; Children { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;Child&gt;</p>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#remarks","title":"Remarks","text":"<p>Node children represent views in potentia. Every DOM node maps to (at least) one IViewNode, but views are created lazily and may not exist for nodes with conditional attributes or other rules.</p>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#context","title":"Context","text":"<p>The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes.</p> <pre><code>public StardewUI.Framework.Binding.BindingContext Context { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#property-value_1","title":"Property Value","text":"<p>BindingContext</p>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#views","title":"Views","text":"<p>The views for this node, if any have been created.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.IView&gt; Views { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#property-value_2","title":"Property Value","text":"<p>IReadOnlyList&lt;IView&gt;</p>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/conditionalnode/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#printstringbuilder-bool","title":"Print(StringBuilder, bool)","text":"<p>Prints the string representation of this node.</p> <pre><code>public void Print(System.Text.StringBuilder sb, bool includeChildren);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#parameters_1","title":"Parameters","text":"<p><code>sb</code> StringBuilder The output builder to receive to the node's text.</p> <p><code>includeChildren</code> Boolean Whether or not to include the string representation of any/all child nodes between this node's opening and close tags. If this is <code>false</code> or there are no children, it will be formatted as a self-closing tag.</p>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#reset","title":"Reset()","text":"<p>Clears any Views associated with this node and resets it to the default state before it was bound.</p> <pre><code>public void Reset();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#remarks_1","title":"Remarks","text":"<p>Propagates the request down to Children, but is not required to clear Children and does not affect the Context assignment. </p> <p>This is used to \"unbind\" the target of a structural node like ConditionalNode and in some cases prepare it for subsequent reuse.</p>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#tostring","title":"ToString()","text":"<pre><code>public override string ToString();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#returns","title":"Returns","text":"<p>string</p>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#updatetimespan","title":"Update(TimeSpan)","text":"<p>Performs the regular per-frame update for this node.</p> <pre><code>public bool Update(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#parameters_2","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan Time elapsed since last update.</p>"},{"location":"reference/stardewui/framework/binding/conditionalnode/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if any aspect of the view tree from this level downward was changed, i.e. as a result of a new Context, changed context properties, invalidated assets, or the View being created for the first time; <code>false</code> if no changes were made.</p>"},{"location":"reference/stardewui/framework/binding/contextupdatetracker/","title":"ContextUpdateTracker","text":""},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#class-contextupdatetracker","title":"Class ContextUpdateTracker","text":""},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Tracks context instances that already had updates dispatched this frame, to prevent duplication.</p> <pre><code>public class ContextUpdateTracker\n</code></pre> <p>Inheritance Object \u21e6 ContextUpdateTracker</p>"},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#remarks","title":"Remarks","text":"<p>Used by the ContextUpdatingNodeDecorator.</p>"},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#fields","title":"Fields","text":"Name Description Instance Global instance for entire framework."},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#methods","title":"Methods","text":"Name Description Reset() Resets all state; to be called at the beginning of each frame. TrackUpdate(Object) Tracks the update of a context instance so that WasAlreadyUpdated(Object) returns <code>true</code> for the given <code>contextData</code> until Reset() is called. WasAlreadyUpdated(Object) Checks if a context instance already received an update tick dispatch for the current frame."},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#fields_1","title":"Fields","text":""},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#instance","title":"Instance","text":"<p>Global instance for entire framework.</p> <pre><code>public static readonly StardewUI.Framework.Binding.ContextUpdateTracker Instance;\n</code></pre>"},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#field-value","title":"Field Value","text":"<p>ContextUpdateTracker</p>"},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#remarks_1","title":"Remarks","text":"<p>Entire view trees may share the same context data; this is entirely up to the client(s). Therefore, the same tracker instance must be shared by all nodes in order to prevent duplication. </p> <p>The instance is expected to be reset in the <code>ModEntry</code> or similar entry point.</p>"},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#reset","title":"Reset()","text":"<p>Resets all state; to be called at the beginning of each frame.</p> <pre><code>public void Reset();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#trackupdateobject","title":"TrackUpdate(Object)","text":"<p>Tracks the update of a context instance so that WasAlreadyUpdated(Object) returns <code>true</code> for the given <code>contextData</code> until Reset() is called.</p> <pre><code>public void TrackUpdate(System.Object contextData);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#parameters","title":"Parameters","text":"<p><code>contextData</code> Object The context that was updated.</p>"},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#wasalreadyupdatedobject","title":"WasAlreadyUpdated(Object)","text":"<p>Checks if a context instance already received an update tick dispatch for the current frame.</p> <pre><code>public bool WasAlreadyUpdated(System.Object contextData);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#parameters_1","title":"Parameters","text":"<p><code>contextData</code> Object The context that may have been previously updated.</p>"},{"location":"reference/stardewui/framework/binding/contextupdatetracker/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the <code>contextData</code> already received an update tick, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/","title":"ContextUpdatingNodeDecorator","text":""},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#class-contextupdatingnodedecorator","title":"Class ContextUpdatingNodeDecorator","text":""},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>A transparent binding node that propagates Update(TimeSpan) ticks to an eligible context.</p> <pre><code>public class ContextUpdatingNodeDecorator : \n    StardewUI.Framework.Binding.IViewNode, System.IDisposable\n</code></pre> <p>Inheritance Object \u21e6 ContextUpdatingNodeDecorator</p> <p>Implements IViewNode, IDisposable</p>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#constructors","title":"Constructors","text":"Name Description ContextUpdatingNodeDecorator(IViewNode, ContextUpdateTracker) A transparent binding node that propagates Update(TimeSpan) ticks to an eligible context."},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#properties","title":"Properties","text":"Name Description Children The children of this node. Context The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes. Views The views for this node, if any have been created."},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#methods","title":"Methods","text":"Name Description Dispose() Print(StringBuilder, Boolean) Prints the string representation of this node. Reset() Clears any Views associated with this node and resets it to the default state before it was bound. Update(TimeSpan) Performs the regular per-frame update for this node."},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#contextupdatingnodedecoratoriviewnode-contextupdatetracker","title":"ContextUpdatingNodeDecorator(IViewNode, ContextUpdateTracker)","text":"<p>A transparent binding node that propagates Update(TimeSpan) ticks to an eligible context.</p> <pre><code>public ContextUpdatingNodeDecorator(StardewUI.Framework.Binding.IViewNode node, StardewUI.Framework.Binding.ContextUpdateTracker tracker);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#parameters","title":"Parameters","text":"<p><code>node</code> IViewNode The owned node.</p> <p><code>tracker</code> ContextUpdateTracker Shared instance tracking all context updates per frame.</p>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#children","title":"Children","text":"<p>The children of this node.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Binding.IViewNode.Child&gt; Children { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;Child&gt;</p>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#remarks","title":"Remarks","text":"<p>Node children represent views in potentia. Every DOM node maps to (at least) one IViewNode, but views are created lazily and may not exist for nodes with conditional attributes or other rules.</p>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#context","title":"Context","text":"<p>The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes.</p> <pre><code>public StardewUI.Framework.Binding.BindingContext Context { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#property-value_1","title":"Property Value","text":"<p>BindingContext</p>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#views","title":"Views","text":"<p>The views for this node, if any have been created.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.IView&gt; Views { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#property-value_2","title":"Property Value","text":"<p>IReadOnlyList&lt;IView&gt;</p>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#printstringbuilder-bool","title":"Print(StringBuilder, bool)","text":"<p>Prints the string representation of this node.</p> <pre><code>public void Print(System.Text.StringBuilder sb, bool includeChildren);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#parameters_1","title":"Parameters","text":"<p><code>sb</code> StringBuilder The output builder to receive to the node's text.</p> <p><code>includeChildren</code> Boolean Whether or not to include the string representation of any/all child nodes between this node's opening and close tags. If this is <code>false</code> or there are no children, it will be formatted as a self-closing tag.</p>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#reset","title":"Reset()","text":"<p>Clears any Views associated with this node and resets it to the default state before it was bound.</p> <pre><code>public void Reset();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#remarks_1","title":"Remarks","text":"<p>Propagates the request down to Children, but is not required to clear Children and does not affect the Context assignment. </p> <p>This is used to \"unbind\" the target of a structural node like ConditionalNode and in some cases prepare it for subsequent reuse.</p>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#updatetimespan","title":"Update(TimeSpan)","text":"<p>Performs the regular per-frame update for this node.</p> <pre><code>public bool Update(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#parameters_2","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan Time elapsed since last update.</p>"},{"location":"reference/stardewui/framework/binding/contextupdatingnodedecorator/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if any aspect of the view tree from this level downward was changed, i.e. as a result of a new Context, changed context properties, invalidated assets, or the View being created for the first time; <code>false</code> if no changes were made.</p>"},{"location":"reference/stardewui/framework/binding/eventbindingfactory/","title":"EventBindingFactory","text":""},{"location":"reference/stardewui/framework/binding/eventbindingfactory/#class-eventbindingfactory","title":"Class EventBindingFactory","text":""},{"location":"reference/stardewui/framework/binding/eventbindingfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Reflection-based implementation of an IEventBindingFactory.</p> <pre><code>public class EventBindingFactory : \n    StardewUI.Framework.Binding.IEventBindingFactory\n</code></pre> <p>Inheritance Object \u21e6 EventBindingFactory</p> <p>Implements IEventBindingFactory</p>"},{"location":"reference/stardewui/framework/binding/eventbindingfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/eventbindingfactory/#constructors","title":"Constructors","text":"Name Description EventBindingFactory(IValueSourceFactory, IValueConverterFactory) Reflection-based implementation of an IEventBindingFactory."},{"location":"reference/stardewui/framework/binding/eventbindingfactory/#methods","title":"Methods","text":"Name Description TryCreateBinding(IView, IViewDescriptor, IEvent, BindingContext) Attempts to creates a new event binding."},{"location":"reference/stardewui/framework/binding/eventbindingfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/eventbindingfactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/eventbindingfactory/#eventbindingfactoryivaluesourcefactory-ivalueconverterfactory","title":"EventBindingFactory(IValueSourceFactory, IValueConverterFactory)","text":"<p>Reflection-based implementation of an IEventBindingFactory.</p> <pre><code>public EventBindingFactory(StardewUI.Framework.Sources.IValueSourceFactory valueSourceFactory, StardewUI.Framework.Converters.IValueConverterFactory valueConverterFactory);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/eventbindingfactory/#parameters","title":"Parameters","text":"<p><code>valueSourceFactory</code> IValueSourceFactory</p> <p><code>valueConverterFactory</code> IValueConverterFactory</p>"},{"location":"reference/stardewui/framework/binding/eventbindingfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/eventbindingfactory/#trycreatebindingiview-iviewdescriptor-ievent-bindingcontext","title":"TryCreateBinding(IView, IViewDescriptor, IEvent, BindingContext)","text":"<p>Attempts to creates a new event binding.</p> <pre><code>public StardewUI.Framework.Binding.IEventBinding TryCreateBinding(StardewUI.IView view, StardewUI.Framework.Descriptors.IViewDescriptor viewDescriptor, StardewUI.Framework.Dom.IEvent event, StardewUI.Framework.Binding.BindingContext context);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/eventbindingfactory/#parameters_1","title":"Parameters","text":"<p><code>view</code> IView The view to bind to; the target that will raise the bound event.</p> <p><code>viewDescriptor</code> IViewDescriptor Descriptor for the bound view, providing access to its events.</p> <p><code>event</code> IEvent The event data.</p> <p><code>context</code> BindingContext The binding context, including the type descriptor and handler methods.</p>"},{"location":"reference/stardewui/framework/binding/eventbindingfactory/#returns","title":"Returns","text":"<p>IEventBinding</p> <p>The created binding, or <code>null</code> if the arguments do not support creating a binding, such as an <code>event</code> bound to a <code>null</code> value of <code>context</code>.</p>"},{"location":"reference/stardewui/framework/binding/iattributebinding/","title":"IAttributeBinding","text":""},{"location":"reference/stardewui/framework/binding/iattributebinding/#interface-iattributebinding","title":"Interface IAttributeBinding","text":""},{"location":"reference/stardewui/framework/binding/iattributebinding/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Binding instance for a single attribute on a single view.</p> <pre><code>public interface IAttributeBinding : System.IDisposable\n</code></pre> <p>Implements IDisposable</p>"},{"location":"reference/stardewui/framework/binding/iattributebinding/#remarks","title":"Remarks","text":"<p>Encapsulates the source of the value and provides a method to update the target view if the value has changed. </p> <p>This is primarily for internal use, as a way of tracking fine-grained changes to views instead of having to rebind the entire view when anything changes.</p>"},{"location":"reference/stardewui/framework/binding/iattributebinding/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/iattributebinding/#properties","title":"Properties","text":"Name Description DestinationPropertyName The name of the bound property on the destination view. Direction The data flow direction for this binding."},{"location":"reference/stardewui/framework/binding/iattributebinding/#methods","title":"Methods","text":"Name Description UpdateSource(IView) Updates the source to match the view's current value. UpdateView(IView, Boolean) Updates a target view with the most recent source value."},{"location":"reference/stardewui/framework/binding/iattributebinding/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/iattributebinding/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/iattributebinding/#destinationpropertyname","title":"DestinationPropertyName","text":"<p>The name of the bound property on the destination view.</p> <pre><code>string DestinationPropertyName { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iattributebinding/#property-value","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/binding/iattributebinding/#direction","title":"Direction","text":"<p>The data flow direction for this binding.</p> <pre><code>StardewUI.Framework.Binding.BindingDirection Direction { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iattributebinding/#property-value_1","title":"Property Value","text":"<p>BindingDirection</p>"},{"location":"reference/stardewui/framework/binding/iattributebinding/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/iattributebinding/#updatesourceiview","title":"UpdateSource(IView)","text":"<p>Updates the source to match the view's current value.</p> <pre><code>void UpdateSource(StardewUI.IView target);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iattributebinding/#parameters","title":"Parameters","text":"<p><code>target</code> IView The bound view.</p>"},{"location":"reference/stardewui/framework/binding/iattributebinding/#remarks_1","title":"Remarks","text":"<p>Allowed when the Direction is either Out or InOut.</p>"},{"location":"reference/stardewui/framework/binding/iattributebinding/#updateviewiview-bool","title":"UpdateView(IView, bool)","text":"<p>Updates a target view with the most recent source value.</p> <pre><code>bool UpdateView(StardewUI.IView target, bool force);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iattributebinding/#parameters_1","title":"Parameters","text":"<p><code>target</code> IView The view to receive the update.</p> <p><code>force</code> Boolean If <code>true</code>, always re-publishes the latest value to the view even if the source value has not changed. Typically used for initial updates immediately after creation.</p>"},{"location":"reference/stardewui/framework/binding/iattributebinding/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the view was updated; <code>false</code> if the update was skipped because the source value had not changed.</p>"},{"location":"reference/stardewui/framework/binding/iattributebinding/#remarks_2","title":"Remarks","text":"<p>Allowed when the Direction is either In or InOut.</p>"},{"location":"reference/stardewui/framework/binding/iattributebindingfactory/","title":"IAttributeBindingFactory","text":""},{"location":"reference/stardewui/framework/binding/iattributebindingfactory/#interface-iattributebindingfactory","title":"Interface IAttributeBindingFactory","text":""},{"location":"reference/stardewui/framework/binding/iattributebindingfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Service for creating IAttributeBinding instances for the individual attributes of a bound view.</p> <pre><code>public interface IAttributeBindingFactory\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iattributebindingfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/iattributebindingfactory/#methods","title":"Methods","text":"Name Description TryCreateBinding(IViewDescriptor, IAttribute, BindingContext, IResolutionScope) Attempts to creates a new attribute binding."},{"location":"reference/stardewui/framework/binding/iattributebindingfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/iattributebindingfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/iattributebindingfactory/#trycreatebindingiviewdescriptor-iattribute-bindingcontext-iresolutionscope","title":"TryCreateBinding(IViewDescriptor, IAttribute, BindingContext, IResolutionScope)","text":"<p>Attempts to creates a new attribute binding.</p> <pre><code>StardewUI.Framework.Binding.IAttributeBinding TryCreateBinding(StardewUI.Framework.Descriptors.IViewDescriptor viewDescriptor, StardewUI.Framework.Dom.IAttribute attribute, StardewUI.Framework.Binding.BindingContext context, StardewUI.Framework.Content.IResolutionScope resolutionScope);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iattributebindingfactory/#parameters","title":"Parameters","text":"<p><code>viewDescriptor</code> IViewDescriptor Descriptor for the bound view, providing access to its properties.</p> <p><code>attribute</code> IAttribute The attribute data.</p> <p><code>context</code> BindingContext The binding context, including the bound data and descriptor for the data type.</p> <p><code>resolutionScope</code> IResolutionScope Scope for resolving externalized attributes, such as translation keys.</p>"},{"location":"reference/stardewui/framework/binding/iattributebindingfactory/#returns","title":"Returns","text":"<p>IAttributeBinding</p> <p>The created binding, or <code>null</code> if the arguments do not support creating a binding, such as an <code>attribute</code> bound to a <code>null</code> value of <code>context</code>.</p>"},{"location":"reference/stardewui/framework/binding/icondition/","title":"ICondition","text":""},{"location":"reference/stardewui/framework/binding/icondition/#interface-icondition","title":"Interface ICondition","text":""},{"location":"reference/stardewui/framework/binding/icondition/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>A condition used in a ConditionalNode.</p> <pre><code>public interface ICondition : System.IDisposable\n</code></pre> <p>Implements IDisposable</p>"},{"location":"reference/stardewui/framework/binding/icondition/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/icondition/#properties","title":"Properties","text":"Name Description Context The context for evaluating the condition; i.e. the context of the node to which the condition applies. Passed Whether or not the condition was passing as of the last Update()."},{"location":"reference/stardewui/framework/binding/icondition/#methods","title":"Methods","text":"Name Description Update() Re-evaluates the condition and updates the Passed state."},{"location":"reference/stardewui/framework/binding/icondition/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/icondition/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/icondition/#context","title":"Context","text":"<p>The context for evaluating the condition; i.e. the context of the node to which the condition applies.</p> <pre><code>StardewUI.Framework.Binding.BindingContext Context { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/icondition/#property-value","title":"Property Value","text":"<p>BindingContext</p>"},{"location":"reference/stardewui/framework/binding/icondition/#passed","title":"Passed","text":"<p>Whether or not the condition was passing as of the last Update().</p> <pre><code>bool Passed { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/icondition/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/binding/icondition/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/icondition/#update","title":"Update()","text":"<p>Re-evaluates the condition and updates the Passed state.</p> <pre><code>void Update();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/ieventbinding/","title":"IEventBinding","text":""},{"location":"reference/stardewui/framework/binding/ieventbinding/#interface-ieventbinding","title":"Interface IEventBinding","text":""},{"location":"reference/stardewui/framework/binding/ieventbinding/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Binding instance for a single event on a single view.</p> <pre><code>public interface IEventBinding : System.IDisposable\n</code></pre> <p>Implements IDisposable</p>"},{"location":"reference/stardewui/framework/binding/ieventbinding/#remarks","title":"Remarks","text":"<p>Removes/unsubscribes the event handler when disposed.</p>"},{"location":"reference/stardewui/framework/binding/ieventbinding/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/ieventbinding/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/ieventbindingfactory/","title":"IEventBindingFactory","text":""},{"location":"reference/stardewui/framework/binding/ieventbindingfactory/#interface-ieventbindingfactory","title":"Interface IEventBindingFactory","text":""},{"location":"reference/stardewui/framework/binding/ieventbindingfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Service for creating IEventBinding instances for a view's events, and subscribing the handlers.</p> <pre><code>public interface IEventBindingFactory\n</code></pre>"},{"location":"reference/stardewui/framework/binding/ieventbindingfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/ieventbindingfactory/#methods","title":"Methods","text":"Name Description TryCreateBinding(IView, IViewDescriptor, IEvent, BindingContext) Attempts to creates a new event binding."},{"location":"reference/stardewui/framework/binding/ieventbindingfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/ieventbindingfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/ieventbindingfactory/#trycreatebindingiview-iviewdescriptor-ievent-bindingcontext","title":"TryCreateBinding(IView, IViewDescriptor, IEvent, BindingContext)","text":"<p>Attempts to creates a new event binding.</p> <pre><code>StardewUI.Framework.Binding.IEventBinding TryCreateBinding(StardewUI.IView view, StardewUI.Framework.Descriptors.IViewDescriptor viewDescriptor, StardewUI.Framework.Dom.IEvent event, StardewUI.Framework.Binding.BindingContext context);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/ieventbindingfactory/#parameters","title":"Parameters","text":"<p><code>view</code> IView The view to bind to; the target that will raise the bound event.</p> <p><code>viewDescriptor</code> IViewDescriptor Descriptor for the bound view, providing access to its events.</p> <p><code>event</code> IEvent The event data.</p> <p><code>context</code> BindingContext The binding context, including the type descriptor and handler methods.</p>"},{"location":"reference/stardewui/framework/binding/ieventbindingfactory/#returns","title":"Returns","text":"<p>IEventBinding</p> <p>The created binding, or <code>null</code> if the arguments do not support creating a binding, such as an <code>event</code> bound to a <code>null</code> value of <code>context</code>.</p>"},{"location":"reference/stardewui/framework/binding/includedviewnode/","title":"IncludedViewNode","text":""},{"location":"reference/stardewui/framework/binding/includedviewnode/#class-includedviewnode","title":"Class IncludedViewNode","text":""},{"location":"reference/stardewui/framework/binding/includedviewnode/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Quasi-structural node that loads its content from a shared game asset.</p> <pre><code>public class IncludedViewNode : StardewUI.Framework.Binding.IViewNode, \n    System.IDisposable\n</code></pre> <p>Inheritance Object \u21e6 IncludedViewNode</p> <p>Implements IViewNode, IDisposable</p>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/includedviewnode/#constructors","title":"Constructors","text":"Name Description IncludedViewNode(IValueSourceFactory, IValueConverterFactory, IAssetCache, IResolutionScope, Func&lt;Document, IViewNode&gt;, IAttribute, IAttribute) Quasi-structural node that loads its content from a shared game asset."},{"location":"reference/stardewui/framework/binding/includedviewnode/#properties","title":"Properties","text":"Name Description Children The children of this node. Context The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes. Views The views for this node, if any have been created."},{"location":"reference/stardewui/framework/binding/includedviewnode/#methods","title":"Methods","text":"Name Description Dispose() Print(StringBuilder, Boolean) Prints the string representation of this node. Reset() Clears any Views associated with this node and resets it to the default state before it was bound. ToString() (Overrides Object.<code>ToString()</code>) Update(TimeSpan) Performs the regular per-frame update for this node."},{"location":"reference/stardewui/framework/binding/includedviewnode/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/includedviewnode/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/includedviewnode/#includedviewnodeivaluesourcefactory-ivalueconverterfactory-iassetcache-iresolutionscope-funcdocument-iviewnode-iattribute-iattribute","title":"IncludedViewNode(IValueSourceFactory, IValueConverterFactory, IAssetCache, IResolutionScope, Func&lt;Document, IViewNode&gt;, IAttribute, IAttribute)","text":"<p>Quasi-structural node that loads its content from a shared game asset.</p> <pre><code>public IncludedViewNode(StardewUI.Framework.Sources.IValueSourceFactory valueSourceFactory, StardewUI.Framework.Converters.IValueConverterFactory valueConverterFactory, StardewUI.Framework.Content.IAssetCache assetCache, StardewUI.Framework.Content.IResolutionScope resolutionScope, Func&lt;StardewUI.Framework.Dom.Document, StardewUI.Framework.Binding.IViewNode&gt; nodeCreator, StardewUI.Framework.Dom.IAttribute assetNameAttribute, StardewUI.Framework.Dom.IAttribute contextAttribute);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#parameters","title":"Parameters","text":"<p><code>valueSourceFactory</code> IValueSourceFactory</p> <p><code>valueConverterFactory</code> IValueConverterFactory</p> <p><code>assetCache</code> IAssetCache</p> <p><code>resolutionScope</code> IResolutionScope</p> <p><code>nodeCreator</code> Func&lt;Document, IViewNode&gt;</p> <p><code>assetNameAttribute</code> IAttribute</p> <p><code>contextAttribute</code> IAttribute</p>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/includedviewnode/#children","title":"Children","text":"<p>The children of this node.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Binding.IViewNode.Child&gt; Children { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;Child&gt;</p>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#remarks","title":"Remarks","text":"<p>Node children represent views in potentia. Every DOM node maps to (at least) one IViewNode, but views are created lazily and may not exist for nodes with conditional attributes or other rules.</p>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#context","title":"Context","text":"<p>The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes.</p> <pre><code>public StardewUI.Framework.Binding.BindingContext Context { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#property-value_1","title":"Property Value","text":"<p>BindingContext</p>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#views","title":"Views","text":"<p>The views for this node, if any have been created.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.IView&gt; Views { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#property-value_2","title":"Property Value","text":"<p>IReadOnlyList&lt;IView&gt;</p>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/includedviewnode/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#printstringbuilder-bool","title":"Print(StringBuilder, bool)","text":"<p>Prints the string representation of this node.</p> <pre><code>public void Print(System.Text.StringBuilder sb, bool includeChildren);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#parameters_1","title":"Parameters","text":"<p><code>sb</code> StringBuilder The output builder to receive to the node's text.</p> <p><code>includeChildren</code> Boolean Whether or not to include the string representation of any/all child nodes between this node's opening and close tags. If this is <code>false</code> or there are no children, it will be formatted as a self-closing tag.</p>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#reset","title":"Reset()","text":"<p>Clears any Views associated with this node and resets it to the default state before it was bound.</p> <pre><code>public void Reset();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#remarks_1","title":"Remarks","text":"<p>Propagates the request down to Children, but is not required to clear Children and does not affect the Context assignment. </p> <p>This is used to \"unbind\" the target of a structural node like ConditionalNode and in some cases prepare it for subsequent reuse.</p>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#tostring","title":"ToString()","text":"<pre><code>public override string ToString();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#returns","title":"Returns","text":"<p>string</p>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#updatetimespan","title":"Update(TimeSpan)","text":"<p>Performs the regular per-frame update for this node.</p> <pre><code>public bool Update(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#parameters_2","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan Time elapsed since last update.</p>"},{"location":"reference/stardewui/framework/binding/includedviewnode/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if any aspect of the view tree from this level downward was changed, i.e. as a result of a new Context, changed context properties, invalidated assets, or the View being created for the first time; <code>false</code> if no changes were made.</p>"},{"location":"reference/stardewui/framework/binding/iviewbinder/","title":"IViewBinder","text":""},{"location":"reference/stardewui/framework/binding/iviewbinder/#interface-iviewbinder","title":"Interface IViewBinder","text":""},{"location":"reference/stardewui/framework/binding/iviewbinder/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Service for creating view bindings and their dependencies.</p> <pre><code>public interface IViewBinder\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewbinder/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/iviewbinder/#methods","title":"Methods","text":"Name Description Bind(IView, IElement, BindingContext, IResolutionScope) Creates a view binding. GetDescriptor(IView) Retrieves the descriptor for a view, which provides information about its properties."},{"location":"reference/stardewui/framework/binding/iviewbinder/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/iviewbinder/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/iviewbinder/#bindiview-ielement-bindingcontext-iresolutionscope","title":"Bind(IView, IElement, BindingContext, IResolutionScope)","text":"<p>Creates a view binding.</p> <pre><code>StardewUI.Framework.Binding.IViewBinding Bind(StardewUI.IView view, StardewUI.Framework.Dom.IElement element, StardewUI.Framework.Binding.BindingContext context, StardewUI.Framework.Content.IResolutionScope resolutionScope);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewbinder/#parameters","title":"Parameters","text":"<p><code>view</code> IView The view that will be bound.</p> <p><code>element</code> IElement The element data providing the literal or binding attributes.</p> <p><code>context</code> BindingContext The binding context/data, for any non-asset bindings using bindings whose AttributeValueType is one of the recognized IsContextBinding(AttributeValueType) types.</p> <p><code>resolutionScope</code> IResolutionScope Scope for resolving externalized attributes, such as translation keys.</p>"},{"location":"reference/stardewui/framework/binding/iviewbinder/#returns","title":"Returns","text":"<p>IViewBinding</p> <p>A view binding that can be used to propagate changes in the <code>context</code> or any dependent assets to the <code>view</code>.</p>"},{"location":"reference/stardewui/framework/binding/iviewbinder/#getdescriptoriview","title":"GetDescriptor(IView)","text":"<p>Retrieves the descriptor for a view, which provides information about its properties.</p> <pre><code>StardewUI.Framework.Descriptors.IViewDescriptor GetDescriptor(StardewUI.IView view);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewbinder/#parameters_1","title":"Parameters","text":"<p><code>view</code> IView The view instance.</p>"},{"location":"reference/stardewui/framework/binding/iviewbinder/#returns_1","title":"Returns","text":"<p>IViewDescriptor</p> <p>The descriptor for the <code>view</code>.</p>"},{"location":"reference/stardewui/framework/binding/iviewbinder/#remarks","title":"Remarks","text":"<p>Descriptors participate in view binding but may also be used for other purposes, such as updating child lists.</p>"},{"location":"reference/stardewui/framework/binding/iviewbinding/","title":"IViewBinding","text":""},{"location":"reference/stardewui/framework/binding/iviewbinding/#interface-iviewbinding","title":"Interface IViewBinding","text":""},{"location":"reference/stardewui/framework/binding/iviewbinding/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Represents the binding state of an entire view; provides a single method to perform a once-per-frame update.</p> <pre><code>public interface IViewBinding : System.IDisposable\n</code></pre> <p>Implements IDisposable</p>"},{"location":"reference/stardewui/framework/binding/iviewbinding/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/iviewbinding/#methods","title":"Methods","text":"Name Description Update() Updates the view, including all bound attributes."},{"location":"reference/stardewui/framework/binding/iviewbinding/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/iviewbinding/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/iviewbinding/#update","title":"Update()","text":"<p>Updates the view, including all bound attributes.</p> <pre><code>bool Update();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewbinding/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if any updates were performed; <code>false</code> if there was no update due to having no underlying changes in the bound data or assets.</p>"},{"location":"reference/stardewui/framework/binding/iviewfactory/","title":"IViewFactory","text":""},{"location":"reference/stardewui/framework/binding/iviewfactory/#interface-iviewfactory","title":"Interface IViewFactory","text":""},{"location":"reference/stardewui/framework/binding/iviewfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Factory for creating views from tags.</p> <pre><code>public interface IViewFactory\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewfactory/#remarks","title":"Remarks","text":"<p>This is a simple, low-level abstraction that simply maps tags to view types. It does not perform any reflection or participate in view binding.</p>"},{"location":"reference/stardewui/framework/binding/iviewfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/iviewfactory/#methods","title":"Methods","text":"Name Description CreateView(string) Creates a new view. SupportsTag(string) Checks if the factory can create views corresponding to a specific tag."},{"location":"reference/stardewui/framework/binding/iviewfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/iviewfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/iviewfactory/#createviewstring","title":"CreateView(string)","text":"<p>Creates a new view.</p> <pre><code>StardewUI.IView CreateView(string tagName);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewfactory/#parameters","title":"Parameters","text":"<p><code>tagName</code> string The markup tag that specifies the type of view.</p>"},{"location":"reference/stardewui/framework/binding/iviewfactory/#returns","title":"Returns","text":"<p>IView</p> <p>A new view of a type corresponding to the <code>tagName</code>.</p>"},{"location":"reference/stardewui/framework/binding/iviewfactory/#supportstagstring","title":"SupportsTag(string)","text":"<p>Checks if the factory can create views corresponding to a specific tag.</p> <pre><code>bool SupportsTag(string tagName);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewfactory/#parameters_1","title":"Parameters","text":"<p><code>tagName</code> string The markup tag that specifies the type of view.</p>"},{"location":"reference/stardewui/framework/binding/iviewfactory/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if this factory should handle the specified <code>tagName</code>, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/binding/iviewnode.child/","title":"IViewNode.Child","text":""},{"location":"reference/stardewui/framework/binding/iviewnode.child/#class-iviewnodechild","title":"Class IViewNode.Child","text":""},{"location":"reference/stardewui/framework/binding/iviewnode.child/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Child of an IViewNode, specifying the node data and the view outlet in which it should appear.</p> <pre><code>public record IViewNode.Child : System.IDisposable, \n    IEquatable&lt;StardewUI.Framework.Binding.IViewNode.Child&gt;\n</code></pre> <p>Inheritance Object \u21e6 Child</p> <p>Implements IDisposable, IEquatable&lt;Child&gt;</p>"},{"location":"reference/stardewui/framework/binding/iviewnode.child/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/iviewnode.child/#constructors","title":"Constructors","text":"Name Description Child(IViewNode, string) Child of an IViewNode, specifying the node data and the view outlet in which it should appear."},{"location":"reference/stardewui/framework/binding/iviewnode.child/#properties","title":"Properties","text":"Name Description EqualityContract Node The child node. OutletName The outlet in which the <code>Node</code> should be inserted."},{"location":"reference/stardewui/framework/binding/iviewnode.child/#methods","title":"Methods","text":"Name Description Dispose()"},{"location":"reference/stardewui/framework/binding/iviewnode.child/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/iviewnode.child/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/iviewnode.child/#childiviewnode-string","title":"Child(IViewNode, string)","text":"<p>Child of an IViewNode, specifying the node data and the view outlet in which it should appear.</p> <pre><code>public Child(StardewUI.Framework.Binding.IViewNode Node, string OutletName);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnode.child/#parameters","title":"Parameters","text":"<p><code>Node</code> IViewNode The child node.</p> <p><code>OutletName</code> string The outlet in which the <code>Node</code> should be inserted.</p>"},{"location":"reference/stardewui/framework/binding/iviewnode.child/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/iviewnode.child/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnode.child/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/binding/iviewnode.child/#node","title":"Node","text":"<p>The child node.</p> <pre><code>public StardewUI.Framework.Binding.IViewNode Node { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnode.child/#property-value_1","title":"Property Value","text":"<p>IViewNode</p>"},{"location":"reference/stardewui/framework/binding/iviewnode.child/#outletname","title":"OutletName","text":"<p>The outlet in which the <code>Node</code> should be inserted.</p> <pre><code>public string OutletName { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnode.child/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/binding/iviewnode.child/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/iviewnode.child/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnode/","title":"IViewNode","text":""},{"location":"reference/stardewui/framework/binding/iviewnode/#interface-iviewnode","title":"Interface IViewNode","text":""},{"location":"reference/stardewui/framework/binding/iviewnode/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Encapsulates a single bound node in a view tree.</p> <pre><code>public interface IViewNode : System.IDisposable\n</code></pre> <p>Implements IDisposable</p>"},{"location":"reference/stardewui/framework/binding/iviewnode/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/iviewnode/#properties","title":"Properties","text":"Name Description Children The children of this node. Context The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes. Views The views for this node, if any have been created."},{"location":"reference/stardewui/framework/binding/iviewnode/#methods","title":"Methods","text":"Name Description Print(StringBuilder, Boolean) Prints the string representation of this node. Reset() Clears any Views associated with this node and resets it to the default state before it was bound. Update(TimeSpan) Performs the regular per-frame update for this node."},{"location":"reference/stardewui/framework/binding/iviewnode/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/iviewnode/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/iviewnode/#children","title":"Children","text":"<p>The children of this node.</p> <pre><code>System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Binding.IViewNode.Child&gt; Children { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnode/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;Child&gt;</p>"},{"location":"reference/stardewui/framework/binding/iviewnode/#remarks","title":"Remarks","text":"<p>Node children represent views in potentia. Every DOM node maps to (at least) one IViewNode, but views are created lazily and may not exist for nodes with conditional attributes or other rules.</p>"},{"location":"reference/stardewui/framework/binding/iviewnode/#context","title":"Context","text":"<p>The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes.</p> <pre><code>StardewUI.Framework.Binding.BindingContext Context { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnode/#property-value_1","title":"Property Value","text":"<p>BindingContext</p>"},{"location":"reference/stardewui/framework/binding/iviewnode/#views","title":"Views","text":"<p>The views for this node, if any have been created.</p> <pre><code>System.Collections.Generic.IReadOnlyList&lt;StardewUI.IView&gt; Views { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnode/#property-value_2","title":"Property Value","text":"<p>IReadOnlyList&lt;IView&gt;</p>"},{"location":"reference/stardewui/framework/binding/iviewnode/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/iviewnode/#printstringbuilder-bool","title":"Print(StringBuilder, bool)","text":"<p>Prints the string representation of this node.</p> <pre><code>void Print(System.Text.StringBuilder sb, bool includeChildren);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnode/#parameters","title":"Parameters","text":"<p><code>sb</code> StringBuilder The output builder to receive to the node's text.</p> <p><code>includeChildren</code> Boolean Whether or not to include the string representation of any/all child nodes between this node's opening and close tags. If this is <code>false</code> or there are no children, it will be formatted as a self-closing tag.</p>"},{"location":"reference/stardewui/framework/binding/iviewnode/#reset","title":"Reset()","text":"<p>Clears any Views associated with this node and resets it to the default state before it was bound.</p> <pre><code>void Reset();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnode/#remarks_1","title":"Remarks","text":"<p>Propagates the request down to Children, but is not required to clear Children and does not affect the Context assignment. </p> <p>This is used to \"unbind\" the target of a structural node like ConditionalNode and in some cases prepare it for subsequent reuse.</p>"},{"location":"reference/stardewui/framework/binding/iviewnode/#updatetimespan","title":"Update(TimeSpan)","text":"<p>Performs the regular per-frame update for this node.</p> <pre><code>bool Update(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnode/#parameters_1","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan Time elapsed since last update.</p>"},{"location":"reference/stardewui/framework/binding/iviewnode/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if any aspect of the view tree from this level downward was changed, i.e. as a result of a new Context, changed context properties, invalidated assets, or the View being created for the first time; <code>false</code> if no changes were made.</p>"},{"location":"reference/stardewui/framework/binding/iviewnodefactory/","title":"IViewNodeFactory","text":""},{"location":"reference/stardewui/framework/binding/iviewnodefactory/#interface-iviewnodefactory","title":"Interface IViewNodeFactory","text":""},{"location":"reference/stardewui/framework/binding/iviewnodefactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>High-level abstraction for translating node trees into bound view trees.</p> <pre><code>public interface IViewNodeFactory\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnodefactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/iviewnodefactory/#methods","title":"Methods","text":"Name Description CreateNode(Document) Creates a bound view node, and all descendants, from the root of a parsed Document. CreateNode(SNode, IReadOnlyList&lt;INodeTransformer&gt;, IResolutionScope) Creates a bound view node, and all descendants, from parsed node data."},{"location":"reference/stardewui/framework/binding/iviewnodefactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/iviewnodefactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/iviewnodefactory/#createnodedocument","title":"CreateNode(Document)","text":"<p>Creates a bound view node, and all descendants, from the root of a parsed Document.</p> <pre><code>StardewUI.Framework.Binding.IViewNode CreateNode(StardewUI.Framework.Dom.Document document);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnodefactory/#parameters","title":"Parameters","text":"<p><code>document</code> Document The markup document.</p>"},{"location":"reference/stardewui/framework/binding/iviewnodefactory/#returns","title":"Returns","text":"<p>IViewNode</p> <p>An IViewNode providing the IView bound with the node's attributes and children, which automatically applies changes on each Update(TimeSpan).</p>"},{"location":"reference/stardewui/framework/binding/iviewnodefactory/#remarks","title":"Remarks","text":"<p>This method automatically infers the correct IResolutionScope, so it does not require an explicit scope to be given.</p>"},{"location":"reference/stardewui/framework/binding/iviewnodefactory/#createnodesnode-ireadonlylistinodetransformer-iresolutionscope","title":"CreateNode(SNode, IReadOnlyList&lt;INodeTransformer&gt;, IResolutionScope)","text":"<p>Creates a bound view node, and all descendants, from parsed node data.</p> <pre><code>StardewUI.Framework.Binding.IViewNode CreateNode(StardewUI.Framework.Dom.SNode node, System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.INodeTransformer&gt; nodeTransformers, StardewUI.Framework.Content.IResolutionScope resolutionScope);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/iviewnodefactory/#parameters_1","title":"Parameters","text":"<p><code>node</code> SNode The node data.</p> <p><code>nodeTransformers</code> IReadOnlyList&lt;INodeTransformer&gt; Transformers to run on each document node before using it to create a runtime (bound) view node.</p> <p><code>resolutionScope</code> IResolutionScope Scope for resolving externalized attributes, such as translation keys.</p>"},{"location":"reference/stardewui/framework/binding/iviewnodefactory/#returns_1","title":"Returns","text":"<p>IViewNode</p> <p>An IViewNode providing the IView bound with the node's attributes and children, which automatically applies changes on each Update(TimeSpan).</p>"},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/","title":"ReflectionViewBinder","text":""},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#class-reflectionviewbinder","title":"Class ReflectionViewBinder","text":""},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>An IViewBinder implementation using reflected view descriptors.</p> <pre><code>public class ReflectionViewBinder : StardewUI.Framework.Binding.IViewBinder\n</code></pre> <p>Inheritance Object \u21e6 ReflectionViewBinder</p> <p>Implements IViewBinder</p>"},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#constructors","title":"Constructors","text":"Name Description ReflectionViewBinder(IAttributeBindingFactory, IEventBindingFactory) An IViewBinder implementation using reflected view descriptors."},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#methods","title":"Methods","text":"Name Description Bind(IView, IElement, BindingContext, IResolutionScope) Creates a view binding. GetDescriptor(IView) Retrieves the descriptor for a view, which provides information about its properties."},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#reflectionviewbinderiattributebindingfactory-ieventbindingfactory","title":"ReflectionViewBinder(IAttributeBindingFactory, IEventBindingFactory)","text":"<p>An IViewBinder implementation using reflected view descriptors.</p> <pre><code>public ReflectionViewBinder(StardewUI.Framework.Binding.IAttributeBindingFactory attributeBindingFactory, StardewUI.Framework.Binding.IEventBindingFactory eventBindingFactory);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#parameters","title":"Parameters","text":"<p><code>attributeBindingFactory</code> IAttributeBindingFactory Factory for creating the IAttributeBinding instances used to bind individual attributes of the view.</p> <p><code>eventBindingFactory</code> IEventBindingFactory Factory for creating the IEventBinding instances used to bind events raised by the view.</p>"},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#bindiview-ielement-bindingcontext-iresolutionscope","title":"Bind(IView, IElement, BindingContext, IResolutionScope)","text":"<p>Creates a view binding.</p> <pre><code>public StardewUI.Framework.Binding.IViewBinding Bind(StardewUI.IView view, StardewUI.Framework.Dom.IElement element, StardewUI.Framework.Binding.BindingContext context, StardewUI.Framework.Content.IResolutionScope resolutionScope);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#parameters_1","title":"Parameters","text":"<p><code>view</code> IView The view that will be bound.</p> <p><code>element</code> IElement The element data providing the literal or binding attributes.</p> <p><code>context</code> BindingContext The binding context/data, for any non-asset bindings using bindings whose AttributeValueType is one of the recognized IsContextBinding(AttributeValueType) types.</p> <p><code>resolutionScope</code> IResolutionScope Scope for resolving externalized attributes, such as translation keys.</p>"},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#returns","title":"Returns","text":"<p>IViewBinding</p> <p>A view binding that can be used to propagate changes in the <code>context</code> or any dependent assets to the <code>view</code>.</p>"},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#getdescriptoriview","title":"GetDescriptor(IView)","text":"<p>Retrieves the descriptor for a view, which provides information about its properties.</p> <pre><code>public StardewUI.Framework.Descriptors.IViewDescriptor GetDescriptor(StardewUI.IView view);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#parameters_2","title":"Parameters","text":"<p><code>view</code> IView The view instance.</p>"},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#returns_1","title":"Returns","text":"<p>IViewDescriptor</p> <p>The descriptor for the <code>view</code>.</p>"},{"location":"reference/stardewui/framework/binding/reflectionviewbinder/#remarks","title":"Remarks","text":"<p>Descriptors participate in view binding but may also be used for other purposes, such as updating child lists.</p>"},{"location":"reference/stardewui/framework/binding/repeaternode/","title":"RepeaterNode","text":""},{"location":"reference/stardewui/framework/binding/repeaternode/#class-repeaternode","title":"Class RepeaterNode","text":""},{"location":"reference/stardewui/framework/binding/repeaternode/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>A structural node that accepts a collection (IEnumerable&lt;T&gt;) valued attribute and repeats its inner elements with each child bound to a collection element, in the same order as the collection.</p> <pre><code>public class RepeaterNode : StardewUI.Framework.Binding.IViewNode, \n    System.IDisposable\n</code></pre> <p>Inheritance Object \u21e6 RepeaterNode</p> <p>Implements IViewNode, IDisposable</p>"},{"location":"reference/stardewui/framework/binding/repeaternode/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/repeaternode/#constructors","title":"Constructors","text":"Name Description RepeaterNode(IValueSourceFactory, Func&lt;Child&gt;, IResolutionScope, IAttribute) A structural node that accepts a collection (IEnumerable&lt;T&gt;) valued attribute and repeats its inner elements with each child bound to a collection element, in the same order as the collection."},{"location":"reference/stardewui/framework/binding/repeaternode/#properties","title":"Properties","text":"Name Description Children The children of this node. Context The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes. Views The views for this node, if any have been created."},{"location":"reference/stardewui/framework/binding/repeaternode/#methods","title":"Methods","text":"Name Description Dispose() Print(StringBuilder, Boolean) Prints the string representation of this node. Reset() Clears any Views associated with this node and resets it to the default state before it was bound. ToString() (Overrides Object.<code>ToString()</code>) Update(TimeSpan) Performs the regular per-frame update for this node."},{"location":"reference/stardewui/framework/binding/repeaternode/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/repeaternode/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/repeaternode/#repeaternodeivaluesourcefactory-funcchild-iresolutionscope-iattribute","title":"RepeaterNode(IValueSourceFactory, Func&lt;Child&gt;, IResolutionScope, IAttribute)","text":"<p>A structural node that accepts a collection (IEnumerable&lt;T&gt;) valued attribute and repeats its inner elements with each child bound to a collection element, in the same order as the collection.</p> <pre><code>public RepeaterNode(StardewUI.Framework.Sources.IValueSourceFactory valueSourceFactory, Func&lt;StardewUI.Framework.Binding.IViewNode.Child&gt; childCreator, StardewUI.Framework.Content.IResolutionScope resolutionScope, StardewUI.Framework.Dom.IAttribute repeatAttribute);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/repeaternode/#parameters","title":"Parameters","text":"<p><code>valueSourceFactory</code> IValueSourceFactory The factory responsible for creating IValueSource&lt;T&gt; instances from attribute data.</p> <p><code>childCreator</code> Func&lt;Child&gt; Delegate for creating a new child node.</p> <p><code>resolutionScope</code> IResolutionScope Scope for resolving externalized attributes, such as translation keys.</p> <p><code>repeatAttribute</code> IAttribute The attribute containing the collection expression.</p>"},{"location":"reference/stardewui/framework/binding/repeaternode/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/repeaternode/#children","title":"Children","text":"<p>The children of this node.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Binding.IViewNode.Child&gt; Children { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/repeaternode/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;Child&gt;</p>"},{"location":"reference/stardewui/framework/binding/repeaternode/#remarks","title":"Remarks","text":"<p>Node children represent views in potentia. Every DOM node maps to (at least) one IViewNode, but views are created lazily and may not exist for nodes with conditional attributes or other rules.</p>"},{"location":"reference/stardewui/framework/binding/repeaternode/#context","title":"Context","text":"<p>The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes.</p> <pre><code>public StardewUI.Framework.Binding.BindingContext Context { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/repeaternode/#property-value_1","title":"Property Value","text":"<p>BindingContext</p>"},{"location":"reference/stardewui/framework/binding/repeaternode/#views","title":"Views","text":"<p>The views for this node, if any have been created.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.IView&gt; Views { get; private set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/repeaternode/#property-value_2","title":"Property Value","text":"<p>IReadOnlyList&lt;IView&gt;</p>"},{"location":"reference/stardewui/framework/binding/repeaternode/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/repeaternode/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/repeaternode/#printstringbuilder-bool","title":"Print(StringBuilder, bool)","text":"<p>Prints the string representation of this node.</p> <pre><code>public void Print(System.Text.StringBuilder sb, bool includeChildren);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/repeaternode/#parameters_1","title":"Parameters","text":"<p><code>sb</code> StringBuilder The output builder to receive to the node's text.</p> <p><code>includeChildren</code> Boolean Whether or not to include the string representation of any/all child nodes between this node's opening and close tags. If this is <code>false</code> or there are no children, it will be formatted as a self-closing tag.</p>"},{"location":"reference/stardewui/framework/binding/repeaternode/#reset","title":"Reset()","text":"<p>Clears any Views associated with this node and resets it to the default state before it was bound.</p> <pre><code>public void Reset();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/repeaternode/#remarks_1","title":"Remarks","text":"<p>Propagates the request down to Children, but is not required to clear Children and does not affect the Context assignment. </p> <p>This is used to \"unbind\" the target of a structural node like ConditionalNode and in some cases prepare it for subsequent reuse.</p>"},{"location":"reference/stardewui/framework/binding/repeaternode/#tostring","title":"ToString()","text":"<pre><code>public override string ToString();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/repeaternode/#returns","title":"Returns","text":"<p>string</p>"},{"location":"reference/stardewui/framework/binding/repeaternode/#updatetimespan","title":"Update(TimeSpan)","text":"<p>Performs the regular per-frame update for this node.</p> <pre><code>public bool Update(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/repeaternode/#parameters_2","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan Time elapsed since last update.</p>"},{"location":"reference/stardewui/framework/binding/repeaternode/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if any aspect of the view tree from this level downward was changed, i.e. as a result of a new Context, changed context properties, invalidated assets, or the View being created for the first time; <code>false</code> if no changes were made.</p>"},{"location":"reference/stardewui/framework/binding/unarycondition/","title":"UnaryCondition","text":""},{"location":"reference/stardewui/framework/binding/unarycondition/#class-unarycondition","title":"Class UnaryCondition","text":""},{"location":"reference/stardewui/framework/binding/unarycondition/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>A condition based on a single value that is convertible to a Boolean.</p> <pre><code>public class UnaryCondition : StardewUI.Framework.Binding.ICondition, \n    System.IDisposable\n</code></pre> <p>Inheritance Object \u21e6 UnaryCondition</p> <p>Implements ICondition, IDisposable</p>"},{"location":"reference/stardewui/framework/binding/unarycondition/#remarks","title":"Remarks","text":"<p>Passes whenever the value's boolean representation is <code>true</code>. Used for <code>*if</code> attributes.</p>"},{"location":"reference/stardewui/framework/binding/unarycondition/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/unarycondition/#constructors","title":"Constructors","text":"Name Description UnaryCondition(IValueSourceFactory, IValueConverterFactory, IResolutionScope, IAttribute) A condition based on a single value that is convertible to a Boolean."},{"location":"reference/stardewui/framework/binding/unarycondition/#properties","title":"Properties","text":"Name Description Context The context for evaluating the condition; i.e. the context of the node to which the condition applies. Passed Whether or not the condition was passing as of the last Update()."},{"location":"reference/stardewui/framework/binding/unarycondition/#methods","title":"Methods","text":"Name Description Dispose() Update() Re-evaluates the condition and updates the Passed state."},{"location":"reference/stardewui/framework/binding/unarycondition/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/unarycondition/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/unarycondition/#unaryconditionivaluesourcefactory-ivalueconverterfactory-iresolutionscope-iattribute","title":"UnaryCondition(IValueSourceFactory, IValueConverterFactory, IResolutionScope, IAttribute)","text":"<p>A condition based on a single value that is convertible to a Boolean.</p> <pre><code>public UnaryCondition(StardewUI.Framework.Sources.IValueSourceFactory valueSourceFactory, StardewUI.Framework.Converters.IValueConverterFactory valueConverterFactory, StardewUI.Framework.Content.IResolutionScope resolutionScope, StardewUI.Framework.Dom.IAttribute attribute);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/unarycondition/#parameters","title":"Parameters","text":"<p><code>valueSourceFactory</code> IValueSourceFactory The factory responsible for creating IValueSource&lt;T&gt; instances from attribute data.</p> <p><code>valueConverterFactory</code> IValueConverterFactory The factory responsible for creating IValueConverter&lt;TSource, TDestination&gt; instances, used to convert bound values to the types required by the target view.</p> <p><code>resolutionScope</code> IResolutionScope Scope for resolving externalized attributes, such as translation keys.</p> <p><code>attribute</code> IAttribute The attribute containing the conditional expression.</p>"},{"location":"reference/stardewui/framework/binding/unarycondition/#remarks_1","title":"Remarks","text":"<p>Passes whenever the value's boolean representation is <code>true</code>. Used for <code>*if</code> attributes.</p>"},{"location":"reference/stardewui/framework/binding/unarycondition/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/unarycondition/#context","title":"Context","text":"<p>The context for evaluating the condition; i.e. the context of the node to which the condition applies.</p> <pre><code>public StardewUI.Framework.Binding.BindingContext Context { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/unarycondition/#property-value","title":"Property Value","text":"<p>BindingContext</p>"},{"location":"reference/stardewui/framework/binding/unarycondition/#passed","title":"Passed","text":"<p>Whether or not the condition was passing as of the last Update().</p> <pre><code>public bool Passed { get; private set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/unarycondition/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/binding/unarycondition/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/unarycondition/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/unarycondition/#update","title":"Update()","text":"<p>Re-evaluates the condition and updates the Passed state.</p> <pre><code>public void Update();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewfactory/","title":"ViewFactory","text":""},{"location":"reference/stardewui/framework/binding/viewfactory/#class-viewfactory","title":"Class ViewFactory","text":""},{"location":"reference/stardewui/framework/binding/viewfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>A view factory based on per-tag delegates. Can be used as a base class for other view factories.</p> <pre><code>public class ViewFactory : StardewUI.Framework.Binding.IViewFactory\n</code></pre> <p>Inheritance Object \u21e6 ViewFactory</p> <p>Implements IViewFactory</p>"},{"location":"reference/stardewui/framework/binding/viewfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/viewfactory/#constructors","title":"Constructors","text":"Name Description ViewFactory()"},{"location":"reference/stardewui/framework/binding/viewfactory/#methods","title":"Methods","text":"Name Description CreateView(string) Creates a new view. Register&lt;TView&gt;(string) Registers a view for a given tag using the view's default parameterless constructor. Register(string, Func&lt;IView&gt;) Registers a view for a given tag using a delegate function. SupportsTag(string) Checks if the factory can create views corresponding to a specific tag."},{"location":"reference/stardewui/framework/binding/viewfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/viewfactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/viewfactory/#viewfactory","title":"ViewFactory()","text":"<pre><code>public ViewFactory();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/viewfactory/#createviewstring","title":"CreateView(string)","text":"<p>Creates a new view.</p> <pre><code>public virtual StardewUI.IView CreateView(string tagName);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewfactory/#parameters","title":"Parameters","text":"<p><code>tagName</code> string The markup tag that specifies the type of view.</p>"},{"location":"reference/stardewui/framework/binding/viewfactory/#returns","title":"Returns","text":"<p>IView</p> <p>A new view of a type corresponding to the <code>tagName</code>.</p>"},{"location":"reference/stardewui/framework/binding/viewfactory/#registertviewstring","title":"Register&lt;TView&gt;(string)","text":"<p>Registers a view for a given tag using the view's default parameterless constructor.</p> <pre><code>public void Register&lt;TView&gt;(string tagName);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewfactory/#parameters_1","title":"Parameters","text":"<p><code>tagName</code> string The markup tag corresponding to the <code>TView</code> type.</p>"},{"location":"reference/stardewui/framework/binding/viewfactory/#registerstring-funciview","title":"Register(string, Func&lt;IView&gt;)","text":"<p>Registers a view for a given tag using a delegate function.</p> <pre><code>public void Register(string tagName, Func&lt;StardewUI.IView&gt; tagFactory);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewfactory/#parameters_2","title":"Parameters","text":"<p><code>tagName</code> string The markup tag to handle.</p> <p><code>tagFactory</code> Func&lt;IView&gt; Delegate function to create the view corresponding to the <code>tagName</code>.</p>"},{"location":"reference/stardewui/framework/binding/viewfactory/#supportstagstring","title":"SupportsTag(string)","text":"<p>Checks if the factory can create views corresponding to a specific tag.</p> <pre><code>public virtual bool SupportsTag(string tagName);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewfactory/#parameters_3","title":"Parameters","text":"<p><code>tagName</code> string The markup tag that specifies the type of view.</p>"},{"location":"reference/stardewui/framework/binding/viewfactory/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if this factory should handle the specified <code>tagName</code>, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/binding/viewnode/","title":"ViewNode","text":""},{"location":"reference/stardewui/framework/binding/viewnode/#class-viewnode","title":"Class ViewNode","text":""},{"location":"reference/stardewui/framework/binding/viewnode/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Internal structure of a view node, encapsulating dependencies required for data binding and lazy creation/updates.</p> <pre><code>public class ViewNode : StardewUI.Framework.Binding.IViewNode, \n    System.IDisposable\n</code></pre> <p>Inheritance Object \u21e6 ViewNode</p> <p>Implements IViewNode, IDisposable</p>"},{"location":"reference/stardewui/framework/binding/viewnode/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/viewnode/#constructors","title":"Constructors","text":"Name Description ViewNode(IValueSourceFactory, IViewFactory, IViewBinder, SElement, IResolutionScope, IAttribute) Internal structure of a view node, encapsulating dependencies required for data binding and lazy creation/updates."},{"location":"reference/stardewui/framework/binding/viewnode/#properties","title":"Properties","text":"Name Description Children The children of this node. Context The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes. Views The views for this node, if any have been created."},{"location":"reference/stardewui/framework/binding/viewnode/#methods","title":"Methods","text":"Name Description Dispose() Print(StringBuilder, Boolean) Prints the string representation of this node. Reset() Clears any Views associated with this node and resets it to the default state before it was bound. ToString() (Overrides Object.<code>ToString()</code>) Update(TimeSpan) Performs the regular per-frame update for this node."},{"location":"reference/stardewui/framework/binding/viewnode/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/viewnode/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/viewnode/#viewnodeivaluesourcefactory-iviewfactory-iviewbinder-selement-iresolutionscope-iattribute","title":"ViewNode(IValueSourceFactory, IViewFactory, IViewBinder, SElement, IResolutionScope, IAttribute)","text":"<p>Internal structure of a view node, encapsulating dependencies required for data binding and lazy creation/updates.</p> <pre><code>public ViewNode(StardewUI.Framework.Sources.IValueSourceFactory valueSourceFactory, StardewUI.Framework.Binding.IViewFactory viewFactory, StardewUI.Framework.Binding.IViewBinder viewBinder, StardewUI.Framework.Dom.SElement element, StardewUI.Framework.Content.IResolutionScope resolutionScope, StardewUI.Framework.Dom.IAttribute contextAttribute);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewnode/#parameters","title":"Parameters","text":"<p><code>valueSourceFactory</code> IValueSourceFactory The factory responsible for creating IValueSource&lt;T&gt; instances from attribute data.</p> <p><code>viewFactory</code> IViewFactory Factory for creating views, based on their tag names.</p> <p><code>viewBinder</code> IViewBinder Binding service used to create IViewBinding instances that detect changes to data or assets and propagate them to the bound IView.</p> <p><code>element</code> SElement Element data for this node.</p> <p><code>resolutionScope</code> IResolutionScope Scope for resolving externalized attributes, such as translation keys.</p> <p><code>contextAttribute</code> IAttribute Optional attribute specifying how to resolve the context for child nodes based on this node's assigned Context.</p>"},{"location":"reference/stardewui/framework/binding/viewnode/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/binding/viewnode/#children","title":"Children","text":"<p>The children of this node.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Binding.IViewNode.Child&gt; Children { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewnode/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;Child&gt;</p>"},{"location":"reference/stardewui/framework/binding/viewnode/#remarks","title":"Remarks","text":"<p>Node children represent views in potentia. Every DOM node maps to (at least) one IViewNode, but views are created lazily and may not exist for nodes with conditional attributes or other rules.</p>"},{"location":"reference/stardewui/framework/binding/viewnode/#context","title":"Context","text":"<p>The currently-bound context data, used as the source for any InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding attributes.</p> <pre><code>public StardewUI.Framework.Binding.BindingContext Context { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewnode/#property-value_1","title":"Property Value","text":"<p>BindingContext</p>"},{"location":"reference/stardewui/framework/binding/viewnode/#views","title":"Views","text":"<p>The views for this node, if any have been created.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.IView&gt; Views { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewnode/#property-value_2","title":"Property Value","text":"<p>IReadOnlyList&lt;IView&gt;</p>"},{"location":"reference/stardewui/framework/binding/viewnode/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/viewnode/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewnode/#printstringbuilder-bool","title":"Print(StringBuilder, bool)","text":"<p>Prints the string representation of this node.</p> <pre><code>public void Print(System.Text.StringBuilder sb, bool includeChildren);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewnode/#parameters_1","title":"Parameters","text":"<p><code>sb</code> StringBuilder The output builder to receive to the node's text.</p> <p><code>includeChildren</code> Boolean Whether or not to include the string representation of any/all child nodes between this node's opening and close tags. If this is <code>false</code> or there are no children, it will be formatted as a self-closing tag.</p>"},{"location":"reference/stardewui/framework/binding/viewnode/#reset","title":"Reset()","text":"<p>Clears any Views associated with this node and resets it to the default state before it was bound.</p> <pre><code>public void Reset();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewnode/#remarks_1","title":"Remarks","text":"<p>Propagates the request down to Children, but is not required to clear Children and does not affect the Context assignment. </p> <p>This is used to \"unbind\" the target of a structural node like ConditionalNode and in some cases prepare it for subsequent reuse.</p>"},{"location":"reference/stardewui/framework/binding/viewnode/#tostring","title":"ToString()","text":"<pre><code>public override string ToString();\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewnode/#returns","title":"Returns","text":"<p>string</p>"},{"location":"reference/stardewui/framework/binding/viewnode/#updatetimespan","title":"Update(TimeSpan)","text":"<p>Performs the regular per-frame update for this node.</p> <pre><code>public bool Update(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewnode/#parameters_2","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan Time elapsed since last update.</p>"},{"location":"reference/stardewui/framework/binding/viewnode/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if any aspect of the view tree from this level downward was changed, i.e. as a result of a new Context, changed context properties, invalidated assets, or the View being created for the first time; <code>false</code> if no changes were made.</p>"},{"location":"reference/stardewui/framework/binding/viewnodefactory/","title":"ViewNodeFactory","text":""},{"location":"reference/stardewui/framework/binding/viewnodefactory/#class-viewnodefactory","title":"Class ViewNodeFactory","text":""},{"location":"reference/stardewui/framework/binding/viewnodefactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Binding Assembly: StardewUI.dll  </p> <p>Default in-game view engine.</p> <pre><code>public class ViewNodeFactory : StardewUI.Framework.Binding.IViewNodeFactory\n</code></pre> <p>Inheritance Object \u21e6 ViewNodeFactory</p> <p>Implements IViewNodeFactory</p>"},{"location":"reference/stardewui/framework/binding/viewnodefactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/binding/viewnodefactory/#constructors","title":"Constructors","text":"Name Description ViewNodeFactory(IViewFactory, IValueSourceFactory, IValueConverterFactory, IViewBinder, IAssetCache, IResolutionScopeFactory) Default in-game view engine."},{"location":"reference/stardewui/framework/binding/viewnodefactory/#methods","title":"Methods","text":"Name Description CreateNode(Document) Creates a bound view node, and all descendants, from the root of a parsed Document. CreateNode(SNode, IReadOnlyList&lt;INodeTransformer&gt;, IResolutionScope) Creates a bound view node, and all descendants, from parsed node data."},{"location":"reference/stardewui/framework/binding/viewnodefactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/binding/viewnodefactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/binding/viewnodefactory/#viewnodefactoryiviewfactory-ivaluesourcefactory-ivalueconverterfactory-iviewbinder-iassetcache-iresolutionscopefactory","title":"ViewNodeFactory(IViewFactory, IValueSourceFactory, IValueConverterFactory, IViewBinder, IAssetCache, IResolutionScopeFactory)","text":"<p>Default in-game view engine.</p> <pre><code>public ViewNodeFactory(StardewUI.Framework.Binding.IViewFactory viewFactory, StardewUI.Framework.Sources.IValueSourceFactory valueSourceFactory, StardewUI.Framework.Converters.IValueConverterFactory valueConverterFactory, StardewUI.Framework.Binding.IViewBinder viewBinder, StardewUI.Framework.Content.IAssetCache assetCache, StardewUI.Framework.Content.IResolutionScopeFactory resolutionScopeFactory);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewnodefactory/#parameters","title":"Parameters","text":"<p><code>viewFactory</code> IViewFactory Factory for creating views, based on their tag names.</p> <p><code>valueSourceFactory</code> IValueSourceFactory The factory responsible for creating IValueSource&lt;T&gt; instances from attribute data.</p> <p><code>valueConverterFactory</code> IValueConverterFactory The factory responsible for creating IValueConverter&lt;TSource, TDestination&gt; instances, used to convert bound values to the types required by the target view or structural property.</p> <p><code>viewBinder</code> IViewBinder Binding service used to create IViewBinding instances that detect changes to data or assets and propagate them to the bound IView.</p> <p><code>assetCache</code> IAssetCache Cache for obtaining document assets. Used for included views.</p> <p><code>resolutionScopeFactory</code> IResolutionScopeFactory Factory for creating IResolutionScope instances responsible for resolving external symbols such as translation keys.</p>"},{"location":"reference/stardewui/framework/binding/viewnodefactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/binding/viewnodefactory/#createnodedocument","title":"CreateNode(Document)","text":"<p>Creates a bound view node, and all descendants, from the root of a parsed Document.</p> <pre><code>public StardewUI.Framework.Binding.IViewNode CreateNode(StardewUI.Framework.Dom.Document document);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewnodefactory/#parameters_1","title":"Parameters","text":"<p><code>document</code> Document The markup document.</p>"},{"location":"reference/stardewui/framework/binding/viewnodefactory/#returns","title":"Returns","text":"<p>IViewNode</p> <p>An IViewNode providing the IView bound with the node's attributes and children, which automatically applies changes on each Update(TimeSpan).</p>"},{"location":"reference/stardewui/framework/binding/viewnodefactory/#remarks","title":"Remarks","text":"<p>This method automatically infers the correct IResolutionScope, so it does not require an explicit scope to be given.</p>"},{"location":"reference/stardewui/framework/binding/viewnodefactory/#createnodesnode-ireadonlylistinodetransformer-iresolutionscope","title":"CreateNode(SNode, IReadOnlyList&lt;INodeTransformer&gt;, IResolutionScope)","text":"<p>Creates a bound view node, and all descendants, from parsed node data.</p> <pre><code>public StardewUI.Framework.Binding.IViewNode CreateNode(StardewUI.Framework.Dom.SNode node, System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.INodeTransformer&gt; nodeTransformers, StardewUI.Framework.Content.IResolutionScope resolutionScope);\n</code></pre>"},{"location":"reference/stardewui/framework/binding/viewnodefactory/#parameters_2","title":"Parameters","text":"<p><code>node</code> SNode The node data.</p> <p><code>nodeTransformers</code> IReadOnlyList&lt;INodeTransformer&gt; Transformers to run on each document node before using it to create a runtime (bound) view node.</p> <p><code>resolutionScope</code> IResolutionScope Scope for resolving externalized attributes, such as translation keys.</p>"},{"location":"reference/stardewui/framework/binding/viewnodefactory/#returns_1","title":"Returns","text":"<p>IViewNode</p> <p>An IViewNode providing the IView bound with the node's attributes and children, which automatically applies changes on each Update(TimeSpan).</p>"},{"location":"reference/stardewui/framework/content/","title":"StardewUI.Framework.Content","text":""},{"location":"reference/stardewui/framework/content/#stardewuiframeworkcontent-namespace","title":"StardewUI.Framework.Content Namespace","text":""},{"location":"reference/stardewui/framework/content/#classes","title":"Classes","text":"Name Description AssetCache Standard in-game implementation of the asset cache based on SMAPI's helpers and events."},{"location":"reference/stardewui/framework/content/#interfaces","title":"Interfaces","text":"Name Description IAssetCache Cache used for asset-based view bindings. IAssetCacheEntry&lt;T&gt; Entry retrieved from an IAssetCache. IResolutionScope Defines a scope in which certain types of external and potentially ambiguous binding attributes may be resolved. IResolutionScopeFactory Factory for creating IResolutionScope instances. ISourceResolver Provides a method to connect a parsed Document back to the mod that provided it."},{"location":"reference/stardewui/framework/content/assetcache/","title":"AssetCache","text":""},{"location":"reference/stardewui/framework/content/assetcache/#class-assetcache","title":"Class AssetCache","text":""},{"location":"reference/stardewui/framework/content/assetcache/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Content Assembly: StardewUI.dll  </p> <p>Standard in-game implementation of the asset cache based on SMAPI's helpers and events.</p> <pre><code>public class AssetCache : StardewUI.Framework.Content.IAssetCache\n</code></pre> <p>Inheritance Object \u21e6 AssetCache</p> <p>Implements IAssetCache</p>"},{"location":"reference/stardewui/framework/content/assetcache/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/content/assetcache/#constructors","title":"Constructors","text":"Name Description AssetCache(IGameContentHelper, IContentEvents) Initializes a new instance of AssetCache."},{"location":"reference/stardewui/framework/content/assetcache/#methods","title":"Methods","text":"Name Description Get&lt;T&gt;(string) Retrieves the current entry for a given asset name."},{"location":"reference/stardewui/framework/content/assetcache/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/content/assetcache/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/content/assetcache/#assetcacheigamecontenthelper-icontentevents","title":"AssetCache(IGameContentHelper, IContentEvents)","text":"<p>Initializes a new instance of AssetCache.</p> <pre><code>public AssetCache(StardewModdingAPI.IGameContentHelper content, StardewModdingAPI.Events.IContentEvents events);\n</code></pre>"},{"location":"reference/stardewui/framework/content/assetcache/#parameters","title":"Parameters","text":"<p><code>content</code> \u00a0 IGameContentHelper SMAPI content helper, used to load the assets.</p> <p><code>events</code> \u00a0 IContentEvents SMAPI content events, used to detect invalidation.</p>"},{"location":"reference/stardewui/framework/content/assetcache/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/content/assetcache/#gettstring","title":"Get&lt;T&gt;(string)","text":"<p>Retrieves the current entry for a given asset name.</p> <pre><code>public StardewUI.Framework.Content.IAssetCacheEntry&lt;T&gt; Get&lt;T&gt;(string name);\n</code></pre>"},{"location":"reference/stardewui/framework/content/assetcache/#parameters_1","title":"Parameters","text":"<p><code>name</code> string Name of the asset.</p>"},{"location":"reference/stardewui/framework/content/assetcache/#returns","title":"Returns","text":"<p>IAssetCacheEntry&lt;T&gt;</p> <p>A cache entry object that contains the most current asset data, and an expired flag to detect if the asset is no longer valid in the future.</p>"},{"location":"reference/stardewui/framework/content/assetcache/#remarks","title":"Remarks","text":"<p>If the asset was invalidated by SMAPI and has not yet been reloaded, then this will trigger a reload.</p>"},{"location":"reference/stardewui/framework/content/iassetcache/","title":"IAssetCache","text":""},{"location":"reference/stardewui/framework/content/iassetcache/#interface-iassetcache","title":"Interface IAssetCache","text":""},{"location":"reference/stardewui/framework/content/iassetcache/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Content Assembly: StardewUI.dll  </p> <p>Cache used for asset-based view bindings.</p> <pre><code>public interface IAssetCache\n</code></pre>"},{"location":"reference/stardewui/framework/content/iassetcache/#remarks","title":"Remarks","text":"<p>Similar to SMAPI's content helpers, but instead of providing just the current asset at the time of the request, returns entry objects with an expired flag for effective (and performant) use in Update(Boolean).</p>"},{"location":"reference/stardewui/framework/content/iassetcache/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/content/iassetcache/#methods","title":"Methods","text":"Name Description Get&lt;T&gt;(string) Retrieves the current entry for a given asset name."},{"location":"reference/stardewui/framework/content/iassetcache/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/content/iassetcache/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/content/iassetcache/#gettstring","title":"Get&lt;T&gt;(string)","text":"<p>Retrieves the current entry for a given asset name.</p> <pre><code>StardewUI.Framework.Content.IAssetCacheEntry&lt;T&gt; Get&lt;T&gt;(string name);\n</code></pre>"},{"location":"reference/stardewui/framework/content/iassetcache/#parameters","title":"Parameters","text":"<p><code>name</code> string Name of the asset.</p>"},{"location":"reference/stardewui/framework/content/iassetcache/#returns","title":"Returns","text":"<p>IAssetCacheEntry&lt;T&gt;</p> <p>A cache entry object that contains the most current asset data, and an expired flag to detect if the asset is no longer valid in the future.</p>"},{"location":"reference/stardewui/framework/content/iassetcache/#remarks_1","title":"Remarks","text":"<p>If the asset was invalidated by SMAPI and has not yet been reloaded, then this will trigger a reload.</p>"},{"location":"reference/stardewui/framework/content/iassetcacheentry-1/","title":"IAssetCacheEntry&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/content/iassetcacheentry-1/#interface-iassetcacheentryt","title":"Interface IAssetCacheEntry&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/content/iassetcacheentry-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Content Assembly: StardewUI.dll  </p> <p>Entry retrieved from an IAssetCache.</p> <pre><code>public interface IAssetCacheEntry&lt;T&gt;\n</code></pre>"},{"location":"reference/stardewui/framework/content/iassetcacheentry-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> Type of cached asset.</p>"},{"location":"reference/stardewui/framework/content/iassetcacheentry-1/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/content/iassetcacheentry-1/#properties","title":"Properties","text":"Name Description Asset The cached asset. IsValid Whether or not the Asset is valid and can be accessed."},{"location":"reference/stardewui/framework/content/iassetcacheentry-1/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/content/iassetcacheentry-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/content/iassetcacheentry-1/#asset","title":"Asset","text":"<p>The cached asset.</p> <pre><code>T Asset { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/content/iassetcacheentry-1/#property-value","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/framework/content/iassetcacheentry-1/#isvalid","title":"IsValid","text":"<p>Whether or not the Asset is valid and can be accessed.</p> <pre><code>bool IsValid { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/content/iassetcacheentry-1/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/content/iassetcacheentry-1/#remarks","title":"Remarks","text":"<p>Invalid assets either failed to load or have been invalidated at the source and may be disposed (if IDisposable) or otherwise unusable. Consumers of the cache entry must not attempt to read or use the Asset property of an invalid asset.</p>"},{"location":"reference/stardewui/framework/content/iresolutionscope/","title":"IResolutionScope","text":""},{"location":"reference/stardewui/framework/content/iresolutionscope/#interface-iresolutionscope","title":"Interface IResolutionScope","text":""},{"location":"reference/stardewui/framework/content/iresolutionscope/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Content Assembly: StardewUI.dll  </p> <p>Defines a scope in which certain types of external and potentially ambiguous binding attributes may be resolved.</p> <pre><code>public interface IResolutionScope\n</code></pre>"},{"location":"reference/stardewui/framework/content/iresolutionscope/#remarks","title":"Remarks","text":"<p>In general, resolution scopes are used where a document may include an unqualified or short-form reference, for which such a reference means to look in the same mod that originally provided that document.</p>"},{"location":"reference/stardewui/framework/content/iresolutionscope/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/content/iresolutionscope/#methods","title":"Methods","text":"Name Description GetTranslation(string) Attempts to obtain a translation value with the given key. GetTranslationValue(string) Attempts to obtain the string value of a translation with the given key."},{"location":"reference/stardewui/framework/content/iresolutionscope/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/content/iresolutionscope/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/content/iresolutionscope/#gettranslationstring","title":"GetTranslation(string)","text":"<p>Attempts to obtain a translation value with the given key.</p> <pre><code>StardewModdingAPI.Translation GetTranslation(string key);\n</code></pre>"},{"location":"reference/stardewui/framework/content/iresolutionscope/#parameters","title":"Parameters","text":"<p><code>key</code> string The qualified or unqualified translation key. Unqualified keys are identical to their name in the translation file (i.e. in <code>i18n/default.json</code>), while qualified keys include a prefix with the specific mod, e.g. <code>authorname.ModName:TranslationKey</code>.</p>"},{"location":"reference/stardewui/framework/content/iresolutionscope/#returns","title":"Returns","text":"<p>Translation</p> <p>One of: </p> <ul> <li>The translation, if available in the current language</li> <li>The default-language (usually English) string, if the <code>key</code> exists but no translation is available;</li> <li>A translation with placeholder text, if the <code>key</code> resolves to a known mod (or if the scope points to a default mod) but the mod is missing that specific key;</li> <li><code>null</code>, if the <code>key</code> is unqualified and no default scope is available.</li> </ul>"},{"location":"reference/stardewui/framework/content/iresolutionscope/#gettranslationvaluestring","title":"GetTranslationValue(string)","text":"<p>Attempts to obtain the string value of a translation with the given key.</p> <pre><code>string GetTranslationValue(string key);\n</code></pre>"},{"location":"reference/stardewui/framework/content/iresolutionscope/#parameters_1","title":"Parameters","text":"<p><code>key</code> string The qualified or unqualified translation key. Unqualified keys are identical to their name in the translation file (i.e. in <code>i18n/default.json</code>), while qualified keys include a prefix with the specific mod, e.g. <code>authorname.ModName:TranslationKey</code>.</p>"},{"location":"reference/stardewui/framework/content/iresolutionscope/#returns_1","title":"Returns","text":"<p>string</p> <p>One of: </p> <ul> <li>The translation, if available in the current language</li> <li>The default-language (usually English) string, if the <code>key</code> exists but no translation is available;</li> <li>A translation with placeholder text, if the <code>key</code> cannot be resolved to a known translation in a known mod.</li> </ul>"},{"location":"reference/stardewui/framework/content/iresolutionscope/#remarks_1","title":"Remarks","text":"<p>Unless specifically overridden, calling this is normally the same as GetTranslation(string), except that it returns string instead of Translation, of which the latter is not instantiable outside of SMAPI's internals. To maintain consistency, code that reads translations should always use <code>GetTranslationValue</code>, while code that provides translations (i.e. implementations of IResolutionScope) should only implement <code>GetTranslation</code>, and leave this method alone.</p>"},{"location":"reference/stardewui/framework/content/iresolutionscopefactory/","title":"IResolutionScopeFactory","text":""},{"location":"reference/stardewui/framework/content/iresolutionscopefactory/#interface-iresolutionscopefactory","title":"Interface IResolutionScopeFactory","text":""},{"location":"reference/stardewui/framework/content/iresolutionscopefactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Content Assembly: StardewUI.dll  </p> <p>Factory for creating IResolutionScope instances.</p> <pre><code>public interface IResolutionScopeFactory\n</code></pre>"},{"location":"reference/stardewui/framework/content/iresolutionscopefactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/content/iresolutionscopefactory/#methods","title":"Methods","text":"Name Description CreateForDocument(Document) Obtains a resolution scope for a loaded document."},{"location":"reference/stardewui/framework/content/iresolutionscopefactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/content/iresolutionscopefactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/content/iresolutionscopefactory/#createfordocumentdocument","title":"CreateForDocument(Document)","text":"<p>Obtains a resolution scope for a loaded document.</p> <pre><code>StardewUI.Framework.Content.IResolutionScope CreateForDocument(StardewUI.Framework.Dom.Document document);\n</code></pre>"},{"location":"reference/stardewui/framework/content/iresolutionscopefactory/#parameters","title":"Parameters","text":"<p><code>document</code> Document The UI document in which tokens may be resolved.</p>"},{"location":"reference/stardewui/framework/content/iresolutionscopefactory/#returns","title":"Returns","text":"<p>IResolutionScope</p> <p>An IResolutionScope for the specified <code>document</code>, based on the best-known information about the document's source.</p>"},{"location":"reference/stardewui/framework/content/isourceresolver/","title":"ISourceResolver","text":""},{"location":"reference/stardewui/framework/content/isourceresolver/#interface-isourceresolver","title":"Interface ISourceResolver","text":""},{"location":"reference/stardewui/framework/content/isourceresolver/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Content Assembly: StardewUI.dll  </p> <p>Provides a method to connect a parsed Document back to the mod that provided it.</p> <pre><code>public interface ISourceResolver\n</code></pre>"},{"location":"reference/stardewui/framework/content/isourceresolver/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/content/isourceresolver/#methods","title":"Methods","text":"Name Description TryGetProvidingModId(Document, String) Attempts to determine which mod is the originator of some markup document."},{"location":"reference/stardewui/framework/content/isourceresolver/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/content/isourceresolver/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/content/isourceresolver/#trygetprovidingmodiddocument-string","title":"TryGetProvidingModId(Document, String)","text":"<p>Attempts to determine which mod is the originator of some markup document.</p> <pre><code>bool TryGetProvidingModId(StardewUI.Framework.Dom.Document document, out System.String modId);\n</code></pre>"},{"location":"reference/stardewui/framework/content/isourceresolver/#parameters","title":"Parameters","text":"<p><code>document</code> Document The markup document.</p> <p><code>modId</code> String Holds the <code>StardewModdingAPI.IManifest.UniqueID</code> of the originating mod, if the method returns <code>true</code>, otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/content/isourceresolver/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the <code>document</code> source was successfully resolved, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/","title":"StardewUI.Framework.Converters","text":""},{"location":"reference/stardewui/framework/converters/#stardewuiframeworkconverters-namespace","title":"StardewUI.Framework.Converters Namespace","text":""},{"location":"reference/stardewui/framework/converters/#classes","title":"Classes","text":"Name Description AnyCastConverterFactory Factory supporting conversions to and from IAnyCast. CastingValueConverterFactory Factory that automatically implements casting conversions, where the source type can be assigned directly to the destination type. ColorConverter String converter for the XNA Color type. DuckTypeClassConverterFactory Factory that creates duck-typing converters for <code>class</code> and <code>struct</code> types. DuckTypeEnumConverterFactory Factory that automatically implements duck-typing conversions between enum types that share the same names. EnumNameConverterFactory Factory that automatically implements string-to-enum conversions based on the case-insensitive enum names. GridItemLayoutConverter String converter for a GridItemLayout. IdentityValueConverterFactory Factory that automatically implements identity conversions, where the source and destination type are the same. ItemSpriteConverter Converts data from a game item to its corresponding sprite. LayoutConverter String converter for the LayoutParameters type. NamedFontConverter Converter for fonts that are already built into the game, i.e. found on Game1. NullableConverterFactory Factory that implements automatic conversion between nullable and non-nullable types. PointConverter String converter for the XNA Point type. RectangleConverter String converter for the XNA Rectangle type. StringConverterFactory Provides conversions from any type to string. TextureRectSpriteConverter Converts a tuple with a texture and source rectangle (within the texture) to a sprite record. TextureSpriteConverter Converts a texture to a sprite record, using the texture's entire bounds as the source rectangle. ValueConverter&lt;TSource, TDestination&gt; Generic delegating converter, accepting a conversion function. ValueConverterFactory Standard implementation of IValueConverterFactory that allows registering new converters. Vector2Converter String converter for the XNA Vector2 type."},{"location":"reference/stardewui/framework/converters/#interfaces","title":"Interfaces","text":"Name Description IValueConverter Provides a method to convert between arbitrary types. IValueConverter&lt;TSource, TDestination&gt; Provides a method to convert between value types. IValueConverterFactory Factory for obtaining instance of IValueConverter&lt;TSource, TDestination&gt;."},{"location":"reference/stardewui/framework/converters/anycastconverterfactory/","title":"AnyCastConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/anycastconverterfactory/#class-anycastconverterfactory","title":"Class AnyCastConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/anycastconverterfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Factory supporting conversions to and from IAnyCast.</p> <pre><code>public class AnyCastConverterFactory : \n    StardewUI.Framework.Converters.IValueConverterFactory\n</code></pre> <p>Inheritance Object \u21e6 AnyCastConverterFactory</p> <p>Implements IValueConverterFactory</p>"},{"location":"reference/stardewui/framework/converters/anycastconverterfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/anycastconverterfactory/#constructors","title":"Constructors","text":"Name Description AnyCastConverterFactory()"},{"location":"reference/stardewui/framework/converters/anycastconverterfactory/#methods","title":"Methods","text":"Name Description TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;) Attempts to obtain a converter from a given source type to a given destination type."},{"location":"reference/stardewui/framework/converters/anycastconverterfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/anycastconverterfactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/anycastconverterfactory/#anycastconverterfactory","title":"AnyCastConverterFactory()","text":"<pre><code>public AnyCastConverterFactory();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/anycastconverterfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/anycastconverterfactory/#trygetconvertertsource-tdestinationivalueconvertertsource-tdestination","title":"TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>public bool TryGetConverter&lt;TSource, TDestination&gt;(out IValueConverter&lt;TSource, TDestination&gt; converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/anycastconverterfactory/#parameters","title":"Parameters","text":"<p><code>converter</code> IValueConverter&lt;TSource, TDestination&gt; If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/anycastconverterfactory/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/castingvalueconverterfactory/","title":"CastingValueConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/castingvalueconverterfactory/#class-castingvalueconverterfactory","title":"Class CastingValueConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/castingvalueconverterfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Factory that automatically implements casting conversions, where the source type can be assigned directly to the destination type.</p> <pre><code>public class CastingValueConverterFactory : \n    StardewUI.Framework.Converters.IValueConverterFactory\n</code></pre> <p>Inheritance Object \u21e6 CastingValueConverterFactory</p> <p>Implements IValueConverterFactory</p>"},{"location":"reference/stardewui/framework/converters/castingvalueconverterfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/castingvalueconverterfactory/#constructors","title":"Constructors","text":"Name Description CastingValueConverterFactory()"},{"location":"reference/stardewui/framework/converters/castingvalueconverterfactory/#methods","title":"Methods","text":"Name Description TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;) Attempts to obtain a converter from a given source type to a given destination type."},{"location":"reference/stardewui/framework/converters/castingvalueconverterfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/castingvalueconverterfactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/castingvalueconverterfactory/#castingvalueconverterfactory","title":"CastingValueConverterFactory()","text":"<pre><code>public CastingValueConverterFactory();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/castingvalueconverterfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/castingvalueconverterfactory/#trygetconvertertsource-tdestinationivalueconvertertsource-tdestination","title":"TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>public bool TryGetConverter&lt;TSource, TDestination&gt;(out IValueConverter&lt;TSource, TDestination&gt; converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/castingvalueconverterfactory/#parameters","title":"Parameters","text":"<p><code>converter</code> IValueConverter&lt;TSource, TDestination&gt; If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/castingvalueconverterfactory/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/colorconverter/","title":"ColorConverter","text":""},{"location":"reference/stardewui/framework/converters/colorconverter/#class-colorconverter","title":"Class ColorConverter","text":""},{"location":"reference/stardewui/framework/converters/colorconverter/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>String converter for the XNA Color type.</p> <pre><code>public class ColorConverter : \n    StardewUI.Framework.Converters.IValueConverter&lt;string, Microsoft.Xna.Framework.Color&gt;, \n    StardewUI.Framework.Converters.IValueConverter\n</code></pre> <p>Inheritance Object \u21e6 ColorConverter</p> <p>Implements IValueConverter&lt;string, Color&gt;, IValueConverter</p>"},{"location":"reference/stardewui/framework/converters/colorconverter/#remarks","title":"Remarks","text":"<p>Supports hex strings of the form <code>#rgb</code>, <code>#rrggbb</code>, or <code>#rrggbbaa</code>, as well as any of the XNA named color strings like <code>LimeGreen</code>.</p>"},{"location":"reference/stardewui/framework/converters/colorconverter/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/colorconverter/#constructors","title":"Constructors","text":"Name Description ColorConverter()"},{"location":"reference/stardewui/framework/converters/colorconverter/#methods","title":"Methods","text":"Name Description Convert(string) Converts a value from the source type to the destination type."},{"location":"reference/stardewui/framework/converters/colorconverter/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/colorconverter/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/colorconverter/#colorconverter","title":"ColorConverter()","text":"<pre><code>public ColorConverter();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/colorconverter/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/colorconverter/#convertstring","title":"Convert(string)","text":"<p>Converts a value from the source type to the destination type.</p> <pre><code>public Microsoft.Xna.Framework.Color Convert(string value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/colorconverter/#parameters","title":"Parameters","text":"<p><code>value</code> string The value to convert.</p>"},{"location":"reference/stardewui/framework/converters/colorconverter/#returns","title":"Returns","text":"<p>Color</p>"},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/","title":"DuckTypeClassConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#class-ducktypeclassconverterfactory","title":"Class DuckTypeClassConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Factory that creates duck-typing converters for <code>class</code> and <code>struct</code> types.</p> <pre><code>public class DuckTypeClassConverterFactory : \n    StardewUI.Framework.Converters.IValueConverterFactory\n</code></pre> <p>Inheritance Object \u21e6 DuckTypeClassConverterFactory</p> <p>Implements IValueConverterFactory</p>"},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#remarks","title":"Remarks","text":"<p>For the conversion to be allowed: </p> <ul> <li>The <code>TDestination</code> type must be annotated with DuckTypeAttribute.</li> <li>The destination type must have either a default constructor, or a constructor that can be completely satisfied by properties/fields of the <code>TSource</code> type.</li> <li>If the best or only constructor match is the default/parameterless constructor, at least one writable property on the target type must be satisfied by a property/field on the source type.</li> </ul> <p>Additionally, source types may use fields or properties, but only constructor arguments and properties will be considered on the destination type.</p>"},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#constructors","title":"Constructors","text":"Name Description DuckTypeClassConverterFactory(IValueConverterFactory) Factory that creates duck-typing converters for <code>class</code> and <code>struct</code> types."},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#properties","title":"Properties","text":"Name Description EnableDebugOutput Whether or not to print MSIL output for generated conversion methods."},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#methods","title":"Methods","text":"Name Description TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;) Attempts to obtain a converter from a given source type to a given destination type."},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#ducktypeclassconverterfactoryivalueconverterfactory","title":"DuckTypeClassConverterFactory(IValueConverterFactory)","text":"<p>Factory that creates duck-typing converters for <code>class</code> and <code>struct</code> types.</p> <pre><code>public DuckTypeClassConverterFactory(StardewUI.Framework.Converters.IValueConverterFactory innerFactory);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#parameters","title":"Parameters","text":"<p><code>innerFactory</code> IValueConverterFactory The converter factory to handle conversion of individual properties/arguments.</p>"},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#remarks_1","title":"Remarks","text":"<p>For the conversion to be allowed: </p> <ul> <li>The <code>TDestination</code> type must be annotated with DuckTypeAttribute.</li> <li>The destination type must have either a default constructor, or a constructor that can be completely satisfied by properties/fields of the <code>TSource</code> type.</li> <li>If the best or only constructor match is the default/parameterless constructor, at least one writable property on the target type must be satisfied by a property/field on the source type.</li> </ul> <p>Additionally, source types may use fields or properties, but only constructor arguments and properties will be considered on the destination type.</p>"},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#enabledebugoutput","title":"EnableDebugOutput","text":"<p>Whether or not to print MSIL output for generated conversion methods.</p> <pre><code>public bool EnableDebugOutput { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#remarks_2","title":"Remarks","text":"<p>Use for troubleshooting misbehaving converters or AVE crashes.</p>"},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#trygetconvertertsource-tdestinationivalueconvertertsource-tdestination","title":"TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>public bool TryGetConverter&lt;TSource, TDestination&gt;(out IValueConverter&lt;TSource, TDestination&gt; converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#parameters_1","title":"Parameters","text":"<p><code>converter</code> IValueConverter&lt;TSource, TDestination&gt; If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/ducktypeclassconverterfactory/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/","title":"DuckTypeEnumConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/#class-ducktypeenumconverterfactory","title":"Class DuckTypeEnumConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Factory that automatically implements duck-typing conversions between enum types that share the same names.</p> <pre><code>public class DuckTypeEnumConverterFactory : \n    StardewUI.Framework.Converters.IValueConverterFactory\n</code></pre> <p>Inheritance Object \u21e6 DuckTypeEnumConverterFactory</p> <p>Implements IValueConverterFactory</p>"},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/#remarks","title":"Remarks","text":"<p>Enum values do not need to be identical; matching is performed on the (case-insensitive) name.</p>"},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/#constructors","title":"Constructors","text":"Name Description DuckTypeEnumConverterFactory()"},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/#methods","title":"Methods","text":"Name Description TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;) Attempts to obtain a converter from a given source type to a given destination type."},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/#ducktypeenumconverterfactory","title":"DuckTypeEnumConverterFactory()","text":"<pre><code>public DuckTypeEnumConverterFactory();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/#trygetconvertertsource-tdestinationivalueconvertertsource-tdestination","title":"TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>public bool TryGetConverter&lt;TSource, TDestination&gt;(out IValueConverter&lt;TSource, TDestination&gt; converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/#parameters","title":"Parameters","text":"<p><code>converter</code> IValueConverter&lt;TSource, TDestination&gt; If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/ducktypeenumconverterfactory/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/enumnameconverterfactory/","title":"EnumNameConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/enumnameconverterfactory/#class-enumnameconverterfactory","title":"Class EnumNameConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/enumnameconverterfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Factory that automatically implements string-to-enum conversions based on the case-insensitive enum names.</p> <pre><code>public class EnumNameConverterFactory : \n    StardewUI.Framework.Converters.IValueConverterFactory\n</code></pre> <p>Inheritance Object \u21e6 EnumNameConverterFactory</p> <p>Implements IValueConverterFactory</p>"},{"location":"reference/stardewui/framework/converters/enumnameconverterfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/enumnameconverterfactory/#constructors","title":"Constructors","text":"Name Description EnumNameConverterFactory()"},{"location":"reference/stardewui/framework/converters/enumnameconverterfactory/#methods","title":"Methods","text":"Name Description TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;) Attempts to obtain a converter from a given source type to a given destination type."},{"location":"reference/stardewui/framework/converters/enumnameconverterfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/enumnameconverterfactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/enumnameconverterfactory/#enumnameconverterfactory","title":"EnumNameConverterFactory()","text":"<pre><code>public EnumNameConverterFactory();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/enumnameconverterfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/enumnameconverterfactory/#trygetconvertertsource-tdestinationivalueconvertertsource-tdestination","title":"TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>public bool TryGetConverter&lt;TSource, TDestination&gt;(out IValueConverter&lt;TSource, TDestination&gt; converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/enumnameconverterfactory/#parameters","title":"Parameters","text":"<p><code>converter</code> IValueConverter&lt;TSource, TDestination&gt; If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/enumnameconverterfactory/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/griditemlayoutconverter/","title":"GridItemLayoutConverter","text":""},{"location":"reference/stardewui/framework/converters/griditemlayoutconverter/#class-griditemlayoutconverter","title":"Class GridItemLayoutConverter","text":""},{"location":"reference/stardewui/framework/converters/griditemlayoutconverter/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>String converter for a GridItemLayout.</p> <pre><code>public class GridItemLayoutConverter : \n    StardewUI.Framework.Converters.IValueConverter&lt;string, StardewUI.Widgets.GridItemLayout&gt;, \n    StardewUI.Framework.Converters.IValueConverter\n</code></pre> <p>Inheritance Object \u21e6 GridItemLayoutConverter</p> <p>Implements IValueConverter&lt;string, GridItemLayout&gt;, IValueConverter</p>"},{"location":"reference/stardewui/framework/converters/griditemlayoutconverter/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/griditemlayoutconverter/#constructors","title":"Constructors","text":"Name Description GridItemLayoutConverter()"},{"location":"reference/stardewui/framework/converters/griditemlayoutconverter/#methods","title":"Methods","text":"Name Description Convert(string) Converts a value from the source type to the destination type."},{"location":"reference/stardewui/framework/converters/griditemlayoutconverter/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/griditemlayoutconverter/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/griditemlayoutconverter/#griditemlayoutconverter","title":"GridItemLayoutConverter()","text":"<pre><code>public GridItemLayoutConverter();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/griditemlayoutconverter/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/griditemlayoutconverter/#convertstring","title":"Convert(string)","text":"<p>Converts a value from the source type to the destination type.</p> <pre><code>public StardewUI.Widgets.GridItemLayout Convert(string value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/griditemlayoutconverter/#parameters","title":"Parameters","text":"<p><code>value</code> string The value to convert.</p>"},{"location":"reference/stardewui/framework/converters/griditemlayoutconverter/#returns","title":"Returns","text":"<p>GridItemLayout</p>"},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/","title":"IdentityValueConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/#class-identityvalueconverterfactory","title":"Class IdentityValueConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Factory that automatically implements identity conversions, where the source and destination type are the same.</p> <pre><code>public class IdentityValueConverterFactory : \n    StardewUI.Framework.Converters.IValueConverterFactory\n</code></pre> <p>Inheritance Object \u21e6 IdentityValueConverterFactory</p> <p>Implements IValueConverterFactory</p>"},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/#remarks","title":"Remarks","text":"<p>Used for most model and asset bindings.</p>"},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/#constructors","title":"Constructors","text":"Name Description IdentityValueConverterFactory()"},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/#methods","title":"Methods","text":"Name Description TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;) Attempts to obtain a converter from a given source type to a given destination type."},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/#identityvalueconverterfactory","title":"IdentityValueConverterFactory()","text":"<pre><code>public IdentityValueConverterFactory();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/#trygetconvertertsource-tdestinationivalueconvertertsource-tdestination","title":"TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>public bool TryGetConverter&lt;TSource, TDestination&gt;(out IValueConverter&lt;TSource, TDestination&gt; converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/#parameters","title":"Parameters","text":"<p><code>converter</code> IValueConverter&lt;TSource, TDestination&gt; If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/identityvalueconverterfactory/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/itemspriteconverter/","title":"ItemSpriteConverter","text":""},{"location":"reference/stardewui/framework/converters/itemspriteconverter/#class-itemspriteconverter","title":"Class ItemSpriteConverter","text":""},{"location":"reference/stardewui/framework/converters/itemspriteconverter/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Converts data from a game item to its corresponding sprite.</p> <pre><code>public class ItemSpriteConverter : \n    StardewUI.Framework.Converters.IValueConverter&lt;StardewValley.ItemTypeDefinitions.ParsedItemData, StardewUI.Graphics.Sprite&gt;, \n    StardewUI.Framework.Converters.IValueConverter\n</code></pre> <p>Inheritance Object \u21e6 ItemSpriteConverter</p> <p>Implements IValueConverterSprite&gt;, IValueConverter"},{"location":"reference/stardewui/framework/converters/itemspriteconverter/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/itemspriteconverter/#constructors","title":"Constructors","text":"Name Description ItemSpriteConverter()"},{"location":"reference/stardewui/framework/converters/itemspriteconverter/#methods","title":"Methods","text":"Name Description Convert(ParsedItemData) Converts a value from the source type to the destination type."},{"location":"reference/stardewui/framework/converters/itemspriteconverter/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/itemspriteconverter/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/itemspriteconverter/#itemspriteconverter","title":"ItemSpriteConverter()","text":"<pre><code>public ItemSpriteConverter();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/itemspriteconverter/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/itemspriteconverter/#convertparseditemdata","title":"Convert(ParsedItemData)","text":"<p>Converts a value from the source type to the destination type.</p> <pre><code>public StardewUI.Graphics.Sprite Convert(StardewValley.ItemTypeDefinitions.ParsedItemData value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/itemspriteconverter/#parameters","title":"Parameters","text":"<p><code>value</code> \u00a0 ParsedItemData The value to convert.</p>"},{"location":"reference/stardewui/framework/converters/itemspriteconverter/#returns","title":"Returns","text":"<p>Sprite</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverter-2/","title":"IValueConverter&lt;TSource, TDestination&gt;","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverter-2/#interface-ivalueconvertertsource-tdestination","title":"Interface IValueConverter&lt;TSource, TDestination&gt;","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverter-2/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Provides a method to convert between value types.</p> <pre><code>public interface IValueConverter&lt;TSource, TDestination&gt; : \n    StardewUI.Framework.Converters.IValueConverter\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ivalueconverter-2/#type-parameters","title":"Type Parameters","text":"<p><code>TSource</code> The type of value to be converted.</p> <p><code>TDestination</code> The converted value type.</p> <p>Implements IValueConverter</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverter-2/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverter-2/#methods","title":"Methods","text":"Name Description Convert(TSource) Converts a value from the source type to the destination type."},{"location":"reference/stardewui/framework/converters/ivalueconverter-2/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverter-2/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverter-2/#converttsource","title":"Convert(TSource)","text":"<p>Converts a value from the source type to the destination type.</p> <pre><code>TDestination Convert(TSource value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ivalueconverter-2/#parameters","title":"Parameters","text":"<p><code>value</code> \u00a0 TSource The value to convert.</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverter-2/#returns","title":"Returns","text":"<p><code>TDestination</code></p> <p>The converted value.</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverter/","title":"IValueConverter","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverter/#interface-ivalueconverter","title":"Interface IValueConverter","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverter/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Provides a method to convert between arbitrary types.</p> <pre><code>public interface IValueConverter\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ivalueconverter/#remarks","title":"Remarks","text":"<p>This is a non-generic version of the IValueConverter&lt;TSource, TDestination&gt; that should normally only be used by framework code. Avoid implementing this directly; instead prefer the generic version, which implicitly implements this interface.</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverter/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverter/#properties","title":"Properties","text":"Name Description DestinationType The type of object that this converts to; the result type of the Convert(Object) method. SourceType The type of object this converts from; the <code>value</code> argument to the Convert(Object) method."},{"location":"reference/stardewui/framework/converters/ivalueconverter/#methods","title":"Methods","text":"Name Description Convert(Object) Converts a value from the SourceType to the DestinationType."},{"location":"reference/stardewui/framework/converters/ivalueconverter/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverter/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverter/#destinationtype","title":"DestinationType","text":"<p>The type of object that this converts to; the result type of the Convert(Object) method.</p> <pre><code>System.Type DestinationType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ivalueconverter/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverter/#sourcetype","title":"SourceType","text":"<p>The type of object this converts from; the <code>value</code> argument to the Convert(Object) method.</p> <pre><code>System.Type SourceType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ivalueconverter/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverter/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverter/#convertobject","title":"Convert(Object)","text":"<p>Converts a value from the SourceType to the DestinationType.</p> <pre><code>System.Object Convert(System.Object value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ivalueconverter/#parameters","title":"Parameters","text":"<p><code>value</code> Object The value to convert.</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverter/#returns","title":"Returns","text":"<p>Object</p> <p>The converted value.</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/","title":"IValueConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#interface-ivalueconverterfactory","title":"Interface IValueConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Factory for obtaining instance of IValueConverter&lt;TSource, TDestination&gt;.</p> <pre><code>public interface IValueConverterFactory\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#methods","title":"Methods","text":"Name Description GetConverter&lt;TSource, TDestination&gt;() Gets a converter from a given source type to a given destination type. GetRequiredConverter&lt;TSource, TDestination&gt;() Gets a converter from a given source type to a given destination type, throwing if the conversion is not supported. TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;) Attempts to obtain a converter from a given source type to a given destination type. TryGetConverter(Type, Type, IValueConverter) Attempts to obtain a converter from a given source type to a given destination type."},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#getconvertertsource-tdestination","title":"GetConverter&lt;TSource, TDestination&gt;()","text":"<p>Gets a converter from a given source type to a given destination type.</p> <pre><code>StardewUI.Framework.Converters.IValueConverter&lt;TSource, TDestination&gt; GetConverter&lt;TSource, TDestination&gt;();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#returns","title":"Returns","text":"<p>IValueConverter&lt;TSource, TDestination&gt;</p> <p>A converter that converts from <code>TSource</code> to <code>TDestination</code>, or <code>null</code> if the conversion is not supported.</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#getrequiredconvertertsource-tdestination","title":"GetRequiredConverter&lt;TSource, TDestination&gt;()","text":"<p>Gets a converter from a given source type to a given destination type, throwing if the conversion is not supported.</p> <pre><code>StardewUI.Framework.Converters.IValueConverter&lt;TSource, TDestination&gt; GetRequiredConverter&lt;TSource, TDestination&gt;();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#returns_1","title":"Returns","text":"<p>IValueConverter&lt;TSource, TDestination&gt;</p> <p>A converter that converts from <code>TSource</code> to <code>TDestination</code>.</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#trygetconvertertsource-tdestinationivalueconvertertsource-tdestination","title":"TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>bool TryGetConverter&lt;TSource, TDestination&gt;(out IValueConverter&lt;TSource, TDestination&gt; converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#parameters","title":"Parameters","text":"<p><code>converter</code> IValueConverter&lt;TSource, TDestination&gt; If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#returns_2","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#trygetconvertertype-type-ivalueconverter","title":"TryGetConverter(Type, Type, IValueConverter)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>bool TryGetConverter(System.Type sourceType, System.Type destinationType, out StardewUI.Framework.Converters.IValueConverter converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#parameters_1","title":"Parameters","text":"<p><code>sourceType</code> Type The type of value to be converted.</p> <p><code>destinationType</code> Type The converted value type.</p> <p><code>converter</code> IValueConverter If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/ivalueconverterfactory/#returns_3","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/layoutconverter/","title":"LayoutConverter","text":""},{"location":"reference/stardewui/framework/converters/layoutconverter/#class-layoutconverter","title":"Class LayoutConverter","text":""},{"location":"reference/stardewui/framework/converters/layoutconverter/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>String converter for the LayoutParameters type.</p> <pre><code>public class LayoutConverter : \n    StardewUI.Framework.Converters.IValueConverter&lt;string, StardewUI.Layout.LayoutParameters&gt;, \n    StardewUI.Framework.Converters.IValueConverter\n</code></pre> <p>Inheritance Object \u21e6 LayoutConverter</p> <p>Implements IValueConverter&lt;string, LayoutParameters&gt;, IValueConverter</p>"},{"location":"reference/stardewui/framework/converters/layoutconverter/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/layoutconverter/#constructors","title":"Constructors","text":"Name Description LayoutConverter()"},{"location":"reference/stardewui/framework/converters/layoutconverter/#methods","title":"Methods","text":"Name Description Convert(string) Converts a value from the source type to the destination type."},{"location":"reference/stardewui/framework/converters/layoutconverter/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/layoutconverter/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/layoutconverter/#layoutconverter","title":"LayoutConverter()","text":"<pre><code>public LayoutConverter();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/layoutconverter/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/layoutconverter/#convertstring","title":"Convert(string)","text":"<p>Converts a value from the source type to the destination type.</p> <pre><code>public StardewUI.Layout.LayoutParameters Convert(string value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/layoutconverter/#parameters","title":"Parameters","text":"<p><code>value</code> string The value to convert.</p>"},{"location":"reference/stardewui/framework/converters/layoutconverter/#returns","title":"Returns","text":"<p>LayoutParameters</p>"},{"location":"reference/stardewui/framework/converters/namedfontconverter/","title":"NamedFontConverter","text":""},{"location":"reference/stardewui/framework/converters/namedfontconverter/#class-namedfontconverter","title":"Class NamedFontConverter","text":""},{"location":"reference/stardewui/framework/converters/namedfontconverter/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Converter for fonts that are already built into the game, i.e. found on Game1.</p> <pre><code>public class NamedFontConverter : \n    StardewUI.Framework.Converters.IValueConverter&lt;string, Microsoft.Xna.Framework.Graphics.SpriteFont&gt;, \n    StardewUI.Framework.Converters.IValueConverter\n</code></pre> <p>Inheritance Object \u21e6 NamedFontConverter</p> <p>Implements IValueConverter&lt;string, SpriteFont&gt;, IValueConverter</p>"},{"location":"reference/stardewui/framework/converters/namedfontconverter/#remarks","title":"Remarks","text":"<p>Does not account for fonts added as separate assets, which require bound attributes and not literals.</p>"},{"location":"reference/stardewui/framework/converters/namedfontconverter/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/namedfontconverter/#constructors","title":"Constructors","text":"Name Description NamedFontConverter()"},{"location":"reference/stardewui/framework/converters/namedfontconverter/#methods","title":"Methods","text":"Name Description Convert(string) Converts a value from the source type to the destination type."},{"location":"reference/stardewui/framework/converters/namedfontconverter/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/namedfontconverter/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/namedfontconverter/#namedfontconverter","title":"NamedFontConverter()","text":"<pre><code>public NamedFontConverter();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/namedfontconverter/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/namedfontconverter/#convertstring","title":"Convert(string)","text":"<p>Converts a value from the source type to the destination type.</p> <pre><code>public Microsoft.Xna.Framework.Graphics.SpriteFont Convert(string value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/namedfontconverter/#parameters","title":"Parameters","text":"<p><code>value</code> string The value to convert.</p>"},{"location":"reference/stardewui/framework/converters/namedfontconverter/#returns","title":"Returns","text":"<p>SpriteFont</p>"},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/","title":"NullableConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/#class-nullableconverterfactory","title":"Class NullableConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Factory that implements automatic conversion between nullable and non-nullable types.</p> <pre><code>public class NullableConverterFactory : \n    StardewUI.Framework.Converters.IValueConverterFactory\n</code></pre> <p>Inheritance Object \u21e6 NullableConverterFactory</p> <p>Implements IValueConverterFactory</p>"},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/#constructors","title":"Constructors","text":"Name Description NullableConverterFactory(IValueConverterFactory) Factory that implements automatic conversion between nullable and non-nullable types."},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/#methods","title":"Methods","text":"Name Description TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;) Attempts to obtain a converter from a given source type to a given destination type."},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/#nullableconverterfactoryivalueconverterfactory","title":"NullableConverterFactory(IValueConverterFactory)","text":"<p>Factory that implements automatic conversion between nullable and non-nullable types.</p> <pre><code>public NullableConverterFactory(StardewUI.Framework.Converters.IValueConverterFactory innerFactory);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/#parameters","title":"Parameters","text":"<p><code>innerFactory</code> IValueConverterFactory The converter factory to handle conversion of the element type(s).</p>"},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/#trygetconvertertsource-tdestinationivalueconvertertsource-tdestination","title":"TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>public bool TryGetConverter&lt;TSource, TDestination&gt;(out IValueConverter&lt;TSource, TDestination&gt; converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/#parameters_1","title":"Parameters","text":"<p><code>converter</code> IValueConverter&lt;TSource, TDestination&gt; If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/nullableconverterfactory/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/pointconverter/","title":"PointConverter","text":""},{"location":"reference/stardewui/framework/converters/pointconverter/#class-pointconverter","title":"Class PointConverter","text":""},{"location":"reference/stardewui/framework/converters/pointconverter/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>String converter for the XNA Point type.</p> <pre><code>public class PointConverter : \n    StardewUI.Framework.Converters.IValueConverter&lt;string, Microsoft.Xna.Framework.Point&gt;, \n    StardewUI.Framework.Converters.IValueConverter\n</code></pre> <p>Inheritance Object \u21e6 PointConverter</p> <p>Implements IValueConverter&lt;string, Point&gt;, IValueConverter</p>"},{"location":"reference/stardewui/framework/converters/pointconverter/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/pointconverter/#constructors","title":"Constructors","text":"Name Description PointConverter()"},{"location":"reference/stardewui/framework/converters/pointconverter/#methods","title":"Methods","text":"Name Description Convert(string) Converts a value from the source type to the destination type."},{"location":"reference/stardewui/framework/converters/pointconverter/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/pointconverter/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/pointconverter/#pointconverter","title":"PointConverter()","text":"<pre><code>public PointConverter();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/pointconverter/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/pointconverter/#convertstring","title":"Convert(string)","text":"<p>Converts a value from the source type to the destination type.</p> <pre><code>public Microsoft.Xna.Framework.Point Convert(string value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/pointconverter/#parameters","title":"Parameters","text":"<p><code>value</code> string The value to convert.</p>"},{"location":"reference/stardewui/framework/converters/pointconverter/#returns","title":"Returns","text":"<p>Point</p>"},{"location":"reference/stardewui/framework/converters/rectangleconverter/","title":"RectangleConverter","text":""},{"location":"reference/stardewui/framework/converters/rectangleconverter/#class-rectangleconverter","title":"Class RectangleConverter","text":""},{"location":"reference/stardewui/framework/converters/rectangleconverter/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>String converter for the XNA Rectangle type.</p> <pre><code>public class RectangleConverter : \n    StardewUI.Framework.Converters.IValueConverter&lt;string, Microsoft.Xna.Framework.Rectangle&gt;, \n    StardewUI.Framework.Converters.IValueConverter\n</code></pre> <p>Inheritance Object \u21e6 RectangleConverter</p> <p>Implements IValueConverter&lt;string, Rectangle&gt;, IValueConverter</p>"},{"location":"reference/stardewui/framework/converters/rectangleconverter/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/rectangleconverter/#constructors","title":"Constructors","text":"Name Description RectangleConverter()"},{"location":"reference/stardewui/framework/converters/rectangleconverter/#methods","title":"Methods","text":"Name Description Convert(string) Converts a value from the source type to the destination type. Parse(string) Parses a Rectangle value from its comma-separated string representation."},{"location":"reference/stardewui/framework/converters/rectangleconverter/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/rectangleconverter/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/rectangleconverter/#rectangleconverter","title":"RectangleConverter()","text":"<pre><code>public RectangleConverter();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/rectangleconverter/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/rectangleconverter/#convertstring","title":"Convert(string)","text":"<p>Converts a value from the source type to the destination type.</p> <pre><code>public Microsoft.Xna.Framework.Rectangle Convert(string value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/rectangleconverter/#parameters","title":"Parameters","text":"<p><code>value</code> string The value to convert.</p>"},{"location":"reference/stardewui/framework/converters/rectangleconverter/#returns","title":"Returns","text":"<p>Rectangle</p>"},{"location":"reference/stardewui/framework/converters/rectangleconverter/#parsestring","title":"Parse(string)","text":"<p>Parses a Rectangle value from its comma-separated string representation.</p> <pre><code>public static Microsoft.Xna.Framework.Rectangle Parse(string value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/rectangleconverter/#parameters_1","title":"Parameters","text":"<p><code>value</code> string String representation of a Rectangle, having 4 comma-separated integer values.</p>"},{"location":"reference/stardewui/framework/converters/rectangleconverter/#returns_1","title":"Returns","text":"<p>Rectangle</p> <p>The parsed Rectangle.</p>"},{"location":"reference/stardewui/framework/converters/rectangleconverter/#remarks","title":"Remarks","text":"<p>This is equivalent to Convert(string) but does not require an instance.</p>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/","title":"RootValueConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#class-rootvalueconverterfactory","title":"Class RootValueConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Standard implementation of IValueConverterFactory that allows registering new converters.</p> <pre><code>public class RootValueConverterFactory : \n    StardewUI.Framework.Converters.IValueConverterFactory\n</code></pre> <p>Inheritance Object \u21e6 RootValueConverterFactory</p> <p>Implements IValueConverterFactory</p>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#constructors","title":"Constructors","text":"Name Description RootValueConverterFactory() Initializes a new RootValueConverterFactory instance."},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#methods","title":"Methods","text":"Name Description Default() Creates a RootValueConverterFactory with the default set of built-in framework converters already registered. Register(IValueConverterFactory) Registers a delegate factory that may be used to obtain a converter for which there is no explicit registration. TryGetConverter(Type, Type, IValueConverter) Attempts to obtain a converter from a given source type to a given destination type. TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;) Attempts to obtain a converter from a given source type to a given destination type. TryRegister&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;) Attempts to register a new converter. TryRegister&lt;TSource, TDestination&gt;(Func&lt;TSource, TDestination&gt;) Attempts to register a new converter."},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#rootvalueconverterfactory","title":"RootValueConverterFactory()","text":"<p>Initializes a new RootValueConverterFactory instance.</p> <pre><code>public RootValueConverterFactory();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#default","title":"Default()","text":"<p>Creates a RootValueConverterFactory with the default set of built-in framework converters already registered.</p> <pre><code>public static StardewUI.Framework.Converters.RootValueConverterFactory Default();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#returns","title":"Returns","text":"<p>RootValueConverterFactory</p>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#registerivalueconverterfactory","title":"Register(IValueConverterFactory)","text":"<p>Registers a delegate factory that may be used to obtain a converter for which there is no explicit registration.</p> <pre><code>public void Register(StardewUI.Framework.Converters.IValueConverterFactory factory);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#parameters","title":"Parameters","text":"<p><code>factory</code> IValueConverterFactory The delegate factory.</p>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#remarks","title":"Remarks","text":"<p>Use when a single converter may handle many input or output types, e.g. string-to-enum conversions.</p>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#trygetconvertertype-type-ivalueconverter","title":"TryGetConverter(Type, Type, IValueConverter)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>public bool TryGetConverter(System.Type sourceType, System.Type destinationType, out StardewUI.Framework.Converters.IValueConverter converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#parameters_1","title":"Parameters","text":"<p><code>sourceType</code> Type The type of value to be converted.</p> <p><code>destinationType</code> Type The converted value type.</p> <p><code>converter</code> IValueConverter If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#trygetconvertertsource-tdestinationivalueconvertertsource-tdestination","title":"TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>public bool TryGetConverter&lt;TSource, TDestination&gt;(out IValueConverter&lt;TSource, TDestination&gt; converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#parameters_2","title":"Parameters","text":"<p><code>converter</code> IValueConverter&lt;TSource, TDestination&gt; If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#returns_2","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#tryregistertsource-tdestinationivalueconvertertsource-tdestination","title":"TryRegister&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;)","text":"<p>Attempts to register a new converter.</p> <pre><code>public bool TryRegister&lt;TSource, TDestination&gt;(StardewUI.Framework.Converters.IValueConverter&lt;TSource, TDestination&gt; converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#parameters_3","title":"Parameters","text":"<p><code>converter</code> IValueConverter&lt;TSource, TDestination&gt; The converter that handles this conversion.</p>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#returns_3","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the <code>converter</code> was registered for the specified types; <code>false</code> if there was already a registration or cached converter for those types.</p>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#tryregistertsource-tdestinationfunctsource-tdestination","title":"TryRegister&lt;TSource, TDestination&gt;(Func&lt;TSource, TDestination&gt;)","text":"<p>Attempts to register a new converter.</p> <pre><code>public bool TryRegister&lt;TSource, TDestination&gt;(Func&lt;TSource, TDestination&gt; convert);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#parameters_4","title":"Parameters","text":"<p><code>convert</code> Func&lt;TSource, TDestination&gt; Function to convert from <code>TSource</code> to <code>TDestination</code>.</p>"},{"location":"reference/stardewui/framework/converters/rootvalueconverterfactory/#returns_4","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion function was registered for the specified types; <code>false</code> if there was already a registration or cached converter for those types.</p>"},{"location":"reference/stardewui/framework/converters/stringconverterfactory/","title":"StringConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/stringconverterfactory/#class-stringconverterfactory","title":"Class StringConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/stringconverterfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Provides conversions from any type to string.</p> <pre><code>public class StringConverterFactory : \n    StardewUI.Framework.Converters.IValueConverterFactory\n</code></pre> <p>Inheritance Object \u21e6 StringConverterFactory</p> <p>Implements IValueConverterFactory</p>"},{"location":"reference/stardewui/framework/converters/stringconverterfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/stringconverterfactory/#constructors","title":"Constructors","text":"Name Description StringConverterFactory()"},{"location":"reference/stardewui/framework/converters/stringconverterfactory/#methods","title":"Methods","text":"Name Description TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;) Attempts to obtain a converter from a given source type to a given destination type."},{"location":"reference/stardewui/framework/converters/stringconverterfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/stringconverterfactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/stringconverterfactory/#stringconverterfactory","title":"StringConverterFactory()","text":"<pre><code>public StringConverterFactory();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/stringconverterfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/stringconverterfactory/#trygetconvertertsource-tdestinationivalueconvertertsource-tdestination","title":"TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>public bool TryGetConverter&lt;TSource, TDestination&gt;(out IValueConverter&lt;TSource, TDestination&gt; converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/stringconverterfactory/#parameters","title":"Parameters","text":"<p><code>converter</code> IValueConverter&lt;TSource, TDestination&gt; If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/stringconverterfactory/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/texturerectspriteconverter/","title":"TextureRectSpriteConverter","text":""},{"location":"reference/stardewui/framework/converters/texturerectspriteconverter/#class-texturerectspriteconverter","title":"Class TextureRectSpriteConverter","text":""},{"location":"reference/stardewui/framework/converters/texturerectspriteconverter/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Converts a tuple with a texture and source rectangle (within the texture) to a sprite record.</p> <pre><code>public class TextureRectSpriteConverter : \n    StardewUI.Framework.Converters.IValueConverter&lt;Tuple&lt;Microsoft.Xna.Framework.Graphics.Texture2D, Microsoft.Xna.Framework.Rectangle&gt;, StardewUI.Graphics.Sprite&gt;, \n    StardewUI.Framework.Converters.IValueConverter\n</code></pre> <p>Inheritance Object \u21e6 TextureRectSpriteConverter</p> <p>Implements IValueConverter&lt;Tuple&lt;Texture2D, Rectangle&gt;, Sprite&gt;, IValueConverter</p>"},{"location":"reference/stardewui/framework/converters/texturerectspriteconverter/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/texturerectspriteconverter/#constructors","title":"Constructors","text":"Name Description TextureRectSpriteConverter()"},{"location":"reference/stardewui/framework/converters/texturerectspriteconverter/#methods","title":"Methods","text":"Name Description Convert(Tuple&lt;Texture2D, Rectangle&gt;) Converts a value from the source type to the destination type."},{"location":"reference/stardewui/framework/converters/texturerectspriteconverter/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/texturerectspriteconverter/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/texturerectspriteconverter/#texturerectspriteconverter","title":"TextureRectSpriteConverter()","text":"<pre><code>public TextureRectSpriteConverter();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/texturerectspriteconverter/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/texturerectspriteconverter/#converttupletexture2d-rectangle","title":"Convert(Tuple&lt;Texture2D, Rectangle&gt;)","text":"<p>Converts a value from the source type to the destination type.</p> <pre><code>public StardewUI.Graphics.Sprite Convert(Tuple&lt;Microsoft.Xna.Framework.Graphics.Texture2D, Microsoft.Xna.Framework.Rectangle&gt; value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/texturerectspriteconverter/#parameters","title":"Parameters","text":"<p><code>value</code> Tuple&lt;Texture2D, Rectangle&gt; The value to convert.</p>"},{"location":"reference/stardewui/framework/converters/texturerectspriteconverter/#returns","title":"Returns","text":"<p>Sprite</p>"},{"location":"reference/stardewui/framework/converters/texturespriteconverter/","title":"TextureSpriteConverter","text":""},{"location":"reference/stardewui/framework/converters/texturespriteconverter/#class-texturespriteconverter","title":"Class TextureSpriteConverter","text":""},{"location":"reference/stardewui/framework/converters/texturespriteconverter/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Converts a texture to a sprite record, using the texture's entire bounds as the source rectangle.</p> <pre><code>public class TextureSpriteConverter : \n    StardewUI.Framework.Converters.IValueConverter&lt;Microsoft.Xna.Framework.Graphics.Texture2D, StardewUI.Graphics.Sprite&gt;, \n    StardewUI.Framework.Converters.IValueConverter\n</code></pre> <p>Inheritance Object \u21e6 TextureSpriteConverter</p> <p>Implements IValueConverter&lt;Texture2D, Sprite&gt;, IValueConverter</p>"},{"location":"reference/stardewui/framework/converters/texturespriteconverter/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/texturespriteconverter/#constructors","title":"Constructors","text":"Name Description TextureSpriteConverter()"},{"location":"reference/stardewui/framework/converters/texturespriteconverter/#methods","title":"Methods","text":"Name Description Convert(Texture2D) Converts a value from the source type to the destination type."},{"location":"reference/stardewui/framework/converters/texturespriteconverter/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/texturespriteconverter/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/texturespriteconverter/#texturespriteconverter","title":"TextureSpriteConverter()","text":"<pre><code>public TextureSpriteConverter();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/texturespriteconverter/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/texturespriteconverter/#converttexture2d","title":"Convert(Texture2D)","text":"<p>Converts a value from the source type to the destination type.</p> <pre><code>public StardewUI.Graphics.Sprite Convert(Microsoft.Xna.Framework.Graphics.Texture2D value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/texturespriteconverter/#parameters","title":"Parameters","text":"<p><code>value</code> Texture2D The value to convert.</p>"},{"location":"reference/stardewui/framework/converters/texturespriteconverter/#returns","title":"Returns","text":"<p>Sprite</p>"},{"location":"reference/stardewui/framework/converters/valueconverter-2/","title":"ValueConverter&lt;TSource, TDestination&gt;","text":""},{"location":"reference/stardewui/framework/converters/valueconverter-2/#class-valueconvertertsource-tdestination","title":"Class ValueConverter&lt;TSource, TDestination&gt;","text":""},{"location":"reference/stardewui/framework/converters/valueconverter-2/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Generic delegating converter, accepting a conversion function.</p> <pre><code>public class ValueConverter&lt;TSource, TDestination&gt; : \n    StardewUI.Framework.Converters.IValueConverter&lt;TSource, TDestination&gt;, \n    StardewUI.Framework.Converters.IValueConverter\n</code></pre>"},{"location":"reference/stardewui/framework/converters/valueconverter-2/#type-parameters","title":"Type Parameters","text":"<p><code>TSource</code> The type of value to be converted.</p> <p><code>TDestination</code> The converted value type.</p> <p>Inheritance Object \u21e6 ValueConverter&lt;TSource, TDestination&gt;</p> <p>Implements IValueConverter&lt;TSource, TDestination&gt;, IValueConverter</p>"},{"location":"reference/stardewui/framework/converters/valueconverter-2/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/valueconverter-2/#constructors","title":"Constructors","text":"Name Description ValueConverter&lt;TSource, TDestination&gt;(Func&lt;TSource, TDestination&gt;) Generic delegating converter, accepting a conversion function."},{"location":"reference/stardewui/framework/converters/valueconverter-2/#methods","title":"Methods","text":"Name Description Convert(TSource) Converts a value from the source type to the destination type."},{"location":"reference/stardewui/framework/converters/valueconverter-2/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/valueconverter-2/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/valueconverter-2/#valueconvertertsource-tdestinationfunctsource-tdestination","title":"ValueConverter&lt;TSource, TDestination&gt;(Func&lt;TSource, TDestination&gt;)","text":"<p>Generic delegating converter, accepting a conversion function.</p> <pre><code>public ValueConverter&lt;TSource, TDestination&gt;(Func&lt;TSource, TDestination&gt; convert);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/valueconverter-2/#parameters","title":"Parameters","text":"<p><code>convert</code> Func&lt;TSource, TDestination&gt; Function to convert a <code>TSource</code> to a <code>TDestination</code>.</p>"},{"location":"reference/stardewui/framework/converters/valueconverter-2/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/valueconverter-2/#converttsource","title":"Convert(TSource)","text":"<p>Converts a value from the source type to the destination type.</p> <pre><code>public TDestination Convert(TSource value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/valueconverter-2/#parameters_1","title":"Parameters","text":"<p><code>value</code> \u00a0 TSource The value to convert.</p>"},{"location":"reference/stardewui/framework/converters/valueconverter-2/#returns","title":"Returns","text":"<p><code>TDestination</code></p>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/","title":"ValueConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#class-valueconverterfactory","title":"Class ValueConverterFactory","text":""},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>Standard implementation of IValueConverterFactory that allows registering new converters.</p> <pre><code>public class ValueConverterFactory : \n    StardewUI.Framework.Converters.IValueConverterFactory\n</code></pre> <p>Inheritance Object \u21e6 ValueConverterFactory</p> <p>Implements IValueConverterFactory</p>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#constructors","title":"Constructors","text":"Name Description ValueConverterFactory() Initializes a new ValueConverterFactory instance."},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#properties","title":"Properties","text":"Name Description Factories The list of factories currently registered."},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#methods","title":"Methods","text":"Name Description Register(IValueConverterFactory) Registers a delegate factory that may be used to obtain a converter for which there is no explicit registration. TryGetConverter(Type, Type, IValueConverter) Attempts to obtain a converter from a given source type to a given destination type. TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;) Attempts to obtain a converter from a given source type to a given destination type. TryRegister&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;) Attempts to register a new converter. TryRegister&lt;TSource, TDestination&gt;(Func&lt;TSource, TDestination&gt;) Attempts to register a new converter."},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#valueconverterfactory","title":"ValueConverterFactory()","text":"<p>Initializes a new ValueConverterFactory instance.</p> <pre><code>public ValueConverterFactory();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#factories","title":"Factories","text":"<p>The list of factories currently registered.</p> <pre><code>protected System.Collections.Generic.List&lt;StardewUI.Framework.Converters.IValueConverterFactory&gt; Factories { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#property-value","title":"Property Value","text":"<p>List&lt;IValueConverterFactory&gt;</p>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#registerivalueconverterfactory","title":"Register(IValueConverterFactory)","text":"<p>Registers a delegate factory that may be used to obtain a converter for which there is no explicit registration.</p> <pre><code>public void Register(StardewUI.Framework.Converters.IValueConverterFactory factory);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#parameters","title":"Parameters","text":"<p><code>factory</code> IValueConverterFactory The delegate factory.</p>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#remarks","title":"Remarks","text":"<p>Use when a single converter may handle many input or output types, e.g. string-to-enum conversions.</p>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#trygetconvertertype-type-ivalueconverter","title":"TryGetConverter(Type, Type, IValueConverter)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>public bool TryGetConverter(System.Type sourceType, System.Type destinationType, out StardewUI.Framework.Converters.IValueConverter converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#parameters_1","title":"Parameters","text":"<p><code>sourceType</code> Type The type of value to be converted.</p> <p><code>destinationType</code> Type The converted value type.</p> <p><code>converter</code> IValueConverter If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#trygetconvertertsource-tdestinationivalueconvertertsource-tdestination","title":"TryGetConverter&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;)","text":"<p>Attempts to obtain a converter from a given source type to a given destination type.</p> <pre><code>public bool TryGetConverter&lt;TSource, TDestination&gt;(out IValueConverter&lt;TSource, TDestination&gt; converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#parameters_2","title":"Parameters","text":"<p><code>converter</code> IValueConverter&lt;TSource, TDestination&gt; If the method returns <code>true</code>, holds the converter that converts between the specified types; otherwise <code>null</code>.</p>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion is supported, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#tryregistertsource-tdestinationivalueconvertertsource-tdestination","title":"TryRegister&lt;TSource, TDestination&gt;(IValueConverter&lt;TSource, TDestination&gt;)","text":"<p>Attempts to register a new converter.</p> <pre><code>public bool TryRegister&lt;TSource, TDestination&gt;(StardewUI.Framework.Converters.IValueConverter&lt;TSource, TDestination&gt; converter);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#parameters_3","title":"Parameters","text":"<p><code>converter</code> IValueConverter&lt;TSource, TDestination&gt; The converter that handles this conversion.</p>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#returns_2","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the <code>converter</code> was registered for the specified types; <code>false</code> if there was already a registration or cached converter for those types.</p>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#tryregistertsource-tdestinationfunctsource-tdestination","title":"TryRegister&lt;TSource, TDestination&gt;(Func&lt;TSource, TDestination&gt;)","text":"<p>Attempts to register a new converter.</p> <pre><code>public bool TryRegister&lt;TSource, TDestination&gt;(Func&lt;TSource, TDestination&gt; convert);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#parameters_4","title":"Parameters","text":"<p><code>convert</code> Func&lt;TSource, TDestination&gt; Function to convert from <code>TSource</code> to <code>TDestination</code>.</p>"},{"location":"reference/stardewui/framework/converters/valueconverterfactory/#returns_3","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the conversion function was registered for the specified types; <code>false</code> if there was already a registration or cached converter for those types.</p>"},{"location":"reference/stardewui/framework/converters/vector2converter/","title":"Vector2Converter","text":""},{"location":"reference/stardewui/framework/converters/vector2converter/#class-vector2converter","title":"Class Vector2Converter","text":""},{"location":"reference/stardewui/framework/converters/vector2converter/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Converters Assembly: StardewUI.dll  </p> <p>String converter for the XNA Vector2 type.</p> <pre><code>public class Vector2Converter : \n    StardewUI.Framework.Converters.IValueConverter&lt;string, Microsoft.Xna.Framework.Vector2&gt;, \n    StardewUI.Framework.Converters.IValueConverter\n</code></pre> <p>Inheritance Object \u21e6 Vector2Converter</p> <p>Implements IValueConverter&lt;string, Vector2&gt;, IValueConverter</p>"},{"location":"reference/stardewui/framework/converters/vector2converter/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/converters/vector2converter/#constructors","title":"Constructors","text":"Name Description Vector2Converter()"},{"location":"reference/stardewui/framework/converters/vector2converter/#methods","title":"Methods","text":"Name Description Convert(string) Converts a value from the source type to the destination type."},{"location":"reference/stardewui/framework/converters/vector2converter/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/converters/vector2converter/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/converters/vector2converter/#vector2converter","title":"Vector2Converter()","text":"<pre><code>public Vector2Converter();\n</code></pre>"},{"location":"reference/stardewui/framework/converters/vector2converter/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/converters/vector2converter/#convertstring","title":"Convert(string)","text":"<p>Converts a value from the source type to the destination type.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 Convert(string value);\n</code></pre>"},{"location":"reference/stardewui/framework/converters/vector2converter/#parameters","title":"Parameters","text":"<p><code>value</code> string The value to convert.</p>"},{"location":"reference/stardewui/framework/converters/vector2converter/#returns","title":"Returns","text":"<p>Vector2</p>"},{"location":"reference/stardewui/framework/descriptors/","title":"StardewUI.Framework.Descriptors","text":""},{"location":"reference/stardewui/framework/descriptors/#stardewuiframeworkdescriptors-namespace","title":"StardewUI.Framework.Descriptors Namespace","text":""},{"location":"reference/stardewui/framework/descriptors/#classes","title":"Classes","text":"Name Description DescriptorException The exception that is thrown when an error occurs while reading or building the metadata for a bound view or one of its data sources. DescriptorFactory Factory for obtaining descriptors, encapsulating both dynamic (reflection) and static (precompiled) descriptors. ExpressionFieldDescriptor&lt;T, TValue&gt; Implementation of a field descriptor using a compiled expression tree. LazyExpressionFieldDescriptor Helper for creating LazyExpressionFieldDescriptor&lt;TValue&gt; with types not known at compile time. LazyExpressionFieldDescriptor&lt;TValue&gt; Implementation of a field descriptor that supports a transition between two inner descriptor types. PrecompiledEventDescriptor&lt;TTarget, THandler&gt; Statically-typed implementation of an IEventDescriptor with predefined attributes. PrecompiledMethodDescriptor&lt;TTarget, TReturn&gt; Statically-typed implementation of an IMethodDescriptor&lt;T&gt; with predefined attributes. PrecompiledPropertyDescriptor&lt;TTarget, TProperty&gt; Statically-typed implementation of an IPropertyDescriptor&lt;T&gt; with predefined attributes. ReflectionEventDescriptor Helper for creating IEventDescriptor instances using reflection. ReflectionEventDescriptor&lt;TTarget, THandler&gt; Reflection-based implementation of an event descriptor. ReflectionFieldDescriptor&lt;TValue&gt; Implementation of a field descriptor based on reflection. ReflectionMethodDescriptor Helper for creating IMethodDescriptor instances using reflection. ReflectionObjectDescriptor Object descriptor based on reflection. ReflectionPropertyDescriptor Helper for creating ReflectionPropertyDescriptor&lt;T, TValue&gt; with types not known at compile time. ReflectionPropertyDescriptor&lt;T, TValue&gt; Binding property based on reflection. ReflectionViewDescriptor View descriptor based on reflection. ThisPropertyDescriptor Helper for obtaining a ThisPropertyDescriptor&lt;T&gt; using a type known only at runtime. ThisPropertyDescriptor&lt;T&gt; Special descriptor used for \"this\" references in argument/attribute bindings, allowing them to reference the current context instead of a property on it."},{"location":"reference/stardewui/framework/descriptors/#interfaces","title":"Interfaces","text":"Name Description IEventDescriptor Describes a single event on some type. IMemberDescriptor Describes a single member (property, method, or event) of a bindable object, such as a view. IMethodDescriptor Describes a single method on some type. IMethodDescriptor&lt;T&gt; Describes a single method on some type, and provides a wrapper method to invoke it. IObjectDescriptor Describes a type of object that participates in view binding, either as the target or the source. IPropertyDescriptor Describes a single property on a bindable object (i.e. a view). IPropertyDescriptor&lt;T&gt; Describes a single property on a bindable object (i.e. a view) and provides methods to read or write the value. IViewDescriptor Describes a type of view that can be used in a view binding."},{"location":"reference/stardewui/framework/descriptors/descriptorexception/","title":"DescriptorException","text":""},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#class-descriptorexception","title":"Class DescriptorException","text":""},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>The exception that is thrown when an error occurs while reading or building the metadata for a bound view or one of its data sources.</p> <pre><code>public class DescriptorException : System.Exception\n</code></pre> <p>Inheritance Object \u21e6 Exception \u21e6 DescriptorException</p>"},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#constructors","title":"Constructors","text":"Name Description DescriptorException() Initializes a new instance of the DescriptorException class. DescriptorException(string) Initializes a new instance of the DescriptorException class with a specified error message. DescriptorException(string, Exception) Initializes a new instance of the DescriptorException class with a specified error message and a reference to the inner exception that is the cause of this exception."},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#properties","title":"Properties","text":"Name Description Data (Inherited from Exception) HelpLink (Inherited from Exception) HResult (Inherited from Exception) InnerException (Inherited from Exception) Message (Inherited from Exception) Source (Inherited from Exception) StackTrace (Inherited from Exception) TargetSite (Inherited from Exception)"},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#methods","title":"Methods","text":"Name Description GetBaseException() (Inherited from Exception) GetObjectData(SerializationInfo, StreamingContext) (Inherited from Exception) GetType() (Inherited from Exception) ToString() (Inherited from Exception)"},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#events","title":"Events","text":"Name Description SerializeObjectState (Inherited from Exception)"},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#descriptorexception","title":"DescriptorException()","text":"<p>Initializes a new instance of the DescriptorException class.</p> <pre><code>public DescriptorException();\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#descriptorexceptionstring","title":"DescriptorException(string)","text":"<p>Initializes a new instance of the DescriptorException class with a specified error message.</p> <pre><code>public DescriptorException(string message);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#parameters","title":"Parameters","text":"<p><code>message</code> string The message that describes the error.</p>"},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#descriptorexceptionstring-exception","title":"DescriptorException(string, Exception)","text":"<p>Initializes a new instance of the DescriptorException class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> <pre><code>public DescriptorException(string message, System.Exception innerException);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/descriptorexception/#parameters_1","title":"Parameters","text":"<p><code>message</code> string The error message that explains the reason for the exception.</p> <p><code>innerException</code> Exception The exception that is the cause of the current exception, or <code>null</code> if not specified.</p>"},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/","title":"DescriptorFactory","text":""},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/#class-descriptorfactory","title":"Class DescriptorFactory","text":""},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Factory for obtaining descriptors, encapsulating both dynamic (reflection) and static (precompiled) descriptors.</p> <pre><code>public static class DescriptorFactory\n</code></pre> <p>Inheritance Object \u21e6 DescriptorFactory</p>"},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/#methods","title":"Methods","text":"Name Description GetObjectDescriptor(Type, Boolean) Gets a descriptor for an arbitrary object type; typically used for binding targets. GetViewDescriptor(Type) Gets a descriptor for a type that is assumed to be an IView implementation."},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/#getobjectdescriptortype-bool","title":"GetObjectDescriptor(Type, bool)","text":"<p>Gets a descriptor for an arbitrary object type; typically used for binding targets.</p> <pre><code>public static StardewUI.Framework.Descriptors.IObjectDescriptor GetObjectDescriptor(System.Type type, bool lazy);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/#parameters","title":"Parameters","text":"<p><code>type</code> Type The object type.</p> <p><code>lazy</code> Boolean Whether to create the descriptor with lazily-initialized members. Lazy descriptors are faster to create, but may have slower initial access times.</p>"},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/#returns","title":"Returns","text":"<p>IObjectDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/#getviewdescriptortype","title":"GetViewDescriptor(Type)","text":"<p>Gets a descriptor for a type that is assumed to be an IView implementation.</p> <pre><code>public static StardewUI.Framework.Descriptors.IViewDescriptor GetViewDescriptor(System.Type type);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/#parameters_1","title":"Parameters","text":"<p><code>type</code> Type The object type.</p>"},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/#returns_1","title":"Returns","text":"<p>IViewDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/descriptorfactory/#remarks","title":"Remarks","text":"<p>View descriptors include additional information about view-specific types, such as outlets.</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/","title":"ExpressionFieldDescriptor&lt;T, TValue&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#class-expressionfielddescriptort-tvalue","title":"Class ExpressionFieldDescriptor&lt;T, TValue&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Implementation of a field descriptor using a compiled expression tree.</p> <pre><code>public class ExpressionFieldDescriptor&lt;T, TValue&gt; : \n    StardewUI.Framework.Descriptors.IPropertyDescriptor&lt;TValue&gt;, \n    StardewUI.Framework.Descriptors.IPropertyDescriptor, \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The field's declaring type.</p> <p><code>TValue</code> The field's value type.</p> <p>Inheritance Object \u21e6 ExpressionFieldDescriptor&lt;T, TValue&gt;</p> <p>Implements IPropertyDescriptor&lt;TValue&gt;, IPropertyDescriptor, IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#remarks","title":"Remarks","text":"<p>Expression trees take a long time to compile and should only be compiled in the background, but once compiled are nearly equivalent to a regular field access.</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#properties","title":"Properties","text":"Name Description CanRead Whether or not the property is readable, i.e. has a public getter. CanWrite Whether or not the property is writable, i.e. has a public setter. DeclaringType The type on which the member is declared. IsAutoProperty Whether or not the property is likely auto-implemented. IsField Whether or not the underlying member is a field, rather than a real property. Name The member name. ValueType The property's value type."},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#methods","title":"Methods","text":"Name Description Build(FieldInfo) Builds a new ExpressionFieldDescriptor&lt;T, TValue&gt; instance from the specified field. GetValue(Object) Reads the current property value. SetValue(Object, TValue) Writes a new property value."},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#canread","title":"CanRead","text":"<p>Whether or not the property is readable, i.e. has a public getter.</p> <pre><code>public bool CanRead { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#remarks_1","title":"Remarks","text":"<p>For fields, always returns <code>true</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#canwrite","title":"CanWrite","text":"<p>Whether or not the property is writable, i.e. has a public setter.</p> <pre><code>public bool CanWrite { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#declaringtype","title":"DeclaringType","text":"<p>The type on which the member is declared.</p> <pre><code>public System.Type DeclaringType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#property-value_2","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#isautoproperty","title":"IsAutoProperty","text":"<p>Whether or not the property is likely auto-implemented.</p> <pre><code>public bool IsAutoProperty { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#remarks_2","title":"Remarks","text":"<p>Auto-property detection is heuristic, relying on the method's IL instructions and the name of its backing field. This can often be interpreted as a signal that the property won't receive property-change notifications, since to do so (whether explicitly or via some weaver/source generator) requires an implementation that is different from the auto-generated getter and setter. </p> <p>Caveats: This only works as a negative signal (a value of <code>false</code> does not prove that the property will receive notifications, even if the declaring type implements INotifyPropertyChanged), and is somewhat fuzzy even as a negative signal; it is theoretically possible for a source generator or IL weaver to leave behind all the markers of an auto property and still emit notifications, although no known libraries actually do so.</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#isfield","title":"IsField","text":"<p>Whether or not the underlying member is a field, rather than a real property.</p> <pre><code>public bool IsField { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#property-value_4","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#remarks_3","title":"Remarks","text":"<p>For binding convenience, fields and properties are both called \"properties\" for descriptors, as the external access pattern is the same; however, mutable fields can never reliably emit property-change notifications regardless of whether the declaring type implements INotifyPropertyChanged, so this is usually used to emit some warning.</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#name","title":"Name","text":"<p>The member name.</p> <pre><code>public string Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#property-value_5","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#valuetype","title":"ValueType","text":"<p>The property's value type.</p> <pre><code>public System.Type ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#property-value_6","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#buildfieldinfo","title":"Build(FieldInfo)","text":"<p>Builds a new ExpressionFieldDescriptor&lt;T, TValue&gt; instance from the specified field.</p> <pre><code>public static StardewUI.Framework.Descriptors.ExpressionFieldDescriptor&lt;T, TValue&gt; Build(System.Reflection.FieldInfo field);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#parameters","title":"Parameters","text":"<p><code>field</code> FieldInfo The reflected field.</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#returns","title":"Returns","text":"<p>ExpressionFieldDescriptor&lt;T, TValue&gt;</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#getvalueobject","title":"GetValue(Object)","text":"<p>Reads the current property value.</p> <pre><code>public TValue GetValue(System.Object source);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#parameters_1","title":"Parameters","text":"<p><code>source</code> Object An instance of the property's DeclaringType.</p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#returns_1","title":"Returns","text":"<p><code>TValue</code></p>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#setvalueobject-tvalue","title":"SetValue(Object, TValue)","text":"<p>Writes a new property value.</p> <pre><code>public void SetValue(System.Object target, TValue value);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/expressionfielddescriptor-2/#parameters_2","title":"Parameters","text":"<p><code>target</code> Object An instance of the property's DeclaringType.</p> <p><code>value</code> \u00a0 TValue The new property value.</p>"},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/","title":"IEventDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#interface-ieventdescriptor","title":"Interface IEventDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Describes a single event on some type.</p> <pre><code>public interface IEventDescriptor : \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre> <p>Implements IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#properties","title":"Properties","text":"Name Description ArgsTypeDescriptor Descriptor for the type of event object (arguments), generally a subtype of EventArgs. DelegateParameterCount Number of parameters that the <code>Invoke</code> method of the DelegateType accepts. DelegateType The type (subtype of Delegate) that can be added/removed from the event handlers."},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#methods","title":"Methods","text":"Name Description Add(Object, Delegate) Adds an event handler. Remove(Object, Delegate) Removes an event handler."},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#argstypedescriptor","title":"ArgsTypeDescriptor","text":"<p>Descriptor for the type of event object (arguments), generally a subtype of EventArgs.</p> <pre><code>StardewUI.Framework.Descriptors.IObjectDescriptor ArgsTypeDescriptor { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#property-value","title":"Property Value","text":"<p>IObjectDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#delegateparametercount","title":"DelegateParameterCount","text":"<p>Number of parameters that the <code>Invoke</code> method of the DelegateType accepts.</p> <pre><code>int DelegateParameterCount { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#delegatetype","title":"DelegateType","text":"<p>The type (subtype of Delegate) that can be added/removed from the event handlers.</p> <pre><code>System.Type DelegateType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#property-value_2","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#addobject-delegate","title":"Add(Object, Delegate)","text":"<p>Adds an event handler.</p> <pre><code>void Add(System.Object target, System.Delegate handler);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#parameters","title":"Parameters","text":"<p><code>target</code> Object The instance of the DeclaringType on which to subscribe to events.</p> <p><code>handler</code> Delegate The handler to run when the event is raised; must be assignable to the DelegateType.</p>"},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#removeobject-delegate","title":"Remove(Object, Delegate)","text":"<p>Removes an event handler.</p> <pre><code>void Remove(System.Object target, System.Delegate handler);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/ieventdescriptor/#parameters_1","title":"Parameters","text":"<p><code>target</code> Object The instance of the DeclaringType on which to unsubscribe from events.</p> <p><code>handler</code> Delegate The handler that was previously registered, i.e. via Add(Object, Delegate).</p>"},{"location":"reference/stardewui/framework/descriptors/imemberdescriptor/","title":"IMemberDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/imemberdescriptor/#interface-imemberdescriptor","title":"Interface IMemberDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/imemberdescriptor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Describes a single member (property, method, or event) of a bindable object, such as a view.</p> <pre><code>public interface IMemberDescriptor\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/imemberdescriptor/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/imemberdescriptor/#properties","title":"Properties","text":"Name Description DeclaringType The type on which the member is declared. Name The member name."},{"location":"reference/stardewui/framework/descriptors/imemberdescriptor/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/imemberdescriptor/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/imemberdescriptor/#declaringtype","title":"DeclaringType","text":"<p>The type on which the member is declared.</p> <pre><code>System.Type DeclaringType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/imemberdescriptor/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/imemberdescriptor/#name","title":"Name","text":"<p>The member name.</p> <pre><code>string Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/imemberdescriptor/#property-value_1","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor-1/","title":"IMethodDescriptor&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor-1/#interface-imethoddescriptort","title":"Interface IMethodDescriptor&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Describes a single method on some type, and provides a wrapper method to invoke it.</p> <pre><code>public interface IMethodDescriptor&lt;T&gt; : \n    StardewUI.Framework.Descriptors.IMethodDescriptor, \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The return type of the described method.</p> <p>Implements IMethodDescriptor, IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor-1/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor-1/#methods","title":"Methods","text":"Name Description Invoke(Object, Object) Invokes the underlying method."},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor-1/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor-1/#invokeobject-object","title":"Invoke(Object, Object)","text":"<p>Invokes the underlying method.</p> <pre><code>T Invoke(System.Object target, System.Object arguments);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor-1/#parameters","title":"Parameters","text":"<p><code>target</code> Object The object instance on which to invoke the method.</p> <p><code>arguments</code> Object The arguments to provide to the method.</p>"},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor-1/#returns","title":"Returns","text":"<p><code>T</code></p> <p>The return value.</p>"},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/","title":"IMethodDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/#interface-imethoddescriptor","title":"Interface IMethodDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Describes a single method on some type.</p> <pre><code>public interface IMethodDescriptor : \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre> <p>Implements IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/#properties","title":"Properties","text":"Name Description ArgumentTypes The exact types expected for the method's arguments. OptionalArgumentCount The number of optional arguments at the end of the argument list. ReturnType The method's return type."},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/#argumenttypes","title":"ArgumentTypes","text":"<p>The exact types expected for the method's arguments.</p> <pre><code>ReadOnlySpan&lt;System.Type&gt; ArgumentTypes { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/#property-value","title":"Property Value","text":"<p>ReadOnlySpan&lt;Type&gt;</p>"},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/#optionalargumentcount","title":"OptionalArgumentCount","text":"<p>The number of optional arguments at the end of the argument list.</p> <pre><code>int OptionalArgumentCount { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/#remarks","title":"Remarks","text":"<p>Optional arguments can be provided with Missing in order to ignore them in the invocation.</p>"},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/#returntype","title":"ReturnType","text":"<p>The method's return type.</p> <pre><code>System.Type ReturnType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/imethoddescriptor/#property-value_2","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/","title":"IObjectDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#interface-iobjectdescriptor","title":"Interface IObjectDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Describes a type of object that participates in view binding, either as the target or the source.</p> <pre><code>public interface IObjectDescriptor\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#remarks","title":"Remarks","text":"<p>The binding target is independent of the actual object instance; it provides methods and data to support interacting with any object of the given TargetType.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#properties","title":"Properties","text":"Name Description SupportsChangeNotifications Whether or not objects of this type can notify about data changes; that is, if the type implements INotifyPropertyChanged. TargetType The type being described, which owns or inherits each of the available members."},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#methods","title":"Methods","text":"Name Description GetEvent(string) Retrieves a named event on the TargetType. GetMethod(string) Retrieves a named method of the TargetType. GetProperty(string) Retrieves a named property of the TargetType. TryGetEvent(string, IEventDescriptor) Attempts to retrieve a named event on the TargetType. TryGetMethod(string, IMethodDescriptor) Attempts to retrieve a named method of the TargetType. TryGetProperty(string, IPropertyDescriptor) Attempts to retrieve a named property of the TargetType."},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#supportschangenotifications","title":"SupportsChangeNotifications","text":"<p>Whether or not objects of this type can notify about data changes; that is, if the type implements INotifyPropertyChanged.</p> <pre><code>bool SupportsChangeNotifications { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#targettype","title":"TargetType","text":"<p>The type being described, which owns or inherits each of the available members.</p> <pre><code>System.Type TargetType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#geteventstring","title":"GetEvent(string)","text":"<p>Retrieves a named event on the TargetType.</p> <pre><code>StardewUI.Framework.Descriptors.IEventDescriptor GetEvent(string name);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#parameters","title":"Parameters","text":"<p><code>name</code> string The event name.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#returns","title":"Returns","text":"<p>IEventDescriptor</p> <p>The IEventDescriptor whose Name is <code>name</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#getmethodstring","title":"GetMethod(string)","text":"<p>Retrieves a named method of the TargetType.</p> <pre><code>StardewUI.Framework.Descriptors.IMethodDescriptor GetMethod(string name);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#parameters_1","title":"Parameters","text":"<p><code>name</code> string The method name.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#returns_1","title":"Returns","text":"<p>IMethodDescriptor</p> <p>The IMethodDescriptor whose Name is <code>name</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#remarks_1","title":"Remarks","text":"<p>Overloaded methods are not supported. If different signatures are required, use optional parameters.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#getpropertystring","title":"GetProperty(string)","text":"<p>Retrieves a named property of the TargetType.</p> <pre><code>StardewUI.Framework.Descriptors.IPropertyDescriptor GetProperty(string name);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#parameters_2","title":"Parameters","text":"<p><code>name</code> string The property name.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#returns_2","title":"Returns","text":"<p>IPropertyDescriptor</p> <p>The IPropertyDescriptor whose Name is <code>name</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#trygeteventstring-ieventdescriptor","title":"TryGetEvent(string, IEventDescriptor)","text":"<p>Attempts to retrieve a named event on the TargetType.</p> <pre><code>bool TryGetEvent(string name, out StardewUI.Framework.Descriptors.IEventDescriptor event);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#parameters_3","title":"Parameters","text":"<p><code>name</code> string The event name.</p> <p><code>event</code> IEventDescriptor When this method returns, holds a reference to the IEventDescriptor whose Name is <code>name</code>, or <code>null</code> if no event was found with the given name.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#returns_3","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the named event was found, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#trygetmethodstring-imethoddescriptor","title":"TryGetMethod(string, IMethodDescriptor)","text":"<p>Attempts to retrieve a named method of the TargetType.</p> <pre><code>bool TryGetMethod(string name, out StardewUI.Framework.Descriptors.IMethodDescriptor method);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#parameters_4","title":"Parameters","text":"<p><code>name</code> string The method name.</p> <p><code>method</code> IMethodDescriptor When this method returns, holds a reference to the IMethodDescriptor whose Name is <code>name</code>, or <code>null</code> if no method was found with the given name.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#returns_4","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the named method was found, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#remarks_2","title":"Remarks","text":"<p>Overloaded methods are not supported. If different signatures are required, use optional parameters.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#trygetpropertystring-ipropertydescriptor","title":"TryGetProperty(string, IPropertyDescriptor)","text":"<p>Attempts to retrieve a named property of the TargetType.</p> <pre><code>bool TryGetProperty(string name, out StardewUI.Framework.Descriptors.IPropertyDescriptor property);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#parameters_5","title":"Parameters","text":"<p><code>name</code> string The property name.</p> <p><code>property</code> IPropertyDescriptor When this method returns, holds a reference to the IPropertyDescriptor whose Name is <code>name</code>, or <code>null</code> if no property was found with the given name.</p>"},{"location":"reference/stardewui/framework/descriptors/iobjectdescriptor/#returns_5","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the named property was found, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/","title":"IPropertyDescriptor&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/#interface-ipropertydescriptort","title":"Interface IPropertyDescriptor&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Describes a single property on a bindable object (i.e. a view) and provides methods to read or write the value.</p> <pre><code>public interface IPropertyDescriptor&lt;T&gt; : \n    StardewUI.Framework.Descriptors.IPropertyDescriptor, \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The property type.</p> <p>Implements IPropertyDescriptor, IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/#remarks","title":"Remarks","text":"<p>The read and write methods take Object as a receiver because they are intended to be invoked from a non-generic context.</p>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/#methods","title":"Methods","text":"Name Description GetValue(Object) Reads the current property value. SetValue(Object, T) Writes a new property value."},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/#getvalueobject","title":"GetValue(Object)","text":"<p>Reads the current property value.</p> <pre><code>T GetValue(System.Object source);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/#parameters","title":"Parameters","text":"<p><code>source</code> Object An instance of the property's DeclaringType.</p>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/#returns","title":"Returns","text":"<p><code>T</code></p> <p>The current property value.</p>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/#setvalueobject-t","title":"SetValue(Object, T)","text":"<p>Writes a new property value.</p> <pre><code>void SetValue(System.Object target, T value);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor-1/#parameters_1","title":"Parameters","text":"<p><code>target</code> Object An instance of the property's DeclaringType.</p> <p><code>value</code> \u00a0 T The new property value.</p>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/","title":"IPropertyDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#interface-ipropertydescriptor","title":"Interface IPropertyDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Describes a single property on a bindable object (i.e. a view).</p> <pre><code>public interface IPropertyDescriptor : \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre> <p>Implements IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#properties","title":"Properties","text":"Name Description CanRead Whether or not the property is readable, i.e. has a public getter. CanWrite Whether or not the property is writable, i.e. has a public setter. IsAutoProperty Whether or not the property is likely auto-implemented. IsField Whether or not the underlying member is a field, rather than a real property. ValueType The property's value type."},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#canread","title":"CanRead","text":"<p>Whether or not the property is readable, i.e. has a public getter.</p> <pre><code>bool CanRead { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#canwrite","title":"CanWrite","text":"<p>Whether or not the property is writable, i.e. has a public setter.</p> <pre><code>bool CanWrite { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#isautoproperty","title":"IsAutoProperty","text":"<p>Whether or not the property is likely auto-implemented.</p> <pre><code>bool IsAutoProperty { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#property-value_2","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#remarks","title":"Remarks","text":"<p>Auto-property detection is heuristic, relying on the method's IL instructions and the name of its backing field. This can often be interpreted as a signal that the property won't receive property-change notifications, since to do so (whether explicitly or via some weaver/source generator) requires an implementation that is different from the auto-generated getter and setter. </p> <p>Caveats: This only works as a negative signal (a value of <code>false</code> does not prove that the property will receive notifications, even if the declaring type implements INotifyPropertyChanged), and is somewhat fuzzy even as a negative signal; it is theoretically possible for a source generator or IL weaver to leave behind all the markers of an auto property and still emit notifications, although no known libraries actually do so.</p>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#isfield","title":"IsField","text":"<p>Whether or not the underlying member is a field, rather than a real property.</p> <pre><code>bool IsField { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#remarks_1","title":"Remarks","text":"<p>For binding convenience, fields and properties are both called \"properties\" for descriptors, as the external access pattern is the same; however, mutable fields can never reliably emit property-change notifications regardless of whether the declaring type implements INotifyPropertyChanged, so this is usually used to emit some warning.</p>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#valuetype","title":"ValueType","text":"<p>The property's value type.</p> <pre><code>System.Type ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/ipropertydescriptor/#property-value_4","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/","title":"IViewDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/#interface-iviewdescriptor","title":"Interface IViewDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Describes a type of view that can be used in a view binding.</p> <pre><code>public interface IViewDescriptor : \n    StardewUI.Framework.Descriptors.IObjectDescriptor\n</code></pre> <p>Implements IObjectDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/#remarks","title":"Remarks","text":"<p>The binding target is independent of the actual IView instance; it provides methods and data to support interacting with any view of the given TargetType.</p>"},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/#methods","title":"Methods","text":"Name Description GetChildrenProperty(string) Retrieves the property of the TargetType that holds the view's children/content. TryGetChildrenProperty(string, IPropertyDescriptor) Attempts to retrieve the property of the TargetType that holds the view's children/content."},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/#getchildrenpropertystring","title":"GetChildrenProperty(string)","text":"<p>Retrieves the property of the TargetType that holds the view's children/content.</p> <pre><code>StardewUI.Framework.Descriptors.IPropertyDescriptor GetChildrenProperty(string outletName);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/#parameters","title":"Parameters","text":"<p><code>outletName</code> string The name of the specific outlet, if targeting a non-default outlet on a view with multiple outlets. Corresponds to Name.</p>"},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/#returns","title":"Returns","text":"<p>IPropertyDescriptor</p> <p>The view children property.</p>"},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/#trygetchildrenpropertystring-ipropertydescriptor","title":"TryGetChildrenProperty(string, IPropertyDescriptor)","text":"<p>Attempts to retrieve the property of the TargetType that holds the view's children/content.</p> <pre><code>bool TryGetChildrenProperty(string outletName, out StardewUI.Framework.Descriptors.IPropertyDescriptor property);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/#parameters_1","title":"Parameters","text":"<p><code>outletName</code> string The name of the specific outlet, if targeting a non-default outlet on a view with multiple outlets. Corresponds to Name.</p> <p><code>property</code> IPropertyDescriptor When this method returns, holds a reference to the IPropertyDescriptor that holds the view's children/content, or <code>null</code> if no such property is available.</p>"},{"location":"reference/stardewui/framework/descriptors/iviewdescriptor/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if a children/content property was found, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/","title":"LazyExpressionFieldDescriptor&lt;TValue&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#class-lazyexpressionfielddescriptortvalue","title":"Class LazyExpressionFieldDescriptor&lt;TValue&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Implementation of a field descriptor that supports a transition between two inner descriptor types.</p> <pre><code>public class LazyExpressionFieldDescriptor&lt;TValue&gt; : \n    StardewUI.Framework.Descriptors.IPropertyDescriptor&lt;TValue&gt;, \n    StardewUI.Framework.Descriptors.IPropertyDescriptor, \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#type-parameters","title":"Type Parameters","text":"<p><code>TValue</code> The field's value type.</p> <p>Inheritance Object \u21e6 LazyExpressionFieldDescriptor&lt;TValue&gt;</p> <p>Implements IPropertyDescriptor&lt;TValue&gt;, IPropertyDescriptor, IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#remarks","title":"Remarks","text":"<p>Designed to initially use a \"slow\" descriptor that is poorly optimized for access times, but is available immediately, and then transition to a \"fast\" descriptor that is created asynchronously and slowly, but is better optimized for frequent access.</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#constructors","title":"Constructors","text":"Name Description LazyExpressionFieldDescriptor&lt;TValue&gt;(IPropertyDescriptor&lt;TValue&gt;, Task&lt;IPropertyDescriptor&lt;TValue&gt;&gt;) Initializes a new LazyExpressionFieldDescriptor&lt;TValue&gt; instance."},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#properties","title":"Properties","text":"Name Description CanRead Whether or not the property is readable, i.e. has a public getter. CanWrite Whether or not the property is writable, i.e. has a public setter. DeclaringType The type on which the member is declared. IsAutoProperty Whether or not the property is likely auto-implemented. IsField Whether or not the underlying member is a field, rather than a real property. Name The member name. ValueType The property's value type."},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#methods","title":"Methods","text":"Name Description GetValue(Object) Reads the current property value. SetValue(Object, TValue) Writes a new property value."},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#lazyexpressionfielddescriptortvalueipropertydescriptortvalue-taskipropertydescriptortvalue","title":"LazyExpressionFieldDescriptor&lt;TValue&gt;(IPropertyDescriptor&lt;TValue&gt;, Task&lt;IPropertyDescriptor&lt;TValue&gt;&gt;)","text":"<p>Initializes a new LazyExpressionFieldDescriptor&lt;TValue&gt; instance.</p> <pre><code>public LazyExpressionFieldDescriptor&lt;TValue&gt;(StardewUI.Framework.Descriptors.IPropertyDescriptor&lt;TValue&gt; slowDescriptor, System.Threading.Tasks.Task&lt;StardewUI.Framework.Descriptors.IPropertyDescriptor&lt;TValue&gt;&gt; fastDescriptorTask);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#parameters","title":"Parameters","text":"<p><code>slowDescriptor</code> IPropertyDescriptor&lt;TValue&gt; The slower but immediately-available descriptor to use initially; typically an instance of ReflectionFieldDescriptor&lt;TValue&gt;.</p> <p><code>fastDescriptorTask</code> Task&lt;IPropertyDescriptor&lt;TValue&gt;&gt; The faster, deferred descriptor to use once available; typically an instance of ExpressionFieldDescriptor&lt;T, TValue&gt;.</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#canread","title":"CanRead","text":"<p>Whether or not the property is readable, i.e. has a public getter.</p> <pre><code>public bool CanRead { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#remarks_1","title":"Remarks","text":"<p>For fields, always returns <code>true</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#canwrite","title":"CanWrite","text":"<p>Whether or not the property is writable, i.e. has a public setter.</p> <pre><code>public bool CanWrite { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#declaringtype","title":"DeclaringType","text":"<p>The type on which the member is declared.</p> <pre><code>public System.Type DeclaringType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#property-value_2","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#isautoproperty","title":"IsAutoProperty","text":"<p>Whether or not the property is likely auto-implemented.</p> <pre><code>public bool IsAutoProperty { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#remarks_2","title":"Remarks","text":"<p>Auto-property detection is heuristic, relying on the method's IL instructions and the name of its backing field. This can often be interpreted as a signal that the property won't receive property-change notifications, since to do so (whether explicitly or via some weaver/source generator) requires an implementation that is different from the auto-generated getter and setter. </p> <p>Caveats: This only works as a negative signal (a value of <code>false</code> does not prove that the property will receive notifications, even if the declaring type implements INotifyPropertyChanged), and is somewhat fuzzy even as a negative signal; it is theoretically possible for a source generator or IL weaver to leave behind all the markers of an auto property and still emit notifications, although no known libraries actually do so.</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#isfield","title":"IsField","text":"<p>Whether or not the underlying member is a field, rather than a real property.</p> <pre><code>public bool IsField { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#property-value_4","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#remarks_3","title":"Remarks","text":"<p>For binding convenience, fields and properties are both called \"properties\" for descriptors, as the external access pattern is the same; however, mutable fields can never reliably emit property-change notifications regardless of whether the declaring type implements INotifyPropertyChanged, so this is usually used to emit some warning.</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#name","title":"Name","text":"<p>The member name.</p> <pre><code>public string Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#property-value_5","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#valuetype","title":"ValueType","text":"<p>The property's value type.</p> <pre><code>public System.Type ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#property-value_6","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#getvalueobject","title":"GetValue(Object)","text":"<p>Reads the current property value.</p> <pre><code>public TValue GetValue(System.Object source);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#parameters_1","title":"Parameters","text":"<p><code>source</code> Object An instance of the property's DeclaringType.</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#returns","title":"Returns","text":"<p><code>TValue</code></p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#setvalueobject-tvalue","title":"SetValue(Object, TValue)","text":"<p>Writes a new property value.</p> <pre><code>public void SetValue(System.Object target, TValue value);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor-1/#parameters_2","title":"Parameters","text":"<p><code>target</code> Object An instance of the property's DeclaringType.</p> <p><code>value</code> \u00a0 TValue The new property value.</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor/","title":"LazyExpressionFieldDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor/#class-lazyexpressionfielddescriptor","title":"Class LazyExpressionFieldDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Helper for creating LazyExpressionFieldDescriptor&lt;TValue&gt; with types not known at compile time.</p> <pre><code>public static class LazyExpressionFieldDescriptor\n</code></pre> <p>Inheritance Object \u21e6 LazyExpressionFieldDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor/#methods","title":"Methods","text":"Name Description FromFieldInfo(FieldInfo) Creates a binding field from reflected field info."},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor/#fromfieldinfofieldinfo","title":"FromFieldInfo(FieldInfo)","text":"<p>Creates a binding field from reflected field info.</p> <pre><code>public static StardewUI.Framework.Descriptors.IPropertyDescriptor FromFieldInfo(System.Reflection.FieldInfo fieldInfo);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor/#parameters","title":"Parameters","text":"<p><code>fieldInfo</code> FieldInfo The reflected field info.</p>"},{"location":"reference/stardewui/framework/descriptors/lazyexpressionfielddescriptor/#returns","title":"Returns","text":"<p>IPropertyDescriptor</p> <p>A binding field of type LazyExpressionFieldDescriptor&lt;TValue&gt;, whose generic argument is the field's FieldType.</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/","title":"PrecompiledEventDescriptor&lt;TTarget, THandler&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#class-precompiledeventdescriptorttarget-thandler","title":"Class PrecompiledEventDescriptor&lt;TTarget, THandler&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Statically-typed implementation of an IEventDescriptor with predefined attributes.</p> <pre><code>public class PrecompiledEventDescriptor&lt;TTarget, THandler&gt; : \n    StardewUI.Framework.Descriptors.IEventDescriptor, \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#type-parameters","title":"Type Parameters","text":"<p><code>TTarget</code> The event's declaring type.</p> <p><code>THandler</code> The delegate type of event handlers.</p> <p>Inheritance Object \u21e6 PrecompiledEventDescriptor&lt;TTarget, THandler&gt;</p> <p>Implements IEventDescriptor, IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#constructors","title":"Constructors","text":"Name Description PrecompiledEventDescriptor&lt;TTarget, THandler&gt;(string, Action&lt;TTarget, THandler&gt;, Action&lt;TTarget, THandler&gt;, Type) Statically-typed implementation of an IEventDescriptor with predefined attributes."},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#properties","title":"Properties","text":"Name Description ArgsTypeDescriptor Descriptor for the type of event object (arguments), generally a subtype of EventArgs. DeclaringType The type on which the member is declared. DelegateParameterCount Number of parameters that the <code>Invoke</code> method of the DelegateType accepts. DelegateType The type (subtype of Delegate) that can be added/removed from the event handlers. Name The member name."},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#methods","title":"Methods","text":"Name Description Add(Object, Delegate) Adds an event handler. Remove(Object, Delegate) Removes an event handler."},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#precompiledeventdescriptorttarget-thandlerstring-actionttarget-thandler-actionttarget-thandler-type","title":"PrecompiledEventDescriptor&lt;TTarget, THandler&gt;(string, Action&lt;TTarget, THandler&gt;, Action&lt;TTarget, THandler&gt;, Type)","text":"<p>Statically-typed implementation of an IEventDescriptor with predefined attributes.</p> <pre><code>public PrecompiledEventDescriptor&lt;TTarget, THandler&gt;(string name, Action&lt;TTarget, THandler&gt; add, Action&lt;TTarget, THandler&gt; remove, System.Type argsType);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#parameters","title":"Parameters","text":"<p><code>name</code> string The event name.</p> <p><code>add</code> Action&lt;TTarget, THandler&gt; Function to add a new event handler to an instance of the target type.</p> <p><code>remove</code> Action&lt;TTarget, THandler&gt; Function to remove an existing event handler from an instance of the target type.</p> <p><code>argsType</code> Type Type of the argument parameter in the <code>THandler</code> delegate.</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#argstypedescriptor","title":"ArgsTypeDescriptor","text":"<p>Descriptor for the type of event object (arguments), generally a subtype of EventArgs.</p> <pre><code>public StardewUI.Framework.Descriptors.IObjectDescriptor ArgsTypeDescriptor { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#property-value","title":"Property Value","text":"<p>IObjectDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#declaringtype","title":"DeclaringType","text":"<p>The type on which the member is declared.</p> <pre><code>public System.Type DeclaringType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#delegateparametercount","title":"DelegateParameterCount","text":"<p>Number of parameters that the <code>Invoke</code> method of the DelegateType accepts.</p> <pre><code>public int DelegateParameterCount { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#property-value_2","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#remarks","title":"Remarks","text":"<p>For precompiled descriptors, this is assumed to always be exactly 2 (sender and args).</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#delegatetype","title":"DelegateType","text":"<p>The type (subtype of Delegate) that can be added/removed from the event handlers.</p> <pre><code>public System.Type DelegateType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#property-value_3","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#name","title":"Name","text":"<p>The member name.</p> <pre><code>public string Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#property-value_4","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#addobject-delegate","title":"Add(Object, Delegate)","text":"<p>Adds an event handler.</p> <pre><code>public void Add(System.Object target, System.Delegate handler);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#parameters_1","title":"Parameters","text":"<p><code>target</code> Object The instance of the DeclaringType on which to subscribe to events.</p> <p><code>handler</code> Delegate The handler to run when the event is raised; must be assignable to the DelegateType.</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#removeobject-delegate","title":"Remove(Object, Delegate)","text":"<p>Removes an event handler.</p> <pre><code>public void Remove(System.Object target, System.Delegate handler);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledeventdescriptor-2/#parameters_2","title":"Parameters","text":"<p><code>target</code> Object The instance of the DeclaringType on which to unsubscribe from events.</p> <p><code>handler</code> Delegate The handler that was previously registered, i.e. via Add(Object, Delegate).</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/","title":"PrecompiledMethodDescriptor&lt;TTarget, TReturn&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#class-precompiledmethoddescriptorttarget-treturn","title":"Class PrecompiledMethodDescriptor&lt;TTarget, TReturn&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Statically-typed implementation of an IMethodDescriptor&lt;T&gt; with predefined attributes.</p> <pre><code>public class PrecompiledMethodDescriptor&lt;TTarget, TReturn&gt; : \n    StardewUI.Framework.Descriptors.IMethodDescriptor&lt;TReturn&gt;, \n    StardewUI.Framework.Descriptors.IMethodDescriptor, \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#type-parameters","title":"Type Parameters","text":"<p><code>TTarget</code> The method's declaring type.</p> <p><code>TReturn</code> The type of the method's return value.</p> <p>Inheritance Object \u21e6 PrecompiledMethodDescriptor&lt;TTarget, TReturn&gt;</p> <p>Implements IMethodDescriptor&lt;TReturn&gt;, IMethodDescriptor, IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#constructors","title":"Constructors","text":"Name Description PrecompiledMethodDescriptor&lt;TTarget, TReturn&gt;(string, Type, Object, Func&lt;TTarget, Object, Object&gt;) Statically-typed implementation of an IMethodDescriptor&lt;T&gt; with predefined attributes."},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#properties","title":"Properties","text":"Name Description ArgumentTypes The exact types expected for the method's arguments. DeclaringType The type on which the member is declared. Name The member name. OptionalArgumentCount The number of optional arguments at the end of the argument list. ReturnType The method's return type."},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#methods","title":"Methods","text":"Name Description Invoke(Object, Object) Invokes the underlying method."},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#precompiledmethoddescriptorttarget-treturnstring-type-object-functtarget-object-object","title":"PrecompiledMethodDescriptor&lt;TTarget, TReturn&gt;(string, Type, Object, Func&lt;TTarget, Object, Object&gt;)","text":"<p>Statically-typed implementation of an IMethodDescriptor&lt;T&gt; with predefined attributes.</p> <pre><code>public PrecompiledMethodDescriptor&lt;TTarget, TReturn&gt;(string name, System.Type argumentTypes, System.Object defaultValues, Func&lt;TTarget, System.Object, System.Object&gt; invoke);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#parameters","title":"Parameters","text":"<p><code>name</code> string The method name.</p> <p><code>argumentTypes</code> Type Types of all method parameters, including optional parameters.</p> <p><code>defaultValues</code> Object Default values for all optional parameters at the end of the argument list.</p> <p><code>invoke</code> Func&lt;TTarget, Object, Object&gt; Function to invoke the method on a given target with a specified argument list.</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#argumenttypes","title":"ArgumentTypes","text":"<p>The exact types expected for the method's arguments.</p> <pre><code>public ReadOnlySpan&lt;System.Type&gt; ArgumentTypes { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#property-value","title":"Property Value","text":"<p>ReadOnlySpan&lt;Type&gt;</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#declaringtype","title":"DeclaringType","text":"<p>The type on which the member is declared.</p> <pre><code>public System.Type DeclaringType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#name","title":"Name","text":"<p>The member name.</p> <pre><code>public string Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#optionalargumentcount","title":"OptionalArgumentCount","text":"<p>The number of optional arguments at the end of the argument list.</p> <pre><code>public int OptionalArgumentCount { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#property-value_3","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#remarks","title":"Remarks","text":"<p>Optional arguments can be provided with Missing in order to ignore them in the invocation.</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#returntype","title":"ReturnType","text":"<p>The method's return type.</p> <pre><code>public System.Type ReturnType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#property-value_4","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#invokeobject-object","title":"Invoke(Object, Object)","text":"<p>Invokes the underlying method.</p> <pre><code>public TReturn Invoke(System.Object target, System.Object arguments);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#parameters_1","title":"Parameters","text":"<p><code>target</code> Object The object instance on which to invoke the method.</p> <p><code>arguments</code> Object The arguments to provide to the method.</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledmethoddescriptor-2/#returns","title":"Returns","text":"<p><code>TReturn</code></p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/","title":"PrecompiledPropertyDescriptor&lt;TTarget, TProperty&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#class-precompiledpropertydescriptorttarget-tproperty","title":"Class PrecompiledPropertyDescriptor&lt;TTarget, TProperty&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Statically-typed implementation of an IPropertyDescriptor&lt;T&gt; with predefined attributes.</p> <pre><code>public class PrecompiledPropertyDescriptor&lt;TTarget, TProperty&gt; : \n    StardewUI.Framework.Descriptors.IPropertyDescriptor&lt;TProperty&gt;, \n    StardewUI.Framework.Descriptors.IPropertyDescriptor, \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#type-parameters","title":"Type Parameters","text":"<p><code>TTarget</code> The property's declaring type.</p> <p><code>TProperty</code> The property value type.</p> <p>Inheritance Object \u21e6 PrecompiledPropertyDescriptor&lt;TTarget, TProperty&gt;</p> <p>Implements IPropertyDescriptor&lt;TProperty&gt;, IPropertyDescriptor, IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#constructors","title":"Constructors","text":"Name Description PrecompiledPropertyDescriptor&lt;TTarget, TProperty&gt;(string, Boolean, Boolean, Func&lt;TTarget, TProperty&gt;, Action&lt;TTarget, TProperty&gt;) Statically-typed implementation of an IPropertyDescriptor&lt;T&gt; with predefined attributes."},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#properties","title":"Properties","text":"Name Description CanRead Whether or not the property is readable, i.e. has a public getter. CanWrite Whether or not the property is writable, i.e. has a public setter. DeclaringType The type on which the member is declared. IsAutoProperty Whether or not the property is likely auto-implemented. IsField Whether or not the underlying member is a field, rather than a real property. Name The member name. ValueType The property's value type."},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#methods","title":"Methods","text":"Name Description GetValue(Object) Reads the current property value. SetValue(Object, TProperty) Writes a new property value."},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#precompiledpropertydescriptorttarget-tpropertystring-bool-bool-functtarget-tproperty-actionttarget-tproperty","title":"PrecompiledPropertyDescriptor&lt;TTarget, TProperty&gt;(string, bool, bool, Func&lt;TTarget, TProperty&gt;, Action&lt;TTarget, TProperty&gt;)","text":"<p>Statically-typed implementation of an IPropertyDescriptor&lt;T&gt; with predefined attributes.</p> <pre><code>public PrecompiledPropertyDescriptor&lt;TTarget, TProperty&gt;(string name, bool isField, bool isAutoProperty, Func&lt;TTarget, TProperty&gt; getter, Action&lt;TTarget, TProperty&gt; setter);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#parameters","title":"Parameters","text":"<p><code>name</code> string The event name.</p> <p><code>isField</code> Boolean Whether or not this descriptor is really for an unwrapped field.</p> <p><code>isAutoProperty</code> Boolean Whether or not the property is auto-implemented.</p> <p><code>getter</code> Func&lt;TTarget, TProperty&gt; Function to retrieve the current property value from a target instance.</p> <p><code>setter</code> Action&lt;TTarget, TProperty&gt; Function to set the current property value on a target instance.</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#canread","title":"CanRead","text":"<p>Whether or not the property is readable, i.e. has a public getter.</p> <pre><code>public bool CanRead { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#canwrite","title":"CanWrite","text":"<p>Whether or not the property is writable, i.e. has a public setter.</p> <pre><code>public bool CanWrite { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#declaringtype","title":"DeclaringType","text":"<p>The type on which the member is declared.</p> <pre><code>public System.Type DeclaringType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#property-value_2","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#isautoproperty","title":"IsAutoProperty","text":"<p>Whether or not the property is likely auto-implemented.</p> <pre><code>public bool IsAutoProperty { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#remarks","title":"Remarks","text":"<p>Auto-property detection is heuristic, relying on the method's IL instructions and the name of its backing field. This can often be interpreted as a signal that the property won't receive property-change notifications, since to do so (whether explicitly or via some weaver/source generator) requires an implementation that is different from the auto-generated getter and setter. </p> <p>Caveats: This only works as a negative signal (a value of <code>false</code> does not prove that the property will receive notifications, even if the declaring type implements INotifyPropertyChanged), and is somewhat fuzzy even as a negative signal; it is theoretically possible for a source generator or IL weaver to leave behind all the markers of an auto property and still emit notifications, although no known libraries actually do so.</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#isfield","title":"IsField","text":"<p>Whether or not the underlying member is a field, rather than a real property.</p> <pre><code>public bool IsField { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#property-value_4","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#remarks_1","title":"Remarks","text":"<p>For binding convenience, fields and properties are both called \"properties\" for descriptors, as the external access pattern is the same; however, mutable fields can never reliably emit property-change notifications regardless of whether the declaring type implements INotifyPropertyChanged, so this is usually used to emit some warning.</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#name","title":"Name","text":"<p>The member name.</p> <pre><code>public string Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#property-value_5","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#valuetype","title":"ValueType","text":"<p>The property's value type.</p> <pre><code>public System.Type ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#property-value_6","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#getvalueobject","title":"GetValue(Object)","text":"<p>Reads the current property value.</p> <pre><code>public TProperty GetValue(System.Object source);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#parameters_1","title":"Parameters","text":"<p><code>source</code> Object An instance of the property's DeclaringType.</p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#returns","title":"Returns","text":"<p><code>TProperty</code></p>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#setvalueobject-tproperty","title":"SetValue(Object, TProperty)","text":"<p>Writes a new property value.</p> <pre><code>public void SetValue(System.Object target, TProperty value);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/precompiledpropertydescriptor-2/#parameters_2","title":"Parameters","text":"<p><code>target</code> Object An instance of the property's DeclaringType.</p> <p><code>value</code> \u00a0 TProperty The new property value.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/","title":"ReflectionEventDescriptor&lt;TTarget, THandler&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#class-reflectioneventdescriptorttarget-thandler","title":"Class ReflectionEventDescriptor&lt;TTarget, THandler&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Reflection-based implementation of an event descriptor.</p> <pre><code>public class ReflectionEventDescriptor&lt;TTarget, THandler&gt; : \n    StardewUI.Framework.Descriptors.IEventDescriptor, \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#type-parameters","title":"Type Parameters","text":"<p><code>TTarget</code> The type that declares the event.</p> <p><code>THandler</code> The event handler (delegate) type.</p> <p>Inheritance Object \u21e6 ReflectionEventDescriptor&lt;TTarget, THandler&gt;</p> <p>Implements IEventDescriptor, IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#properties","title":"Properties","text":"Name Description ArgsTypeDescriptor Descriptor for the type of event object (arguments), generally a subtype of EventArgs. DeclaringType The type on which the member is declared. DelegateParameterCount Number of parameters that the <code>Invoke</code> method of the DelegateType accepts. DelegateType The type (subtype of Delegate) that can be added/removed from the event handlers. Name The member name."},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#methods","title":"Methods","text":"Name Description Add(Object, Delegate) Adds an event handler. Equals(Object) (Overrides Object.<code>Equals(Object)</code>) GetHashCode() (Overrides Object.<code>GetHashCode()</code>) Remove(Object, Delegate) Removes an event handler."},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#argstypedescriptor","title":"ArgsTypeDescriptor","text":"<p>Descriptor for the type of event object (arguments), generally a subtype of EventArgs.</p> <pre><code>public StardewUI.Framework.Descriptors.IObjectDescriptor ArgsTypeDescriptor { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#property-value","title":"Property Value","text":"<p>IObjectDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#declaringtype","title":"DeclaringType","text":"<p>The type on which the member is declared.</p> <pre><code>public System.Type DeclaringType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#delegateparametercount","title":"DelegateParameterCount","text":"<p>Number of parameters that the <code>Invoke</code> method of the DelegateType accepts.</p> <pre><code>public int DelegateParameterCount { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#property-value_2","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#delegatetype","title":"DelegateType","text":"<p>The type (subtype of Delegate) that can be added/removed from the event handlers.</p> <pre><code>public System.Type DelegateType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#property-value_3","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#name","title":"Name","text":"<p>The member name.</p> <pre><code>public string Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#property-value_4","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#addobject-delegate","title":"Add(Object, Delegate)","text":"<p>Adds an event handler.</p> <pre><code>public void Add(System.Object target, System.Delegate handler);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#parameters","title":"Parameters","text":"<p><code>target</code> Object The instance of the DeclaringType on which to subscribe to events.</p> <p><code>handler</code> Delegate The handler to run when the event is raised; must be assignable to the DelegateType.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#equalsobject","title":"Equals(Object)","text":"<pre><code>public override bool Equals(System.Object obj);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#parameters_1","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#returns","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#gethashcode","title":"GetHashCode()","text":"<pre><code>public override int GetHashCode();\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#returns_1","title":"Returns","text":"<p>Int32</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#removeobject-delegate","title":"Remove(Object, Delegate)","text":"<p>Removes an event handler.</p> <pre><code>public void Remove(System.Object target, System.Delegate handler);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor-2/#parameters_2","title":"Parameters","text":"<p><code>target</code> Object The instance of the DeclaringType on which to unsubscribe from events.</p> <p><code>handler</code> Delegate The handler that was previously registered, i.e. via Add(Object, Delegate).</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor/","title":"ReflectionEventDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor/#class-reflectioneventdescriptor","title":"Class ReflectionEventDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Helper for creating IEventDescriptor instances using reflection.</p> <pre><code>public static class ReflectionEventDescriptor\n</code></pre> <p>Inheritance Object \u21e6 ReflectionEventDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor/#methods","title":"Methods","text":"Name Description FromEventInfo(EventInfo) Creates or retrieves a descriptor for a given event. IsSupported(EventInfo) Checks if an event is supported for view binding."},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor/#fromeventinfoeventinfo","title":"FromEventInfo(EventInfo)","text":"<p>Creates or retrieves a descriptor for a given event.</p> <pre><code>public static StardewUI.Framework.Descriptors.IEventDescriptor FromEventInfo(System.Reflection.EventInfo eventInfo);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor/#parameters","title":"Parameters","text":"<p><code>eventInfo</code> EventInfo The event info.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor/#returns","title":"Returns","text":"<p>IEventDescriptor</p> <p>The descriptor for the specified <code>eventInfo</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor/#issupportedeventinfo","title":"IsSupported(EventInfo)","text":"<p>Checks if an event is supported for view binding.</p> <pre><code>public static bool IsSupported(System.Reflection.EventInfo eventInfo);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor/#parameters_1","title":"Parameters","text":"<p><code>eventInfo</code> EventInfo The event info.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectioneventdescriptor/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if a ReflectionEventDescriptor&lt;TTarget, THandler&gt; can be created for the specified <code>eventInfo</code>, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/","title":"ReflectionFieldDescriptor&lt;TValue&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#class-reflectionfielddescriptortvalue","title":"Class ReflectionFieldDescriptor&lt;TValue&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Implementation of a field descriptor based on reflection.</p> <pre><code>public class ReflectionFieldDescriptor&lt;TValue&gt; : \n    StardewUI.Framework.Descriptors.IPropertyDescriptor&lt;TValue&gt;, \n    StardewUI.Framework.Descriptors.IPropertyDescriptor, \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#type-parameters","title":"Type Parameters","text":"<p><code>TValue</code> The field's value type.</p> <p>Inheritance Object \u21e6 ReflectionFieldDescriptor&lt;TValue&gt;</p> <p>Implements IPropertyDescriptor&lt;TValue&gt;, IPropertyDescriptor, IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#remarks","title":"Remarks","text":"<p>Reflection has the quickest setup time of available methods, but the slowest overall access/write time.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#constructors","title":"Constructors","text":"Name Description ReflectionFieldDescriptor&lt;TValue&gt;(FieldInfo) Implementation of a field descriptor based on reflection."},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#properties","title":"Properties","text":"Name Description CanRead Whether or not the property is readable, i.e. has a public getter. CanWrite Whether or not the property is writable, i.e. has a public setter. DeclaringType The type on which the member is declared. IsAutoProperty Whether or not the property is likely auto-implemented. IsField Whether or not the underlying member is a field, rather than a real property. Name The member name. ValueType The property's value type."},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#methods","title":"Methods","text":"Name Description GetValue(Object) Reads the current property value. SetValue(Object, TValue) Writes a new property value."},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#reflectionfielddescriptortvaluefieldinfo","title":"ReflectionFieldDescriptor&lt;TValue&gt;(FieldInfo)","text":"<p>Implementation of a field descriptor based on reflection.</p> <pre><code>public ReflectionFieldDescriptor&lt;TValue&gt;(System.Reflection.FieldInfo field);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#parameters","title":"Parameters","text":"<p><code>field</code> FieldInfo The reflected field.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#remarks_1","title":"Remarks","text":"<p>Reflection has the quickest setup time of available methods, but the slowest overall access/write time.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#canread","title":"CanRead","text":"<p>Whether or not the property is readable, i.e. has a public getter.</p> <pre><code>public bool CanRead { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#remarks_2","title":"Remarks","text":"<p>For fields, always returns <code>true</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#canwrite","title":"CanWrite","text":"<p>Whether or not the property is writable, i.e. has a public setter.</p> <pre><code>public bool CanWrite { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#declaringtype","title":"DeclaringType","text":"<p>The type on which the member is declared.</p> <pre><code>public System.Type DeclaringType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#property-value_2","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#isautoproperty","title":"IsAutoProperty","text":"<p>Whether or not the property is likely auto-implemented.</p> <pre><code>public bool IsAutoProperty { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#remarks_3","title":"Remarks","text":"<p>Auto-property detection is heuristic, relying on the method's IL instructions and the name of its backing field. This can often be interpreted as a signal that the property won't receive property-change notifications, since to do so (whether explicitly or via some weaver/source generator) requires an implementation that is different from the auto-generated getter and setter. </p> <p>Caveats: This only works as a negative signal (a value of <code>false</code> does not prove that the property will receive notifications, even if the declaring type implements INotifyPropertyChanged), and is somewhat fuzzy even as a negative signal; it is theoretically possible for a source generator or IL weaver to leave behind all the markers of an auto property and still emit notifications, although no known libraries actually do so.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#isfield","title":"IsField","text":"<p>Whether or not the underlying member is a field, rather than a real property.</p> <pre><code>public bool IsField { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#property-value_4","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#remarks_4","title":"Remarks","text":"<p>For binding convenience, fields and properties are both called \"properties\" for descriptors, as the external access pattern is the same; however, mutable fields can never reliably emit property-change notifications regardless of whether the declaring type implements INotifyPropertyChanged, so this is usually used to emit some warning.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#name","title":"Name","text":"<p>The member name.</p> <pre><code>public string Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#property-value_5","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#valuetype","title":"ValueType","text":"<p>The property's value type.</p> <pre><code>public System.Type ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#property-value_6","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#getvalueobject","title":"GetValue(Object)","text":"<p>Reads the current property value.</p> <pre><code>public TValue GetValue(System.Object source);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#parameters_1","title":"Parameters","text":"<p><code>source</code> Object An instance of the property's DeclaringType.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#returns","title":"Returns","text":"<p><code>TValue</code></p>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#setvalueobject-tvalue","title":"SetValue(Object, TValue)","text":"<p>Writes a new property value.</p> <pre><code>public void SetValue(System.Object target, TValue value);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionfielddescriptor-1/#parameters_2","title":"Parameters","text":"<p><code>target</code> Object An instance of the property's DeclaringType.</p> <p><code>value</code> \u00a0 TValue The new property value.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionmethoddescriptor/","title":"ReflectionMethodDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionmethoddescriptor/#class-reflectionmethoddescriptor","title":"Class ReflectionMethodDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionmethoddescriptor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Helper for creating IMethodDescriptor instances using reflection.</p> <pre><code>public static class ReflectionMethodDescriptor\n</code></pre> <p>Inheritance Object \u21e6 ReflectionMethodDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionmethoddescriptor/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionmethoddescriptor/#methods","title":"Methods","text":"Name Description IsSupported(MethodInfo) Checks if a method is supported for view binding."},{"location":"reference/stardewui/framework/descriptors/reflectionmethoddescriptor/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionmethoddescriptor/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionmethoddescriptor/#issupportedmethodinfo","title":"IsSupported(MethodInfo)","text":"<p>Checks if a method is supported for view binding.</p> <pre><code>public static bool IsSupported(System.Reflection.MethodInfo method);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionmethoddescriptor/#parameters","title":"Parameters","text":"<p><code>method</code> MethodInfo The method info.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionmethoddescriptor/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if a <code>StardewUI.Framework.Descriptors.ReflectionMethodDescriptor&lt;TResult&gt;</code> can be created for the specified <code>method</code>, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/","title":"ReflectionObjectDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#class-reflectionobjectdescriptor","title":"Class ReflectionObjectDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Object descriptor based on reflection.</p> <pre><code>public class ReflectionObjectDescriptor : \n    StardewUI.Framework.Descriptors.IObjectDescriptor\n</code></pre> <p>Inheritance Object \u21e6 ReflectionObjectDescriptor</p> <p>Implements IObjectDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#constructors","title":"Constructors","text":"Name Description ReflectionObjectDescriptor(Type, IReadOnlyList&lt;Type&gt;, IReadOnlyDictionary&lt;string, Lazy&lt;IMemberDescriptor&gt;&gt;) Initializes a new ReflectionObjectDescriptor with the given target type and members."},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#properties","title":"Properties","text":"Name Description SupportsChangeNotifications Whether or not objects of this type can notify about data changes; that is, if the type implements INotifyPropertyChanged. TargetType The type being described, which owns or inherits each of the available members."},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#methods","title":"Methods","text":"Name Description TryGetEvent(string, IEventDescriptor) Attempts to retrieve a named event on the TargetType. TryGetMethod(string, IMethodDescriptor) Attempts to retrieve a named method of the TargetType. TryGetProperty(string, IPropertyDescriptor) Attempts to retrieve a named property of the TargetType."},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#reflectionobjectdescriptortype-ireadonlylisttype-ireadonlydictionarystring-lazyimemberdescriptor","title":"ReflectionObjectDescriptor(Type, IReadOnlyList&lt;Type&gt;, IReadOnlyDictionary&lt;string, Lazy&lt;IMemberDescriptor&gt;&gt;)","text":"<p>Initializes a new ReflectionObjectDescriptor with the given target type and members.</p> <pre><code>protected ReflectionObjectDescriptor(System.Type type, System.Collections.Generic.IReadOnlyList&lt;System.Type&gt; interfaces, System.Collections.Generic.IReadOnlyDictionary&lt;string, Lazy&lt;StardewUI.Framework.Descriptors.IMemberDescriptor&gt;&gt; membersByName);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#parameters","title":"Parameters","text":"<p><code>type</code> Type The TargetType.</p> <p><code>interfaces</code> IReadOnlyList&lt;Type&gt; All interfaces implemented by the TargetType.</p> <p><code>membersByName</code> IReadOnlyDictionary&lt;string, Lazy&lt;IMemberDescriptor&gt;&gt; Dictionary of member names to the corresponding member descriptors.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#supportschangenotifications","title":"SupportsChangeNotifications","text":"<p>Whether or not objects of this type can notify about data changes; that is, if the type implements INotifyPropertyChanged.</p> <pre><code>public bool SupportsChangeNotifications { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#targettype","title":"TargetType","text":"<p>The type being described, which owns or inherits each of the available members.</p> <pre><code>public System.Type TargetType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#trygeteventstring-ieventdescriptor","title":"TryGetEvent(string, IEventDescriptor)","text":"<p>Attempts to retrieve a named event on the TargetType.</p> <pre><code>public bool TryGetEvent(string name, out StardewUI.Framework.Descriptors.IEventDescriptor event);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#parameters_1","title":"Parameters","text":"<p><code>name</code> string The event name.</p> <p><code>event</code> IEventDescriptor When this method returns, holds a reference to the IEventDescriptor whose Name is <code>name</code>, or <code>null</code> if no event was found with the given name.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the named event was found, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#trygetmethodstring-imethoddescriptor","title":"TryGetMethod(string, IMethodDescriptor)","text":"<p>Attempts to retrieve a named method of the TargetType.</p> <pre><code>public bool TryGetMethod(string name, out StardewUI.Framework.Descriptors.IMethodDescriptor method);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#parameters_2","title":"Parameters","text":"<p><code>name</code> string The method name.</p> <p><code>method</code> IMethodDescriptor When this method returns, holds a reference to the IMethodDescriptor whose Name is <code>name</code>, or <code>null</code> if no method was found with the given name.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the named method was found, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#remarks","title":"Remarks","text":"<p>Overloaded methods are not supported. If different signatures are required, use optional parameters.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#trygetpropertystring-ipropertydescriptor","title":"TryGetProperty(string, IPropertyDescriptor)","text":"<p>Attempts to retrieve a named property of the TargetType.</p> <pre><code>public bool TryGetProperty(string name, out StardewUI.Framework.Descriptors.IPropertyDescriptor property);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#parameters_3","title":"Parameters","text":"<p><code>name</code> string The property name.</p> <p><code>property</code> IPropertyDescriptor When this method returns, holds a reference to the IPropertyDescriptor whose Name is <code>name</code>, or <code>null</code> if no property was found with the given name.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionobjectdescriptor/#returns_2","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the named property was found, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/","title":"ReflectionPropertyDescriptor&lt;T, TValue&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#class-reflectionpropertydescriptort-tvalue","title":"Class ReflectionPropertyDescriptor&lt;T, TValue&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Binding property based on reflection.</p> <pre><code>public class ReflectionPropertyDescriptor&lt;T, TValue&gt; : \n    StardewUI.Framework.Descriptors.IPropertyDescriptor&lt;TValue&gt;, \n    StardewUI.Framework.Descriptors.IPropertyDescriptor, \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The type on which the property is declared.</p> <p><code>TValue</code> The property's value type.</p> <p>Inheritance Object \u21e6 ReflectionPropertyDescriptor&lt;T, TValue&gt;</p> <p>Implements IPropertyDescriptor&lt;TValue&gt;, IPropertyDescriptor, IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#constructors","title":"Constructors","text":"Name Description ReflectionPropertyDescriptor&lt;T, TValue&gt;(PropertyInfo) Initializes a new ReflectionPropertyDescriptor from reflected property info."},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#properties","title":"Properties","text":"Name Description CanRead Whether or not the property is readable, i.e. has a public getter. CanWrite Whether or not the property is writable, i.e. has a public setter. DeclaringType The type on which the member is declared. IsAutoProperty Whether or not the property is likely auto-implemented. IsField Whether or not the underlying member is a field, rather than a real property. Name The member name. ValueType The property's value type."},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#methods","title":"Methods","text":"Name Description Equals(Object) (Overrides Object.<code>Equals(Object)</code>) GetHashCode() (Overrides Object.<code>GetHashCode()</code>) GetValue(Object) Reads the current property value. SetValue(Object, TValue) Writes a new property value."},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#reflectionpropertydescriptort-tvaluepropertyinfo","title":"ReflectionPropertyDescriptor&lt;T, TValue&gt;(PropertyInfo)","text":"<p>Initializes a new ReflectionPropertyDescriptor from reflected property info.</p> <pre><code>public ReflectionPropertyDescriptor&lt;T, TValue&gt;(System.Reflection.PropertyInfo propertyInfo);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#parameters","title":"Parameters","text":"<p><code>propertyInfo</code> PropertyInfo The reflected property info.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#canread","title":"CanRead","text":"<p>Whether or not the property is readable, i.e. has a public getter.</p> <pre><code>public bool CanRead { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#canwrite","title":"CanWrite","text":"<p>Whether or not the property is writable, i.e. has a public setter.</p> <pre><code>public bool CanWrite { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#declaringtype","title":"DeclaringType","text":"<p>The type on which the member is declared.</p> <pre><code>public System.Type DeclaringType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#property-value_2","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#isautoproperty","title":"IsAutoProperty","text":"<p>Whether or not the property is likely auto-implemented.</p> <pre><code>public bool IsAutoProperty { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#remarks","title":"Remarks","text":"<p>Auto-property detection is heuristic, relying on the method's IL instructions and the name of its backing field. This can often be interpreted as a signal that the property won't receive property-change notifications, since to do so (whether explicitly or via some weaver/source generator) requires an implementation that is different from the auto-generated getter and setter. </p> <p>Caveats: This only works as a negative signal (a value of <code>false</code> does not prove that the property will receive notifications, even if the declaring type implements INotifyPropertyChanged), and is somewhat fuzzy even as a negative signal; it is theoretically possible for a source generator or IL weaver to leave behind all the markers of an auto property and still emit notifications, although no known libraries actually do so.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#isfield","title":"IsField","text":"<p>Whether or not the underlying member is a field, rather than a real property.</p> <pre><code>public bool IsField { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#property-value_4","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#remarks_1","title":"Remarks","text":"<p>For binding convenience, fields and properties are both called \"properties\" for descriptors, as the external access pattern is the same; however, mutable fields can never reliably emit property-change notifications regardless of whether the declaring type implements INotifyPropertyChanged, so this is usually used to emit some warning.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#name","title":"Name","text":"<p>The member name.</p> <pre><code>public string Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#property-value_5","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#valuetype","title":"ValueType","text":"<p>The property's value type.</p> <pre><code>public System.Type ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#property-value_6","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#equalsobject","title":"Equals(Object)","text":"<pre><code>public override bool Equals(System.Object obj);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#parameters_1","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#returns","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#gethashcode","title":"GetHashCode()","text":"<pre><code>public override int GetHashCode();\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#returns_1","title":"Returns","text":"<p>Int32</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#getvalueobject","title":"GetValue(Object)","text":"<p>Reads the current property value.</p> <pre><code>public TValue GetValue(System.Object source);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#parameters_2","title":"Parameters","text":"<p><code>source</code> Object An instance of the property's DeclaringType.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#returns_2","title":"Returns","text":"<p><code>TValue</code></p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#setvalueobject-tvalue","title":"SetValue(Object, TValue)","text":"<p>Writes a new property value.</p> <pre><code>public void SetValue(System.Object target, TValue value);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor-2/#parameters_3","title":"Parameters","text":"<p><code>target</code> Object An instance of the property's DeclaringType.</p> <p><code>value</code> \u00a0 TValue The new property value.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor/","title":"ReflectionPropertyDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor/#class-reflectionpropertydescriptor","title":"Class ReflectionPropertyDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Helper for creating ReflectionPropertyDescriptor&lt;T, TValue&gt; with types not known at compile time.</p> <pre><code>public static class ReflectionPropertyDescriptor\n</code></pre> <p>Inheritance Object \u21e6 ReflectionPropertyDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor/#methods","title":"Methods","text":"Name Description FromPropertyInfo(PropertyInfo) Creates a binding property from reflected property."},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor/#frompropertyinfopropertyinfo","title":"FromPropertyInfo(PropertyInfo)","text":"<p>Creates a binding property from reflected property.</p> <pre><code>public static StardewUI.Framework.Descriptors.IPropertyDescriptor FromPropertyInfo(System.Reflection.PropertyInfo propertyInfo);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor/#parameters","title":"Parameters","text":"<p><code>propertyInfo</code> PropertyInfo The reflected property info.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionpropertydescriptor/#returns","title":"Returns","text":"<p>IPropertyDescriptor</p> <p>A binding property of type ReflectionPropertyDescriptor&lt;T, TValue&gt;, whose generic arguments are the property's DeclaringType and PropertyType, respectively.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/","title":"ReflectionViewDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#class-reflectionviewdescriptor","title":"Class ReflectionViewDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>View descriptor based on reflection.</p> <pre><code>public class ReflectionViewDescriptor : \n    StardewUI.Framework.Descriptors.IViewDescriptor, \n    StardewUI.Framework.Descriptors.IObjectDescriptor\n</code></pre> <p>Inheritance Object \u21e6 ReflectionViewDescriptor</p> <p>Implements IViewDescriptor, IObjectDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#properties","title":"Properties","text":"Name Description SupportsChangeNotifications Whether or not objects of this type can notify about data changes; that is, if the type implements INotifyPropertyChanged. TargetType The type being described, which owns or inherits each of the available members."},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#methods","title":"Methods","text":"Name Description TryGetChildrenProperty(string, IPropertyDescriptor) Attempts to retrieve the property of the TargetType that holds the view's children/content. TryGetEvent(string, IEventDescriptor) Attempts to retrieve a named event on the TargetType. TryGetMethod(string, IMethodDescriptor) Attempts to retrieve a named method of the TargetType. TryGetProperty(string, IPropertyDescriptor) Attempts to retrieve a named property of the TargetType."},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#supportschangenotifications","title":"SupportsChangeNotifications","text":"<p>Whether or not objects of this type can notify about data changes; that is, if the type implements INotifyPropertyChanged.</p> <pre><code>public bool SupportsChangeNotifications { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#targettype","title":"TargetType","text":"<p>The type being described, which owns or inherits each of the available members.</p> <pre><code>public System.Type TargetType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#trygetchildrenpropertystring-ipropertydescriptor","title":"TryGetChildrenProperty(string, IPropertyDescriptor)","text":"<p>Attempts to retrieve the property of the TargetType that holds the view's children/content.</p> <pre><code>public bool TryGetChildrenProperty(string outletName, out StardewUI.Framework.Descriptors.IPropertyDescriptor property);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#parameters","title":"Parameters","text":"<p><code>outletName</code> string The name of the specific outlet, if targeting a non-default outlet on a view with multiple outlets. Corresponds to Name.</p> <p><code>property</code> IPropertyDescriptor When this method returns, holds a reference to the IPropertyDescriptor that holds the view's children/content, or <code>null</code> if no such property is available.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if a children/content property was found, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#trygeteventstring-ieventdescriptor","title":"TryGetEvent(string, IEventDescriptor)","text":"<p>Attempts to retrieve a named event on the TargetType.</p> <pre><code>public bool TryGetEvent(string name, out StardewUI.Framework.Descriptors.IEventDescriptor event);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#parameters_1","title":"Parameters","text":"<p><code>name</code> string The event name.</p> <p><code>event</code> IEventDescriptor When this method returns, holds a reference to the IEventDescriptor whose Name is <code>name</code>, or <code>null</code> if no event was found with the given name.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the named event was found, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#trygetmethodstring-imethoddescriptor","title":"TryGetMethod(string, IMethodDescriptor)","text":"<p>Attempts to retrieve a named method of the TargetType.</p> <pre><code>public bool TryGetMethod(string name, out StardewUI.Framework.Descriptors.IMethodDescriptor method);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#parameters_2","title":"Parameters","text":"<p><code>name</code> string The method name.</p> <p><code>method</code> IMethodDescriptor When this method returns, holds a reference to the IMethodDescriptor whose Name is <code>name</code>, or <code>null</code> if no method was found with the given name.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#returns_2","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the named method was found, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#remarks","title":"Remarks","text":"<p>Overloaded methods are not supported. If different signatures are required, use optional parameters.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#trygetpropertystring-ipropertydescriptor","title":"TryGetProperty(string, IPropertyDescriptor)","text":"<p>Attempts to retrieve a named property of the TargetType.</p> <pre><code>public bool TryGetProperty(string name, out StardewUI.Framework.Descriptors.IPropertyDescriptor property);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#parameters_3","title":"Parameters","text":"<p><code>name</code> string The property name.</p> <p><code>property</code> IPropertyDescriptor When this method returns, holds a reference to the IPropertyDescriptor whose Name is <code>name</code>, or <code>null</code> if no property was found with the given name.</p>"},{"location":"reference/stardewui/framework/descriptors/reflectionviewdescriptor/#returns_3","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the named property was found, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/","title":"ThisPropertyDescriptor&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#class-thispropertydescriptort","title":"Class ThisPropertyDescriptor&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Special descriptor used for \"this\" references in argument/attribute bindings, allowing them to reference the current context instead of a property on it.</p> <pre><code>public class ThisPropertyDescriptor&lt;T&gt; : \n    StardewUI.Framework.Descriptors.IPropertyDescriptor&lt;T&gt;, \n    StardewUI.Framework.Descriptors.IPropertyDescriptor, \n    StardewUI.Framework.Descriptors.IMemberDescriptor\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The object type.</p> <p>Inheritance Object \u21e6 ThisPropertyDescriptor&lt;T&gt;</p> <p>Implements IPropertyDescriptor&lt;T&gt;, IPropertyDescriptor, IMemberDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#fields","title":"Fields","text":"Name Description Instance Gets the singleton descriptor instance for the current object/property type."},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#properties","title":"Properties","text":"Name Description CanRead Whether or not the property is readable, i.e. has a public getter. CanWrite Whether or not the property is writable, i.e. has a public setter. DeclaringType The type on which the member is declared. IsAutoProperty Whether or not the property is likely auto-implemented. IsField Whether or not the underlying member is a field, rather than a real property. Name The member name. ValueType The property's value type."},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#methods","title":"Methods","text":"Name Description GetValue(Object) Reads the current property value. SetValue(Object, T) Writes a new property value."},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#fields_1","title":"Fields","text":""},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#instance","title":"Instance","text":"<p>Gets the singleton descriptor instance for the current object/property type.</p> <pre><code>public static readonly StardewUI.Framework.Descriptors.ThisPropertyDescriptor&lt;T&gt; Instance;\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#field-value","title":"Field Value","text":"<p>ThisPropertyDescriptor&lt;T&gt;</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#canread","title":"CanRead","text":"<p>Whether or not the property is readable, i.e. has a public getter.</p> <pre><code>public bool CanRead { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#canwrite","title":"CanWrite","text":"<p>Whether or not the property is writable, i.e. has a public setter.</p> <pre><code>public bool CanWrite { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#declaringtype","title":"DeclaringType","text":"<p>The type on which the member is declared.</p> <pre><code>public System.Type DeclaringType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#property-value_2","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#isautoproperty","title":"IsAutoProperty","text":"<p>Whether or not the property is likely auto-implemented.</p> <pre><code>public bool IsAutoProperty { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#remarks","title":"Remarks","text":"<p>Auto-property detection is heuristic, relying on the method's IL instructions and the name of its backing field. This can often be interpreted as a signal that the property won't receive property-change notifications, since to do so (whether explicitly or via some weaver/source generator) requires an implementation that is different from the auto-generated getter and setter. </p> <p>Caveats: This only works as a negative signal (a value of <code>false</code> does not prove that the property will receive notifications, even if the declaring type implements INotifyPropertyChanged), and is somewhat fuzzy even as a negative signal; it is theoretically possible for a source generator or IL weaver to leave behind all the markers of an auto property and still emit notifications, although no known libraries actually do so.</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#isfield","title":"IsField","text":"<p>Whether or not the underlying member is a field, rather than a real property.</p> <pre><code>public bool IsField { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#property-value_4","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#remarks_1","title":"Remarks","text":"<p>For binding convenience, fields and properties are both called \"properties\" for descriptors, as the external access pattern is the same; however, mutable fields can never reliably emit property-change notifications regardless of whether the declaring type implements INotifyPropertyChanged, so this is usually used to emit some warning.</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#name","title":"Name","text":"<p>The member name.</p> <pre><code>public string Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#property-value_5","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#valuetype","title":"ValueType","text":"<p>The property's value type.</p> <pre><code>public System.Type ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#property-value_6","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#getvalueobject","title":"GetValue(Object)","text":"<p>Reads the current property value.</p> <pre><code>public T GetValue(System.Object source);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#parameters","title":"Parameters","text":"<p><code>source</code> Object An instance of the property's DeclaringType.</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#returns","title":"Returns","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#setvalueobject-t","title":"SetValue(Object, T)","text":"<p>Writes a new property value.</p> <pre><code>public void SetValue(System.Object target, T value);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor-1/#parameters_1","title":"Parameters","text":"<p><code>target</code> Object An instance of the property's DeclaringType.</p> <p><code>value</code> \u00a0 T The new property value.</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor/","title":"ThisPropertyDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor/#class-thispropertydescriptor","title":"Class ThisPropertyDescriptor","text":""},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Descriptors Assembly: StardewUI.dll  </p> <p>Helper for obtaining a ThisPropertyDescriptor&lt;T&gt; using a type known only at runtime.</p> <pre><code>public static class ThisPropertyDescriptor\n</code></pre> <p>Inheritance Object \u21e6 ThisPropertyDescriptor</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor/#methods","title":"Methods","text":"Name Description ForTypeUncached(Type) Gets the ThisPropertyDescriptor&lt;T&gt; corresponding to a specified type."},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor/#fortypeuncachedtype","title":"ForTypeUncached(Type)","text":"<p>Gets the ThisPropertyDescriptor&lt;T&gt; corresponding to a specified type.</p> <pre><code>public static StardewUI.Framework.Descriptors.IPropertyDescriptor ForTypeUncached(System.Type type);\n</code></pre>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor/#parameters","title":"Parameters","text":"<p><code>type</code> Type The object type.</p>"},{"location":"reference/stardewui/framework/descriptors/thispropertydescriptor/#returns","title":"Returns","text":"<p>IPropertyDescriptor</p> <p>The ThisPropertyDescriptor&lt;T&gt; instance for the given <code>type</code>.</p>"},{"location":"reference/stardewui/framework/diagnostics/","title":"StardewUI.Framework.Diagnostics","text":""},{"location":"reference/stardewui/framework/diagnostics/#stardewuiframeworkdiagnostics-namespace","title":"StardewUI.Framework.Diagnostics Namespace","text":""},{"location":"reference/stardewui/framework/diagnostics/#classes","title":"Classes","text":"Name Description TraceConfig Configures the tracing behavior for StardewUI. TraceEvent Defines a single trace event. TraceFile Format of a trace file compatible with speedscope. TraceFrame Represents a single captured frame, or slice. TraceProfile A single profile in a trace. TraceShared Data shared between profiles."},{"location":"reference/stardewui/framework/diagnostics/frame/","title":"Frame","text":""},{"location":"reference/stardewui/framework/diagnostics/frame/#class-frame","title":"Class Frame","text":""},{"location":"reference/stardewui/framework/diagnostics/frame/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Diagnostics Assembly: StardewUI.dll  </p> <p>Represents a single captured frame, or slice.</p> <pre><code>public record Frame : IEquatable&lt;StardewUI.Framework.Diagnostics.Frame&gt;\n</code></pre> <p>Inheritance Object \u21e6 Frame</p> <p>Implements IEquatable&lt;Frame&gt;</p>"},{"location":"reference/stardewui/framework/diagnostics/frame/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/diagnostics/frame/#constructors","title":"Constructors","text":"Name Description Frame(string) Represents a single captured frame, or slice."},{"location":"reference/stardewui/framework/diagnostics/frame/#properties","title":"Properties","text":"Name Description EqualityContract Name Name of the method or operation that was measured."},{"location":"reference/stardewui/framework/diagnostics/frame/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/diagnostics/frame/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/diagnostics/frame/#framestring","title":"Frame(string)","text":"<p>Represents a single captured frame, or slice.</p> <pre><code>public Frame(string Name);\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/frame/#parameters","title":"Parameters","text":"<p><code>Name</code> string Name of the method or operation that was measured.</p>"},{"location":"reference/stardewui/framework/diagnostics/frame/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/diagnostics/frame/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/frame/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/diagnostics/frame/#name","title":"Name","text":"<p>Name of the method or operation that was measured.</p> <pre><code>public string Name { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/frame/#property-value_1","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/diagnostics/traceconfig/","title":"TraceConfig","text":""},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#class-traceconfig","title":"Class TraceConfig","text":""},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Diagnostics Assembly: StardewUI.dll  </p> <p>Configures the tracing behavior for StardewUI.</p> <pre><code>public class TraceConfig\n</code></pre> <p>Inheritance Object \u21e6 TraceConfig</p>"},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#constructors","title":"Constructors","text":"Name Description TraceConfig()"},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#properties","title":"Properties","text":"Name Description EnableHudNotifications Whether to show HUD notifications when tracing is started or stopped. OutputDirectory Directory where traces should be written. ToggleHotkeys Hotkey(s) used to toggle tracing."},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#traceconfig","title":"TraceConfig()","text":"<pre><code>public TraceConfig();\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#enablehudnotifications","title":"EnableHudNotifications","text":"<p>Whether to show HUD notifications when tracing is started or stopped.</p> <pre><code>public bool EnableHudNotifications { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#remarks","title":"Remarks","text":"<p>Notifications are always written to the SMAPI console log, but will not show in-game unless this setting is enabled.</p>"},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#outputdirectory","title":"OutputDirectory","text":"<p>Directory where traces should be written.</p> <pre><code>public string OutputDirectory { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#property-value_1","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#remarks_1","title":"Remarks","text":"<p>Unless an absolute path is specified, the directory is relative to Stardew's data directory, i.e. the same directory where <code>Saves</code> and <code>ErrorLogs</code> are written.</p>"},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#togglehotkeys","title":"ToggleHotkeys","text":"<p>Hotkey(s) used to toggle tracing.</p> <pre><code>public StardewModdingAPI.Utilities.KeybindList ToggleHotkeys { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceconfig/#property-value_2","title":"Property Value","text":"<p>KeybindList</p>"},{"location":"reference/stardewui/framework/diagnostics/traceevent/","title":"TraceEvent","text":""},{"location":"reference/stardewui/framework/diagnostics/traceevent/#class-traceevent","title":"Class TraceEvent","text":""},{"location":"reference/stardewui/framework/diagnostics/traceevent/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Diagnostics Assembly: StardewUI.dll  </p> <p>Defines a single trace event.</p> <pre><code>public record TraceEvent : \n    IEquatable&lt;StardewUI.Framework.Diagnostics.TraceEvent&gt;\n</code></pre> <p>Inheritance Object \u21e6 TraceEvent</p> <p>Implements IEquatable&lt;TraceEvent&gt;</p>"},{"location":"reference/stardewui/framework/diagnostics/traceevent/#remarks","title":"Remarks","text":"<p>StardewUI uses only evented profiles, so the data is either for an <code>OpenFrameEvent</code> or <code>CloseFrameEvent</code>.</p>"},{"location":"reference/stardewui/framework/diagnostics/traceevent/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/diagnostics/traceevent/#constructors","title":"Constructors","text":"Name Description TraceEvent(Char, Int64, Int32) Defines a single trace event."},{"location":"reference/stardewui/framework/diagnostics/traceevent/#properties","title":"Properties","text":"Name Description At Time when the event was logged, in the profile's Unit (i.e. in microseconds for any StardewUI event). EqualityContract Frame Index into the Frames identifying which frame this event refers to. Used to correlate open and close events. Type Discriminator for the event type; <code>'O'</code> for open frame or <code>'C'</code> for close."},{"location":"reference/stardewui/framework/diagnostics/traceevent/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/diagnostics/traceevent/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/diagnostics/traceevent/#traceeventchar-long-int","title":"TraceEvent(char, long, int)","text":"<p>Defines a single trace event.</p> <pre><code>public TraceEvent(char Type, long At, int Frame);\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceevent/#parameters","title":"Parameters","text":"<p><code>Type</code> Char Discriminator for the event type; <code>'O'</code> for open frame or <code>'C'</code> for close.</p> <p><code>At</code> Int64 Time when the event was logged, in the profile's Unit (i.e. in microseconds for any StardewUI event).</p> <p><code>Frame</code> Int32 Index into the Frames identifying which frame this event refers to. Used to correlate open and close events.</p>"},{"location":"reference/stardewui/framework/diagnostics/traceevent/#remarks_1","title":"Remarks","text":"<p>StardewUI uses only evented profiles, so the data is either for an <code>OpenFrameEvent</code> or <code>CloseFrameEvent</code>.</p>"},{"location":"reference/stardewui/framework/diagnostics/traceevent/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/diagnostics/traceevent/#at","title":"At","text":"<p>Time when the event was logged, in the profile's Unit (i.e. in microseconds for any StardewUI event).</p> <pre><code>public long At { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceevent/#property-value","title":"Property Value","text":"<p>Int64</p>"},{"location":"reference/stardewui/framework/diagnostics/traceevent/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceevent/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/diagnostics/traceevent/#frame","title":"Frame","text":"<p>Index into the Frames identifying which frame this event refers to. Used to correlate open and close events.</p> <pre><code>public int Frame { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceevent/#property-value_2","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/framework/diagnostics/traceevent/#type","title":"Type","text":"<p>Discriminator for the event type; <code>'O'</code> for open frame or <code>'C'</code> for close.</p> <pre><code>public char Type { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceevent/#property-value_3","title":"Property Value","text":"<p>Char</p>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/","title":"TraceFile","text":""},{"location":"reference/stardewui/framework/diagnostics/tracefile/#class-tracefile","title":"Class TraceFile","text":""},{"location":"reference/stardewui/framework/diagnostics/tracefile/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Diagnostics Assembly: StardewUI.dll  </p> <p>Format of a trace file compatible with speedscope.</p> <pre><code>public class TraceFile\n</code></pre> <p>Inheritance Object \u21e6 TraceFile</p>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/diagnostics/tracefile/#constructors","title":"Constructors","text":"Name Description TraceFile()"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#properties","title":"Properties","text":"Name Description CreationDate Exact date and time when the trace was started. Exporter The name and version of the exporting mod (i.e. StardewUI). Profiles List of profiles; each profile corresponds to a running thread. SchemaUrl JSON schema URL; required by the Speedscope web tool. Shared Shared trace data, containing the frames or slice names."},{"location":"reference/stardewui/framework/diagnostics/tracefile/#methods","title":"Methods","text":"Name Description CloseFrame(Int32) Appends an event that closes a frame previously opened with OpenFrame(string). OpenFrame(string) Adds a new TraceFrame and TraceEvent to open it, and returns the frame index to be used subsequently with CloseFrame(Int32)."},{"location":"reference/stardewui/framework/diagnostics/tracefile/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/diagnostics/tracefile/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/diagnostics/tracefile/#tracefile","title":"TraceFile()","text":"<pre><code>public TraceFile();\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/diagnostics/tracefile/#creationdate","title":"CreationDate","text":"<p>Exact date and time when the trace was started.</p> <pre><code>public System.DateTime CreationDate { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#property-value","title":"Property Value","text":"<p>DateTime</p>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#exporter","title":"Exporter","text":"<p>The name and version of the exporting mod (i.e. StardewUI).</p> <pre><code>public string Exporter { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#property-value_1","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#profiles","title":"Profiles","text":"<p>List of profiles; each profile corresponds to a running thread.</p> <pre><code>public System.Collections.Generic.List&lt;StardewUI.Framework.Diagnostics.TraceProfile&gt; Profiles { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#property-value_2","title":"Property Value","text":"<p>List&lt;TraceProfile&gt;</p>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#schemaurl","title":"SchemaUrl","text":"<p>JSON schema URL; required by the Speedscope web tool.</p> <pre><code>public string SchemaUrl { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#property-value_3","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#shared","title":"Shared","text":"<p>Shared trace data, containing the frames or slice names.</p> <pre><code>public StardewUI.Framework.Diagnostics.TraceShared Shared { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#property-value_4","title":"Property Value","text":"<p>TraceShared</p>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/diagnostics/tracefile/#closeframeint","title":"CloseFrame(int)","text":"<p>Appends an event that closes a frame previously opened with OpenFrame(string).</p> <pre><code>public void CloseFrame(int frame);\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#parameters","title":"Parameters","text":"<p><code>frame</code> Int32 The index of the tracked frame in Frames.</p>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#openframestring","title":"OpenFrame(string)","text":"<p>Adds a new TraceFrame and TraceEvent to open it, and returns the frame index to be used subsequently with CloseFrame(Int32).</p> <pre><code>public int OpenFrame(string name);\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#parameters_1","title":"Parameters","text":"<p><code>name</code> string Name of the method or operation being traced.</p>"},{"location":"reference/stardewui/framework/diagnostics/tracefile/#returns","title":"Returns","text":"<p>Int32</p> <p>The frame index, to be used with CloseFrame(Int32) when the operation completes.</p>"},{"location":"reference/stardewui/framework/diagnostics/traceframe/","title":"TraceFrame","text":""},{"location":"reference/stardewui/framework/diagnostics/traceframe/#class-traceframe","title":"Class TraceFrame","text":""},{"location":"reference/stardewui/framework/diagnostics/traceframe/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Diagnostics Assembly: StardewUI.dll  </p> <p>Represents a single captured frame, or slice.</p> <pre><code>public record TraceFrame : \n    IEquatable&lt;StardewUI.Framework.Diagnostics.TraceFrame&gt;\n</code></pre> <p>Inheritance Object \u21e6 TraceFrame</p> <p>Implements IEquatable&lt;TraceFrame&gt;</p>"},{"location":"reference/stardewui/framework/diagnostics/traceframe/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/diagnostics/traceframe/#constructors","title":"Constructors","text":"Name Description TraceFrame(string) Represents a single captured frame, or slice."},{"location":"reference/stardewui/framework/diagnostics/traceframe/#properties","title":"Properties","text":"Name Description EqualityContract Name Name of the method or operation that was measured."},{"location":"reference/stardewui/framework/diagnostics/traceframe/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/diagnostics/traceframe/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/diagnostics/traceframe/#traceframestring","title":"TraceFrame(string)","text":"<p>Represents a single captured frame, or slice.</p> <pre><code>public TraceFrame(string Name);\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceframe/#parameters","title":"Parameters","text":"<p><code>Name</code> string Name of the method or operation that was measured.</p>"},{"location":"reference/stardewui/framework/diagnostics/traceframe/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/diagnostics/traceframe/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceframe/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/diagnostics/traceframe/#name","title":"Name","text":"<p>Name of the method or operation that was measured.</p> <pre><code>public string Name { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceframe/#property-value_1","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/","title":"TraceProfile","text":""},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#class-traceprofile","title":"Class TraceProfile","text":""},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Diagnostics Assembly: StardewUI.dll  </p> <p>A single profile in a trace.</p> <pre><code>public class TraceProfile\n</code></pre> <p>Inheritance Object \u21e6 TraceProfile</p>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#remarks","title":"Remarks","text":"<p>For speedscope purposes, this is always an \"EventedProfile\". StardewUI does not use sampled profiles.</p>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#constructors","title":"Constructors","text":"Name Description TraceProfile(string, Int64) A single profile in a trace."},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#properties","title":"Properties","text":"Name Description EndValue The timestamp when tracing ended, in the specified Unit. Events The events recorded for this profile. Name Name of the profile. Used to identify the thread. StartValue The timestamp when tracing was started, in the specified Unit. Type Discriminator for the profile type. In StardewUI, this is always <code>evented</code>. Unit Unit of measurement for all time values."},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#traceprofilestring-long","title":"TraceProfile(string, long)","text":"<p>A single profile in a trace.</p> <pre><code>public TraceProfile(string name, long startValue);\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#parameters","title":"Parameters","text":"<p><code>name</code> string The Name of the profile, used to identify the thread.</p> <p><code>startValue</code> Int64 The timestamp when tracing was started, in the specified Unit (default: microseconds).</p>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#remarks_1","title":"Remarks","text":"<p>For speedscope purposes, this is always an \"EventedProfile\". StardewUI does not use sampled profiles.</p>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#endvalue","title":"EndValue","text":"<p>The timestamp when tracing ended, in the specified Unit.</p> <pre><code>public long EndValue { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#property-value","title":"Property Value","text":"<p>Int64</p>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#events","title":"Events","text":"<p>The events recorded for this profile.</p> <pre><code>public System.Collections.Generic.List&lt;StardewUI.Framework.Diagnostics.TraceEvent&gt; Events { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#property-value_1","title":"Property Value","text":"<p>List&lt;TraceEvent&gt;</p>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#name","title":"Name","text":"<p>Name of the profile. Used to identify the thread.</p> <pre><code>public string Name { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#startvalue","title":"StartValue","text":"<p>The timestamp when tracing was started, in the specified Unit.</p> <pre><code>public long StartValue { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#property-value_3","title":"Property Value","text":"<p>Int64</p>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#type","title":"Type","text":"<p>Discriminator for the profile type. In StardewUI, this is always <code>evented</code>.</p> <pre><code>public string Type { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#property-value_4","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#unit","title":"Unit","text":"<p>Unit of measurement for all time values.</p> <pre><code>public string Unit { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#property-value_5","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/diagnostics/traceprofile/#remarks_2","title":"Remarks","text":"<p>StardewUI's traces are always measured in <code>microseconds</code>.</p>"},{"location":"reference/stardewui/framework/diagnostics/traceshared/","title":"TraceShared","text":""},{"location":"reference/stardewui/framework/diagnostics/traceshared/#class-traceshared","title":"Class TraceShared","text":""},{"location":"reference/stardewui/framework/diagnostics/traceshared/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Diagnostics Assembly: StardewUI.dll  </p> <p>Data shared between profiles.</p> <pre><code>public class TraceShared\n</code></pre> <p>Inheritance Object \u21e6 TraceShared</p>"},{"location":"reference/stardewui/framework/diagnostics/traceshared/#remarks","title":"Remarks","text":"<p>StardewUI only uses a single profile, but this structure is required by speedscope.</p>"},{"location":"reference/stardewui/framework/diagnostics/traceshared/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/diagnostics/traceshared/#constructors","title":"Constructors","text":"Name Description TraceShared()"},{"location":"reference/stardewui/framework/diagnostics/traceshared/#properties","title":"Properties","text":"Name Description Frames The captured frames, or slices."},{"location":"reference/stardewui/framework/diagnostics/traceshared/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/diagnostics/traceshared/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/diagnostics/traceshared/#traceshared","title":"TraceShared()","text":"<pre><code>public TraceShared();\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceshared/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/diagnostics/traceshared/#frames","title":"Frames","text":"<p>The captured frames, or slices.</p> <pre><code>public System.Collections.Generic.List&lt;StardewUI.Framework.Diagnostics.TraceFrame&gt; Frames { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/diagnostics/traceshared/#property-value","title":"Property Value","text":"<p>List&lt;TraceFrame&gt;</p>"},{"location":"reference/stardewui/framework/dom/","title":"StardewUI.Framework.Dom","text":""},{"location":"reference/stardewui/framework/dom/#stardewuiframeworkdom-namespace","title":"StardewUI.Framework.Dom Namespace","text":""},{"location":"reference/stardewui/framework/dom/#classes","title":"Classes","text":"Name Description ContextRedirect Describes how to redirect the target context of any IAttribute whose ValueType is one of the IsContextBinding(AttributeValueType) matching types. ContextRedirect.Distance Redirects to an ancestor context by walking up a specified number of levels. ContextRedirect.Type Redirects to the nearest ancestor matching a specified type. Document A standalone StarML document. SArgument Record implementation of an IArgument. SAttribute Record implementation of a StarML IAttribute. SElement Record implementation of a StarML IElement. SEvent An event attribute in a StarML document. SNode A node in a StarML document, encapsulating the tag, its attributes, and all child nodes. TemplateNodeTransformer Transforms a <code>template</code> node based on the structure (attributes, children, etc.) of the instantiating node."},{"location":"reference/stardewui/framework/dom/#interfaces","title":"Interfaces","text":"Name Description IArgument An argument to a method call, e.g. as used in an IEvent. IAttribute Attribute of a StarML element. IElement Element in a StarML document, including the tag and all enclosed attributes. IEvent Event wire-up in a StarML element. INodeTransformer Provides a method to transform nodes into other nodes."},{"location":"reference/stardewui/framework/dom/contextredirect.distance/","title":"ContextRedirect.Distance","text":""},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#class-contextredirectdistance","title":"Class ContextRedirect.Distance","text":""},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>Redirects to an ancestor context by walking up a specified number of levels.</p> <pre><code>public record ContextRedirect.Distance : StardewUI.Framework.Dom.ContextRedirect, \n    IEquatable&lt;StardewUI.Framework.Dom.ContextRedirect.Distance&gt;\n</code></pre> <p>Inheritance Object \u21e6 ContextRedirect \u21e6 Distance</p> <p>Implements IEquatable&lt;Distance&gt;</p>"},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#constructors","title":"Constructors","text":"Name Description Distance(UInt32) Redirects to an ancestor context by walking up a specified number of levels."},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#properties","title":"Properties","text":"Name Description Depth Number of parents to traverse. EqualityContract (Overrides ContextRedirect.<code>get_EqualityContract()</code>)"},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#distanceuint","title":"Distance(uint)","text":"<p>Redirects to an ancestor context by walking up a specified number of levels.</p> <pre><code>public Distance(uint Depth);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#parameters","title":"Parameters","text":"<p><code>Depth</code> UInt32 Number of parents to traverse.</p>"},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#depth","title":"Depth","text":"<p>Number of parents to traverse.</p> <pre><code>public uint Depth { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#property-value","title":"Property Value","text":"<p>UInt32</p>"},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/contextredirect.distance/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/dom/contextredirect/","title":"ContextRedirect","text":""},{"location":"reference/stardewui/framework/dom/contextredirect/#class-contextredirect","title":"Class ContextRedirect","text":""},{"location":"reference/stardewui/framework/dom/contextredirect/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>Describes how to redirect the target context of any IAttribute whose ValueType is one of the IsContextBinding(AttributeValueType) matching types.</p> <pre><code>public record ContextRedirect : \n    IEquatable&lt;StardewUI.Framework.Dom.ContextRedirect&gt;\n</code></pre> <p>Inheritance Object \u21e6 ContextRedirect</p> <p>Implements IEquatable&lt;ContextRedirect&gt;</p>"},{"location":"reference/stardewui/framework/dom/contextredirect/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/contextredirect/#constructors","title":"Constructors","text":"Name Description ContextRedirect()"},{"location":"reference/stardewui/framework/dom/contextredirect/#properties","title":"Properties","text":"Name Description EqualityContract"},{"location":"reference/stardewui/framework/dom/contextredirect/#methods","title":"Methods","text":"Name Description FromParts(UInt32, ReadOnlySpan&lt;Char&gt;) Creates an optional ContextRedirect using the constituent parts parsed from a grammar element such as an Attribute."},{"location":"reference/stardewui/framework/dom/contextredirect/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/contextredirect/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/dom/contextredirect/#contextredirect","title":"ContextRedirect()","text":"<pre><code>protected ContextRedirect();\n</code></pre>"},{"location":"reference/stardewui/framework/dom/contextredirect/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/dom/contextredirect/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/contextredirect/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/dom/contextredirect/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/dom/contextredirect/#frompartsuint-readonlyspanchar","title":"FromParts(uint, ReadOnlySpan&lt;Char&gt;)","text":"<p>Creates an optional ContextRedirect using the constituent parts parsed from a grammar element such as an Attribute.</p> <pre><code>public static StardewUI.Framework.Dom.ContextRedirect FromParts(uint parentDepth, ReadOnlySpan&lt;System.Char&gt; parentType);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/contextredirect/#parameters","title":"Parameters","text":"<p><code>parentDepth</code> UInt32 Number of parents to traverse.</p> <p><code>parentType</code> ReadOnlySpan&lt;Char&gt; The Name of the target ancestor's Type.</p>"},{"location":"reference/stardewui/framework/dom/contextredirect/#returns","title":"Returns","text":"<p>ContextRedirect</p> <p>A new ContextRedirect that performs the requested redirect, or <code>null</code> if the arguments would cause no redirection to occur.</p>"},{"location":"reference/stardewui/framework/dom/contextredirect.type/","title":"ContextRedirect.Type","text":""},{"location":"reference/stardewui/framework/dom/contextredirect.type/#class-contextredirecttype","title":"Class ContextRedirect.Type","text":""},{"location":"reference/stardewui/framework/dom/contextredirect.type/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>Redirects to the nearest ancestor matching a specified type.</p> <pre><code>public record ContextRedirect.Type : StardewUI.Framework.Dom.ContextRedirect, \n    IEquatable&lt;StardewUI.Framework.Dom.ContextRedirect.Type&gt;\n</code></pre> <p>Inheritance Object \u21e6 ContextRedirect \u21e6 Type</p> <p>Implements IEquatable&lt;Type&gt;</p>"},{"location":"reference/stardewui/framework/dom/contextredirect.type/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/contextredirect.type/#constructors","title":"Constructors","text":"Name Description Type(string) Redirects to the nearest ancestor matching a specified type."},{"location":"reference/stardewui/framework/dom/contextredirect.type/#properties","title":"Properties","text":"Name Description EqualityContract (Overrides ContextRedirect.<code>get_EqualityContract()</code>) TypeName The Name of the target ancestor's Type."},{"location":"reference/stardewui/framework/dom/contextredirect.type/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/contextredirect.type/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/dom/contextredirect.type/#typestring","title":"Type(string)","text":"<p>Redirects to the nearest ancestor matching a specified type.</p> <pre><code>public Type(string TypeName);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/contextredirect.type/#parameters","title":"Parameters","text":"<p><code>TypeName</code> string The Name of the target ancestor's Type.</p>"},{"location":"reference/stardewui/framework/dom/contextredirect.type/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/dom/contextredirect.type/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/contextredirect.type/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/dom/contextredirect.type/#typename","title":"TypeName","text":"<p>The Name of the target ancestor's Type.</p> <pre><code>public string TypeName { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/contextredirect.type/#property-value_1","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/document/","title":"Document","text":""},{"location":"reference/stardewui/framework/dom/document/#class-document","title":"Class Document","text":""},{"location":"reference/stardewui/framework/dom/document/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>A standalone StarML document.</p> <pre><code>public record Document : IEquatable&lt;StardewUI.Framework.Dom.Document&gt;\n</code></pre> <p>Inheritance Object \u21e6 Document</p> <p>Implements IEquatable&lt;Document&gt;</p>"},{"location":"reference/stardewui/framework/dom/document/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/document/#constructors","title":"Constructors","text":"Name Description Document(SNode, IReadOnlyList&lt;SNode&gt;) A standalone StarML document."},{"location":"reference/stardewui/framework/dom/document/#properties","title":"Properties","text":"Name Description EqualityContract Root The primary content node. Templates List of template nodes for inline expansion."},{"location":"reference/stardewui/framework/dom/document/#methods","title":"Methods","text":"Name Description Parse(ReadOnlySpan&lt;Char&gt;) Parses a Document from its original markup text."},{"location":"reference/stardewui/framework/dom/document/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/document/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/dom/document/#documentsnode-ireadonlylistsnode","title":"Document(SNode, IReadOnlyList&lt;SNode&gt;)","text":"<p>A standalone StarML document.</p> <pre><code>public Document(StardewUI.Framework.Dom.SNode Root, System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SNode&gt; Templates);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/document/#parameters","title":"Parameters","text":"<p><code>Root</code> SNode The primary content node.</p> <p><code>Templates</code> IReadOnlyList&lt;SNode&gt; List of template nodes for inline expansion.</p>"},{"location":"reference/stardewui/framework/dom/document/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/dom/document/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/document/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/dom/document/#root","title":"Root","text":"<p>The primary content node.</p> <pre><code>public StardewUI.Framework.Dom.SNode Root { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/document/#property-value_1","title":"Property Value","text":"<p>SNode</p>"},{"location":"reference/stardewui/framework/dom/document/#templates","title":"Templates","text":"<p>List of template nodes for inline expansion.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SNode&gt; Templates { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/document/#property-value_2","title":"Property Value","text":"<p>IReadOnlyList&lt;SNode&gt;</p>"},{"location":"reference/stardewui/framework/dom/document/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/dom/document/#parsereadonlyspanchar","title":"Parse(ReadOnlySpan&lt;Char&gt;)","text":"<p>Parses a Document from its original markup text.</p> <pre><code>public static StardewUI.Framework.Dom.Document Parse(ReadOnlySpan&lt;System.Char&gt; text);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/document/#parameters_1","title":"Parameters","text":"<p><code>text</code> ReadOnlySpan&lt;Char&gt; The StarML markup text.</p>"},{"location":"reference/stardewui/framework/dom/document/#returns","title":"Returns","text":"<p>Document</p> <p>The parsed document as a DOM tree.</p>"},{"location":"reference/stardewui/framework/dom/iargument/","title":"IArgument","text":""},{"location":"reference/stardewui/framework/dom/iargument/#interface-iargument","title":"Interface IArgument","text":""},{"location":"reference/stardewui/framework/dom/iargument/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>An argument to a method call, e.g. as used in an IEvent.</p> <pre><code>public interface IArgument\n</code></pre>"},{"location":"reference/stardewui/framework/dom/iargument/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/iargument/#properties","title":"Properties","text":"Name Description ContextRedirect Specifies the redirect to use for a context binding, if one was specified and if the Type is ContextBinding. Expression The argument value or binding path, not including punctuation such as quotes or prefixes. Type The type of argument, indicating how it is to be evaluated in any method calls."},{"location":"reference/stardewui/framework/dom/iargument/#methods","title":"Methods","text":"Name Description Print(StringBuilder) Prints the textual representation of this argument."},{"location":"reference/stardewui/framework/dom/iargument/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/iargument/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/dom/iargument/#contextredirect","title":"ContextRedirect","text":"<p>Specifies the redirect to use for a context binding, if one was specified and if the Type is ContextBinding.</p> <pre><code>StardewUI.Framework.Dom.ContextRedirect ContextRedirect { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/iargument/#property-value","title":"Property Value","text":"<p>ContextRedirect</p>"},{"location":"reference/stardewui/framework/dom/iargument/#expression","title":"Expression","text":"<p>The argument value or binding path, not including punctuation such as quotes or prefixes.</p> <pre><code>string Expression { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/iargument/#property-value_1","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/iargument/#type","title":"Type","text":"<p>The type of argument, indicating how it is to be evaluated in any method calls.</p> <pre><code>StardewUI.Framework.Grammar.ArgumentExpressionType Type { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/iargument/#property-value_2","title":"Property Value","text":"<p>ArgumentExpressionType</p>"},{"location":"reference/stardewui/framework/dom/iargument/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/dom/iargument/#printstringbuilder","title":"Print(StringBuilder)","text":"<p>Prints the textual representation of this argument.</p> <pre><code>void Print(System.Text.StringBuilder sb);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/iargument/#parameters","title":"Parameters","text":"<p><code>sb</code> StringBuilder Builder to receive the argument's text output.</p>"},{"location":"reference/stardewui/framework/dom/iattribute/","title":"IAttribute","text":""},{"location":"reference/stardewui/framework/dom/iattribute/#interface-iattribute","title":"Interface IAttribute","text":""},{"location":"reference/stardewui/framework/dom/iattribute/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>Attribute of a StarML element.</p> <pre><code>public interface IAttribute\n</code></pre>"},{"location":"reference/stardewui/framework/dom/iattribute/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/iattribute/#properties","title":"Properties","text":"Name Description ContextRedirect Specifies the redirect to use for a context binding, if applicable and if the ValueType is one of the context binding types. Name The attribute name. Type The type of the attribute itself, defining how the Name should be interpreted. Value The literal value text. ValueType The type of the value expression, defining how the Value should be interpreted."},{"location":"reference/stardewui/framework/dom/iattribute/#methods","title":"Methods","text":"Name Description Print(StringBuilder) Prints the textual representation of this node."},{"location":"reference/stardewui/framework/dom/iattribute/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/iattribute/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/dom/iattribute/#contextredirect","title":"ContextRedirect","text":"<p>Specifies the redirect to use for a context binding, if applicable and if the ValueType is one of the context binding types.</p> <pre><code>StardewUI.Framework.Dom.ContextRedirect ContextRedirect { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/iattribute/#property-value","title":"Property Value","text":"<p>ContextRedirect</p>"},{"location":"reference/stardewui/framework/dom/iattribute/#name","title":"Name","text":"<p>The attribute name.</p> <pre><code>string Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/iattribute/#property-value_1","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/iattribute/#type","title":"Type","text":"<p>The type of the attribute itself, defining how the Name should be interpreted.</p> <pre><code>StardewUI.Framework.Grammar.AttributeType Type { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/iattribute/#property-value_2","title":"Property Value","text":"<p>AttributeType</p>"},{"location":"reference/stardewui/framework/dom/iattribute/#value","title":"Value","text":"<p>The literal value text.</p> <pre><code>string Value { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/iattribute/#property-value_3","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/iattribute/#valuetype","title":"ValueType","text":"<p>The type of the value expression, defining how the Value should be interpreted.</p> <pre><code>StardewUI.Framework.Grammar.AttributeValueType ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/iattribute/#property-value_4","title":"Property Value","text":"<p>AttributeValueType</p>"},{"location":"reference/stardewui/framework/dom/iattribute/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/dom/iattribute/#printstringbuilder","title":"Print(StringBuilder)","text":"<p>Prints the textual representation of this node.</p> <pre><code>void Print(System.Text.StringBuilder sb);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/iattribute/#parameters","title":"Parameters","text":"<p><code>sb</code> StringBuilder Builder to receive the attribute's text output.</p>"},{"location":"reference/stardewui/framework/dom/ielement/","title":"IElement","text":""},{"location":"reference/stardewui/framework/dom/ielement/#interface-ielement","title":"Interface IElement","text":""},{"location":"reference/stardewui/framework/dom/ielement/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>Element in a StarML document, including the tag and all enclosed attributes.</p> <pre><code>public interface IElement\n</code></pre>"},{"location":"reference/stardewui/framework/dom/ielement/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/ielement/#properties","title":"Properties","text":"Name Description Attributes The parsed list of attributes applied to this instance of the tag. Events The parsed list of events applied to this instance of the tag. Tag The parsed tag name."},{"location":"reference/stardewui/framework/dom/ielement/#methods","title":"Methods","text":"Name Description Print(StringBuilder, Boolean) Prints the textual representation of this element. PrintClosingTag(StringBuilder) Prints the closing tag for this element."},{"location":"reference/stardewui/framework/dom/ielement/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/ielement/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/dom/ielement/#attributes","title":"Attributes","text":"<p>The parsed list of attributes applied to this instance of the tag.</p> <pre><code>System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.IAttribute&gt; Attributes { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/ielement/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;IAttribute&gt;</p>"},{"location":"reference/stardewui/framework/dom/ielement/#events","title":"Events","text":"<p>The parsed list of events applied to this instance of the tag.</p> <pre><code>System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.IEvent&gt; Events { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/ielement/#property-value_1","title":"Property Value","text":"<p>IReadOnlyList&lt;IEvent&gt;</p>"},{"location":"reference/stardewui/framework/dom/ielement/#tag","title":"Tag","text":"<p>The parsed tag name.</p> <pre><code>string Tag { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/ielement/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/ielement/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/dom/ielement/#printstringbuilder-bool","title":"Print(StringBuilder, bool)","text":"<p>Prints the textual representation of this element.</p> <pre><code>void Print(System.Text.StringBuilder sb, bool asSelfClosing);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/ielement/#parameters","title":"Parameters","text":"<p><code>sb</code> StringBuilder Builder to receive the element's text output.</p> <p><code>asSelfClosing</code> Boolean Whether to print the element as a self-closing tag, i.e. whether to include a <code>/</code> character before the closing <code>&gt;</code>.</p>"},{"location":"reference/stardewui/framework/dom/ielement/#printclosingtagstringbuilder","title":"PrintClosingTag(StringBuilder)","text":"<p>Prints the closing tag for this element.</p> <pre><code>void PrintClosingTag(System.Text.StringBuilder sb);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/ielement/#parameters_1","title":"Parameters","text":"<p><code>sb</code> StringBuilder Builder to receive the element's text output.</p>"},{"location":"reference/stardewui/framework/dom/ievent/","title":"IEvent","text":""},{"location":"reference/stardewui/framework/dom/ievent/#interface-ievent","title":"Interface IEvent","text":""},{"location":"reference/stardewui/framework/dom/ievent/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>Event wire-up in a StarML element.</p> <pre><code>public interface IEvent\n</code></pre>"},{"location":"reference/stardewui/framework/dom/ievent/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/ievent/#properties","title":"Properties","text":"Name Description Arguments The arguments to the event handler. ContextRedirect Specifies the redirect to use for the context on which the method named HandlerName should exist. HandlerName The name of the event handler (method) to run on the bound or redirected context. Name The event name, i.e. name of the <code>event</code> field on the target IView."},{"location":"reference/stardewui/framework/dom/ievent/#methods","title":"Methods","text":"Name Description Print(StringBuilder) Prints the textual representation of this event attribute."},{"location":"reference/stardewui/framework/dom/ievent/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/ievent/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/dom/ievent/#arguments","title":"Arguments","text":"<p>The arguments to the event handler.</p> <pre><code>System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.IArgument&gt; Arguments { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/ievent/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;IArgument&gt;</p>"},{"location":"reference/stardewui/framework/dom/ievent/#contextredirect","title":"ContextRedirect","text":"<p>Specifies the redirect to use for the context on which the method named HandlerName should exist.</p> <pre><code>StardewUI.Framework.Dom.ContextRedirect ContextRedirect { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/ievent/#property-value_1","title":"Property Value","text":"<p>ContextRedirect</p>"},{"location":"reference/stardewui/framework/dom/ievent/#remarks","title":"Remarks","text":"<p>Applies to the handler method itself but not any of the Arguments, which specify their own redirects when applicable.</p>"},{"location":"reference/stardewui/framework/dom/ievent/#handlername","title":"HandlerName","text":"<p>The name of the event handler (method) to run on the bound or redirected context.</p> <pre><code>string HandlerName { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/ievent/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/ievent/#name","title":"Name","text":"<p>The event name, i.e. name of the <code>event</code> field on the target IView.</p> <pre><code>string Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/ievent/#property-value_3","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/ievent/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/dom/ievent/#printstringbuilder","title":"Print(StringBuilder)","text":"<p>Prints the textual representation of this event attribute.</p> <pre><code>void Print(System.Text.StringBuilder sb);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/ievent/#parameters","title":"Parameters","text":"<p><code>sb</code> StringBuilder Builder to receive the attribute's text output.</p>"},{"location":"reference/stardewui/framework/dom/inodetransformer/","title":"INodeTransformer","text":""},{"location":"reference/stardewui/framework/dom/inodetransformer/#interface-inodetransformer","title":"Interface INodeTransformer","text":""},{"location":"reference/stardewui/framework/dom/inodetransformer/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>Provides a method to transform nodes into other nodes.</p> <pre><code>public interface INodeTransformer\n</code></pre>"},{"location":"reference/stardewui/framework/dom/inodetransformer/#remarks","title":"Remarks","text":"<p>Transformers are a form of preprocessing that apply before a view is bound; they operate on the parsed DOM content but not the runtime/bound nodes.</p>"},{"location":"reference/stardewui/framework/dom/inodetransformer/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/inodetransformer/#methods","title":"Methods","text":"Name Description Transform(SNode) Transforms a node."},{"location":"reference/stardewui/framework/dom/inodetransformer/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/inodetransformer/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/dom/inodetransformer/#transformsnode","title":"Transform(SNode)","text":"<p>Transforms a node.</p> <pre><code>System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SNode&gt; Transform(StardewUI.Framework.Dom.SNode source);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/inodetransformer/#parameters","title":"Parameters","text":"<p><code>source</code> SNode The node to transform.</p>"},{"location":"reference/stardewui/framework/dom/inodetransformer/#returns","title":"Returns","text":"<p>IReadOnlyList&lt;SNode&gt;</p> <p>The transformed nodes, if any transform was applied, or a single-element list with the original <code>source</code> if the transformation is not applicable to this node.</p>"},{"location":"reference/stardewui/framework/dom/sargument/","title":"SArgument","text":""},{"location":"reference/stardewui/framework/dom/sargument/#class-sargument","title":"Class SArgument","text":""},{"location":"reference/stardewui/framework/dom/sargument/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>Record implementation of an IArgument.</p> <pre><code>public record SArgument : StardewUI.Framework.Dom.IArgument, \n    IEquatable&lt;StardewUI.Framework.Dom.SArgument&gt;\n</code></pre> <p>Inheritance Object \u21e6 SArgument</p> <p>Implements IArgument, IEquatable&lt;SArgument&gt;</p>"},{"location":"reference/stardewui/framework/dom/sargument/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/sargument/#constructors","title":"Constructors","text":"Name Description SArgument(ArgumentExpressionType, string, ContextRedirect) Record implementation of an IArgument. SArgument(Argument) Initializes a new SArgument from the data of a parsed argument."},{"location":"reference/stardewui/framework/dom/sargument/#properties","title":"Properties","text":"Name Description ContextRedirect Specifies the redirect to use for a context binding, if one was specified and if the Type is ContextBinding. EqualityContract Expression The argument value or binding path, not including punctuation such as quotes or prefixes. Type The type of argument, indicating how it is to be evaluated in any method calls."},{"location":"reference/stardewui/framework/dom/sargument/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/sargument/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/dom/sargument/#sargumentargumentexpressiontype-string-contextredirect","title":"SArgument(ArgumentExpressionType, string, ContextRedirect)","text":"<p>Record implementation of an IArgument.</p> <pre><code>public SArgument(StardewUI.Framework.Grammar.ArgumentExpressionType Type, string Expression, StardewUI.Framework.Dom.ContextRedirect ContextRedirect);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sargument/#parameters","title":"Parameters","text":"<p><code>Type</code> ArgumentExpressionType The type of argument, indicating how it is to be evaluated in any method calls.</p> <p><code>Expression</code> string The argument value or binding path, not including punctuation such as quotes or prefixes.</p> <p><code>ContextRedirect</code> ContextRedirect Specifies the redirect to use for a context binding, if one was specified and if the Type is ContextBinding.</p>"},{"location":"reference/stardewui/framework/dom/sargument/#sargumentargument","title":"SArgument(Argument)","text":"<p>Initializes a new SArgument from the data of a parsed argument.</p> <pre><code>public SArgument(StardewUI.Framework.Grammar.Argument argument);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sargument/#parameters_1","title":"Parameters","text":"<p><code>argument</code> Argument The parsed argument.</p>"},{"location":"reference/stardewui/framework/dom/sargument/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/dom/sargument/#contextredirect","title":"ContextRedirect","text":"<p>Specifies the redirect to use for a context binding, if one was specified and if the Type is ContextBinding.</p> <pre><code>public StardewUI.Framework.Dom.ContextRedirect ContextRedirect { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sargument/#property-value","title":"Property Value","text":"<p>ContextRedirect</p>"},{"location":"reference/stardewui/framework/dom/sargument/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sargument/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/dom/sargument/#expression","title":"Expression","text":"<p>The argument value or binding path, not including punctuation such as quotes or prefixes.</p> <pre><code>public string Expression { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sargument/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/sargument/#type","title":"Type","text":"<p>The type of argument, indicating how it is to be evaluated in any method calls.</p> <pre><code>public StardewUI.Framework.Grammar.ArgumentExpressionType Type { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sargument/#property-value_3","title":"Property Value","text":"<p>ArgumentExpressionType</p>"},{"location":"reference/stardewui/framework/dom/sattribute/","title":"SAttribute","text":""},{"location":"reference/stardewui/framework/dom/sattribute/#class-sattribute","title":"Class SAttribute","text":""},{"location":"reference/stardewui/framework/dom/sattribute/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>Record implementation of a StarML IAttribute.</p> <pre><code>public record SAttribute : StardewUI.Framework.Dom.IAttribute, \n    IEquatable&lt;StardewUI.Framework.Dom.SAttribute&gt;\n</code></pre> <p>Inheritance Object \u21e6 SAttribute</p> <p>Implements IAttribute, IEquatable&lt;SAttribute&gt;</p>"},{"location":"reference/stardewui/framework/dom/sattribute/#remarks","title":"Remarks","text":"<p>Must be separate from the grammar's Attribute since <code>ref struct</code>s currently are not allowed to implement interfaces.</p>"},{"location":"reference/stardewui/framework/dom/sattribute/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/sattribute/#constructors","title":"Constructors","text":"Name Description SAttribute(string, string, AttributeType, AttributeValueType, ContextRedirect) Record implementation of a StarML IAttribute. SAttribute(Attribute) Initializes a new SAttribute from the data of a parsed attribute."},{"location":"reference/stardewui/framework/dom/sattribute/#properties","title":"Properties","text":"Name Description ContextRedirect Specifies the redirect to use for a context binding, if applicable and if the <code>ValueType</code> is one of the context binding types. EqualityContract Name The attribute name. Type The type of the attribute itself, defining how the <code>Name</code> should be interpreted. Value The literal value text. ValueType The type of the value expression, defining how the <code>Value</code> should be interpreted."},{"location":"reference/stardewui/framework/dom/sattribute/#methods","title":"Methods","text":"Name Description AsArgument() Creates a method argument that will receive the same value as this attribute when bound. WithName(string) Creates a copy of this attribute with a different Name, and all other properties the same."},{"location":"reference/stardewui/framework/dom/sattribute/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/sattribute/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/dom/sattribute/#sattributestring-string-attributetype-attributevaluetype-contextredirect","title":"SAttribute(string, string, AttributeType, AttributeValueType, ContextRedirect)","text":"<p>Record implementation of a StarML IAttribute.</p> <pre><code>public SAttribute(string Name, string Value, StardewUI.Framework.Grammar.AttributeType Type, StardewUI.Framework.Grammar.AttributeValueType ValueType, StardewUI.Framework.Dom.ContextRedirect ContextRedirect);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sattribute/#parameters","title":"Parameters","text":"<p><code>Name</code> string The attribute name.</p> <p><code>Value</code> string The literal value text.</p> <p><code>Type</code> AttributeType The type of the attribute itself, defining how the <code>Name</code> should be interpreted.</p> <p><code>ValueType</code> AttributeValueType The type of the value expression, defining how the <code>Value</code> should be interpreted.</p> <p><code>ContextRedirect</code> ContextRedirect Specifies the redirect to use for a context binding, if applicable and if the <code>ValueType</code> is one of the context binding types.</p>"},{"location":"reference/stardewui/framework/dom/sattribute/#remarks_1","title":"Remarks","text":"<p>Must be separate from the grammar's Attribute since <code>ref struct</code>s currently are not allowed to implement interfaces.</p>"},{"location":"reference/stardewui/framework/dom/sattribute/#sattributeattribute","title":"SAttribute(Attribute)","text":"<p>Initializes a new SAttribute from the data of a parsed attribute.</p> <pre><code>public SAttribute(StardewUI.Framework.Grammar.Attribute attribute);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sattribute/#parameters_1","title":"Parameters","text":"<p><code>attribute</code> Attribute The parsed attribute.</p>"},{"location":"reference/stardewui/framework/dom/sattribute/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/dom/sattribute/#contextredirect","title":"ContextRedirect","text":"<p>Specifies the redirect to use for a context binding, if applicable and if the <code>ValueType</code> is one of the context binding types.</p> <pre><code>public StardewUI.Framework.Dom.ContextRedirect ContextRedirect { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sattribute/#property-value","title":"Property Value","text":"<p>ContextRedirect</p>"},{"location":"reference/stardewui/framework/dom/sattribute/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sattribute/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/dom/sattribute/#name","title":"Name","text":"<p>The attribute name.</p> <pre><code>public string Name { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sattribute/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/sattribute/#type","title":"Type","text":"<p>The type of the attribute itself, defining how the <code>Name</code> should be interpreted.</p> <pre><code>public StardewUI.Framework.Grammar.AttributeType Type { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sattribute/#property-value_3","title":"Property Value","text":"<p>AttributeType</p>"},{"location":"reference/stardewui/framework/dom/sattribute/#value","title":"Value","text":"<p>The literal value text.</p> <pre><code>public string Value { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sattribute/#property-value_4","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/sattribute/#valuetype","title":"ValueType","text":"<p>The type of the value expression, defining how the <code>Value</code> should be interpreted.</p> <pre><code>public StardewUI.Framework.Grammar.AttributeValueType ValueType { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sattribute/#property-value_5","title":"Property Value","text":"<p>AttributeValueType</p>"},{"location":"reference/stardewui/framework/dom/sattribute/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/dom/sattribute/#asargument","title":"AsArgument()","text":"<p>Creates a method argument that will receive the same value as this attribute when bound.</p> <pre><code>public StardewUI.Framework.Dom.SArgument AsArgument();\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sattribute/#returns","title":"Returns","text":"<p>SArgument</p> <p>The converted argument.</p>"},{"location":"reference/stardewui/framework/dom/sattribute/#withnamestring","title":"WithName(string)","text":"<p>Creates a copy of this attribute with a different Name, and all other properties the same.</p> <pre><code>public StardewUI.Framework.Dom.SAttribute WithName(string name);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sattribute/#parameters_2","title":"Parameters","text":"<p><code>name</code> string The new attribute name.</p>"},{"location":"reference/stardewui/framework/dom/sattribute/#returns_1","title":"Returns","text":"<p>SAttribute</p> <p>The renamed attribute.</p>"},{"location":"reference/stardewui/framework/dom/selement/","title":"SElement","text":""},{"location":"reference/stardewui/framework/dom/selement/#class-selement","title":"Class SElement","text":""},{"location":"reference/stardewui/framework/dom/selement/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>Record implementation of a StarML IElement.</p> <pre><code>public record SElement : StardewUI.Framework.Dom.IElement, \n    IEquatable&lt;StardewUI.Framework.Dom.SElement&gt;\n</code></pre> <p>Inheritance Object \u21e6 SElement</p> <p>Implements IElement, IEquatable&lt;SElement&gt;</p>"},{"location":"reference/stardewui/framework/dom/selement/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/selement/#constructors","title":"Constructors","text":"Name Description SElement(string, IReadOnlyList&lt;SAttribute&gt;, IReadOnlyList&lt;SEvent&gt;) Record implementation of a StarML IElement."},{"location":"reference/stardewui/framework/dom/selement/#properties","title":"Properties","text":"Name Description Attributes The attributes applied to this tag. EqualityContract Events The events applied to this tag. Tag The tag name."},{"location":"reference/stardewui/framework/dom/selement/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/selement/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/dom/selement/#selementstring-ireadonlylistsattribute-ireadonlylistsevent","title":"SElement(string, IReadOnlyList&lt;SAttribute&gt;, IReadOnlyList&lt;SEvent&gt;)","text":"<p>Record implementation of a StarML IElement.</p> <pre><code>public SElement(string Tag, System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SAttribute&gt; Attributes, System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SEvent&gt; Events);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/selement/#parameters","title":"Parameters","text":"<p><code>Tag</code> string The tag name.</p> <p><code>Attributes</code> IReadOnlyList&lt;SAttribute&gt; The attributes applied to this tag.</p> <p><code>Events</code> IReadOnlyList&lt;SEvent&gt; The events applied to this tag.</p>"},{"location":"reference/stardewui/framework/dom/selement/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/dom/selement/#attributes","title":"Attributes","text":"<p>The attributes applied to this tag.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SAttribute&gt; Attributes { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/selement/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;SAttribute&gt;</p>"},{"location":"reference/stardewui/framework/dom/selement/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/selement/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/dom/selement/#events","title":"Events","text":"<p>The events applied to this tag.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SEvent&gt; Events { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/selement/#property-value_2","title":"Property Value","text":"<p>IReadOnlyList&lt;SEvent&gt;</p>"},{"location":"reference/stardewui/framework/dom/selement/#tag","title":"Tag","text":"<p>The tag name.</p> <pre><code>public string Tag { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/selement/#property-value_3","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/sevent/","title":"SEvent","text":""},{"location":"reference/stardewui/framework/dom/sevent/#class-sevent","title":"Class SEvent","text":""},{"location":"reference/stardewui/framework/dom/sevent/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>An event attribute in a StarML document.</p> <pre><code>public record SEvent : StardewUI.Framework.Dom.IEvent, \n    IEquatable&lt;StardewUI.Framework.Dom.SEvent&gt;\n</code></pre> <p>Inheritance Object \u21e6 SEvent</p> <p>Implements IEvent, IEquatable&lt;SEvent&gt;</p>"},{"location":"reference/stardewui/framework/dom/sevent/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/sevent/#constructors","title":"Constructors","text":"Name Description SEvent(string, string, IReadOnlyList&lt;SArgument&gt;, ContextRedirect) An event attribute in a StarML document. SEvent(Event, IReadOnlyList&lt;SArgument&gt;) Initializes a new SArgument from the data of a parsed argument."},{"location":"reference/stardewui/framework/dom/sevent/#properties","title":"Properties","text":"Name Description Arguments The arguments to the event handler. ContextRedirect The redirect to use for the context on which the method named <code>HandlerName</code> should exist. EqualityContract HandlerName The name of the event handler (method) to run on the bound or redirected context. Name The event name, i.e. name of the <code>event</code> field on the target IView."},{"location":"reference/stardewui/framework/dom/sevent/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/sevent/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/dom/sevent/#seventstring-string-ireadonlylistsargument-contextredirect","title":"SEvent(string, string, IReadOnlyList&lt;SArgument&gt;, ContextRedirect)","text":"<p>An event attribute in a StarML document.</p> <pre><code>public SEvent(string Name, string HandlerName, System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SArgument&gt; Arguments, StardewUI.Framework.Dom.ContextRedirect ContextRedirect);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sevent/#parameters","title":"Parameters","text":"<p><code>Name</code> string The event name, i.e. name of the <code>event</code> field on the target IView.</p> <p><code>HandlerName</code> string The name of the event handler (method) to run on the bound or redirected context.</p> <p><code>Arguments</code> IReadOnlyList&lt;SArgument&gt; The arguments to the event handler.</p> <p><code>ContextRedirect</code> ContextRedirect The redirect to use for the context on which the method named <code>HandlerName</code> should exist.</p>"},{"location":"reference/stardewui/framework/dom/sevent/#seventevent-ireadonlylistsargument","title":"SEvent(Event, IReadOnlyList&lt;SArgument&gt;)","text":"<p>Initializes a new SArgument from the data of a parsed argument.</p> <pre><code>public SEvent(StardewUI.Framework.Grammar.Event e, System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SArgument&gt; arguments);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sevent/#parameters_1","title":"Parameters","text":"<p><code>e</code> Event The parsed event.</p> <p><code>arguments</code> IReadOnlyList&lt;SArgument&gt; The event arguments.</p>"},{"location":"reference/stardewui/framework/dom/sevent/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/dom/sevent/#arguments","title":"Arguments","text":"<p>The arguments to the event handler.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SArgument&gt; Arguments { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sevent/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;SArgument&gt;</p>"},{"location":"reference/stardewui/framework/dom/sevent/#contextredirect","title":"ContextRedirect","text":"<p>The redirect to use for the context on which the method named <code>HandlerName</code> should exist.</p> <pre><code>public StardewUI.Framework.Dom.ContextRedirect ContextRedirect { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sevent/#property-value_1","title":"Property Value","text":"<p>ContextRedirect</p>"},{"location":"reference/stardewui/framework/dom/sevent/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sevent/#property-value_2","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/dom/sevent/#handlername","title":"HandlerName","text":"<p>The name of the event handler (method) to run on the bound or redirected context.</p> <pre><code>public string HandlerName { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sevent/#property-value_3","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/sevent/#name","title":"Name","text":"<p>The event name, i.e. name of the <code>event</code> field on the target IView.</p> <pre><code>public string Name { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/sevent/#property-value_4","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/snode/","title":"SNode","text":""},{"location":"reference/stardewui/framework/dom/snode/#class-snode","title":"Class SNode","text":""},{"location":"reference/stardewui/framework/dom/snode/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>A node in a StarML document, encapsulating the tag, its attributes, and all child nodes.</p> <pre><code>public record SNode : IEquatable&lt;StardewUI.Framework.Dom.SNode&gt;\n</code></pre> <p>Inheritance Object \u21e6 SNode</p> <p>Implements IEquatable&lt;SNode&gt;</p>"},{"location":"reference/stardewui/framework/dom/snode/#remarks","title":"Remarks","text":"<p>This is also the root of a Document and the visible result of a parser. While there is some memory and performance cost associated with this intermediate representation before assembling the ViewNode, it allows for document assets to be edited (patched) prior to binding.</p>"},{"location":"reference/stardewui/framework/dom/snode/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/snode/#constructors","title":"Constructors","text":"Name Description SNode(SElement, IReadOnlyList&lt;SNode&gt;) A node in a StarML document, encapsulating the tag, its attributes, and all child nodes."},{"location":"reference/stardewui/framework/dom/snode/#properties","title":"Properties","text":"Name Description Attributes Gets the attributes of the associated Element. ChildNodes The children of this node. Element The element data for this node. EqualityContract Tag Gets the tag of the associated Element."},{"location":"reference/stardewui/framework/dom/snode/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/snode/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/dom/snode/#snodeselement-ireadonlylistsnode","title":"SNode(SElement, IReadOnlyList&lt;SNode&gt;)","text":"<p>A node in a StarML document, encapsulating the tag, its attributes, and all child nodes.</p> <pre><code>public SNode(StardewUI.Framework.Dom.SElement Element, System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SNode&gt; ChildNodes);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/snode/#parameters","title":"Parameters","text":"<p><code>Element</code> SElement The element data for this node.</p> <p><code>ChildNodes</code> IReadOnlyList&lt;SNode&gt; The children of this node.</p>"},{"location":"reference/stardewui/framework/dom/snode/#remarks_1","title":"Remarks","text":"<p>This is also the root of a Document and the visible result of a parser. While there is some memory and performance cost associated with this intermediate representation before assembling the ViewNode, it allows for document assets to be edited (patched) prior to binding.</p>"},{"location":"reference/stardewui/framework/dom/snode/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/dom/snode/#attributes","title":"Attributes","text":"<p>Gets the attributes of the associated Element.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SAttribute&gt; Attributes { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/snode/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;SAttribute&gt;</p>"},{"location":"reference/stardewui/framework/dom/snode/#childnodes","title":"ChildNodes","text":"<p>The children of this node.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SNode&gt; ChildNodes { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/snode/#property-value_1","title":"Property Value","text":"<p>IReadOnlyList&lt;SNode&gt;</p>"},{"location":"reference/stardewui/framework/dom/snode/#element","title":"Element","text":"<p>The element data for this node.</p> <pre><code>public StardewUI.Framework.Dom.SElement Element { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/snode/#property-value_2","title":"Property Value","text":"<p>SElement</p>"},{"location":"reference/stardewui/framework/dom/snode/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/snode/#property-value_3","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/dom/snode/#tag","title":"Tag","text":"<p>Gets the tag of the associated Element.</p> <pre><code>public string Tag { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/dom/snode/#property-value_4","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/dom/templatenodetransformer/","title":"TemplateNodeTransformer","text":""},{"location":"reference/stardewui/framework/dom/templatenodetransformer/#class-templatenodetransformer","title":"Class TemplateNodeTransformer","text":""},{"location":"reference/stardewui/framework/dom/templatenodetransformer/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Dom Assembly: StardewUI.dll  </p> <p>Transforms a <code>template</code> node based on the structure (attributes, children, etc.) of the instantiating node.</p> <pre><code>public class TemplateNodeTransformer : StardewUI.Framework.Dom.INodeTransformer\n</code></pre> <p>Inheritance Object \u21e6 TemplateNodeTransformer</p> <p>Implements INodeTransformer</p>"},{"location":"reference/stardewui/framework/dom/templatenodetransformer/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/dom/templatenodetransformer/#constructors","title":"Constructors","text":"Name Description TemplateNodeTransformer(SNode) Transforms a <code>template</code> node based on the structure (attributes, children, etc.) of the instantiating node."},{"location":"reference/stardewui/framework/dom/templatenodetransformer/#methods","title":"Methods","text":"Name Description Transform(SNode) Transforms a node."},{"location":"reference/stardewui/framework/dom/templatenodetransformer/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/dom/templatenodetransformer/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/dom/templatenodetransformer/#templatenodetransformersnode","title":"TemplateNodeTransformer(SNode)","text":"<p>Transforms a <code>template</code> node based on the structure (attributes, children, etc.) of the instantiating node.</p> <pre><code>public TemplateNodeTransformer(StardewUI.Framework.Dom.SNode template);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/templatenodetransformer/#parameters","title":"Parameters","text":"<p><code>template</code> SNode The template node.</p>"},{"location":"reference/stardewui/framework/dom/templatenodetransformer/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/dom/templatenodetransformer/#transformsnode","title":"Transform(SNode)","text":"<p>Transforms a node.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Framework.Dom.SNode&gt; Transform(StardewUI.Framework.Dom.SNode source);\n</code></pre>"},{"location":"reference/stardewui/framework/dom/templatenodetransformer/#parameters_1","title":"Parameters","text":"<p><code>source</code> SNode The node to transform.</p>"},{"location":"reference/stardewui/framework/dom/templatenodetransformer/#returns","title":"Returns","text":"<p>IReadOnlyList&lt;SNode&gt;</p> <p>The transformed nodes, if any transform was applied, or a single-element list with the original <code>source</code> if the transformation is not applicable to this node.</p>"},{"location":"reference/stardewui/framework/grammar/","title":"StardewUI.Framework.Grammar","text":""},{"location":"reference/stardewui/framework/grammar/#stardewuiframeworkgrammar-namespace","title":"StardewUI.Framework.Grammar Namespace","text":""},{"location":"reference/stardewui/framework/grammar/#classes","title":"Classes","text":"Name Description AttributeValueTypeExtensions Extensions for the AttributeValueType enum. LexerException The exception that is thrown when a Lexer fails to process the markup it is given. ParserException The exception that is thrown when a DocumentReader encounters invalid content."},{"location":"reference/stardewui/framework/grammar/#structs","title":"Structs","text":"Name Description Argument A complete method argument parsed from StarML. Attribute A complete attribute assignment parsed from StarML. DocumentReader Reads elements and associated attributes from a StarML document (content string). Event An event handler parsed from StarML. Lexer Consumes raw StarML content as a token stream. TagInfo Information about a parsed tag in StarML. Token A token emitted by the StarML Lexer."},{"location":"reference/stardewui/framework/grammar/#enums","title":"Enums","text":"Name Description ArgumentExpressionType Defines the possible types of an Argument, which specifies how to resolve its value at runtime. AttributeType The different types of an Attribute, independent of its value. AttributeValueType Types allowed for the value of an Attribute. TagMember The type of tag member read, resulting from a call to NextMember(). TokenType Types of tokens allowed in StarML."},{"location":"reference/stardewui/framework/grammar/argument/","title":"Argument","text":""},{"location":"reference/stardewui/framework/grammar/argument/#struct-argument","title":"Struct Argument","text":""},{"location":"reference/stardewui/framework/grammar/argument/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>A complete method argument parsed from StarML.</p> <pre><code>[System.Obsolete]\npublic readonly ref struct Argument\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Argument</p>"},{"location":"reference/stardewui/framework/grammar/argument/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/grammar/argument/#constructors","title":"Constructors","text":"Name Description Argument(ArgumentExpressionType, ReadOnlySpan&lt;Char&gt;, UInt32, ReadOnlySpan&lt;Char&gt;) A complete method argument parsed from StarML."},{"location":"reference/stardewui/framework/grammar/argument/#properties","title":"Properties","text":"Name Description Expression The literal expression text. ExpressionType The type describing how Expression should be interpreted. ParentDepth The depth to walk - i.e. number of parents to traverse - to find the context on which to evaluate the Expression when the ExpressionType is ContextBinding. ParentType The type name of the parent to walk up to for a context redirect. Exclusive with ParentDepth and only valid if the ExpressionType is ContextBinding."},{"location":"reference/stardewui/framework/grammar/argument/#methods","title":"Methods","text":"Name Description Equals(Object) (Inherited from ValueType) GetHashCode() (Inherited from ValueType) ToString() (Inherited from ValueType)"},{"location":"reference/stardewui/framework/grammar/argument/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/grammar/argument/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/grammar/argument/#argumentargumentexpressiontype-readonlyspanchar-uint-readonlyspanchar","title":"Argument(ArgumentExpressionType, ReadOnlySpan&lt;Char&gt;, uint, ReadOnlySpan&lt;Char&gt;)","text":"<p>A complete method argument parsed from StarML.</p> <pre><code>public Argument(StardewUI.Framework.Grammar.ArgumentExpressionType expressionType, ReadOnlySpan&lt;System.Char&gt; expression, uint parentDepth, ReadOnlySpan&lt;System.Char&gt; parentType);\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/argument/#parameters","title":"Parameters","text":"<p><code>expressionType</code> ArgumentExpressionType The type describing how <code>expression</code> should be interpreted.</p> <p><code>expression</code> ReadOnlySpan&lt;Char&gt; The literal expression text.</p> <p><code>parentDepth</code> UInt32 The depth to walk - i.e. number of parents to traverse - to find the context on which to evaluate the <code>expression</code> when the <code>expressionType</code> is ContextBinding.</p> <p><code>parentType</code> ReadOnlySpan&lt;Char&gt; The type name of the parent to walk up to for a context redirect. Exclusive with <code>parentDepth</code> and only valid if the <code>expressionType</code> is ContextBinding.</p>"},{"location":"reference/stardewui/framework/grammar/argument/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/grammar/argument/#expression","title":"Expression","text":"<p>The literal expression text.</p> <pre><code>public ReadOnlySpan&lt;System.Char&gt; Expression { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/argument/#property-value","title":"Property Value","text":"<p>ReadOnlySpan&lt;Char&gt;</p>"},{"location":"reference/stardewui/framework/grammar/argument/#expressiontype","title":"ExpressionType","text":"<p>The type describing how Expression should be interpreted.</p> <pre><code>public StardewUI.Framework.Grammar.ArgumentExpressionType ExpressionType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/argument/#property-value_1","title":"Property Value","text":"<p>ArgumentExpressionType</p>"},{"location":"reference/stardewui/framework/grammar/argument/#parentdepth","title":"ParentDepth","text":"<p>The depth to walk - i.e. number of parents to traverse - to find the context on which to evaluate the Expression when the ExpressionType is ContextBinding.</p> <pre><code>public uint ParentDepth { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/argument/#property-value_2","title":"Property Value","text":"<p>UInt32</p>"},{"location":"reference/stardewui/framework/grammar/argument/#parenttype","title":"ParentType","text":"<p>The type name of the parent to walk up to for a context redirect. Exclusive with ParentDepth and only valid if the ExpressionType is ContextBinding.</p> <pre><code>public ReadOnlySpan&lt;System.Char&gt; ParentType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/argument/#property-value_3","title":"Property Value","text":"<p>ReadOnlySpan&lt;Char&gt;</p>"},{"location":"reference/stardewui/framework/grammar/argumentexpressiontype/","title":"ArgumentExpressionType","text":""},{"location":"reference/stardewui/framework/grammar/argumentexpressiontype/#enum-argumentexpressiontype","title":"Enum ArgumentExpressionType","text":""},{"location":"reference/stardewui/framework/grammar/argumentexpressiontype/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>Defines the possible types of an Argument, which specifies how to resolve its value at runtime.</p> <pre><code>public enum ArgumentExpressionType\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 ArgumentExpressionType</p>"},{"location":"reference/stardewui/framework/grammar/argumentexpressiontype/#fields","title":"Fields","text":"Name Value Description Literal 0 The value is the literal string in the markup, i.e. it is the actual string representation of the target data type such as an integer, enumeration or another string. ContextBinding 1 The current value of some property in the context data. EventBinding 2 The value of a named property of the EventArgs subclass of an associated event, when an argument is being provided to an event handler. TemplateBinding 3 The expanded value of a template parameter; only valid within a template node."},{"location":"reference/stardewui/framework/grammar/attribute/","title":"Attribute","text":""},{"location":"reference/stardewui/framework/grammar/attribute/#struct-attribute","title":"Struct Attribute","text":""},{"location":"reference/stardewui/framework/grammar/attribute/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>A complete attribute assignment parsed from StarML.</p> <pre><code>[System.Obsolete]\npublic readonly ref struct Attribute\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Attribute</p>"},{"location":"reference/stardewui/framework/grammar/attribute/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/grammar/attribute/#constructors","title":"Constructors","text":"Name Description Attribute(ReadOnlySpan&lt;Char&gt;, AttributeType, AttributeValueType, ReadOnlySpan&lt;Char&gt;, UInt32, ReadOnlySpan&lt;Char&gt;) A complete attribute assignment parsed from StarML."},{"location":"reference/stardewui/framework/grammar/attribute/#properties","title":"Properties","text":"Name Description Name The attribute name. ParentDepth The depth to walk - i.e. number of parents to traverse - to find the context on which to evaluate a context binding. Exclusive with ParentType and only valid if the ValueType is a type that matches IsContextBinding(AttributeValueType). ParentType The type name of the parent to walk up to for a context redirect. Exclusive with ParentDepth and only valid if the ValueType is a type that matches IsContextBinding(AttributeValueType). Type The type of the attribute itself, i.e. how its Name should be interpreted. Value The literal value text. ValueType The type of the value expression, defining how the Value should be interpreted."},{"location":"reference/stardewui/framework/grammar/attribute/#methods","title":"Methods","text":"Name Description Equals(Object) (Inherited from ValueType) GetHashCode() (Inherited from ValueType) ToString() (Inherited from ValueType)"},{"location":"reference/stardewui/framework/grammar/attribute/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/grammar/attribute/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/grammar/attribute/#attributereadonlyspanchar-attributetype-attributevaluetype-readonlyspanchar-uint-readonlyspanchar","title":"Attribute(ReadOnlySpan&lt;Char&gt;, AttributeType, AttributeValueType, ReadOnlySpan&lt;Char&gt;, uint, ReadOnlySpan&lt;Char&gt;)","text":"<p>A complete attribute assignment parsed from StarML.</p> <pre><code>public Attribute(ReadOnlySpan&lt;System.Char&gt; name, StardewUI.Framework.Grammar.AttributeType type, StardewUI.Framework.Grammar.AttributeValueType valueType, ReadOnlySpan&lt;System.Char&gt; value, uint parentDepth, ReadOnlySpan&lt;System.Char&gt; parentType);\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/attribute/#parameters","title":"Parameters","text":"<p><code>name</code> ReadOnlySpan&lt;Char&gt; The attribute name.</p> <p><code>type</code> AttributeType The type of the attribute itself, i.e. how its <code>name</code> should be interpreted.</p> <p><code>valueType</code> AttributeValueType The type of the value expression, defining how the <code>value</code> should be interpreted.</p> <p><code>value</code> ReadOnlySpan&lt;Char&gt; The literal value text.</p> <p><code>parentDepth</code> UInt32 The depth to walk - i.e. number of parents to traverse - to find the context on which to evaluate a context binding. Only valid if the <code>valueType</code> is a type that matches IsContextBinding(AttributeValueType).</p> <p><code>parentType</code> ReadOnlySpan&lt;Char&gt; The type name of the parent to search for, to find the the context on which to evaluate a context binding. Exclusive with <code>parentDepth</code> and only valid if the <code>valueType</code> is a type that matches IsContextBinding(AttributeValueType).</p>"},{"location":"reference/stardewui/framework/grammar/attribute/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/grammar/attribute/#name","title":"Name","text":"<p>The attribute name.</p> <pre><code>public ReadOnlySpan&lt;System.Char&gt; Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/attribute/#property-value","title":"Property Value","text":"<p>ReadOnlySpan&lt;Char&gt;</p>"},{"location":"reference/stardewui/framework/grammar/attribute/#parentdepth","title":"ParentDepth","text":"<p>The depth to walk - i.e. number of parents to traverse - to find the context on which to evaluate a context binding. Exclusive with ParentType and only valid if the ValueType is a type that matches IsContextBinding(AttributeValueType).</p> <pre><code>public uint ParentDepth { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/attribute/#property-value_1","title":"Property Value","text":"<p>UInt32</p>"},{"location":"reference/stardewui/framework/grammar/attribute/#parenttype","title":"ParentType","text":"<p>The type name of the parent to walk up to for a context redirect. Exclusive with ParentDepth and only valid if the ValueType is a type that matches IsContextBinding(AttributeValueType).</p> <pre><code>public ReadOnlySpan&lt;System.Char&gt; ParentType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/attribute/#property-value_2","title":"Property Value","text":"<p>ReadOnlySpan&lt;Char&gt;</p>"},{"location":"reference/stardewui/framework/grammar/attribute/#type","title":"Type","text":"<p>The type of the attribute itself, i.e. how its Name should be interpreted.</p> <pre><code>public StardewUI.Framework.Grammar.AttributeType Type { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/attribute/#property-value_3","title":"Property Value","text":"<p>AttributeType</p>"},{"location":"reference/stardewui/framework/grammar/attribute/#value","title":"Value","text":"<p>The literal value text.</p> <pre><code>public ReadOnlySpan&lt;System.Char&gt; Value { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/attribute/#property-value_4","title":"Property Value","text":"<p>ReadOnlySpan&lt;Char&gt;</p>"},{"location":"reference/stardewui/framework/grammar/attribute/#valuetype","title":"ValueType","text":"<p>The type of the value expression, defining how the Value should be interpreted.</p> <pre><code>public StardewUI.Framework.Grammar.AttributeValueType ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/attribute/#property-value_5","title":"Property Value","text":"<p>AttributeValueType</p>"},{"location":"reference/stardewui/framework/grammar/attributetype/","title":"AttributeType","text":""},{"location":"reference/stardewui/framework/grammar/attributetype/#enum-attributetype","title":"Enum AttributeType","text":""},{"location":"reference/stardewui/framework/grammar/attributetype/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>The different types of an Attribute, independent of its value.</p> <pre><code>public enum AttributeType\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 AttributeType</p>"},{"location":"reference/stardewui/framework/grammar/attributetype/#fields","title":"Fields","text":"Name Value Description Property 0 Sets or binds a property on the target view. Structural 1 Affects the structure or hierarchy of the view tree, e.g. by making a node conditional or repeated."},{"location":"reference/stardewui/framework/grammar/attributevaluetype/","title":"AttributeValueType","text":""},{"location":"reference/stardewui/framework/grammar/attributevaluetype/#enum-attributevaluetype","title":"Enum AttributeValueType","text":""},{"location":"reference/stardewui/framework/grammar/attributevaluetype/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>Types allowed for the value of an Attribute.</p> <pre><code>public enum AttributeValueType\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 AttributeValueType</p>"},{"location":"reference/stardewui/framework/grammar/attributevaluetype/#fields","title":"Fields","text":"Name Value Description Literal 0 The value is the literal string in the markup, i.e. it is the actual string representation of the target data type such as an integer, enumeration or another string. AssetBinding 1 A read-only binding which obtains the value from a named game asset. TranslationBinding 2 A read-only binding which obtains the value from a translation key registered with SMAPI. InputBinding 3 A one-way data binding which obtains the value from the context data and assigns it to the view. OneTimeBinding 4 A special type of InputBinding that only reads the value a single time, and does not update subsequently afterward. OutputBinding 5 A one-way data binding which obtains the value from the view and assigns it to the context data. TwoWayBinding 6 A two-way data binding which both assigns the context data's value to the view, and the view's value to the context data, depending on which one was most recently changed. TemplateBinding 7 Binds to the attribute value of the containing template; only valid within a template node."},{"location":"reference/stardewui/framework/grammar/attributevaluetypeextensions/","title":"AttributeValueTypeExtensions","text":""},{"location":"reference/stardewui/framework/grammar/attributevaluetypeextensions/#class-attributevaluetypeextensions","title":"Class AttributeValueTypeExtensions","text":""},{"location":"reference/stardewui/framework/grammar/attributevaluetypeextensions/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>Extensions for the AttributeValueType enum.</p> <pre><code>public static class AttributeValueTypeExtensions\n</code></pre> <p>Inheritance Object \u21e6 AttributeValueTypeExtensions</p>"},{"location":"reference/stardewui/framework/grammar/attributevaluetypeextensions/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/grammar/attributevaluetypeextensions/#methods","title":"Methods","text":"Name Description IsContextBinding(AttributeValueType) Tests if a given <code>valueType</code> is any type of context binding, regardless of its direction."},{"location":"reference/stardewui/framework/grammar/attributevaluetypeextensions/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/grammar/attributevaluetypeextensions/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/grammar/attributevaluetypeextensions/#iscontextbindingattributevaluetype","title":"IsContextBinding(AttributeValueType)","text":"<p>Tests if a given <code>valueType</code> is any type of context binding, regardless of its direction.</p> <pre><code>public static bool IsContextBinding(StardewUI.Framework.Grammar.AttributeValueType valueType);\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/attributevaluetypeextensions/#parameters","title":"Parameters","text":"<p><code>valueType</code> AttributeValueType The value type.</p>"},{"location":"reference/stardewui/framework/grammar/attributevaluetypeextensions/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the attribute binds to a context property; <code>false</code> if it is some other type of attribute such as Literal or AssetBinding.</p>"},{"location":"reference/stardewui/framework/grammar/documentreader/","title":"DocumentReader","text":""},{"location":"reference/stardewui/framework/grammar/documentreader/#struct-documentreader","title":"Struct DocumentReader","text":""},{"location":"reference/stardewui/framework/grammar/documentreader/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>Reads elements and associated attributes from a StarML document (content string).</p> <pre><code>[System.Obsolete]\npublic ref struct DocumentReader\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 DocumentReader</p>"},{"location":"reference/stardewui/framework/grammar/documentreader/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/grammar/documentreader/#constructors","title":"Constructors","text":"Name Description DocumentReader(Lexer) Reads elements and associated attributes from a StarML document (content string). DocumentReader(ReadOnlySpan&lt;Char&gt;) Initializes a new DocumentReader from the specified text, creating an implicit lexer."},{"location":"reference/stardewui/framework/grammar/documentreader/#properties","title":"Properties","text":"Name Description Argument The argument that was just read, if the previous NextArgument() returned <code>true</code>; otherwise, an empty argument. Attribute The attribute that was just read, if the previous NextMember() returned Attribute; otherwise, an empty attribute. Eof Whether the end of the document has been reached. Event The event that was just read, if the previous NextMember() returned Event; otherwise, an empty event. Position The current position in the document content. Tag The tag that was just read, if the previous NextTag() returned <code>true</code>; otherwise, an empty tag."},{"location":"reference/stardewui/framework/grammar/documentreader/#methods","title":"Methods","text":"Name Description Equals(Object) (Inherited from ValueType) GetHashCode() (Inherited from ValueType) NextArgument() Reads the next Argument, if the current scope is within an argument list. NextMember() Reads the next Attribute. Only valid in a tag scope, i.e. after a call to NextTag() returns <code>true</code>. NextTag() Reads the next Tag, discarding any remaining attributes for the current tag. ToString() (Inherited from ValueType)"},{"location":"reference/stardewui/framework/grammar/documentreader/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/grammar/documentreader/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/grammar/documentreader/#documentreaderlexer","title":"DocumentReader(Lexer)","text":"<p>Reads elements and associated attributes from a StarML document (content string).</p> <pre><code>public DocumentReader(StardewUI.Framework.Grammar.Lexer lexer);\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/documentreader/#parameters","title":"Parameters","text":"<p><code>lexer</code> Lexer The lexer that reads syntax tokens from the document.</p>"},{"location":"reference/stardewui/framework/grammar/documentreader/#documentreaderreadonlyspanchar","title":"DocumentReader(ReadOnlySpan&lt;Char&gt;)","text":"<p>Initializes a new DocumentReader from the specified text, creating an implicit lexer.</p> <pre><code>public DocumentReader(ReadOnlySpan&lt;System.Char&gt; text);\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/documentreader/#parameters_1","title":"Parameters","text":"<p><code>text</code> ReadOnlySpan&lt;Char&gt; The markup text.</p>"},{"location":"reference/stardewui/framework/grammar/documentreader/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/grammar/documentreader/#argument","title":"Argument","text":"<p>The argument that was just read, if the previous NextArgument() returned <code>true</code>; otherwise, an empty argument.</p> <pre><code>public StardewUI.Framework.Grammar.Argument Argument { get; private set; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/documentreader/#property-value","title":"Property Value","text":"<p>Argument</p>"},{"location":"reference/stardewui/framework/grammar/documentreader/#attribute","title":"Attribute","text":"<p>The attribute that was just read, if the previous NextMember() returned Attribute; otherwise, an empty attribute.</p> <pre><code>public StardewUI.Framework.Grammar.Attribute Attribute { get; private set; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/documentreader/#property-value_1","title":"Property Value","text":"<p>Attribute</p>"},{"location":"reference/stardewui/framework/grammar/documentreader/#eof","title":"Eof","text":"<p>Whether the end of the document has been reached.</p> <pre><code>public bool Eof { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/documentreader/#property-value_2","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/grammar/documentreader/#event","title":"Event","text":"<p>The event that was just read, if the previous NextMember() returned Event; otherwise, an empty event.</p> <pre><code>public StardewUI.Framework.Grammar.Event Event { get; private set; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/documentreader/#property-value_3","title":"Property Value","text":"<p>Event</p>"},{"location":"reference/stardewui/framework/grammar/documentreader/#position","title":"Position","text":"<p>The current position in the document content.</p> <pre><code>public int Position { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/documentreader/#property-value_4","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/framework/grammar/documentreader/#tag","title":"Tag","text":"<p>The tag that was just read, if the previous NextTag() returned <code>true</code>; otherwise, an empty tag.</p> <pre><code>public StardewUI.Framework.Grammar.TagInfo Tag { get; private set; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/documentreader/#property-value_5","title":"Property Value","text":"<p>TagInfo</p>"},{"location":"reference/stardewui/framework/grammar/documentreader/#remarks","title":"Remarks","text":"<p>The tag remains valid as attributes are read; i.e. <code>ReadNextAttribute(AttributeType, ReadOnlySpan&lt;Char&gt;)</code> will never change this value.</p>"},{"location":"reference/stardewui/framework/grammar/documentreader/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/grammar/documentreader/#nextargument","title":"NextArgument()","text":"<p>Reads the next Argument, if the current scope is within an argument list.</p> <pre><code>public bool NextArgument();\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/documentreader/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if an argument was read; <code>false</code> if there are no more arguments in the list or if the current position was not within an argument list.</p>"},{"location":"reference/stardewui/framework/grammar/documentreader/#nextmember","title":"NextMember()","text":"<p>Reads the next Attribute. Only valid in a tag scope, i.e. after a call to NextTag() returns <code>true</code>.</p> <pre><code>public StardewUI.Framework.Grammar.TagMember NextMember();\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/documentreader/#returns_1","title":"Returns","text":"<p>TagMember</p> <p><code>true</code> if an attribute was read; <code>false</code> if there are no more attributes to read for the current element.</p>"},{"location":"reference/stardewui/framework/grammar/documentreader/#nexttag","title":"NextTag()","text":"<p>Reads the next Tag, discarding any remaining attributes for the current tag.</p> <pre><code>public bool NextTag();\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/documentreader/#returns_2","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if an attribute was read; <code>false</code> if the end of the document was reached.</p>"},{"location":"reference/stardewui/framework/grammar/event/","title":"Event","text":""},{"location":"reference/stardewui/framework/grammar/event/#struct-event","title":"Struct Event","text":""},{"location":"reference/stardewui/framework/grammar/event/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>An event handler parsed from StarML.</p> <pre><code>[System.Obsolete]\npublic readonly ref struct Event\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Event</p>"},{"location":"reference/stardewui/framework/grammar/event/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/grammar/event/#constructors","title":"Constructors","text":"Name Description Event(ReadOnlySpan&lt;Char&gt;, ReadOnlySpan&lt;Char&gt;, UInt32, ReadOnlySpan&lt;Char&gt;) An event handler parsed from StarML."},{"location":"reference/stardewui/framework/grammar/event/#properties","title":"Properties","text":"Name Description EventName The name of the event to which a handler should be attached. HandlerName The name of the handler method to invoke. ParentDepth The depth to walk - i.e. number of parents to traverse - to find the object on which to invoke the handler method. ParentType The type name of the parent to walk up to for a context redirect. Exclusive with ParentDepth."},{"location":"reference/stardewui/framework/grammar/event/#methods","title":"Methods","text":"Name Description Equals(Object) (Inherited from ValueType) GetHashCode() (Inherited from ValueType) ToString() (Inherited from ValueType)"},{"location":"reference/stardewui/framework/grammar/event/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/grammar/event/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/grammar/event/#eventreadonlyspanchar-readonlyspanchar-uint-readonlyspanchar","title":"Event(ReadOnlySpan&lt;Char&gt;, ReadOnlySpan&lt;Char&gt;, uint, ReadOnlySpan&lt;Char&gt;)","text":"<p>An event handler parsed from StarML.</p> <pre><code>public Event(ReadOnlySpan&lt;System.Char&gt; eventName, ReadOnlySpan&lt;System.Char&gt; handlerName, uint parentDepth, ReadOnlySpan&lt;System.Char&gt; parentType);\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/event/#parameters","title":"Parameters","text":"<p><code>eventName</code> ReadOnlySpan&lt;Char&gt; The name of the event to which a handler should be attached.</p> <p><code>handlerName</code> ReadOnlySpan&lt;Char&gt; The name of the handler method to invoke.</p> <p><code>parentDepth</code> UInt32 The depth to walk - i.e. number of parents to traverse - to find the object on which to invoke the handler method.</p> <p><code>parentType</code> ReadOnlySpan&lt;Char&gt; The type name of the parent to walk up to for a context redirect. Exclusive with <code>parentDepth</code>.</p>"},{"location":"reference/stardewui/framework/grammar/event/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/grammar/event/#eventname","title":"EventName","text":"<p>The name of the event to which a handler should be attached.</p> <pre><code>public ReadOnlySpan&lt;System.Char&gt; EventName { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/event/#property-value","title":"Property Value","text":"<p>ReadOnlySpan&lt;Char&gt;</p>"},{"location":"reference/stardewui/framework/grammar/event/#handlername","title":"HandlerName","text":"<p>The name of the handler method to invoke.</p> <pre><code>public ReadOnlySpan&lt;System.Char&gt; HandlerName { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/event/#property-value_1","title":"Property Value","text":"<p>ReadOnlySpan&lt;Char&gt;</p>"},{"location":"reference/stardewui/framework/grammar/event/#parentdepth","title":"ParentDepth","text":"<p>The depth to walk - i.e. number of parents to traverse - to find the object on which to invoke the handler method.</p> <pre><code>public uint ParentDepth { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/event/#property-value_2","title":"Property Value","text":"<p>UInt32</p>"},{"location":"reference/stardewui/framework/grammar/event/#parenttype","title":"ParentType","text":"<p>The type name of the parent to walk up to for a context redirect. Exclusive with ParentDepth.</p> <pre><code>public ReadOnlySpan&lt;System.Char&gt; ParentType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/event/#property-value_3","title":"Property Value","text":"<p>ReadOnlySpan&lt;Char&gt;</p>"},{"location":"reference/stardewui/framework/grammar/lexer/","title":"Lexer","text":""},{"location":"reference/stardewui/framework/grammar/lexer/#struct-lexer","title":"Struct Lexer","text":""},{"location":"reference/stardewui/framework/grammar/lexer/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>Consumes raw StarML content as a token stream.</p> <pre><code>[System.Obsolete]\npublic ref struct Lexer\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Lexer</p>"},{"location":"reference/stardewui/framework/grammar/lexer/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/grammar/lexer/#constructors","title":"Constructors","text":"Name Description Lexer(ReadOnlySpan&lt;Char&gt;) Consumes raw StarML content as a token stream."},{"location":"reference/stardewui/framework/grammar/lexer/#properties","title":"Properties","text":"Name Description Current The most recent token that was read, if the previous call to MoveNext() was successful; otherwise, an empty token. Eof Whether the lexer is at the end of the content, either at the very end or with only trailing whitespace. Position The current position in the markup text, i.e. the position at the end the Current token."},{"location":"reference/stardewui/framework/grammar/lexer/#methods","title":"Methods","text":"Name Description Equals(Object) (Inherited from ValueType) GetEnumerator() Returns a reference to this Lexer. GetHashCode() (Inherited from ValueType) MoveNext() Reads the next token into Current and advances the Position. ReadOptionalToken(TokenType) Attempts to read the next token and, if successful, validates that it has a specific type. ReadRequiredToken(TokenType) Reads the next token and validates that it has a specific type. ToString() (Inherited from ValueType)"},{"location":"reference/stardewui/framework/grammar/lexer/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/grammar/lexer/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/grammar/lexer/#lexerreadonlyspanchar","title":"Lexer(ReadOnlySpan&lt;Char&gt;)","text":"<p>Consumes raw StarML content as a token stream.</p> <pre><code>public Lexer(ReadOnlySpan&lt;System.Char&gt; text);\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/lexer/#parameters","title":"Parameters","text":"<p><code>text</code> ReadOnlySpan&lt;Char&gt; The markup text.</p>"},{"location":"reference/stardewui/framework/grammar/lexer/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/grammar/lexer/#current","title":"Current","text":"<p>The most recent token that was read, if the previous call to MoveNext() was successful; otherwise, an empty token.</p> <pre><code>public StardewUI.Framework.Grammar.Token Current { get; private set; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/lexer/#property-value","title":"Property Value","text":"<p>Token</p>"},{"location":"reference/stardewui/framework/grammar/lexer/#eof","title":"Eof","text":"<p>Whether the lexer is at the end of the content, either at the very end or with only trailing whitespace.</p> <pre><code>public bool Eof { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/lexer/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/grammar/lexer/#position","title":"Position","text":"<p>The current position in the markup text, i.e. the position at the end the Current token.</p> <pre><code>public int Position { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/lexer/#property-value_2","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/framework/grammar/lexer/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/grammar/lexer/#getenumerator","title":"GetEnumerator()","text":"<p>Returns a reference to this Lexer.</p> <pre><code>public StardewUI.Framework.Grammar.Lexer GetEnumerator();\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/lexer/#returns","title":"Returns","text":"<p>Lexer</p>"},{"location":"reference/stardewui/framework/grammar/lexer/#remarks","title":"Remarks","text":"<p>Implementing this, along with Current and MoveNext(), allows it to be used in a <code>foreach</code> loop without having to implement IEnumerable&lt;T&gt;, which is not allowed on a <code>ref struct</code>.</p>"},{"location":"reference/stardewui/framework/grammar/lexer/#movenext","title":"MoveNext()","text":"<p>Reads the next token into Current and advances the Position.</p> <pre><code>public bool MoveNext();\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/lexer/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if a token was read; <code>false</code> if the end of the content was reached.</p>"},{"location":"reference/stardewui/framework/grammar/lexer/#readoptionaltokentokentype","title":"ReadOptionalToken(TokenType)","text":"<p>Attempts to read the next token and, if successful, validates that it has a specific type.</p> <pre><code>public bool ReadOptionalToken(StardewUI.Framework.Grammar.TokenType expectedTypes);\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/lexer/#parameters_1","title":"Parameters","text":"<p><code>expectedTypes</code> TokenType The TokenTypes allowed for the next token.</p>"},{"location":"reference/stardewui/framework/grammar/lexer/#returns_2","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if a token was read and was one of the <code>expectedTypes</code>; <code>false</code> if the end of the content was reached.</p>"},{"location":"reference/stardewui/framework/grammar/lexer/#readrequiredtokentokentype","title":"ReadRequiredToken(TokenType)","text":"<p>Reads the next token and validates that it has a specific type.</p> <pre><code>public void ReadRequiredToken(StardewUI.Framework.Grammar.TokenType expectedTypes);\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/lexer/#parameters_2","title":"Parameters","text":"<p><code>expectedTypes</code> TokenType The TokenTypes allowed for the next token.</p>"},{"location":"reference/stardewui/framework/grammar/lexerexception/","title":"LexerException","text":""},{"location":"reference/stardewui/framework/grammar/lexerexception/#class-lexerexception","title":"Class LexerException","text":""},{"location":"reference/stardewui/framework/grammar/lexerexception/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>The exception that is thrown when a Lexer fails to process the markup it is given.</p> <pre><code>public class LexerException : System.Exception\n</code></pre> <p>Inheritance Object \u21e6 Exception \u21e6 LexerException</p>"},{"location":"reference/stardewui/framework/grammar/lexerexception/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/grammar/lexerexception/#constructors","title":"Constructors","text":"Name Description LexerException(string, Int32) The exception that is thrown when a Lexer fails to process the markup it is given."},{"location":"reference/stardewui/framework/grammar/lexerexception/#properties","title":"Properties","text":"Name Description Data (Inherited from Exception) HelpLink (Inherited from Exception) HResult (Inherited from Exception) InnerException (Inherited from Exception) Message (Inherited from Exception) Position The position within the markup text where the error was encountered. Source (Inherited from Exception) StackTrace (Inherited from Exception) TargetSite (Inherited from Exception)"},{"location":"reference/stardewui/framework/grammar/lexerexception/#methods","title":"Methods","text":"Name Description GetBaseException() (Inherited from Exception) GetObjectData(SerializationInfo, StreamingContext) (Inherited from Exception) GetType() (Inherited from Exception) ToString() (Inherited from Exception)"},{"location":"reference/stardewui/framework/grammar/lexerexception/#events","title":"Events","text":"Name Description SerializeObjectState (Inherited from Exception)"},{"location":"reference/stardewui/framework/grammar/lexerexception/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/grammar/lexerexception/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/grammar/lexerexception/#lexerexceptionstring-int","title":"LexerException(string, int)","text":"<p>The exception that is thrown when a Lexer fails to process the markup it is given.</p> <pre><code>public LexerException(string message, int position);\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/lexerexception/#parameters","title":"Parameters","text":"<p><code>message</code> string The message that describes the error.</p> <p><code>position</code> Int32 The position within the markup text where the error was encountered.</p>"},{"location":"reference/stardewui/framework/grammar/lexerexception/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/grammar/lexerexception/#position","title":"Position","text":"<p>The position within the markup text where the error was encountered.</p> <pre><code>public int Position { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/lexerexception/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/framework/grammar/parserexception/","title":"ParserException","text":""},{"location":"reference/stardewui/framework/grammar/parserexception/#class-parserexception","title":"Class ParserException","text":""},{"location":"reference/stardewui/framework/grammar/parserexception/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>The exception that is thrown when a DocumentReader encounters invalid content.</p> <pre><code>public class ParserException : System.Exception\n</code></pre> <p>Inheritance Object \u21e6 Exception \u21e6 ParserException</p>"},{"location":"reference/stardewui/framework/grammar/parserexception/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/grammar/parserexception/#constructors","title":"Constructors","text":"Name Description ParserException(string, Int32) The exception that is thrown when a DocumentReader encounters invalid content."},{"location":"reference/stardewui/framework/grammar/parserexception/#properties","title":"Properties","text":"Name Description Data (Inherited from Exception) HelpLink (Inherited from Exception) HResult (Inherited from Exception) InnerException (Inherited from Exception) Message (Inherited from Exception) Position The position within the markup text where the error was encountered. Source (Inherited from Exception) StackTrace (Inherited from Exception) TargetSite (Inherited from Exception)"},{"location":"reference/stardewui/framework/grammar/parserexception/#methods","title":"Methods","text":"Name Description GetBaseException() (Inherited from Exception) GetObjectData(SerializationInfo, StreamingContext) (Inherited from Exception) GetType() (Inherited from Exception) ToString() (Inherited from Exception)"},{"location":"reference/stardewui/framework/grammar/parserexception/#events","title":"Events","text":"Name Description SerializeObjectState (Inherited from Exception)"},{"location":"reference/stardewui/framework/grammar/parserexception/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/grammar/parserexception/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/grammar/parserexception/#parserexceptionstring-int","title":"ParserException(string, int)","text":"<p>The exception that is thrown when a DocumentReader encounters invalid content.</p> <pre><code>public ParserException(string message, int position);\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/parserexception/#parameters","title":"Parameters","text":"<p><code>message</code> string The message that describes the error.</p> <p><code>position</code> Int32 The position within the markup text where the error was encountered.</p>"},{"location":"reference/stardewui/framework/grammar/parserexception/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/grammar/parserexception/#position","title":"Position","text":"<p>The position within the markup text where the error was encountered.</p> <pre><code>public int Position { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/parserexception/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/framework/grammar/taginfo/","title":"TagInfo","text":""},{"location":"reference/stardewui/framework/grammar/taginfo/#struct-taginfo","title":"Struct TagInfo","text":""},{"location":"reference/stardewui/framework/grammar/taginfo/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>Information about a parsed tag in StarML.</p> <pre><code>[System.Obsolete]\npublic readonly ref struct TagInfo\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 TagInfo</p>"},{"location":"reference/stardewui/framework/grammar/taginfo/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/grammar/taginfo/#constructors","title":"Constructors","text":"Name Description TagInfo(ReadOnlySpan&lt;Char&gt;, Boolean) Information about a parsed tag in StarML."},{"location":"reference/stardewui/framework/grammar/taginfo/#properties","title":"Properties","text":"Name Description IsClosingTag Whether or not the tag is a closing tag, either in regular <code>&lt;/tag&gt;</code> form or the end of a self-closing tag (<code>/&gt;</code>) after the tag attributes. Name The tag name."},{"location":"reference/stardewui/framework/grammar/taginfo/#methods","title":"Methods","text":"Name Description Equals(Object) (Inherited from ValueType) GetHashCode() (Inherited from ValueType) ToString() (Inherited from ValueType)"},{"location":"reference/stardewui/framework/grammar/taginfo/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/grammar/taginfo/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/grammar/taginfo/#taginforeadonlyspanchar-bool","title":"TagInfo(ReadOnlySpan&lt;Char&gt;, bool)","text":"<p>Information about a parsed tag in StarML.</p> <pre><code>public TagInfo(ReadOnlySpan&lt;System.Char&gt; name, bool isClosingTag);\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/taginfo/#parameters","title":"Parameters","text":"<p><code>name</code> ReadOnlySpan&lt;Char&gt; The tag name.</p> <p><code>isClosingTag</code> Boolean Whether or not the tag is a closing tag, either in regular <code>&lt;/tag&gt;</code> form or the end of a self-closing tag (<code>/&gt;</code>) after the tag attributes.</p>"},{"location":"reference/stardewui/framework/grammar/taginfo/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/grammar/taginfo/#isclosingtag","title":"IsClosingTag","text":"<p>Whether or not the tag is a closing tag, either in regular <code>&lt;/tag&gt;</code> form or the end of a self-closing tag (<code>/&gt;</code>) after the tag attributes.</p> <pre><code>public bool IsClosingTag { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/taginfo/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/grammar/taginfo/#name","title":"Name","text":"<p>The tag name.</p> <pre><code>public ReadOnlySpan&lt;System.Char&gt; Name { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/taginfo/#property-value_1","title":"Property Value","text":"<p>ReadOnlySpan&lt;Char&gt;</p>"},{"location":"reference/stardewui/framework/grammar/tagmember/","title":"TagMember","text":""},{"location":"reference/stardewui/framework/grammar/tagmember/#enum-tagmember","title":"Enum TagMember","text":""},{"location":"reference/stardewui/framework/grammar/tagmember/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>The type of tag member read, resulting from a call to NextMember().</p> <pre><code>public enum TagMember\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 TagMember</p>"},{"location":"reference/stardewui/framework/grammar/tagmember/#fields","title":"Fields","text":"Name Value Description None 0 No member was read, i.e. the reader reached the end of the tag. Attribute 1 A regular attribute, which binds or writes to a property of the target view. Event 2 An event attribute, which attaches an event handler to the target view."},{"location":"reference/stardewui/framework/grammar/token/","title":"Token","text":""},{"location":"reference/stardewui/framework/grammar/token/#struct-token","title":"Struct Token","text":""},{"location":"reference/stardewui/framework/grammar/token/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>A token emitted by the StarML Lexer.</p> <pre><code>[System.Obsolete]\npublic readonly ref struct Token\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Token</p>"},{"location":"reference/stardewui/framework/grammar/token/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/grammar/token/#constructors","title":"Constructors","text":"Name Description Token(TokenType, ReadOnlySpan&lt;Char&gt;) A token emitted by the StarML Lexer."},{"location":"reference/stardewui/framework/grammar/token/#properties","title":"Properties","text":"Name Description Text The token type. Type The exact text of the token in the original markup."},{"location":"reference/stardewui/framework/grammar/token/#methods","title":"Methods","text":"Name Description Equals(Object) (Inherited from ValueType) GetHashCode() (Inherited from ValueType) ToString() (Overrides Object.<code>ToString()</code>)"},{"location":"reference/stardewui/framework/grammar/token/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/grammar/token/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/grammar/token/#tokentokentype-readonlyspanchar","title":"Token(TokenType, ReadOnlySpan&lt;Char&gt;)","text":"<p>A token emitted by the StarML Lexer.</p> <pre><code>public Token(StardewUI.Framework.Grammar.TokenType type, ReadOnlySpan&lt;System.Char&gt; text);\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/token/#parameters","title":"Parameters","text":"<p><code>type</code> TokenType The token type.</p> <p><code>text</code> ReadOnlySpan&lt;Char&gt; The exact text of the token in the original markup.</p>"},{"location":"reference/stardewui/framework/grammar/token/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/grammar/token/#text","title":"Text","text":"<p>The token type.</p> <pre><code>public ReadOnlySpan&lt;System.Char&gt; Text { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/token/#property-value","title":"Property Value","text":"<p>ReadOnlySpan&lt;Char&gt;</p>"},{"location":"reference/stardewui/framework/grammar/token/#type","title":"Type","text":"<p>The exact text of the token in the original markup.</p> <pre><code>public StardewUI.Framework.Grammar.TokenType Type { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/token/#property-value_1","title":"Property Value","text":"<p>TokenType</p>"},{"location":"reference/stardewui/framework/grammar/token/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/grammar/token/#tostring","title":"ToString()","text":"<pre><code>public override string ToString();\n</code></pre>"},{"location":"reference/stardewui/framework/grammar/token/#returns","title":"Returns","text":"<p>string</p>"},{"location":"reference/stardewui/framework/grammar/tokentype/","title":"TokenType","text":""},{"location":"reference/stardewui/framework/grammar/tokentype/#enum-tokentype","title":"Enum TokenType","text":""},{"location":"reference/stardewui/framework/grammar/tokentype/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Grammar Assembly: StardewUI.dll  </p> <p>Types of tokens allowed in StarML.</p> <pre><code>public enum TokenType\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 TokenType</p>"},{"location":"reference/stardewui/framework/grammar/tokentype/#fields","title":"Fields","text":"Name Value Description Unknown 0 Unknown token; used when a lexer has not been initialized, or has reached the end of its content. OpeningTagStart 1 Start of an opening tag, i.e. the <code>&lt;</code> character without a subsequent <code>/</code>. ClosingTagStart 2 Start of a closing tag, i.e. the <code>&lt;/</code> character sequence. TagEnd 3 End of a regular opening or closing tag, i.e. the <code>&gt;</code> character. SelfClosingTagEnd 4 End of a self-closing tag, i.e. the <code>/&gt;</code> character sequence. Name 5 A valid name, i.e. of an element (tag) or attribute. NameSeparator 6 The dot (<code>.</code>) character used to separate components of a name. AttributeModifier 7 Modifier token designating the type of an attribute; the <code>*</code> character (structural). Literal 8 A string of literal text, as found within a quoted or bound attribute. Assignment 9 The <code>=</code> character, as used in an attribute syntax such as <code>attr=\"value\"</code>. Quote 10 Double quote character (<code>\"</code>) used to start or terminate a Literal string. BindingStart 11 A pair of opening braces (<code>{{</code>), used to start a binding expression for an attribute value. BindingEnd 12 A pair of closing braces (<code>}}</code>), used to end a binding expression for an attribute value. BindingModifier 13 An explicit binding modifier; one of <code>@</code> (asset), <code>#</code> (translation), <code>&amp;</code> (template), <code>&lt;</code> (input only), <code>&gt;</code> (output only) or <code>&lt;&gt;</code> (two-way). ContextParent 14 A caret (<code>^</code>) used in a binding expression, indicating a walk up to the parent context. ContextAncestor 15 A tilde (<code>~</code>) used in a binding expression, indicating traversal up to a parent with a named type. Pipe 16 The pipe (<code>|</code>) character, which is used to start and end event bindings. ArgumentListStart 17 The left parenthesis (<code>(</code>) character, used to start an argument list. ArgumentListEnd 18 The right parenthesis (<code>(</code>) character, used to end an argument list. ArgumentPrefix 19 Prefix character for an argument, e.g. <code>$</code> to refer to an event property. ArgumentSeparator 20 The comma (<code>,</code>) character, used to separator arguments in an argument list."},{"location":"reference/stardewui/framework/sources/","title":"StardewUI.Framework.Sources","text":""},{"location":"reference/stardewui/framework/sources/#stardewuiframeworksources-namespace","title":"StardewUI.Framework.Sources Namespace","text":""},{"location":"reference/stardewui/framework/sources/#classes","title":"Classes","text":"Name Description AssetValueSource&lt;T&gt; Value source that looks up an asset registered with SMAPI's content manager. ConstantValueSource&lt;T&gt; Value source with a constant value, generally used to hold the literal (text) value of an attribute. ContextPropertyValueSource&lt;T&gt; Value source that obtains its value from a context (or \"model\") property. ConvertedValueSource Helpers for creating instances of the generic ConvertedValueSource&lt;TSource, T&gt; when some of the types are unknown at compile time. ConvertedValueSource&lt;TSource, T&gt; A value source that wraps another IValueSource&lt;T&gt; and performs automatic conversion. TranslationValueSource Value source that reads the localized string from a translation key. ValueSourceFactory Default implementation of the IValueSourceFactory supporting all binding types."},{"location":"reference/stardewui/framework/sources/#interfaces","title":"Interfaces","text":"Name Description IValueSource Holds the type-independent data of an IValueSource&lt;T&gt;. IValueSource&lt;T&gt; Abstract representation of the source of any value, generally as used in a data binding. IValueSourceFactory Provides methods to look up runtime value types and build appropriate sources based on their binding information."},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/","title":"AssetValueSource&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#class-assetvaluesourcet","title":"Class AssetValueSource&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Sources Assembly: StardewUI.dll  </p> <p>Value source that looks up an asset registered with SMAPI's content manager.</p> <pre><code>public class AssetValueSource&lt;T&gt; : StardewUI.Framework.Sources.IValueSource&lt;T&gt;, \n    StardewUI.Framework.Sources.IValueSource, System.IDisposable\n</code></pre>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The type of asset to retrieve.</p> <p>Inheritance Object \u21e6 AssetValueSource&lt;T&gt;</p> <p>Implements IValueSource&lt;T&gt;, IValueSource, IDisposable</p>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#constructors","title":"Constructors","text":"Name Description AssetValueSource&lt;T&gt;(IAssetCache, string) Value source that looks up an asset registered with SMAPI's content manager."},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#properties","title":"Properties","text":"Name Description CanRead Whether or not the source can be read from, i.e. if an attempt to get the Value should succeed. CanWrite Whether or not the source can be written back to, i.e. if an attempt to set the Value should succeed. DisplayName Descriptive name for the property, used primarily for debug views and log/exception messages. Value ValueType The compile-time type of the value tracked by this source; the type parameter for IValueSource&lt;T&gt;."},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#methods","title":"Methods","text":"Name Description Dispose() Update(Boolean) Checks if the value needs updating, and if so, updates Value to the latest."},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#assetvaluesourcetiassetcache-string","title":"AssetValueSource&lt;T&gt;(IAssetCache, string)","text":"<p>Value source that looks up an asset registered with SMAPI's content manager.</p> <pre><code>public AssetValueSource&lt;T&gt;(StardewUI.Framework.Content.IAssetCache cache, string name);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#parameters","title":"Parameters","text":"<p><code>cache</code> IAssetCache Asset cache used to obtain current value/status.</p> <p><code>name</code> string The asset name/path as it would be supplied to SMAPI in Load&lt;T&gt;(string).</p>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#canread","title":"CanRead","text":"<p>Whether or not the source can be read from, i.e. if an attempt to get the Value should succeed.</p> <pre><code>public bool CanRead { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#canwrite","title":"CanWrite","text":"<p>Whether or not the source can be written back to, i.e. if an attempt to set the Value should succeed.</p> <pre><code>public bool CanWrite { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#displayname","title":"DisplayName","text":"<p>Descriptive name for the property, used primarily for debug views and log/exception messages.</p> <pre><code>public string DisplayName { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#value","title":"Value","text":"<pre><code>public T Value { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#property-value_3","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#valuetype","title":"ValueType","text":"<p>The compile-time type of the value tracked by this source; the type parameter for IValueSource&lt;T&gt;.</p> <pre><code>public System.Type ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#property-value_4","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose();\n</code></pre>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#updatebool","title":"Update(bool)","text":"<p>Checks if the value needs updating, and if so, updates Value to the latest.</p> <pre><code>public bool Update(bool force);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#parameters_1","title":"Parameters","text":"<p><code>force</code> Boolean If <code>true</code>, forces the source to update its value even if it isn't considered dirty. This should never be used in a regular binding, but can be useful in sources that are intended for occasional or one-shot use such as event handler arguments.</p>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the underlying asset expired since the last update; <code>false</code> if the Value was still current.</p>"},{"location":"reference/stardewui/framework/sources/assetvaluesource-1/#remarks","title":"Remarks","text":"<p>This method is called every frame, for every binding, and providing a correct return value is essential in order to avoid slowdowns due to unnecessary rebinds.</p>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/","title":"ConstantValueSource&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#class-constantvaluesourcet","title":"Class ConstantValueSource&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Sources Assembly: StardewUI.dll  </p> <p>Value source with a constant value, generally used to hold the literal (text) value of an attribute.</p> <pre><code>public class ConstantValueSource&lt;T&gt; : \n    StardewUI.Framework.Sources.IValueSource&lt;T&gt;, \n    StardewUI.Framework.Sources.IValueSource\n</code></pre>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> </p> <p>Inheritance Object \u21e6 ConstantValueSource&lt;T&gt;</p> <p>Implements IValueSource&lt;T&gt;, IValueSource</p>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#constructors","title":"Constructors","text":"Name Description ConstantValueSource&lt;T&gt;(T) Value source with a constant value, generally used to hold the literal (text) value of an attribute."},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#properties","title":"Properties","text":"Name Description CanRead Whether or not the source can be read from, i.e. if an attempt to get the Value should succeed. CanWrite Whether or not the source can be written back to, i.e. if an attempt to set the Value should succeed. DisplayName Descriptive name for the property, used primarily for debug views and log/exception messages. Value ValueType The compile-time type of the value tracked by this source; the type parameter for IValueSource&lt;T&gt;."},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#methods","title":"Methods","text":"Name Description Update(Boolean) Checks if the value needs updating, and if so, updates Value to the latest."},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#constantvaluesourcett","title":"ConstantValueSource&lt;T&gt;(T)","text":"<p>Value source with a constant value, generally used to hold the literal (text) value of an attribute.</p> <pre><code>public ConstantValueSource&lt;T&gt;(T value);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#parameters","title":"Parameters","text":"<p><code>value</code> \u00a0 T The attribute value.</p>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#canread","title":"CanRead","text":"<p>Whether or not the source can be read from, i.e. if an attempt to get the Value should succeed.</p> <pre><code>public bool CanRead { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#canwrite","title":"CanWrite","text":"<p>Whether or not the source can be written back to, i.e. if an attempt to set the Value should succeed.</p> <pre><code>public bool CanWrite { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#displayname","title":"DisplayName","text":"<p>Descriptive name for the property, used primarily for debug views and log/exception messages.</p> <pre><code>public string DisplayName { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#value","title":"Value","text":"<pre><code>public T Value { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#property-value_3","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#valuetype","title":"ValueType","text":"<p>The compile-time type of the value tracked by this source; the type parameter for IValueSource&lt;T&gt;.</p> <pre><code>public System.Type ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#property-value_4","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#updatebool","title":"Update(bool)","text":"<p>Checks if the value needs updating, and if so, updates Value to the latest.</p> <pre><code>public bool Update(bool force);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#parameters_1","title":"Parameters","text":"<p><code>force</code> Boolean If <code>true</code>, forces the source to update its value even if it isn't considered dirty. This should never be used in a regular binding, but can be useful in sources that are intended for occasional or one-shot use such as event handler arguments.</p>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#returns","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/sources/constantvaluesource-1/#remarks","title":"Remarks","text":"<p>As implemented on ConstantValueSource&lt;T&gt;, always returns <code>false</code> as there can never be any change that requires an update.</p>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/","title":"ContextPropertyValueSource&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#class-contextpropertyvaluesourcet","title":"Class ContextPropertyValueSource&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Sources Assembly: StardewUI.dll  </p> <p>Value source that obtains its value from a context (or \"model\") property.</p> <pre><code>public class ContextPropertyValueSource&lt;T&gt; : \n    StardewUI.Framework.Sources.IValueSource&lt;T&gt;, \n    StardewUI.Framework.Sources.IValueSource, System.IDisposable\n</code></pre>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The return type of the context property.</p> <p>Inheritance Object \u21e6 ContextPropertyValueSource&lt;T&gt;</p> <p>Implements IValueSource&lt;T&gt;, IValueSource, IDisposable</p>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#constructors","title":"Constructors","text":"Name Description ContextPropertyValueSource&lt;T&gt;(BindingContext, string, Boolean) Initializes a new instance of ContextPropertyValueSource&lt;T&gt; using the specified context and property name."},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#properties","title":"Properties","text":"Name Description CanRead Whether or not the source can be read from, i.e. if an attempt to get the Value should succeed. CanWrite Whether or not the source can be written back to, i.e. if an attempt to set the Value should succeed. DisplayName Descriptive name for the property, used primarily for debug views and log/exception messages. Value ValueType The compile-time type of the value tracked by this source; the type parameter for IValueSource&lt;T&gt;."},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#methods","title":"Methods","text":"Name Description Dispose() Update(Boolean) Checks if the value needs updating, and if so, updates Value to the latest."},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#contextpropertyvaluesourcetbindingcontext-string-bool","title":"ContextPropertyValueSource&lt;T&gt;(BindingContext, string, bool)","text":"<p>Initializes a new instance of ContextPropertyValueSource&lt;T&gt; using the specified context and property name.</p> <pre><code>public ContextPropertyValueSource&lt;T&gt;(StardewUI.Framework.Binding.BindingContext context, string propertyName, bool allowUpdates);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#parameters","title":"Parameters","text":"<p><code>context</code> BindingContext Context used for the data binding.</p> <p><code>propertyName</code> string Property to read on the Data of the supplied <code>context</code> when updating.</p> <p><code>allowUpdates</code> Boolean Whether or not to allow Update(Boolean) to read a new value. <code>false</code> prevents all updates and makes the source read only one time.</p>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#remarks","title":"Remarks","text":"<p>If the Data of the supplied <code>context</code> implements INotifyPropertyChanged, then Update(Boolean) and Value will respond to changes to the given <code>propertyName</code>. Otherwise, the source is \"static\" and will never change its value or return <code>true</code> from Update(Boolean).</p>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#canread","title":"CanRead","text":"<p>Whether or not the source can be read from, i.e. if an attempt to get the Value should succeed.</p> <pre><code>public bool CanRead { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#canwrite","title":"CanWrite","text":"<p>Whether or not the source can be written back to, i.e. if an attempt to set the Value should succeed.</p> <pre><code>public bool CanWrite { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#displayname","title":"DisplayName","text":"<p>Descriptive name for the property, used primarily for debug views and log/exception messages.</p> <pre><code>public string DisplayName { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#value","title":"Value","text":"<pre><code>public T Value { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#property-value_3","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#valuetype","title":"ValueType","text":"<p>The compile-time type of the value tracked by this source; the type parameter for IValueSource&lt;T&gt;.</p> <pre><code>public System.Type ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#property-value_4","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose();\n</code></pre>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#updatebool","title":"Update(bool)","text":"<p>Checks if the value needs updating, and if so, updates Value to the latest.</p> <pre><code>public bool Update(bool force);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#parameters_1","title":"Parameters","text":"<p><code>force</code> Boolean If <code>true</code>, forces the source to update its value even if it isn't considered dirty. This should never be used in a regular binding, but can be useful in sources that are intended for occasional or one-shot use such as event handler arguments.</p>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the Value was updated; <code>false</code> if it already held the most recent value.</p>"},{"location":"reference/stardewui/framework/sources/contextpropertyvaluesource-1/#remarks_1","title":"Remarks","text":"<p>This method is called every frame, for every binding, and providing a correct return value is essential in order to avoid slowdowns due to unnecessary rebinds.</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/","title":"ConvertedValueSource&lt;TSource, T&gt;","text":""},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#class-convertedvaluesourcetsource-t","title":"Class ConvertedValueSource&lt;TSource, T&gt;","text":""},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Sources Assembly: StardewUI.dll  </p> <p>A value source that wraps another IValueSource&lt;T&gt; and performs automatic conversion.</p> <pre><code>public class ConvertedValueSource&lt;TSource, T&gt; : \n    StardewUI.Framework.Sources.IValueSource&lt;T&gt;, \n    StardewUI.Framework.Sources.IValueSource\n</code></pre>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#type-parameters","title":"Type Parameters","text":"<p><code>TSource</code> The original value type, i.e. of the <code>source</code>.</p> <p><code>T</code> The converted value type.</p> <p>Inheritance Object \u21e6 ConvertedValueSource&lt;TSource, T&gt;</p> <p>Implements IValueSource&lt;T&gt;, IValueSource</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#constructors","title":"Constructors","text":"Name Description ConvertedValueSource&lt;TSource, T&gt;(IValueSource&lt;TSource&gt;, IValueConverter&lt;TSource, T&gt;, IValueConverter&lt;T, TSource&gt;) A value source that wraps another IValueSource&lt;T&gt; and performs automatic conversion."},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#properties","title":"Properties","text":"Name Description CanRead Whether or not the source can be read from, i.e. if an attempt to get the Value should succeed. CanWrite Whether or not the source can be written back to, i.e. if an attempt to set the Value should succeed. DisplayName Descriptive name for the property, used primarily for debug views and log/exception messages. Value ValueType The compile-time type of the value tracked by this source; the type parameter for IValueSource&lt;T&gt;."},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#methods","title":"Methods","text":"Name Description Update(Boolean) Checks if the value needs updating, and if so, updates Value to the latest."},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#convertedvaluesourcetsource-tivaluesourcetsource-ivalueconvertertsource-t-ivalueconvertert-tsource","title":"ConvertedValueSource&lt;TSource, T&gt;(IValueSource&lt;TSource&gt;, IValueConverter&lt;TSource, T&gt;, IValueConverter&lt;T, TSource&gt;)","text":"<p>A value source that wraps another IValueSource&lt;T&gt; and performs automatic conversion.</p> <pre><code>public ConvertedValueSource&lt;TSource, T&gt;(StardewUI.Framework.Sources.IValueSource&lt;TSource&gt; source, StardewUI.Framework.Converters.IValueConverter&lt;TSource, T&gt; inputConverter, StardewUI.Framework.Converters.IValueConverter&lt;T, TSource&gt; outputConverter);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#parameters","title":"Parameters","text":"<p><code>source</code> IValueSource&lt;TSource&gt; The original value source.</p> <p><code>inputConverter</code> IValueConverter&lt;TSource, T&gt; A converter that converts from <code>TSource</code> to <code>T</code>. If this is <code>null</code>, then this instance's Value will always be <code>null</code> and CanRead will be <code>false</code> regardless of the underlying <code>source</code>'s readability.</p> <p><code>outputConverter</code> IValueConverter&lt;T, TSource&gt; A converter that converts from <code>T</code> to <code>TSource</code>. If this is <code>null</code>, then this instance cannot accept any assignments to the Value property, and CanWrite will always be <code>false</code> regardless of the underlying <code>source</code>'s writability.</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#canread","title":"CanRead","text":"<p>Whether or not the source can be read from, i.e. if an attempt to get the Value should succeed.</p> <pre><code>public bool CanRead { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#canwrite","title":"CanWrite","text":"<p>Whether or not the source can be written back to, i.e. if an attempt to set the Value should succeed.</p> <pre><code>public bool CanWrite { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#displayname","title":"DisplayName","text":"<p>Descriptive name for the property, used primarily for debug views and log/exception messages.</p> <pre><code>public string DisplayName { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#value","title":"Value","text":"<pre><code>public T Value { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#property-value_3","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#valuetype","title":"ValueType","text":"<p>The compile-time type of the value tracked by this source; the type parameter for IValueSource&lt;T&gt;.</p> <pre><code>public System.Type ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#property-value_4","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#updatebool","title":"Update(bool)","text":"<p>Checks if the value needs updating, and if so, updates Value to the latest.</p> <pre><code>public bool Update(bool force);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#parameters_1","title":"Parameters","text":"<p><code>force</code> Boolean If <code>true</code>, forces the source to update its value even if it isn't considered dirty. This should never be used in a regular binding, but can be useful in sources that are intended for occasional or one-shot use such as event handler arguments.</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the Value was updated; <code>false</code> if it already held the most recent value.</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource-2/#remarks","title":"Remarks","text":"<p>This method is called every frame, for every binding, and providing a correct return value is essential in order to avoid slowdowns due to unnecessary rebinds.</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource/","title":"ConvertedValueSource","text":""},{"location":"reference/stardewui/framework/sources/convertedvaluesource/#class-convertedvaluesource","title":"Class ConvertedValueSource","text":""},{"location":"reference/stardewui/framework/sources/convertedvaluesource/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Sources Assembly: StardewUI.dll  </p> <p>Helpers for creating instances of the generic ConvertedValueSource&lt;TSource, T&gt; when some of the types are unknown at compile time.</p> <pre><code>public static class ConvertedValueSource\n</code></pre> <p>Inheritance Object \u21e6 ConvertedValueSource</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/sources/convertedvaluesource/#methods","title":"Methods","text":"Name Description Create(IValueSource, Type, IValueConverterFactory) Creates a converted source with a specified output type, using an original source with unknown value type. Create&lt;T&gt;(IValueSource, IValueConverterFactory) Creates a converted source with a specified output type, using an original source with unknown value type."},{"location":"reference/stardewui/framework/sources/convertedvaluesource/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/sources/convertedvaluesource/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/sources/convertedvaluesource/#createivaluesource-type-ivalueconverterfactory","title":"Create(IValueSource, Type, IValueConverterFactory)","text":"<p>Creates a converted source with a specified output type, using an original source with unknown value type.</p> <pre><code>public static StardewUI.Framework.Sources.IValueSource Create(StardewUI.Framework.Sources.IValueSource original, System.Type destinationType, StardewUI.Framework.Converters.IValueConverterFactory converterFactory);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource/#parameters","title":"Parameters","text":"<p><code>original</code> IValueSource The original value source.</p> <p><code>destinationType</code> Type The type to convert to.</p> <p><code>converterFactory</code> IValueConverterFactory Factory for creating instances of IValueConverter&lt;TSource, TDestination&gt;.</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource/#returns","title":"Returns","text":"<p>IValueSource</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource/#createtivaluesource-ivalueconverterfactory","title":"Create&lt;T&gt;(IValueSource, IValueConverterFactory)","text":"<p>Creates a converted source with a specified output type, using an original source with unknown value type.</p> <pre><code>public static StardewUI.Framework.Sources.IValueSource&lt;T&gt; Create&lt;T&gt;(StardewUI.Framework.Sources.IValueSource original, StardewUI.Framework.Converters.IValueConverterFactory converterFactory);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource/#parameters_1","title":"Parameters","text":"<p><code>original</code> IValueSource The original value source.</p> <p><code>converterFactory</code> IValueConverterFactory Factory for creating instances of IValueConverter&lt;TSource, TDestination&gt;.</p>"},{"location":"reference/stardewui/framework/sources/convertedvaluesource/#returns_1","title":"Returns","text":"<p>IValueSource&lt;T&gt;</p>"},{"location":"reference/stardewui/framework/sources/ivaluesource-1/","title":"IValueSource&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/sources/ivaluesource-1/#interface-ivaluesourcet","title":"Interface IValueSource&lt;T&gt;","text":""},{"location":"reference/stardewui/framework/sources/ivaluesource-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Sources Assembly: StardewUI.dll  </p> <p>Abstract representation of the source of any value, generally as used in a data binding.</p> <pre><code>public interface IValueSource&lt;T&gt; : StardewUI.Framework.Sources.IValueSource\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesource-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> Type of value supplied.</p> <p>Implements IValueSource</p>"},{"location":"reference/stardewui/framework/sources/ivaluesource-1/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/sources/ivaluesource-1/#properties","title":"Properties","text":"Name Description Value Gets the current value obtained from the most recent Update(Boolean), or writes a new value when set."},{"location":"reference/stardewui/framework/sources/ivaluesource-1/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/sources/ivaluesource-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/sources/ivaluesource-1/#value","title":"Value","text":"<p>Gets the current value obtained from the most recent Update(Boolean), or writes a new value when set.</p> <pre><code>T Value { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesource-1/#property-value","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/framework/sources/ivaluesource/","title":"IValueSource","text":""},{"location":"reference/stardewui/framework/sources/ivaluesource/#interface-ivaluesource","title":"Interface IValueSource","text":""},{"location":"reference/stardewui/framework/sources/ivaluesource/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Sources Assembly: StardewUI.dll  </p> <p>Holds the type-independent data of an IValueSource&lt;T&gt;.</p> <pre><code>public interface IValueSource\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#remarks","title":"Remarks","text":"<p>Instances of this type should always implement IValueSource&lt;T&gt; as well; the non-generic version is used when the type is unknown at compile time.</p>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/sources/ivaluesource/#properties","title":"Properties","text":"Name Description CanRead Whether or not the source can be read from, i.e. if an attempt to get the Value should succeed. CanWrite Whether or not the source can be written back to, i.e. if an attempt to set the Value should succeed. DisplayName Descriptive name for the property, used primarily for debug views and log/exception messages. Value Gets or sets the value as a boxed object. The type must be assignable to/from the type parameter of the IValueSource&lt;T&gt; that this instance implements. ValueType The compile-time type of the value tracked by this source; the type parameter for IValueSource&lt;T&gt;."},{"location":"reference/stardewui/framework/sources/ivaluesource/#methods","title":"Methods","text":"Name Description Update(Boolean) Checks if the value needs updating, and if so, updates Value to the latest."},{"location":"reference/stardewui/framework/sources/ivaluesource/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/sources/ivaluesource/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/sources/ivaluesource/#canread","title":"CanRead","text":"<p>Whether or not the source can be read from, i.e. if an attempt to get the Value should succeed.</p> <pre><code>bool CanRead { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#canwrite","title":"CanWrite","text":"<p>Whether or not the source can be written back to, i.e. if an attempt to set the Value should succeed.</p> <pre><code>bool CanWrite { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#displayname","title":"DisplayName","text":"<p>Descriptive name for the property, used primarily for debug views and log/exception messages.</p> <pre><code>string DisplayName { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#value","title":"Value","text":"<p>Gets or sets the value as a boxed object. The type must be assignable to/from the type parameter of the IValueSource&lt;T&gt; that this instance implements.</p> <pre><code>System.Object Value { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#property-value_3","title":"Property Value","text":"<p>Object</p>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#valuetype","title":"ValueType","text":"<p>The compile-time type of the value tracked by this source; the type parameter for IValueSource&lt;T&gt;.</p> <pre><code>System.Type ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#property-value_4","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/sources/ivaluesource/#updatebool","title":"Update(bool)","text":"<p>Checks if the value needs updating, and if so, updates Value to the latest.</p> <pre><code>bool Update(bool force);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#parameters","title":"Parameters","text":"<p><code>force</code> Boolean If <code>true</code>, forces the source to update its value even if it isn't considered dirty. This should never be used in a regular binding, but can be useful in sources that are intended for occasional or one-shot use such as event handler arguments.</p>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the Value was updated; <code>false</code> if it already held the most recent value.</p>"},{"location":"reference/stardewui/framework/sources/ivaluesource/#remarks_1","title":"Remarks","text":"<p>This method is called every frame, for every binding, and providing a correct return value is essential in order to avoid slowdowns due to unnecessary rebinds.</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/","title":"IValueSourceFactory","text":""},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#interface-ivaluesourcefactory","title":"Interface IValueSourceFactory","text":""},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Sources Assembly: StardewUI.dll  </p> <p>Provides methods to look up runtime value types and build appropriate sources based on their binding information.</p> <pre><code>public interface IValueSourceFactory\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#methods","title":"Methods","text":"Name Description GetValueSource(Type, IArgument, BindingContext) Creates a value source that supplies values of a given type according to the specified argument binding. GetValueSource(Type, IAttribute, BindingContext, IResolutionScope) Creates a value source that supplies values of a given type according to the specified binding attribute. GetValueSource&lt;T&gt;(IArgument, BindingContext) Creates a value source that supplies values according to the specified argument binding. GetValueSource&lt;T&gt;(IAttribute, BindingContext, IResolutionScope) Creates a value source that supplies values according to the specified binding attribute. GetValueType(IArgument, BindingContext) Determines the type of value that will be supplied by a given argument binding, and with the specified context. GetValueType(IAttribute, IPropertyDescriptor, BindingContext) Determines the type of value that will be supplied by a given attribute binding, and with the specified context."},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#getvaluesourcetype-iargument-bindingcontext","title":"GetValueSource(Type, IArgument, BindingContext)","text":"<p>Creates a value source that supplies values of a given type according to the specified argument binding.</p> <pre><code>StardewUI.Framework.Sources.IValueSource GetValueSource(System.Type type, StardewUI.Framework.Dom.IArgument argument, StardewUI.Framework.Binding.BindingContext context);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#parameters","title":"Parameters","text":"<p><code>type</code> Type The type of value to obtain; can be determined using GetValueType(IArgument, BindingContext).</p> <p><code>argument</code> IArgument The parsed markup argument containing the binding info.</p> <p><code>context</code> BindingContext The binding context to use for any contextual bindings (those with ContextBinding).</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#returns","title":"Returns","text":"<p>IValueSource</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#getvaluesourcetype-iattribute-bindingcontext-iresolutionscope","title":"GetValueSource(Type, IAttribute, BindingContext, IResolutionScope)","text":"<p>Creates a value source that supplies values of a given type according to the specified binding attribute.</p> <pre><code>StardewUI.Framework.Sources.IValueSource GetValueSource(System.Type type, StardewUI.Framework.Dom.IAttribute attribute, StardewUI.Framework.Binding.BindingContext context, StardewUI.Framework.Content.IResolutionScope scope);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#parameters_1","title":"Parameters","text":"<p><code>type</code> Type The type of value to obtain; can be determined using GetValueType(IArgument, BindingContext).</p> <p><code>attribute</code> IAttribute The parsed markup attribute containing the binding info.</p> <p><code>context</code> BindingContext The binding context to use for any contextual bindings (those with ContextBinding).</p> <p><code>scope</code> IResolutionScope Scope for resolving externalized attributes, such as translation keys.</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#returns_1","title":"Returns","text":"<p>IValueSource</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#getvaluesourcetiargument-bindingcontext","title":"GetValueSource&lt;T&gt;(IArgument, BindingContext)","text":"<p>Creates a value source that supplies values according to the specified argument binding.</p> <pre><code>StardewUI.Framework.Sources.IValueSource&lt;T&gt; GetValueSource&lt;T&gt;(StardewUI.Framework.Dom.IArgument argument, StardewUI.Framework.Binding.BindingContext context);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#parameters_2","title":"Parameters","text":"<p><code>argument</code> IArgument The parsed markup argument containing the binding info.</p> <p><code>context</code> BindingContext The binding context to use for any contextual bindings (those with InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding).</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#returns_2","title":"Returns","text":"<p>IValueSource&lt;T&gt;</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#getvaluesourcetiattribute-bindingcontext-iresolutionscope","title":"GetValueSource&lt;T&gt;(IAttribute, BindingContext, IResolutionScope)","text":"<p>Creates a value source that supplies values according to the specified binding attribute.</p> <pre><code>StardewUI.Framework.Sources.IValueSource&lt;T&gt; GetValueSource&lt;T&gt;(StardewUI.Framework.Dom.IAttribute attribute, StardewUI.Framework.Binding.BindingContext context, StardewUI.Framework.Content.IResolutionScope scope);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#parameters_3","title":"Parameters","text":"<p><code>attribute</code> IAttribute The parsed markup attribute containing the binding info.</p> <p><code>context</code> BindingContext The binding context to use for any contextual bindings (those with InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding).</p> <p><code>scope</code> IResolutionScope Scope for resolving externalized attributes, such as translation keys.</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#returns_3","title":"Returns","text":"<p>IValueSource&lt;T&gt;</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#getvaluetypeiargument-bindingcontext","title":"GetValueType(IArgument, BindingContext)","text":"<p>Determines the type of value that will be supplied by a given argument binding, and with the specified context.</p> <pre><code>System.Type GetValueType(StardewUI.Framework.Dom.IArgument argument, StardewUI.Framework.Binding.BindingContext context);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#parameters_4","title":"Parameters","text":"<p><code>argument</code> IArgument The parsed markup argument containing the binding info.</p> <p><code>context</code> BindingContext The binding context to use for any contextual bindings (those with ContextBinding).</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#returns_4","title":"Returns","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#remarks","title":"Remarks","text":"<p>This provides the type argument that must be supplied to GetValueSource(Type, IArgument, BindingContext).</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#getvaluetypeiattribute-ipropertydescriptor-bindingcontext","title":"GetValueType(IAttribute, IPropertyDescriptor, BindingContext)","text":"<p>Determines the type of value that will be supplied by a given attribute binding, and with the specified context.</p> <pre><code>System.Type GetValueType(StardewUI.Framework.Dom.IAttribute attribute, StardewUI.Framework.Descriptors.IPropertyDescriptor property, StardewUI.Framework.Binding.BindingContext context);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#parameters_5","title":"Parameters","text":"<p><code>attribute</code> IAttribute The parsed markup attribute containing the binding info.</p> <p><code>property</code> IPropertyDescriptor Binding metadata for the destination property; used when the source does not encode any independent type information. If not specified, some attribute values may be unsupported.</p> <p><code>context</code> BindingContext The binding context to use for any contextual bindings (those with InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding).</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#returns_5","title":"Returns","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/sources/ivaluesourcefactory/#remarks_1","title":"Remarks","text":"<p>This provides the type argument that must be supplied to GetValueSource(Type, IArgument, BindingContext).</p>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/","title":"TranslationValueSource","text":""},{"location":"reference/stardewui/framework/sources/translationvaluesource/#class-translationvaluesource","title":"Class TranslationValueSource","text":""},{"location":"reference/stardewui/framework/sources/translationvaluesource/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Sources Assembly: StardewUI.dll  </p> <p>Value source that reads the localized string from a translation key.</p> <pre><code>public class TranslationValueSource : \n    StardewUI.Framework.Sources.IValueSource&lt;string&gt;, \n    StardewUI.Framework.Sources.IValueSource\n</code></pre> <p>Inheritance Object \u21e6 TranslationValueSource</p> <p>Implements IValueSource&lt;string&gt;, IValueSource</p>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/sources/translationvaluesource/#constructors","title":"Constructors","text":"Name Description TranslationValueSource(IResolutionScope, string) Value source that reads the localized string from a translation key."},{"location":"reference/stardewui/framework/sources/translationvaluesource/#properties","title":"Properties","text":"Name Description CanRead Whether or not the source can be read from, i.e. if an attempt to get the Value should succeed. CanWrite Whether or not the source can be written back to, i.e. if an attempt to set the Value should succeed. DisplayName Descriptive name for the property, used primarily for debug views and log/exception messages. Value ValueType The compile-time type of the value tracked by this source; the type parameter for IValueSource&lt;T&gt;."},{"location":"reference/stardewui/framework/sources/translationvaluesource/#methods","title":"Methods","text":"Name Description Update(Boolean) Checks if the value needs updating, and if so, updates Value to the latest."},{"location":"reference/stardewui/framework/sources/translationvaluesource/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/sources/translationvaluesource/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/sources/translationvaluesource/#translationvaluesourceiresolutionscope-string","title":"TranslationValueSource(IResolutionScope, string)","text":"<p>Value source that reads the localized string from a translation key.</p> <pre><code>public TranslationValueSource(StardewUI.Framework.Content.IResolutionScope scope, string key);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#parameters","title":"Parameters","text":"<p><code>scope</code> IResolutionScope The scope providing access to translation values.</p> <p><code>key</code> string The translation key.</p>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/framework/sources/translationvaluesource/#canread","title":"CanRead","text":"<p>Whether or not the source can be read from, i.e. if an attempt to get the Value should succeed.</p> <pre><code>public bool CanRead { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#canwrite","title":"CanWrite","text":"<p>Whether or not the source can be written back to, i.e. if an attempt to set the Value should succeed.</p> <pre><code>public bool CanWrite { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#displayname","title":"DisplayName","text":"<p>Descriptive name for the property, used primarily for debug views and log/exception messages.</p> <pre><code>public string DisplayName { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#value","title":"Value","text":"<pre><code>public string Value { get; set; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#property-value_3","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#valuetype","title":"ValueType","text":"<p>The compile-time type of the value tracked by this source; the type parameter for IValueSource&lt;T&gt;.</p> <pre><code>public System.Type ValueType { get; }\n</code></pre>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#property-value_4","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/sources/translationvaluesource/#updatebool","title":"Update(bool)","text":"<p>Checks if the value needs updating, and if so, updates Value to the latest.</p> <pre><code>public bool Update(bool force);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#parameters_1","title":"Parameters","text":"<p><code>force</code> Boolean If <code>true</code>, forces the source to update its value even if it isn't considered dirty. This should never be used in a regular binding, but can be useful in sources that are intended for occasional or one-shot use such as event handler arguments.</p>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the Value was updated; <code>false</code> if it already held the most recent value.</p>"},{"location":"reference/stardewui/framework/sources/translationvaluesource/#remarks","title":"Remarks","text":"<p>This method is called every frame, for every binding, and providing a correct return value is essential in order to avoid slowdowns due to unnecessary rebinds.</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/","title":"ValueSourceFactory","text":""},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#class-valuesourcefactory","title":"Class ValueSourceFactory","text":""},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Framework.Sources Assembly: StardewUI.dll  </p> <p>Default implementation of the IValueSourceFactory supporting all binding types.</p> <pre><code>public class ValueSourceFactory : \n    StardewUI.Framework.Sources.IValueSourceFactory\n</code></pre> <p>Inheritance Object \u21e6 ValueSourceFactory</p> <p>Implements IValueSourceFactory</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#members","title":"Members","text":""},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#constructors","title":"Constructors","text":"Name Description ValueSourceFactory(IAssetCache) Default implementation of the IValueSourceFactory supporting all binding types."},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#methods","title":"Methods","text":"Name Description GetValueSource(Type, IArgument, BindingContext) Creates a value source that supplies values of a given type according to the specified argument binding. GetValueSource&lt;T&gt;(IArgument, BindingContext) Creates a value source that supplies values according to the specified argument binding. GetValueSource(Type, IAttribute, BindingContext, IResolutionScope) Creates a value source that supplies values of a given type according to the specified binding attribute. GetValueSource&lt;T&gt;(IAttribute, BindingContext, IResolutionScope) Creates a value source that supplies values according to the specified binding attribute. GetValueType(IArgument, BindingContext) Determines the type of value that will be supplied by a given argument binding, and with the specified context. GetValueType(IAttribute, IPropertyDescriptor, BindingContext) Determines the type of value that will be supplied by a given attribute binding, and with the specified context."},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#details","title":"Details","text":""},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#valuesourcefactoryiassetcache","title":"ValueSourceFactory(IAssetCache)","text":"<p>Default implementation of the IValueSourceFactory supporting all binding types.</p> <pre><code>public ValueSourceFactory(StardewUI.Framework.Content.IAssetCache assetCache);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#parameters","title":"Parameters","text":"<p><code>assetCache</code> IAssetCache The current asset cache, for any asset-scoped bindings.</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#getvaluesourcetype-iargument-bindingcontext","title":"GetValueSource(Type, IArgument, BindingContext)","text":"<p>Creates a value source that supplies values of a given type according to the specified argument binding.</p> <pre><code>public StardewUI.Framework.Sources.IValueSource GetValueSource(System.Type type, StardewUI.Framework.Dom.IArgument argument, StardewUI.Framework.Binding.BindingContext context);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#parameters_1","title":"Parameters","text":"<p><code>type</code> Type The type of value to obtain; can be determined using GetValueType(IArgument, BindingContext).</p> <p><code>argument</code> IArgument The parsed markup argument containing the binding info.</p> <p><code>context</code> BindingContext The binding context to use for any contextual bindings (those with ContextBinding).</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#returns","title":"Returns","text":"<p>IValueSource</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#getvaluesourcetiargument-bindingcontext","title":"GetValueSource&lt;T&gt;(IArgument, BindingContext)","text":"<p>Creates a value source that supplies values according to the specified argument binding.</p> <pre><code>public StardewUI.Framework.Sources.IValueSource&lt;T&gt; GetValueSource&lt;T&gt;(StardewUI.Framework.Dom.IArgument argument, StardewUI.Framework.Binding.BindingContext context);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#parameters_2","title":"Parameters","text":"<p><code>argument</code> IArgument The parsed markup argument containing the binding info.</p> <p><code>context</code> BindingContext The binding context to use for any contextual bindings (those with InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding).</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#returns_1","title":"Returns","text":"<p>IValueSource&lt;T&gt;</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#getvaluesourcetype-iattribute-bindingcontext-iresolutionscope","title":"GetValueSource(Type, IAttribute, BindingContext, IResolutionScope)","text":"<p>Creates a value source that supplies values of a given type according to the specified binding attribute.</p> <pre><code>public StardewUI.Framework.Sources.IValueSource GetValueSource(System.Type type, StardewUI.Framework.Dom.IAttribute attribute, StardewUI.Framework.Binding.BindingContext context, StardewUI.Framework.Content.IResolutionScope resolutionScope);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#parameters_3","title":"Parameters","text":"<p><code>type</code> Type The type of value to obtain; can be determined using GetValueType(IArgument, BindingContext).</p> <p><code>attribute</code> IAttribute The parsed markup attribute containing the binding info.</p> <p><code>context</code> BindingContext The binding context to use for any contextual bindings (those with ContextBinding).</p> <p><code>resolutionScope</code> IResolutionScope</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#returns_2","title":"Returns","text":"<p>IValueSource</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#getvaluesourcetiattribute-bindingcontext-iresolutionscope","title":"GetValueSource&lt;T&gt;(IAttribute, BindingContext, IResolutionScope)","text":"<p>Creates a value source that supplies values according to the specified binding attribute.</p> <pre><code>public StardewUI.Framework.Sources.IValueSource&lt;T&gt; GetValueSource&lt;T&gt;(StardewUI.Framework.Dom.IAttribute attribute, StardewUI.Framework.Binding.BindingContext context, StardewUI.Framework.Content.IResolutionScope resolutionScope);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#parameters_4","title":"Parameters","text":"<p><code>attribute</code> IAttribute The parsed markup attribute containing the binding info.</p> <p><code>context</code> BindingContext The binding context to use for any contextual bindings (those with InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding).</p> <p><code>resolutionScope</code> IResolutionScope</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#returns_3","title":"Returns","text":"<p>IValueSource&lt;T&gt;</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#getvaluetypeiargument-bindingcontext","title":"GetValueType(IArgument, BindingContext)","text":"<p>Determines the type of value that will be supplied by a given argument binding, and with the specified context.</p> <pre><code>public System.Type GetValueType(StardewUI.Framework.Dom.IArgument argument, StardewUI.Framework.Binding.BindingContext context);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#parameters_5","title":"Parameters","text":"<p><code>argument</code> IArgument The parsed markup argument containing the binding info.</p> <p><code>context</code> BindingContext The binding context to use for any contextual bindings (those with ContextBinding).</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#returns_4","title":"Returns","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#remarks","title":"Remarks","text":"<p>This provides the type argument that must be supplied to GetValueSource(Type, IArgument, BindingContext).</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#getvaluetypeiattribute-ipropertydescriptor-bindingcontext","title":"GetValueType(IAttribute, IPropertyDescriptor, BindingContext)","text":"<p>Determines the type of value that will be supplied by a given attribute binding, and with the specified context.</p> <pre><code>public System.Type GetValueType(StardewUI.Framework.Dom.IAttribute attribute, StardewUI.Framework.Descriptors.IPropertyDescriptor property, StardewUI.Framework.Binding.BindingContext context);\n</code></pre>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#parameters_6","title":"Parameters","text":"<p><code>attribute</code> IAttribute The parsed markup attribute containing the binding info.</p> <p><code>property</code> IPropertyDescriptor Binding metadata for the destination property; used when the source does not encode any independent type information. If not specified, some attribute values may be unsupported.</p> <p><code>context</code> BindingContext The binding context to use for any contextual bindings (those with InputBinding, OneTimeBinding, OutputBinding or TwoWayBinding).</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#returns_5","title":"Returns","text":"<p>Type</p>"},{"location":"reference/stardewui/framework/sources/valuesourcefactory/#remarks_1","title":"Remarks","text":"<p>This provides the type argument that must be supplied to GetValueSource(Type, IArgument, BindingContext).</p>"},{"location":"reference/stardewui/graphics/","title":"StardewUI.Graphics","text":""},{"location":"reference/stardewui/graphics/#stardewuigraphics-namespace","title":"StardewUI.Graphics Namespace","text":""},{"location":"reference/stardewui/graphics/#classes","title":"Classes","text":"Name Description ButtonSpriteMap Base class for a ISpriteMap&lt;T&gt; for controller/keyboard bindings. NineSlice Draws sprites according to a nine-slice scale. PropagatedSpriteBatch Sprite batch wrapper with transform propagation. SimpleRotationExtensions Helper extensions for the SimpleRotation type. SliceSettings Additional nine-slice settings for dealing with certain \"unique\" structures. Sprite Definition for a scalable sprite. SpriteMap&lt;T&gt; General implementation of an ISpriteMap&lt;T&gt; that can be prepared in a variety of ways. SpriteMapBuilder&lt;T&gt; Builder interface for a SpriteMap&lt;T&gt; using a single texture source. Transform Global transform applied to an ISpriteBatch. UiSprites Included game sprites that are required for many UI/menu widgets. XeluButtonSpriteMap Controller/keyboard sprite map based on Xelu's CC0 pack."},{"location":"reference/stardewui/graphics/#interfaces","title":"Interfaces","text":"Name Description ISpriteBatch Abstraction for the SpriteBatch providing sprite-drawing methods. ISpriteMap&lt;T&gt; Provides a single method to obtain a sprite for some key, such as SButton."},{"location":"reference/stardewui/graphics/#enums","title":"Enums","text":"Name Description SimpleRotation Types of rotations that are considered to be \"simple\", i.e. those that only transpose pixels and are therefore fast and non-deforming. SliceCenterPosition Specifies which side the center position of a SliceSettings instance is on. XeluButtonSpriteMap.SpriteTheme Available theme variants for certain sprites."},{"location":"reference/stardewui/graphics/buttonspritemap/","title":"ButtonSpriteMap","text":""},{"location":"reference/stardewui/graphics/buttonspritemap/#class-buttonspritemap","title":"Class ButtonSpriteMap","text":""},{"location":"reference/stardewui/graphics/buttonspritemap/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Base class for a ISpriteMap&lt;T&gt; for controller/keyboard bindings.</p> <pre><code>public class ButtonSpriteMap : \n    StardewUI.Graphics.ISpriteMap&lt;StardewModdingAPI.SButton&gt;\n</code></pre> <p>Inheritance Object \u21e6 ButtonSpriteMap</p> <p>Implements ISpriteMap"},{"location":"reference/stardewui/graphics/buttonspritemap/#members","title":"Members","text":""},{"location":"reference/stardewui/graphics/buttonspritemap/#constructors","title":"Constructors","text":"Name Description ButtonSpriteMap()"},{"location":"reference/stardewui/graphics/buttonspritemap/#properties","title":"Properties","text":"Name Description ControllerBlank A blank controller button upon which the specific button label can be drawn. KeyboardBlank A blank keyboard key upon which the specific key name can be drawn. MouseLeft The mouse with left button pressed. MouseMiddle The mouse with middle button pressed. MouseRight The mouse with right button pressed."},{"location":"reference/stardewui/graphics/buttonspritemap/#methods","title":"Methods","text":"Name Description Get(SButton, Boolean) Gets the sprite corresponding to a particular key. Get(SButton) Gets the specific sprite for a particular button."},{"location":"reference/stardewui/graphics/buttonspritemap/#details","title":"Details","text":""},{"location":"reference/stardewui/graphics/buttonspritemap/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/graphics/buttonspritemap/#buttonspritemap","title":"ButtonSpriteMap()","text":"<pre><code>protected ButtonSpriteMap();\n</code></pre>"},{"location":"reference/stardewui/graphics/buttonspritemap/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/graphics/buttonspritemap/#controllerblank","title":"ControllerBlank","text":"<p>A blank controller button upon which the specific button label can be drawn.</p> <pre><code>protected StardewUI.Graphics.Sprite ControllerBlank { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/buttonspritemap/#property-value","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/buttonspritemap/#remarks","title":"Remarks","text":"<p>If the sprite specifies non-zero FixedEdges then they will be added to the label's margin.</p>"},{"location":"reference/stardewui/graphics/buttonspritemap/#keyboardblank","title":"KeyboardBlank","text":"<p>A blank keyboard key upon which the specific key name can be drawn.</p> <pre><code>protected StardewUI.Graphics.Sprite KeyboardBlank { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/buttonspritemap/#property-value_1","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/buttonspritemap/#remarks_1","title":"Remarks","text":"<p>If the sprite specifies non-zero FixedEdges then they will be added to the label's margin.</p>"},{"location":"reference/stardewui/graphics/buttonspritemap/#mouseleft","title":"MouseLeft","text":"<p>The mouse with left button pressed.</p> <pre><code>protected StardewUI.Graphics.Sprite MouseLeft { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/buttonspritemap/#property-value_2","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/buttonspritemap/#mousemiddle","title":"MouseMiddle","text":"<p>The mouse with middle button pressed.</p> <pre><code>protected StardewUI.Graphics.Sprite MouseMiddle { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/buttonspritemap/#property-value_3","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/buttonspritemap/#mouseright","title":"MouseRight","text":"<p>The mouse with right button pressed.</p> <pre><code>protected StardewUI.Graphics.Sprite MouseRight { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/buttonspritemap/#property-value_4","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/buttonspritemap/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/graphics/buttonspritemap/#getsbutton-boolean","title":"Get(SButton, Boolean)","text":"<p>Gets the sprite corresponding to a particular key.</p> <pre><code>public StardewUI.Graphics.Sprite Get(StardewModdingAPI.SButton key, out System.Boolean isPlaceholder);\n</code></pre>"},{"location":"reference/stardewui/graphics/buttonspritemap/#parameters","title":"Parameters","text":"<p><code>key</code> \u00a0 SButton The key to retrieve.</p> <p><code>isPlaceholder</code> Boolean <code>true</code> if the returned Sprite is not specific to the <code>key</code>, but is instead a placeholder (border/background) in which some substitute, typically normal text, must be drawn. <code>false</code> if the Sprite is a complete self-contained representation of the <code>key</code>.</p>"},{"location":"reference/stardewui/graphics/buttonspritemap/#returns","title":"Returns","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/buttonspritemap/#getsbutton","title":"Get(SButton)","text":"<p>Gets the specific sprite for a particular button.</p> <pre><code>protected virtual StardewUI.Graphics.Sprite Get(StardewModdingAPI.SButton button);\n</code></pre>"},{"location":"reference/stardewui/graphics/buttonspritemap/#parameters_1","title":"Parameters","text":"<p><code>button</code> \u00a0 SButton The button for which to retrieve a sprite.</p>"},{"location":"reference/stardewui/graphics/buttonspritemap/#returns_1","title":"Returns","text":"<p>Sprite</p> <p>The precise Sprite representing the given <code>button</code>, or <code>null</code> if the button does not have a special sprite and could/should use a generic background + text.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/","title":"ISpriteBatch","text":""},{"location":"reference/stardewui/graphics/ispritebatch/#interface-ispritebatch","title":"Interface ISpriteBatch","text":""},{"location":"reference/stardewui/graphics/ispritebatch/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Abstraction for the SpriteBatch providing sprite-drawing methods.</p> <pre><code>public interface ISpriteBatch\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritebatch/#remarks","title":"Remarks","text":"<p>Importantly, this interface represents a \"local\" sprite batch with inherited transforms, so that views using it do not need to be given explicit information about global coordinates.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#members","title":"Members","text":""},{"location":"reference/stardewui/graphics/ispritebatch/#methods","title":"Methods","text":"Name Description Blend(BlendState) Sets up subsequent draw calls to use the designated blending settings. Clip(Rectangle) Sets up subsequent draw calls to clip contents within the specified bounds. DelegateDraw(Action&lt;SpriteBatch, Vector2&gt;) Draws using a delegate action on a concrete SpriteBatch. Draw(Texture2D, Vector2, Rectangle?, Color?, Single, Vector2?, Single, SpriteEffects, Single) Draw(Texture2D, Vector2, Rectangle?, Color?, Single, Vector2?, Vector2?, SpriteEffects, Single) Draw(Texture2D, Rectangle, Rectangle?, Color?, Single, Vector2?, SpriteEffects, Single) DrawString(SpriteFont, string, Vector2, Color, Single, Vector2?, Single, SpriteEffects, Single) InitializeRenderTarget(RenderTarget2D, Int32, Int32) Initializes a RenderTarget2D for use with SetRenderTarget(RenderTarget2D, Color?). SaveTransform() Saves the current transform, so that it can later be restored to its current state. SetRenderTarget(RenderTarget2D, Color?) Sets up subsequent draw calls to use a custom render target. Translate(Vector2) Applies a translation offset to subsequent operations. Translate(Single, Single) Applies a translation offset to subsequent operations."},{"location":"reference/stardewui/graphics/ispritebatch/#details","title":"Details","text":""},{"location":"reference/stardewui/graphics/ispritebatch/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/graphics/ispritebatch/#blendblendstate","title":"Blend(BlendState)","text":"<p>Sets up subsequent draw calls to use the designated blending settings.</p> <pre><code>System.IDisposable Blend(Microsoft.Xna.Framework.Graphics.BlendState blendState);\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritebatch/#parameters","title":"Parameters","text":"<p><code>blendState</code> BlendState Blend state determining the color/alpha blend behavior.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#returns","title":"Returns","text":"<p>IDisposable</p> <p>A disposable instance which, when disposed, will revert to the previous blending state.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#cliprectangle","title":"Clip(Rectangle)","text":"<p>Sets up subsequent draw calls to clip contents within the specified bounds.</p> <pre><code>System.IDisposable Clip(Microsoft.Xna.Framework.Rectangle clipRect);\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritebatch/#parameters_1","title":"Parameters","text":"<p><code>clipRect</code> Rectangle The clipping bounds in local coordinates.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#returns_1","title":"Returns","text":"<p>IDisposable</p> <p>A disposable instance which, when disposed, will revert to the previous clipping state.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#delegatedrawactionspritebatch-vector2","title":"DelegateDraw(Action&lt;SpriteBatch, Vector2&gt;)","text":"<p>Draws using a delegate action on a concrete SpriteBatch.</p> <pre><code>void DelegateDraw(Action&lt;Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2&gt; draw);\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritebatch/#parameters_2","title":"Parameters","text":"<p><code>draw</code> Action&lt;SpriteBatch, Vector2&gt; A function that accepts an underlying SpriteBatch as well as the transformed (global/screen) position and draws using that position as the origin (top left).</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#remarks_1","title":"Remarks","text":"<p>Delegation is provided as a fallback for game-specific \"utilities\" that require a SpriteBatch and are not trivial to reimplement; the method acts as a bridge between the abstract ISpriteBatch and the concrete-dependent logic. </p> <p>Most view types shouldn't use this; it is only needed for a few niche features like SpriteText.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#drawtexture2d-vector2-rectangle-color-float-vector2-float-spriteeffects-float","title":"Draw(Texture2D, Vector2, Rectangle?, Color?, float, Vector2?, float, SpriteEffects, float)","text":"<pre><code>void Draw(Microsoft.Xna.Framework.Graphics.Texture2D texture, Microsoft.Xna.Framework.Vector2 position, Microsoft.Xna.Framework.Rectangle? sourceRectangle, Microsoft.Xna.Framework.Color? color, float rotation, Microsoft.Xna.Framework.Vector2? origin, float scale, Microsoft.Xna.Framework.Graphics.SpriteEffects effects, float layerDepth);\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritebatch/#parameters_3","title":"Parameters","text":"<p><code>texture</code> Texture2D</p> <p><code>position</code> Vector2</p> <p><code>sourceRectangle</code> Nullable&lt;Rectangle&gt;</p> <p><code>color</code> Nullable&lt;Color&gt;</p> <p><code>rotation</code> Single</p> <p><code>origin</code> Nullable&lt;Vector2&gt;</p> <p><code>scale</code> Single</p> <p><code>effects</code> SpriteEffects</p> <p><code>layerDepth</code> Single</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#drawtexture2d-vector2-rectangle-color-float-vector2-vector2-spriteeffects-float","title":"Draw(Texture2D, Vector2, Rectangle?, Color?, float, Vector2?, Vector2?, SpriteEffects, float)","text":"<pre><code>void Draw(Microsoft.Xna.Framework.Graphics.Texture2D texture, Microsoft.Xna.Framework.Vector2 position, Microsoft.Xna.Framework.Rectangle? sourceRectangle, Microsoft.Xna.Framework.Color? color, float rotation, Microsoft.Xna.Framework.Vector2? origin, Microsoft.Xna.Framework.Vector2? scale, Microsoft.Xna.Framework.Graphics.SpriteEffects effects, float layerDepth);\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritebatch/#parameters_4","title":"Parameters","text":"<p><code>texture</code> Texture2D</p> <p><code>position</code> Vector2</p> <p><code>sourceRectangle</code> Nullable&lt;Rectangle&gt;</p> <p><code>color</code> Nullable&lt;Color&gt;</p> <p><code>rotation</code> Single</p> <p><code>origin</code> Nullable&lt;Vector2&gt;</p> <p><code>scale</code> Nullable&lt;Vector2&gt;</p> <p><code>effects</code> SpriteEffects</p> <p><code>layerDepth</code> Single</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#drawtexture2d-rectangle-rectangle-color-float-vector2-spriteeffects-float","title":"Draw(Texture2D, Rectangle, Rectangle?, Color?, float, Vector2?, SpriteEffects, float)","text":"<pre><code>void Draw(Microsoft.Xna.Framework.Graphics.Texture2D texture, Microsoft.Xna.Framework.Rectangle destinationRectangle, Microsoft.Xna.Framework.Rectangle? sourceRectangle, Microsoft.Xna.Framework.Color? color, float rotation, Microsoft.Xna.Framework.Vector2? origin, Microsoft.Xna.Framework.Graphics.SpriteEffects effects, float layerDepth);\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritebatch/#parameters_5","title":"Parameters","text":"<p><code>texture</code> Texture2D</p> <p><code>destinationRectangle</code> Rectangle</p> <p><code>sourceRectangle</code> Nullable&lt;Rectangle&gt;</p> <p><code>color</code> Nullable&lt;Color&gt;</p> <p><code>rotation</code> Single</p> <p><code>origin</code> Nullable&lt;Vector2&gt;</p> <p><code>effects</code> SpriteEffects</p> <p><code>layerDepth</code> Single</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#drawstringspritefont-string-vector2-color-float-vector2-float-spriteeffects-float","title":"DrawString(SpriteFont, string, Vector2, Color, float, Vector2?, float, SpriteEffects, float)","text":"<pre><code>void DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont spriteFont, string text, Microsoft.Xna.Framework.Vector2 position, Microsoft.Xna.Framework.Color color, float rotation, Microsoft.Xna.Framework.Vector2? origin, float scale, Microsoft.Xna.Framework.Graphics.SpriteEffects effects, float layerDepth);\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritebatch/#parameters_6","title":"Parameters","text":"<p><code>spriteFont</code> SpriteFont</p> <p><code>text</code> string</p> <p><code>position</code> Vector2</p> <p><code>color</code> Color</p> <p><code>rotation</code> Single</p> <p><code>origin</code> Nullable&lt;Vector2&gt;</p> <p><code>scale</code> Single</p> <p><code>effects</code> SpriteEffects</p> <p><code>layerDepth</code> Single</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#initializerendertargetrendertarget2d-int-int","title":"InitializeRenderTarget(RenderTarget2D, int, int)","text":"<p>Initializes a RenderTarget2D for use with SetRenderTarget(RenderTarget2D, Color?).</p> <pre><code>void InitializeRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D target, int width, int height);\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritebatch/#parameters_7","title":"Parameters","text":"<p><code>target</code> RenderTarget2D The previous render target, if any, to reuse if possible.</p> <p><code>width</code> Int32 The target width.</p> <p><code>height</code> Int32 The target height.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#remarks_2","title":"Remarks","text":"<p>This will reuse an existing render target if available, i.e. if <code>target</code> is not <code>null</code> and matches the specified <code>width</code> and <code>height</code>; otherwise it will replace any previous <code>target</code> and replace it with a new instance.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#savetransform","title":"SaveTransform()","text":"<p>Saves the current transform, so that it can later be restored to its current state.</p> <pre><code>System.IDisposable SaveTransform();\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritebatch/#returns_2","title":"Returns","text":"<p>IDisposable</p> <p>A disposable instance which, when disposed, restores the transform of this ISpriteBatch to the same state it was in before <code>SaveTransform</code> was called.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#remarks_3","title":"Remarks","text":"<p>This is typically used in hierarchical layout; i.e. a view with children would apply a transform before handing the canvas or sprite batch down to any of those children, and then restore it after the child is done with it. This enables a single ISpriteBatch instance to be used for the entire layout rather than having to create a tree.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#setrendertargetrendertarget2d-color","title":"SetRenderTarget(RenderTarget2D, Color?)","text":"<p>Sets up subsequent draw calls to use a custom render target.</p> <pre><code>System.IDisposable SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D renderTarget, Microsoft.Xna.Framework.Color? clearColor);\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritebatch/#parameters_8","title":"Parameters","text":"<p><code>renderTarget</code> RenderTarget2D The new render target.</p> <p><code>clearColor</code> Nullable&lt;Color&gt; Color to clear the <code>renderTarget</code> with after making it active, or <code>null</code> to skip clearing.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#returns_3","title":"Returns","text":"<p>IDisposable</p> <p>A disposable instance which, when disposed, will revert to the previous render target(s).</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#remarks_4","title":"Remarks","text":"<p>This will also reset any active transforms for the new render target, e.g. those resulting from Translate(Vector2). Previously-active transforms will be restored when the render target is reverted by calling Dispose() on the result.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#translatevector2","title":"Translate(Vector2)","text":"<p>Applies a translation offset to subsequent operations.</p> <pre><code>void Translate(Microsoft.Xna.Framework.Vector2 translation);\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritebatch/#parameters_9","title":"Parameters","text":"<p><code>translation</code> Vector2 The translation vector.</p>"},{"location":"reference/stardewui/graphics/ispritebatch/#translatefloat-float","title":"Translate(float, float)","text":"<p>Applies a translation offset to subsequent operations.</p> <pre><code>void Translate(float x, float y);\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritebatch/#parameters_10","title":"Parameters","text":"<p><code>x</code> Single The translation's X component.</p> <p><code>y</code> Single The translation's Y component.</p>"},{"location":"reference/stardewui/graphics/ispritemap-1/","title":"ISpriteMap&lt;T&gt;","text":""},{"location":"reference/stardewui/graphics/ispritemap-1/#interface-ispritemapt","title":"Interface ISpriteMap&lt;T&gt;","text":""},{"location":"reference/stardewui/graphics/ispritemap-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Provides a single method to obtain a sprite for some key, such as SButton.</p> <pre><code>public interface ISpriteMap&lt;T&gt;\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritemap-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> Type of key for which to obtain sprites.</p>"},{"location":"reference/stardewui/graphics/ispritemap-1/#members","title":"Members","text":""},{"location":"reference/stardewui/graphics/ispritemap-1/#methods","title":"Methods","text":"Name Description Get(T, Boolean) Gets the sprite corresponding to a particular key."},{"location":"reference/stardewui/graphics/ispritemap-1/#details","title":"Details","text":""},{"location":"reference/stardewui/graphics/ispritemap-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/graphics/ispritemap-1/#gett-boolean","title":"Get(T, Boolean)","text":"<p>Gets the sprite corresponding to a particular key.</p> <pre><code>StardewUI.Graphics.Sprite Get(T key, out System.Boolean isPlaceholder);\n</code></pre>"},{"location":"reference/stardewui/graphics/ispritemap-1/#parameters","title":"Parameters","text":"<p><code>key</code> \u00a0 T The key to retrieve.</p> <p><code>isPlaceholder</code> Boolean <code>true</code> if the returned Sprite is not specific to the <code>key</code>, but is instead a placeholder (border/background) in which some substitute, typically normal text, must be drawn. <code>false</code> if the Sprite is a complete self-contained representation of the <code>key</code>.</p>"},{"location":"reference/stardewui/graphics/ispritemap-1/#returns","title":"Returns","text":"<p>Sprite</p> <p>The precise or generic sprite for the given <code>key</code>.</p>"},{"location":"reference/stardewui/graphics/nineslice/","title":"NineSlice","text":""},{"location":"reference/stardewui/graphics/nineslice/#class-nineslice","title":"Class NineSlice","text":""},{"location":"reference/stardewui/graphics/nineslice/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Draws sprites according to a nine-slice scale.</p> <pre><code>public class NineSlice\n</code></pre> <p>Inheritance Object \u21e6 NineSlice</p>"},{"location":"reference/stardewui/graphics/nineslice/#members","title":"Members","text":""},{"location":"reference/stardewui/graphics/nineslice/#constructors","title":"Constructors","text":"Name Description NineSlice(Sprite) Draws sprites according to a nine-slice scale."},{"location":"reference/stardewui/graphics/nineslice/#properties","title":"Properties","text":"Name Description Sprite The source sprite."},{"location":"reference/stardewui/graphics/nineslice/#methods","title":"Methods","text":"Name Description Draw(ISpriteBatch, Color?) Draws the sprite to an ISpriteBatch, applying 9-slice scaling if specified. Layout(Rectangle, SimpleRotation?) Prepares the layout for next Draw(ISpriteBatch, Color?)."},{"location":"reference/stardewui/graphics/nineslice/#details","title":"Details","text":""},{"location":"reference/stardewui/graphics/nineslice/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/graphics/nineslice/#nineslicesprite","title":"NineSlice(Sprite)","text":"<p>Draws sprites according to a nine-slice scale.</p> <pre><code>public NineSlice(StardewUI.Graphics.Sprite sprite);\n</code></pre>"},{"location":"reference/stardewui/graphics/nineslice/#parameters","title":"Parameters","text":"<p><code>sprite</code> Sprite The source sprite.</p>"},{"location":"reference/stardewui/graphics/nineslice/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/graphics/nineslice/#sprite","title":"Sprite","text":"<p>The source sprite.</p> <pre><code>public StardewUI.Graphics.Sprite Sprite { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/nineslice/#property-value","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/nineslice/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/graphics/nineslice/#drawispritebatch-color","title":"Draw(ISpriteBatch, Color?)","text":"<p>Draws the sprite to an ISpriteBatch, applying 9-slice scaling if specified.</p> <pre><code>public void Draw(StardewUI.Graphics.ISpriteBatch b, Microsoft.Xna.Framework.Color? tint);\n</code></pre>"},{"location":"reference/stardewui/graphics/nineslice/#parameters_1","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Output sprite batch.</p> <p><code>tint</code> Nullable&lt;Color&gt; Optional tint multiplier color.</p>"},{"location":"reference/stardewui/graphics/nineslice/#layoutrectangle-simplerotation","title":"Layout(Rectangle, SimpleRotation?)","text":"<p>Prepares the layout for next Draw(ISpriteBatch, Color?).</p> <pre><code>public void Layout(Microsoft.Xna.Framework.Rectangle destinationRect, StardewUI.Graphics.SimpleRotation? rotation);\n</code></pre>"},{"location":"reference/stardewui/graphics/nineslice/#parameters_2","title":"Parameters","text":"<p><code>destinationRect</code> Rectangle The rectangular area that the drawn sprite should fill.</p> <p><code>rotation</code> Nullable&lt;SimpleRotation&gt; Rotation to apply to the source sprite, if any.</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/","title":"PropagatedSpriteBatch","text":""},{"location":"reference/stardewui/graphics/propagatedspritebatch/#class-propagatedspritebatch","title":"Class PropagatedSpriteBatch","text":""},{"location":"reference/stardewui/graphics/propagatedspritebatch/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Sprite batch wrapper with transform propagation.</p> <pre><code>public class PropagatedSpriteBatch : StardewUI.Graphics.ISpriteBatch\n</code></pre> <p>Inheritance Object \u21e6 PropagatedSpriteBatch</p> <p>Implements ISpriteBatch</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#members","title":"Members","text":""},{"location":"reference/stardewui/graphics/propagatedspritebatch/#constructors","title":"Constructors","text":"Name Description PropagatedSpriteBatch(SpriteBatch, Transform) Sprite batch wrapper with transform propagation."},{"location":"reference/stardewui/graphics/propagatedspritebatch/#methods","title":"Methods","text":"Name Description Blend(BlendState) Sets up subsequent draw calls to use the designated blending settings. Clip(Rectangle) Sets up subsequent draw calls to clip contents within the specified bounds. DelegateDraw(Action&lt;SpriteBatch, Vector2&gt;) Draws using a delegate action on a concrete SpriteBatch. Draw(Texture2D, Vector2, Rectangle?, Color?, Single, Vector2?, Single, SpriteEffects, Single) Draw(Texture2D, Vector2, Rectangle?, Color?, Single, Vector2?, Vector2?, SpriteEffects, Single) Draw(Texture2D, Rectangle, Rectangle?, Color?, Single, Vector2?, SpriteEffects, Single) DrawString(SpriteFont, string, Vector2, Color, Single, Vector2?, Single, SpriteEffects, Single) InitializeRenderTarget(RenderTarget2D, Int32, Int32) Initializes a RenderTarget2D for use with SetRenderTarget(RenderTarget2D, Color?). SaveTransform() Saves the current transform, so that it can later be restored to its current state. SetRenderTarget(RenderTarget2D, Color?) Sets up subsequent draw calls to use a custom render target. Translate(Single, Single) Applies a translation offset to subsequent operations. Translate(Vector2) Applies a translation offset to subsequent operations."},{"location":"reference/stardewui/graphics/propagatedspritebatch/#details","title":"Details","text":""},{"location":"reference/stardewui/graphics/propagatedspritebatch/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/graphics/propagatedspritebatch/#propagatedspritebatchspritebatch-transform","title":"PropagatedSpriteBatch(SpriteBatch, Transform)","text":"<p>Sprite batch wrapper with transform propagation.</p> <pre><code>public PropagatedSpriteBatch(Microsoft.Xna.Framework.Graphics.SpriteBatch spriteBatch, StardewUI.Graphics.Transform transform);\n</code></pre>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#parameters","title":"Parameters","text":"<p><code>spriteBatch</code> SpriteBatch</p> <p><code>transform</code> Transform</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/graphics/propagatedspritebatch/#blendblendstate","title":"Blend(BlendState)","text":"<p>Sets up subsequent draw calls to use the designated blending settings.</p> <pre><code>public System.IDisposable Blend(Microsoft.Xna.Framework.Graphics.BlendState blendState);\n</code></pre>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#parameters_1","title":"Parameters","text":"<p><code>blendState</code> BlendState Blend state determining the color/alpha blend behavior.</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#returns","title":"Returns","text":"<p>IDisposable</p> <p>A disposable instance which, when disposed, will revert to the previous blending state.</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#cliprectangle","title":"Clip(Rectangle)","text":"<p>Sets up subsequent draw calls to clip contents within the specified bounds.</p> <pre><code>public System.IDisposable Clip(Microsoft.Xna.Framework.Rectangle clipRect);\n</code></pre>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#parameters_2","title":"Parameters","text":"<p><code>clipRect</code> Rectangle The clipping bounds in local coordinates.</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#returns_1","title":"Returns","text":"<p>IDisposable</p> <p>A disposable instance which, when disposed, will revert to the previous clipping state.</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#delegatedrawactionspritebatch-vector2","title":"DelegateDraw(Action&lt;SpriteBatch, Vector2&gt;)","text":"<p>Draws using a delegate action on a concrete SpriteBatch.</p> <pre><code>public void DelegateDraw(Action&lt;Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2&gt; draw);\n</code></pre>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#parameters_3","title":"Parameters","text":"<p><code>draw</code> Action&lt;SpriteBatch, Vector2&gt; A function that accepts an underlying SpriteBatch as well as the transformed (global/screen) position and draws using that position as the origin (top left).</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#remarks","title":"Remarks","text":"<p>Delegation is provided as a fallback for game-specific \"utilities\" that require a SpriteBatch and are not trivial to reimplement; the method acts as a bridge between the abstract ISpriteBatch and the concrete-dependent logic. </p> <p>Most view types shouldn't use this; it is only needed for a few niche features like SpriteText.</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#drawtexture2d-vector2-rectangle-color-float-vector2-float-spriteeffects-float","title":"Draw(Texture2D, Vector2, Rectangle?, Color?, float, Vector2?, float, SpriteEffects, float)","text":"<pre><code>public void Draw(Microsoft.Xna.Framework.Graphics.Texture2D texture, Microsoft.Xna.Framework.Vector2 position, Microsoft.Xna.Framework.Rectangle? sourceRectangle, Microsoft.Xna.Framework.Color? color, float rotation, Microsoft.Xna.Framework.Vector2? origin, float scale, Microsoft.Xna.Framework.Graphics.SpriteEffects effects, float layerDepth);\n</code></pre>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#parameters_4","title":"Parameters","text":"<p><code>texture</code> Texture2D</p> <p><code>position</code> Vector2</p> <p><code>sourceRectangle</code> Nullable&lt;Rectangle&gt;</p> <p><code>color</code> Nullable&lt;Color&gt;</p> <p><code>rotation</code> Single</p> <p><code>origin</code> Nullable&lt;Vector2&gt;</p> <p><code>scale</code> Single</p> <p><code>effects</code> SpriteEffects</p> <p><code>layerDepth</code> Single</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#drawtexture2d-vector2-rectangle-color-float-vector2-vector2-spriteeffects-float","title":"Draw(Texture2D, Vector2, Rectangle?, Color?, float, Vector2?, Vector2?, SpriteEffects, float)","text":"<pre><code>public void Draw(Microsoft.Xna.Framework.Graphics.Texture2D texture, Microsoft.Xna.Framework.Vector2 position, Microsoft.Xna.Framework.Rectangle? sourceRectangle, Microsoft.Xna.Framework.Color? color, float rotation, Microsoft.Xna.Framework.Vector2? origin, Microsoft.Xna.Framework.Vector2? scale, Microsoft.Xna.Framework.Graphics.SpriteEffects effects, float layerDepth);\n</code></pre>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#parameters_5","title":"Parameters","text":"<p><code>texture</code> Texture2D</p> <p><code>position</code> Vector2</p> <p><code>sourceRectangle</code> Nullable&lt;Rectangle&gt;</p> <p><code>color</code> Nullable&lt;Color&gt;</p> <p><code>rotation</code> Single</p> <p><code>origin</code> Nullable&lt;Vector2&gt;</p> <p><code>scale</code> Nullable&lt;Vector2&gt;</p> <p><code>effects</code> SpriteEffects</p> <p><code>layerDepth</code> Single</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#drawtexture2d-rectangle-rectangle-color-float-vector2-spriteeffects-float","title":"Draw(Texture2D, Rectangle, Rectangle?, Color?, float, Vector2?, SpriteEffects, float)","text":"<pre><code>public void Draw(Microsoft.Xna.Framework.Graphics.Texture2D texture, Microsoft.Xna.Framework.Rectangle destinationRectangle, Microsoft.Xna.Framework.Rectangle? sourceRectangle, Microsoft.Xna.Framework.Color? color, float rotation, Microsoft.Xna.Framework.Vector2? origin, Microsoft.Xna.Framework.Graphics.SpriteEffects effects, float layerDepth);\n</code></pre>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#parameters_6","title":"Parameters","text":"<p><code>texture</code> Texture2D</p> <p><code>destinationRectangle</code> Rectangle</p> <p><code>sourceRectangle</code> Nullable&lt;Rectangle&gt;</p> <p><code>color</code> Nullable&lt;Color&gt;</p> <p><code>rotation</code> Single</p> <p><code>origin</code> Nullable&lt;Vector2&gt;</p> <p><code>effects</code> SpriteEffects</p> <p><code>layerDepth</code> Single</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#drawstringspritefont-string-vector2-color-float-vector2-float-spriteeffects-float","title":"DrawString(SpriteFont, string, Vector2, Color, float, Vector2?, float, SpriteEffects, float)","text":"<pre><code>public void DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont spriteFont, string text, Microsoft.Xna.Framework.Vector2 position, Microsoft.Xna.Framework.Color color, float rotation, Microsoft.Xna.Framework.Vector2? origin, float scale, Microsoft.Xna.Framework.Graphics.SpriteEffects effects, float layerDepth);\n</code></pre>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#parameters_7","title":"Parameters","text":"<p><code>spriteFont</code> SpriteFont</p> <p><code>text</code> string</p> <p><code>position</code> Vector2</p> <p><code>color</code> Color</p> <p><code>rotation</code> Single</p> <p><code>origin</code> Nullable&lt;Vector2&gt;</p> <p><code>scale</code> Single</p> <p><code>effects</code> SpriteEffects</p> <p><code>layerDepth</code> Single</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#initializerendertargetrendertarget2d-int-int","title":"InitializeRenderTarget(RenderTarget2D, int, int)","text":"<p>Initializes a RenderTarget2D for use with SetRenderTarget(RenderTarget2D, Color?).</p> <pre><code>public void InitializeRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D target, int width, int height);\n</code></pre>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#parameters_8","title":"Parameters","text":"<p><code>target</code> RenderTarget2D The previous render target, if any, to reuse if possible.</p> <p><code>width</code> Int32 The target width.</p> <p><code>height</code> Int32 The target height.</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#remarks_1","title":"Remarks","text":"<p>This will reuse an existing render target if available, i.e. if <code>target</code> is not <code>null</code> and matches the specified <code>width</code> and <code>height</code>; otherwise it will replace any previous <code>target</code> and replace it with a new instance.</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#savetransform","title":"SaveTransform()","text":"<p>Saves the current transform, so that it can later be restored to its current state.</p> <pre><code>public System.IDisposable SaveTransform();\n</code></pre>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#returns_2","title":"Returns","text":"<p>IDisposable</p> <p>A disposable instance which, when disposed, restores the transform of this ISpriteBatch to the same state it was in before <code>SaveTransform</code> was called.</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#remarks_2","title":"Remarks","text":"<p>This is typically used in hierarchical layout; i.e. a view with children would apply a transform before handing the canvas or sprite batch down to any of those children, and then restore it after the child is done with it. This enables a single ISpriteBatch instance to be used for the entire layout rather than having to create a tree.</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#setrendertargetrendertarget2d-color","title":"SetRenderTarget(RenderTarget2D, Color?)","text":"<p>Sets up subsequent draw calls to use a custom render target.</p> <pre><code>public System.IDisposable SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D renderTarget, Microsoft.Xna.Framework.Color? clearColor);\n</code></pre>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#parameters_9","title":"Parameters","text":"<p><code>renderTarget</code> RenderTarget2D The new render target.</p> <p><code>clearColor</code> Nullable&lt;Color&gt; Color to clear the <code>renderTarget</code> with after making it active, or <code>null</code> to skip clearing.</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#returns_3","title":"Returns","text":"<p>IDisposable</p> <p>A disposable instance which, when disposed, will revert to the previous render target(s).</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#remarks_3","title":"Remarks","text":"<p>This will also reset any active transforms for the new render target, e.g. those resulting from Translate(Vector2). Previously-active transforms will be restored when the render target is reverted by calling Dispose() on the result.</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#translatefloat-float","title":"Translate(float, float)","text":"<p>Applies a translation offset to subsequent operations.</p> <pre><code>public void Translate(float x, float y);\n</code></pre>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#parameters_10","title":"Parameters","text":"<p><code>x</code> Single The translation's X component.</p> <p><code>y</code> Single The translation's Y component.</p>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#translatevector2","title":"Translate(Vector2)","text":"<p>Applies a translation offset to subsequent operations.</p> <pre><code>public void Translate(Microsoft.Xna.Framework.Vector2 translation);\n</code></pre>"},{"location":"reference/stardewui/graphics/propagatedspritebatch/#parameters_11","title":"Parameters","text":"<p><code>translation</code> Vector2 The translation vector.</p>"},{"location":"reference/stardewui/graphics/simplerotation/","title":"SimpleRotation","text":""},{"location":"reference/stardewui/graphics/simplerotation/#enum-simplerotation","title":"Enum SimpleRotation","text":""},{"location":"reference/stardewui/graphics/simplerotation/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Types of rotations that are considered to be \"simple\", i.e. those that only transpose pixels and are therefore fast and non-deforming.</p> <pre><code>public enum SimpleRotation\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 SimpleRotation</p>"},{"location":"reference/stardewui/graphics/simplerotation/#fields","title":"Fields","text":"Name Value Description QuarterClockwise 0 Rotate 90\u00b0 in the clockwise direction. QuarterCounterclockwise 1 Rotate 90\u00b0 in the counterclockwise direction. Half 2 Rotate 180\u00b0."},{"location":"reference/stardewui/graphics/simplerotationextensions/","title":"SimpleRotationExtensions","text":""},{"location":"reference/stardewui/graphics/simplerotationextensions/#class-simplerotationextensions","title":"Class SimpleRotationExtensions","text":""},{"location":"reference/stardewui/graphics/simplerotationextensions/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Helper extensions for the SimpleRotation type.</p> <pre><code>public static class SimpleRotationExtensions\n</code></pre> <p>Inheritance Object \u21e6 SimpleRotationExtensions</p>"},{"location":"reference/stardewui/graphics/simplerotationextensions/#members","title":"Members","text":""},{"location":"reference/stardewui/graphics/simplerotationextensions/#methods","title":"Methods","text":"Name Description Angle(SimpleRotation) Gets the angle of a rotation, in radians. IsQuarter(SimpleRotation) Gets whether a rotation is a quarter turn."},{"location":"reference/stardewui/graphics/simplerotationextensions/#details","title":"Details","text":""},{"location":"reference/stardewui/graphics/simplerotationextensions/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/graphics/simplerotationextensions/#anglesimplerotation","title":"Angle(SimpleRotation)","text":"<p>Gets the angle of a rotation, in radians.</p> <pre><code>public static float Angle(StardewUI.Graphics.SimpleRotation rotation);\n</code></pre>"},{"location":"reference/stardewui/graphics/simplerotationextensions/#parameters","title":"Parameters","text":"<p><code>rotation</code> SimpleRotation The rotation type.</p>"},{"location":"reference/stardewui/graphics/simplerotationextensions/#returns","title":"Returns","text":"<p>Single</p> <p>The angle of the rotation, in radians.</p>"},{"location":"reference/stardewui/graphics/simplerotationextensions/#isquartersimplerotation","title":"IsQuarter(SimpleRotation)","text":"<p>Gets whether a rotation is a quarter turn.</p> <pre><code>public static bool IsQuarter(StardewUI.Graphics.SimpleRotation rotation);\n</code></pre>"},{"location":"reference/stardewui/graphics/simplerotationextensions/#parameters_1","title":"Parameters","text":"<p><code>rotation</code> SimpleRotation The rotation type.</p>"},{"location":"reference/stardewui/graphics/simplerotationextensions/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the current instance is one of QuarterClockwise or QuarterCounterclockwise; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/graphics/simplerotationextensions/#remarks","title":"Remarks","text":"<p>Often used to check whether to invert X/Y values in measurements.</p>"},{"location":"reference/stardewui/graphics/slicecenterposition/","title":"SliceCenterPosition","text":""},{"location":"reference/stardewui/graphics/slicecenterposition/#enum-slicecenterposition","title":"Enum SliceCenterPosition","text":""},{"location":"reference/stardewui/graphics/slicecenterposition/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Specifies which side the center position of a SliceSettings instance is on.</p> <pre><code>public enum SliceCenterPosition\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 SliceCenterPosition</p>"},{"location":"reference/stardewui/graphics/slicecenterposition/#fields","title":"Fields","text":"Name Value Description Start 0 The specified center position is the start of the center segment. End 1 The specified center position is the end of the center segment."},{"location":"reference/stardewui/graphics/slicesettings/","title":"SliceSettings","text":""},{"location":"reference/stardewui/graphics/slicesettings/#class-slicesettings","title":"Class SliceSettings","text":""},{"location":"reference/stardewui/graphics/slicesettings/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Additional nine-slice settings for dealing with certain \"unique\" structures.</p> <pre><code>[StardewUI.DuckType]\npublic record SliceSettings : IEquatable&lt;StardewUI.Graphics.SliceSettings&gt;\n</code></pre> <p>Inheritance Object \u21e6 SliceSettings</p> <p>Implements IEquatable&lt;SliceSettings&gt;</p>"},{"location":"reference/stardewui/graphics/slicesettings/#members","title":"Members","text":""},{"location":"reference/stardewui/graphics/slicesettings/#constructors","title":"Constructors","text":"Name Description SliceSettings(Int32?, SliceCenterPosition, Int32?, SliceCenterPosition, Single, Boolean) Additional nine-slice settings for dealing with certain \"unique\" structures."},{"location":"reference/stardewui/graphics/slicesettings/#properties","title":"Properties","text":"Name Description CenterX The X position to use for the horizontal center slices, or <code>null</code> to start where the left fixed edge ends. CenterXPosition Specifies whether the CenterX should be understood as the start position or the end position of the horizontal center slice. CenterY The Y position to use for the vertical center slices, or <code>null</code> to start where the top fixed edge ends. CenterYPosition Specifies whether the CenterY should be understood as the start position or the end position of the vertical center slice. EdgesOnly If <code>true</code>, then only the outer 8 edge segments should be drawn, and the 9th (horizontal and vertical middle, i.e. \"background\") segment will be ignored. EqualityContract Scale Scale to apply to the slices themselves; for example, if a 16x16 source draws to a 64x64 target, and a scale of 2 is used, then a 2x3 border slice would draw as 16x24 (normal 8x16, multiplied by 2)."},{"location":"reference/stardewui/graphics/slicesettings/#methods","title":"Methods","text":"Name Description WithScale(Single) Creates a copy of this SliceSettings with a different scale."},{"location":"reference/stardewui/graphics/slicesettings/#details","title":"Details","text":""},{"location":"reference/stardewui/graphics/slicesettings/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/graphics/slicesettings/#slicesettingsint-slicecenterposition-int-slicecenterposition-float-bool","title":"SliceSettings(int?, SliceCenterPosition, int?, SliceCenterPosition, float, bool)","text":"<p>Additional nine-slice settings for dealing with certain \"unique\" structures.</p> <pre><code>public SliceSettings(int? CenterX, StardewUI.Graphics.SliceCenterPosition CenterXPosition, int? CenterY, StardewUI.Graphics.SliceCenterPosition CenterYPosition, float Scale, bool EdgesOnly);\n</code></pre>"},{"location":"reference/stardewui/graphics/slicesettings/#parameters","title":"Parameters","text":"<p><code>CenterX</code> Nullable&lt;Int32&gt; The X position to use for the horizontal center slices, or <code>null</code> to start where the left fixed edge ends.</p> <p><code>CenterXPosition</code> SliceCenterPosition Specifies whether the CenterX should be understood as the start position or the end position of the horizontal center slice.</p> <p><code>CenterY</code> Nullable&lt;Int32&gt; The Y position to use for the vertical center slices, or <code>null</code> to start where the top fixed edge ends.</p> <p><code>CenterYPosition</code> SliceCenterPosition Specifies whether the CenterY should be understood as the start position or the end position of the vertical center slice.</p> <p><code>Scale</code> Single Scale to apply to the slices themselves; for example, if a 16x16 source draws to a 64x64 target, and a scale of 2 is used, then a 2x3 border slice would draw as 16x24 (normal 8x16, multiplied by 2).</p> <p><code>EdgesOnly</code> Boolean If <code>true</code>, then only the outer 8 edge segments should be drawn, and the 9th (horizontal and vertical middle, i.e. \"background\") segment will be ignored.</p>"},{"location":"reference/stardewui/graphics/slicesettings/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/graphics/slicesettings/#centerx","title":"CenterX","text":"<p>The X position to use for the horizontal center slices, or <code>null</code> to start where the left fixed edge ends.</p> <pre><code>public int? CenterX { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/slicesettings/#property-value","title":"Property Value","text":"<p>Nullable&lt;Int32&gt;</p>"},{"location":"reference/stardewui/graphics/slicesettings/#centerxposition","title":"CenterXPosition","text":"<p>Specifies whether the CenterX should be understood as the start position or the end position of the horizontal center slice.</p> <pre><code>public StardewUI.Graphics.SliceCenterPosition CenterXPosition { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/slicesettings/#property-value_1","title":"Property Value","text":"<p>SliceCenterPosition</p>"},{"location":"reference/stardewui/graphics/slicesettings/#centery","title":"CenterY","text":"<p>The Y position to use for the vertical center slices, or <code>null</code> to start where the top fixed edge ends.</p> <pre><code>public int? CenterY { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/slicesettings/#property-value_2","title":"Property Value","text":"<p>Nullable&lt;Int32&gt;</p>"},{"location":"reference/stardewui/graphics/slicesettings/#centeryposition","title":"CenterYPosition","text":"<p>Specifies whether the CenterY should be understood as the start position or the end position of the vertical center slice.</p> <pre><code>public StardewUI.Graphics.SliceCenterPosition CenterYPosition { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/slicesettings/#property-value_3","title":"Property Value","text":"<p>SliceCenterPosition</p>"},{"location":"reference/stardewui/graphics/slicesettings/#edgesonly","title":"EdgesOnly","text":"<p>If <code>true</code>, then only the outer 8 edge segments should be drawn, and the 9th (horizontal and vertical middle, i.e. \"background\") segment will be ignored.</p> <pre><code>public bool EdgesOnly { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/slicesettings/#property-value_4","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/graphics/slicesettings/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/slicesettings/#property-value_5","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/graphics/slicesettings/#scale","title":"Scale","text":"<p>Scale to apply to the slices themselves; for example, if a 16x16 source draws to a 64x64 target, and a scale of 2 is used, then a 2x3 border slice would draw as 16x24 (normal 8x16, multiplied by 2).</p> <pre><code>public float Scale { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/slicesettings/#property-value_6","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/graphics/slicesettings/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/graphics/slicesettings/#withscalefloat","title":"WithScale(float)","text":"<p>Creates a copy of this SliceSettings with a different scale.</p> <pre><code>public StardewUI.Graphics.SliceSettings WithScale(float newScale);\n</code></pre>"},{"location":"reference/stardewui/graphics/slicesettings/#parameters_1","title":"Parameters","text":"<p><code>newScale</code> Single The scale to use.</p>"},{"location":"reference/stardewui/graphics/slicesettings/#returns","title":"Returns","text":"<p>SliceSettings</p> <p>A copy of this SliceSettings with its Scale set to <code>newScale</code>.</p>"},{"location":"reference/stardewui/graphics/sprite/","title":"Sprite","text":""},{"location":"reference/stardewui/graphics/sprite/#class-sprite","title":"Class Sprite","text":""},{"location":"reference/stardewui/graphics/sprite/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Definition for a scalable sprite.</p> <pre><code>[StardewUI.DuckType]\npublic record Sprite : IEquatable&lt;StardewUI.Graphics.Sprite&gt;\n</code></pre> <p>Inheritance Object \u21e6 Sprite</p> <p>Implements IEquatable&lt;Sprite&gt;</p>"},{"location":"reference/stardewui/graphics/sprite/#members","title":"Members","text":""},{"location":"reference/stardewui/graphics/sprite/#constructors","title":"Constructors","text":"Name Description Sprite(Texture2D, Rectangle?, Edges, SliceSettings) Definition for a scalable sprite."},{"location":"reference/stardewui/graphics/sprite/#properties","title":"Properties","text":"Name Description EqualityContract FixedEdges The thickness of each \"fixed\" edge to use with 9-patch/9-slice scaling. Specifying these values can prevent corner distortion for images that have been designed for such scaling. See Nine-Slice Scaling for a detailed explanation. Size The size (width/height) of the sprite, in pixels. SliceSettings Additional settings for the scaling and slicing behavior. SourceRect The inner area of the <code>Texture</code> in which the specific image is located, or <code>null</code> to draw the entire texture. Texture The texture containing the sprite's pixel data."},{"location":"reference/stardewui/graphics/sprite/#details","title":"Details","text":""},{"location":"reference/stardewui/graphics/sprite/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/graphics/sprite/#spritetexture2d-rectangle-edges-slicesettings","title":"Sprite(Texture2D, Rectangle?, Edges, SliceSettings)","text":"<p>Definition for a scalable sprite.</p> <pre><code>public Sprite(Microsoft.Xna.Framework.Graphics.Texture2D Texture, Microsoft.Xna.Framework.Rectangle? SourceRect, StardewUI.Layout.Edges FixedEdges, StardewUI.Graphics.SliceSettings SliceSettings);\n</code></pre>"},{"location":"reference/stardewui/graphics/sprite/#parameters","title":"Parameters","text":"<p><code>Texture</code> Texture2D The texture containing the sprite's pixel data.</p> <p><code>SourceRect</code> Nullable&lt;Rectangle&gt; The inner area of the <code>Texture</code> in which the specific image is located, or <code>null</code> to draw the entire texture.</p> <p><code>FixedEdges</code> Edges The thickness of each \"fixed\" edge to use with 9-patch/9-slice scaling. Specifying these values can prevent corner distortion for images that have been designed for such scaling. See Nine-Slice Scaling for a detailed explanation.</p> <p><code>SliceSettings</code> SliceSettings Additional settings for the scaling and slicing behavior.</p>"},{"location":"reference/stardewui/graphics/sprite/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/graphics/sprite/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/sprite/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/graphics/sprite/#fixededges","title":"FixedEdges","text":"<p>The thickness of each \"fixed\" edge to use with 9-patch/9-slice scaling. Specifying these values can prevent corner distortion for images that have been designed for such scaling. See Nine-Slice Scaling for a detailed explanation.</p> <pre><code>public StardewUI.Layout.Edges FixedEdges { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/sprite/#property-value_1","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/graphics/sprite/#size","title":"Size","text":"<p>The size (width/height) of the sprite, in pixels.</p> <pre><code>public Microsoft.Xna.Framework.Point Size { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/sprite/#property-value_2","title":"Property Value","text":"<p>Point</p>"},{"location":"reference/stardewui/graphics/sprite/#slicesettings","title":"SliceSettings","text":"<p>Additional settings for the scaling and slicing behavior.</p> <pre><code>public StardewUI.Graphics.SliceSettings SliceSettings { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/sprite/#property-value_3","title":"Property Value","text":"<p>SliceSettings</p>"},{"location":"reference/stardewui/graphics/sprite/#sourcerect","title":"SourceRect","text":"<p>The inner area of the <code>Texture</code> in which the specific image is located, or <code>null</code> to draw the entire texture.</p> <pre><code>public Microsoft.Xna.Framework.Rectangle? SourceRect { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/sprite/#property-value_4","title":"Property Value","text":"<p>Nullable&lt;Rectangle&gt;</p>"},{"location":"reference/stardewui/graphics/sprite/#texture","title":"Texture","text":"<p>The texture containing the sprite's pixel data.</p> <pre><code>public Microsoft.Xna.Framework.Graphics.Texture2D Texture { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/sprite/#property-value_5","title":"Property Value","text":"<p>Texture2D</p>"},{"location":"reference/stardewui/graphics/spritemap-1/","title":"SpriteMap&lt;T&gt;","text":""},{"location":"reference/stardewui/graphics/spritemap-1/#class-spritemapt","title":"Class SpriteMap&lt;T&gt;","text":""},{"location":"reference/stardewui/graphics/spritemap-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>General implementation of an ISpriteMap&lt;T&gt; that can be prepared in a variety of ways.</p> <pre><code>public class SpriteMap&lt;T&gt; : StardewUI.Graphics.ISpriteMap&lt;T&gt;\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemap-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> Type of key for which to obtain sprites.</p> <p>Inheritance Object \u21e6 SpriteMap&lt;T&gt;</p> <p>Implements ISpriteMap&lt;T&gt;</p>"},{"location":"reference/stardewui/graphics/spritemap-1/#remarks","title":"Remarks","text":"<p>Can be constructed directly, but it is normally recommended to use SpriteMapBuilder&lt;T&gt;. Applies basic placeholder logic that considers only the <code>defaultSprite</code> to be a placeholder.</p>"},{"location":"reference/stardewui/graphics/spritemap-1/#members","title":"Members","text":""},{"location":"reference/stardewui/graphics/spritemap-1/#constructors","title":"Constructors","text":"Name Description SpriteMap&lt;T&gt;(IReadOnlyDictionary&lt;T, Sprite&gt;, Sprite) General implementation of an ISpriteMap&lt;T&gt; that can be prepared in a variety of ways."},{"location":"reference/stardewui/graphics/spritemap-1/#methods","title":"Methods","text":"Name Description Get(T, Boolean) Gets the sprite corresponding to a particular key."},{"location":"reference/stardewui/graphics/spritemap-1/#details","title":"Details","text":""},{"location":"reference/stardewui/graphics/spritemap-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/graphics/spritemap-1/#spritemaptireadonlydictionaryt-sprite-sprite","title":"SpriteMap&lt;T&gt;(IReadOnlyDictionary&lt;T, Sprite&gt;, Sprite)","text":"<p>General implementation of an ISpriteMap&lt;T&gt; that can be prepared in a variety of ways.</p> <pre><code>public SpriteMap&lt;T&gt;(System.Collections.Generic.IReadOnlyDictionary&lt;T, StardewUI.Graphics.Sprite&gt; sprites, StardewUI.Graphics.Sprite defaultSprite);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemap-1/#parameters","title":"Parameters","text":"<p><code>sprites</code> IReadOnlyDictionary&lt;T, Sprite&gt; Map of keys to sprites.</p> <p><code>defaultSprite</code> Sprite Default sprite to show when looking up a key without a corresponding sprite.</p>"},{"location":"reference/stardewui/graphics/spritemap-1/#remarks_1","title":"Remarks","text":"<p>Can be constructed directly, but it is normally recommended to use SpriteMapBuilder&lt;T&gt;. Applies basic placeholder logic that considers only the <code>defaultSprite</code> to be a placeholder.</p>"},{"location":"reference/stardewui/graphics/spritemap-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/graphics/spritemap-1/#gett-boolean","title":"Get(T, Boolean)","text":"<p>Gets the sprite corresponding to a particular key.</p> <pre><code>public StardewUI.Graphics.Sprite Get(T key, out System.Boolean isPlaceholder);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemap-1/#parameters_1","title":"Parameters","text":"<p><code>key</code> \u00a0 T The key to retrieve.</p> <p><code>isPlaceholder</code> Boolean <code>true</code> if the returned Sprite is not specific to the <code>key</code>, but is instead a placeholder (border/background) in which some substitute, typically normal text, must be drawn. <code>false</code> if the Sprite is a complete self-contained representation of the <code>key</code>.</p>"},{"location":"reference/stardewui/graphics/spritemap-1/#returns","title":"Returns","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/","title":"SpriteMapBuilder&lt;T&gt;","text":""},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#class-spritemapbuildert","title":"Class SpriteMapBuilder&lt;T&gt;","text":""},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Builder interface for a SpriteMap&lt;T&gt; using a single texture source.</p> <pre><code>public class SpriteMapBuilder&lt;T&gt;\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> Type of key for which to obtain sprites.</p> <p>Inheritance Object \u21e6 SpriteMapBuilder&lt;T&gt;</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#remarks","title":"Remarks","text":"<p>Works by maintaining a virtual \"cursor\" which can be moved to capture the next sprite, and adding either one sprite at a time with a specific size, or several with the same size, wrapping around when necessary.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#members","title":"Members","text":""},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#constructors","title":"Constructors","text":"Name Description SpriteMapBuilder&lt;T&gt;(Texture2D) Builder interface for a SpriteMap&lt;T&gt; using a single texture source."},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#methods","title":"Methods","text":"Name Description Add(T, Int32?, Int32?) Adds a single sprite. Add(T, Rectangle) Adds a sprite using its specific position and size in the texture. Add(IEnumerable&lt;T&gt;) Adds a sequence of sprites, starting from the current cursor position and using the most recently configured Size(Int32, Int32) and Padding(Int32, Int32) to advance the cursor after each element. Add(T) Adds a sequence of sprites, starting from the current cursor position and using the most recently configured Size(Int32, Int32) and Padding(Int32, Int32) to advance the cursor after each element. Build() Builds a new SpriteMap&lt;T&gt; from the registered sprites. Default(T) Configures the default sprite for unknown keys to use an existing sprite that has already been registered. Default(Sprite) Configures the default sprite for unknown keys to use a custom sprite. MoveBy(Int32, Int32) Moves the current cursor position by a specified offset. MoveBy(Point) Moves the current cursor position by a specified offset. MoveTo(Int32, Int32) Moves the cursor to a specific coordinate. MoveTo(Point) Moves the cursor to a specific coordinate. Padding(Int32, Int32) Configures the padding between sprites. Padding(Point) Configures the padding between sprites. Size(Int32, Int32) Configures the pixel size per sprite. Size(Point) Configures the pixel size per sprite."},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#details","title":"Details","text":""},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#spritemapbuilderttexture2d","title":"SpriteMapBuilder&lt;T&gt;(Texture2D)","text":"<p>Builder interface for a SpriteMap&lt;T&gt; using a single texture source.</p> <pre><code>public SpriteMapBuilder&lt;T&gt;(Microsoft.Xna.Framework.Graphics.Texture2D texture);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters","title":"Parameters","text":"<p><code>texture</code> Texture2D</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#remarks_1","title":"Remarks","text":"<p>Works by maintaining a virtual \"cursor\" which can be moved to capture the next sprite, and adding either one sprite at a time with a specific size, or several with the same size, wrapping around when necessary.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#addt-int-int","title":"Add(T, int?, int?)","text":"<p>Adds a single sprite.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; Add(T key, int? width, int? height);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_1","title":"Parameters","text":"<p><code>key</code> \u00a0 T The key for the sprite.</p> <p><code>width</code> Nullable&lt;Int32&gt; Optional override width, otherwise the most recent Size(Int32, Int32) will be used. Custom widths only apply to this sprite and will not affect the size of any subsequent additions.</p> <p><code>height</code> Nullable&lt;Int32&gt; Optional override height, otherwise the most recent Size(Int32, Int32) will be used. Custom heights only apply to this sprite and will not affect the size of any subsequent additions.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#addt-rectangle","title":"Add(T, Rectangle)","text":"<p>Adds a sprite using its specific position and size in the texture.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; Add(T key, Microsoft.Xna.Framework.Rectangle sourceRect);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_2","title":"Parameters","text":"<p><code>key</code> \u00a0 T The key for the sprite.</p> <p><code>sourceRect</code> Rectangle The exact position and size of the sprite.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_1","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#remarks_2","title":"Remarks","text":"<p>After adding, moves the cursor to the top-right of the <code>sourceRect</code>, unless it would be horizontally out of bounds, in which case it wraps to the beginning (X = 0) of the next row.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#addienumerablet","title":"Add(IEnumerable&lt;T&gt;)","text":"<p>Adds a sequence of sprites, starting from the current cursor position and using the most recently configured Size(Int32, Int32) and Padding(Int32, Int32) to advance the cursor after each element.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; Add(System.Collections.Generic.IEnumerable&lt;T&gt; keys);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_3","title":"Parameters","text":"<p><code>keys</code> IEnumerable&lt;T&gt; The keys for the sprites to add, in the same left-to-right order that they appear in the source texture.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_2","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#remarks_3","title":"Remarks","text":"<p>Wraps to the beginning of the next row (X = 0) when the end of a row is reached.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#addt","title":"Add(T)","text":"<p>Adds a sequence of sprites, starting from the current cursor position and using the most recently configured Size(Int32, Int32) and Padding(Int32, Int32) to advance the cursor after each element.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; Add(T keys);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_4","title":"Parameters","text":"<p><code>keys</code> <code>T</code> The keys for the sprites to add, in the same left-to-right order that they appear in the source texture.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_3","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#remarks_4","title":"Remarks","text":"<p>Wraps to the beginning of the next row (X = 0) when the end of a row is reached.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#build","title":"Build()","text":"<p>Builds a new SpriteMap&lt;T&gt; from the registered sprites.</p> <pre><code>public StardewUI.Graphics.SpriteMap&lt;T&gt; Build();\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_4","title":"Returns","text":"<p>SpriteMap&lt;T&gt;</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#defaultt","title":"Default(T)","text":"<p>Configures the default sprite for unknown keys to use an existing sprite that has already been registered.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; Default(T key);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_5","title":"Parameters","text":"<p><code>key</code> \u00a0 T Key of the previously-added sprite to use as default.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_5","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#defaultsprite","title":"Default(Sprite)","text":"<p>Configures the default sprite for unknown keys to use a custom sprite.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; Default(StardewUI.Graphics.Sprite sprite);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_6","title":"Parameters","text":"<p><code>sprite</code> Sprite The sprite to use as default.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_6","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#movebyint-int","title":"MoveBy(int, int)","text":"<p>Moves the current cursor position by a specified offset.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; MoveBy(int x, int y);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_7","title":"Parameters","text":"<p><code>x</code> Int32 Horizontal offset from current position.</p> <p><code>y</code> Int32 Vertical offset from current position.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_7","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#movebypoint","title":"MoveBy(Point)","text":"<p>Moves the current cursor position by a specified offset.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; MoveBy(Microsoft.Xna.Framework.Point p);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_8","title":"Parameters","text":"<p><code>p</code> Point The horizontal (X) and vertical (Y) offsets from the current position.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_8","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#movetoint-int","title":"MoveTo(int, int)","text":"<p>Moves the cursor to a specific coordinate.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; MoveTo(int x, int y);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_9","title":"Parameters","text":"<p><code>x</code> Int32 The new X coordinate of the cursor.</p> <p><code>y</code> Int32 The new Y coordinate of the cursor.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_9","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#remarks_5","title":"Remarks","text":"<p>Generally used when dealing with semi-regular spritesheets having distinct areas that are individually uniform but different from each other, e.g. a row of 10x10 placed in an empty area of a 32x32 sheet.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#movetopoint","title":"MoveTo(Point)","text":"<p>Moves the cursor to a specific coordinate.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; MoveTo(Microsoft.Xna.Framework.Point p);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_10","title":"Parameters","text":"<p><code>p</code> Point The horizontal (X) and vertical (Y) coordinates for the cursor.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_10","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#remarks_6","title":"Remarks","text":"<p>Generally used when dealing with semi-regular spritesheets having distinct areas that are individually uniform but different from each other, e.g. a row of 10x10 placed in an empty area of a 32x32 sheet.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#paddingint-int","title":"Padding(int, int)","text":"<p>Configures the padding between sprites.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; Padding(int x, int y);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_11","title":"Parameters","text":"<p><code>x</code> Int32 Horizontal padding from the right edge of one sprite to the left edge of the next. Added whenever advancing from left to right.</p> <p><code>y</code> Int32 Vertical padding from the bottom edge of one sprite to the top edge of the next. Added whenever wrapping from the end of a row to the beginning of the next row.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_11","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#remarks_7","title":"Remarks","text":"<p>Applies only to new sprites added afterward; will not affect sprites previously added.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#paddingpoint","title":"Padding(Point)","text":"<p>Configures the padding between sprites.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; Padding(Microsoft.Xna.Framework.Point p);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_12","title":"Parameters","text":"<p><code>p</code> Point A point containing the horizontal (X) and vertical (Y) padding values. See Padding(Int32, Int32).</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_12","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#remarks_8","title":"Remarks","text":"<p>Applies only to new sprites added afterward; will not affect sprites previously added.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#sizeint-int","title":"Size(int, int)","text":"<p>Configures the pixel size per sprite.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; Size(int width, int height);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_13","title":"Parameters","text":"<p><code>width</code> Int32 The pixel width for newly-added sprites.</p> <p><code>height</code> Int32 The pixel height for newly-added sprites.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_13","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#remarks_9","title":"Remarks","text":"<p>Applies only to new sprites added afterward; will not affect sprites previously added.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#sizepoint","title":"Size(Point)","text":"<p>Configures the pixel size per sprite.</p> <pre><code>public StardewUI.Graphics.SpriteMapBuilder&lt;T&gt; Size(Microsoft.Xna.Framework.Point p);\n</code></pre>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#parameters_14","title":"Parameters","text":"<p><code>p</code> Point A point containing the width (X) and height (Y) for newly-added sprites.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#returns_14","title":"Returns","text":"<p>SpriteMapBuilder&lt;T&gt;</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/graphics/spritemapbuilder-1/#remarks_10","title":"Remarks","text":"<p>Applies only to new sprites added afterward; will not affect sprites previously added.</p>"},{"location":"reference/stardewui/graphics/transform/","title":"Transform","text":""},{"location":"reference/stardewui/graphics/transform/#class-transform","title":"Class Transform","text":""},{"location":"reference/stardewui/graphics/transform/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Global transform applied to an ISpriteBatch.</p> <pre><code>public class Transform\n</code></pre> <p>Inheritance Object \u21e6 Transform</p>"},{"location":"reference/stardewui/graphics/transform/#remarks","title":"Remarks","text":"<p>Currently only propagates the translation, since this is comparatively trivial to implement, doesn't require any matrix math and it is very rare for UI to have rotation or scale that needs to propagate.</p>"},{"location":"reference/stardewui/graphics/transform/#members","title":"Members","text":""},{"location":"reference/stardewui/graphics/transform/#fields","title":"Fields","text":"Name Description Default Default instance with no transformations applied."},{"location":"reference/stardewui/graphics/transform/#properties","title":"Properties","text":"Name Description Translation The translation vector, i.e. global X/Y origin position."},{"location":"reference/stardewui/graphics/transform/#methods","title":"Methods","text":"Name Description FromTranslation(Vector2) Creates a Transform using a specified translation offset. Translate(Vector2) Applies a specified translation."},{"location":"reference/stardewui/graphics/transform/#details","title":"Details","text":""},{"location":"reference/stardewui/graphics/transform/#fields_1","title":"Fields","text":""},{"location":"reference/stardewui/graphics/transform/#default","title":"Default","text":"<p>Default instance with no transformations applied.</p> <pre><code>public static readonly StardewUI.Graphics.Transform Default;\n</code></pre>"},{"location":"reference/stardewui/graphics/transform/#field-value","title":"Field Value","text":"<p>Transform</p>"},{"location":"reference/stardewui/graphics/transform/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/graphics/transform/#translation","title":"Translation","text":"<p>The translation vector, i.e. global X/Y origin position.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 Translation { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/transform/#property-value","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/graphics/transform/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/graphics/transform/#fromtranslationvector2","title":"FromTranslation(Vector2)","text":"<p>Creates a Transform using a specified translation offset.</p> <pre><code>public static StardewUI.Graphics.Transform FromTranslation(Microsoft.Xna.Framework.Vector2 translation);\n</code></pre>"},{"location":"reference/stardewui/graphics/transform/#parameters","title":"Parameters","text":"<p><code>translation</code> Vector2 The translation offset.</p>"},{"location":"reference/stardewui/graphics/transform/#returns","title":"Returns","text":"<p>Transform</p> <p>A Transform whose Translation is equal to <code>translation</code>.</p>"},{"location":"reference/stardewui/graphics/transform/#translatevector2","title":"Translate(Vector2)","text":"<p>Applies a specified translation.</p> <pre><code>public StardewUI.Graphics.Transform Translate(Microsoft.Xna.Framework.Vector2 translation);\n</code></pre>"},{"location":"reference/stardewui/graphics/transform/#parameters_1","title":"Parameters","text":"<p><code>translation</code> Vector2 The translation vector.</p>"},{"location":"reference/stardewui/graphics/transform/#returns_1","title":"Returns","text":"<p>Transform</p> <p>A new Transform with the specified translation added to any previous transform.</p>"},{"location":"reference/stardewui/graphics/uisprites/","title":"UiSprites","text":""},{"location":"reference/stardewui/graphics/uisprites/#class-uisprites","title":"Class UiSprites","text":""},{"location":"reference/stardewui/graphics/uisprites/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Included game sprites that are required for many UI/menu widgets.</p> <pre><code>public static class UiSprites\n</code></pre> <p>Inheritance Object \u21e6 UiSprites</p>"},{"location":"reference/stardewui/graphics/uisprites/#members","title":"Members","text":""},{"location":"reference/stardewui/graphics/uisprites/#properties","title":"Properties","text":"Name Description BannerBackground Background for the a banner or \"scroll\" style text, often used for menu/dialogue titles. ButtonDark Button with a darker background, usually the neutral state. ButtonLight Button with a lighter background, usually used to show hover state. CaretLeft A caret-style directional arrow pointing left. CaretRight A caret-style directional arrow pointing right. CheckboxChecked Checkbox with a green \"X\" through it. CheckboxUnchecked Unchecked checkbox, i.e. only the border. CloseButton Red X with border/background, generally used as upper-right close button for menus. ControlBorder Border/background sprite for an individual control, such as a button. Less prominent than MenuBorder. ControlBorderUncolored Colorless border/background sprite for an individual control, such as a button. Less prominent than MenuBorderUncolored. Digits List of sprites for the outlined \"tiny digits\" 0-9, in that order. DropDownBackground Background of a drop-down menu. DropDownButton Button to pull down a drop-down menu. GenericHorizontalDivider Simpler, lighter horizontal divider than the MenuHorizontalDivider, used as a horizontal rule to separate content areas without sectioning the entire menu. GenericHorizontalDividerUncolored Colorless horizontal divider that is simpler and lighter the MenuHorizontalDividerUncolored, used as a horizontal rule to separate content areas without sectioning the entire menu. LargeDownArrow Large down arrow, used for macro navigation. LargeLeftArrow Large left arrow, used for macro navigation. LargeRightArrow Large right arrow, used for macro navigation. LargeUpArrow Large up arrow, used for macro navigation. MenuBackground Background used for the in-game menu, not including borders. MenuBackgroundUncolored Colorless background used for the in-game menu, not including borders. MenuBorder Modified 9-slice sprite used for the menu border, based on menu \"tiles\". Used for drawing the outer border of an entire menu UI. MenuBorderThickness The actual distance from the outer edges of the MenuBorder sprite to where the actual \"border\" really ends, in terms of pixels. The border tiles are quite large, so this tends to be needed in order to determine where the content should go without adding a ton of extra padding. MenuBorderUncolored Colorless version of the modified 9-slice sprite used for the menu border, based on menu \"tiles\". Used for drawing the outer border of an entire menu UI. MenuHorizontalDivider Modified 9-slice sprite used for the menu's horizontal divider, meant to be drawn over top of the MenuBorder to denote separate \"sub-panels\" or \"sections\" of the menu to group logically very different menu functions (as opposed to lines on a grid). MenuHorizontalDividerMargin Margin adjustment to apply to content adjacent to a MenuHorizontalDivider to make content flush with the border; adjusts for internal sprite padding. MenuHorizontalDividerUncolored Colorless version of the modified 9-slice sprite used for the menu's horizontal divider, meant to be drawn over top of the MenuBorderUncolored to denote separate \"sub-panels\" or \"sections\" of the menu to group logically very different menu functions (as opposed to lines on a grid). MenuSlotInset Inset-style background and border, often used to hold an item or represent a slot. MenuSlotInsetUncolored Colorless inset-style background and border, often used to hold an item or represent a slot. MenuSlotOutset Outset-style background and border, often used to hold an item or represent a slot. MenuSlotTransparent Single-line rectangular border with a slight inset look. MenuSlotTransparentUncolored Colorless single-line rectangular border with a slight inset look. MenuVerticalDivider Modified 9-slice sprite used for the menu's vertical divider, meant to be drawn over top of the MenuBorder to denote separate \"sub-panels\" or \"sections\" of the menu to group logically very different menu functions (as opposed to lines on a grid). MenuVerticalDividerMargin Margin adjustment to apply to content adjacent to a MenuVerticalDivider to make content flush with the border; adjusts for internal sprite padding. MenuVerticalDividerUncolored Colorless version of the modified 9-slice sprite used for the menu's vertical divider, meant to be drawn over top of the MenuBorderUncolored to denote separate \"sub-panels\" or \"sections\" of the menu to group logically very different menu functions (as opposed to lines on a grid). ScrollBarTrack Background for the scroll bar track (which the thumb is inside). SliderBackground Background of a slider control. SliderButton The movable part of a slider control (\"button\"). SmallDownArrow Small down arrow, typically used for scroll bars. SmallGreenPlus A small green \"+\" icon. SmallLeftArrow Small left arrow, typically used for top-level list navigation. SmallRightArrow Small right arrow, typically used for top-level list navigation. SmallTrashCan Small and tall trash can, larger than the TinyTrashCan and more suitable for tall rows. SmallUpArrow Small up arrow, typically used for scroll bars. TabTopEmpty Top-facing tab with no inner content, used for tab controls. TextBox Border/background for a text input box. ThinHorizontalDivider Simple horizontal divider, typically used to divide sections of uniform content, e.g. grid rows. ThinHorizontalDividerUncolored Simple, colorless horizontal divider, typically used to divide sections of uniform content, e.g. grid rows. ThinVerticalDivider Simple vertical divider, typically used to divide sections of uniform content, e.g. grid columns. ThinVerticalDividerUncolored Simple, colorless vertical divider, typically used to divide sections of uniform content, e.g. grid columns. TinyTrashCan Very small trash can, e.g. to be used in lists/subforms as \"remove\" button. VerticalScrollThumb Thumb sprite used for vertical scroll bars. White A single white pixel."},{"location":"reference/stardewui/graphics/uisprites/#details","title":"Details","text":""},{"location":"reference/stardewui/graphics/uisprites/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/graphics/uisprites/#bannerbackground","title":"BannerBackground","text":"<p>Background for the a banner or \"scroll\" style text, often used for menu/dialogue titles.</p> <pre><code>public static StardewUI.Graphics.Sprite BannerBackground { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#buttondark","title":"ButtonDark","text":"<p>Button with a darker background, usually the neutral state.</p> <pre><code>public static StardewUI.Graphics.Sprite ButtonDark { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_1","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#buttonlight","title":"ButtonLight","text":"<p>Button with a lighter background, usually used to show hover state.</p> <pre><code>public static StardewUI.Graphics.Sprite ButtonLight { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_2","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#caretleft","title":"CaretLeft","text":"<p>A caret-style directional arrow pointing left.</p> <pre><code>public static StardewUI.Graphics.Sprite CaretLeft { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_3","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#remarks","title":"Remarks","text":"<p>Can be used to show expanded/collapsed state, or illustrate a movement direction.</p>"},{"location":"reference/stardewui/graphics/uisprites/#caretright","title":"CaretRight","text":"<p>A caret-style directional arrow pointing right.</p> <pre><code>public static StardewUI.Graphics.Sprite CaretRight { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_4","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#remarks_1","title":"Remarks","text":"<p>Can be used to show expanded/collapsed state, or illustrate a movement direction.</p>"},{"location":"reference/stardewui/graphics/uisprites/#checkboxchecked","title":"CheckboxChecked","text":"<p>Checkbox with a green \"X\" through it.</p> <pre><code>public static StardewUI.Graphics.Sprite CheckboxChecked { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_5","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#checkboxunchecked","title":"CheckboxUnchecked","text":"<p>Unchecked checkbox, i.e. only the border.</p> <pre><code>public static StardewUI.Graphics.Sprite CheckboxUnchecked { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_6","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#closebutton","title":"CloseButton","text":"<p>Red X with border/background, generally used as upper-right close button for menus.</p> <pre><code>public static StardewUI.Graphics.Sprite CloseButton { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_7","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#controlborder","title":"ControlBorder","text":"<p>Border/background sprite for an individual control, such as a button. Less prominent than MenuBorder.</p> <pre><code>public static StardewUI.Graphics.Sprite ControlBorder { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_8","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#controlborderuncolored","title":"ControlBorderUncolored","text":"<p>Colorless border/background sprite for an individual control, such as a button. Less prominent than MenuBorderUncolored.</p> <pre><code>public static StardewUI.Graphics.Sprite ControlBorderUncolored { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_9","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#digits","title":"Digits","text":"<p>List of sprites for the outlined \"tiny digits\" 0-9, in that order.</p> <pre><code>public static System.Collections.Generic.IReadOnlyList&lt;StardewUI.Graphics.Sprite&gt; Digits { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_10","title":"Property Value","text":"<p>IReadOnlyList&lt;Sprite&gt;</p>"},{"location":"reference/stardewui/graphics/uisprites/#dropdownbackground","title":"DropDownBackground","text":"<p>Background of a drop-down menu.</p> <pre><code>public static StardewUI.Graphics.Sprite DropDownBackground { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_11","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#dropdownbutton","title":"DropDownButton","text":"<p>Button to pull down a drop-down menu.</p> <pre><code>public static StardewUI.Graphics.Sprite DropDownButton { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_12","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#generichorizontaldivider","title":"GenericHorizontalDivider","text":"<p>Simpler, lighter horizontal divider than the MenuHorizontalDivider, used as a horizontal rule to separate content areas without sectioning the entire menu.</p> <pre><code>public static StardewUI.Graphics.Sprite GenericHorizontalDivider { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_13","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#generichorizontaldivideruncolored","title":"GenericHorizontalDividerUncolored","text":"<p>Colorless horizontal divider that is simpler and lighter the MenuHorizontalDividerUncolored, used as a horizontal rule to separate content areas without sectioning the entire menu.</p> <pre><code>public static StardewUI.Graphics.Sprite GenericHorizontalDividerUncolored { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_14","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#largedownarrow","title":"LargeDownArrow","text":"<p>Large down arrow, used for macro navigation.</p> <pre><code>public static StardewUI.Graphics.Sprite LargeDownArrow { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_15","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#largeleftarrow","title":"LargeLeftArrow","text":"<p>Large left arrow, used for macro navigation.</p> <pre><code>public static StardewUI.Graphics.Sprite LargeLeftArrow { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_16","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#largerightarrow","title":"LargeRightArrow","text":"<p>Large right arrow, used for macro navigation.</p> <pre><code>public static StardewUI.Graphics.Sprite LargeRightArrow { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_17","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#largeuparrow","title":"LargeUpArrow","text":"<p>Large up arrow, used for macro navigation.</p> <pre><code>public static StardewUI.Graphics.Sprite LargeUpArrow { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_18","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#menubackground","title":"MenuBackground","text":"<p>Background used for the in-game menu, not including borders.</p> <pre><code>public static StardewUI.Graphics.Sprite MenuBackground { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_19","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#menubackgrounduncolored","title":"MenuBackgroundUncolored","text":"<p>Colorless background used for the in-game menu, not including borders.</p> <pre><code>public static StardewUI.Graphics.Sprite MenuBackgroundUncolored { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_20","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuborder","title":"MenuBorder","text":"<p>Modified 9-slice sprite used for the menu border, based on menu \"tiles\". Used for drawing the outer border of an entire menu UI.</p> <pre><code>public static StardewUI.Graphics.Sprite MenuBorder { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_21","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuborderthickness","title":"MenuBorderThickness","text":"<p>The actual distance from the outer edges of the MenuBorder sprite to where the actual \"border\" really ends, in terms of pixels. The border tiles are quite large, so this tends to be needed in order to determine where the content should go without adding a ton of extra padding.</p> <pre><code>public static StardewUI.Layout.Edges MenuBorderThickness { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_22","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuborderuncolored","title":"MenuBorderUncolored","text":"<p>Colorless version of the modified 9-slice sprite used for the menu border, based on menu \"tiles\". Used for drawing the outer border of an entire menu UI.</p> <pre><code>public static StardewUI.Graphics.Sprite MenuBorderUncolored { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_23","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuhorizontaldivider","title":"MenuHorizontalDivider","text":"<p>Modified 9-slice sprite used for the menu's horizontal divider, meant to be drawn over top of the MenuBorder to denote separate \"sub-panels\" or \"sections\" of the menu to group logically very different menu functions (as opposed to lines on a grid).</p> <pre><code>public static StardewUI.Graphics.Sprite MenuHorizontalDivider { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_24","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuhorizontaldividermargin","title":"MenuHorizontalDividerMargin","text":"<p>Margin adjustment to apply to content adjacent to a MenuHorizontalDivider to make content flush with the border; adjusts for internal sprite padding.</p> <pre><code>public static StardewUI.Layout.Edges MenuHorizontalDividerMargin { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_25","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuhorizontaldivideruncolored","title":"MenuHorizontalDividerUncolored","text":"<p>Colorless version of the modified 9-slice sprite used for the menu's horizontal divider, meant to be drawn over top of the MenuBorderUncolored to denote separate \"sub-panels\" or \"sections\" of the menu to group logically very different menu functions (as opposed to lines on a grid).</p> <pre><code>public static StardewUI.Graphics.Sprite MenuHorizontalDividerUncolored { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_26","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuslotinset","title":"MenuSlotInset","text":"<p>Inset-style background and border, often used to hold an item or represent a slot.</p> <pre><code>public static StardewUI.Graphics.Sprite MenuSlotInset { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_27","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuslotinsetuncolored","title":"MenuSlotInsetUncolored","text":"<p>Colorless inset-style background and border, often used to hold an item or represent a slot.</p> <pre><code>public static StardewUI.Graphics.Sprite MenuSlotInsetUncolored { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_28","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuslotoutset","title":"MenuSlotOutset","text":"<p>Outset-style background and border, often used to hold an item or represent a slot.</p> <pre><code>public static StardewUI.Graphics.Sprite MenuSlotOutset { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_29","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuslottransparent","title":"MenuSlotTransparent","text":"<p>Single-line rectangular border with a slight inset look.</p> <pre><code>public static StardewUI.Graphics.Sprite MenuSlotTransparent { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_30","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuslottransparentuncolored","title":"MenuSlotTransparentUncolored","text":"<p>Colorless single-line rectangular border with a slight inset look.</p> <pre><code>public static StardewUI.Graphics.Sprite MenuSlotTransparentUncolored { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_31","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuverticaldivider","title":"MenuVerticalDivider","text":"<p>Modified 9-slice sprite used for the menu's vertical divider, meant to be drawn over top of the MenuBorder to denote separate \"sub-panels\" or \"sections\" of the menu to group logically very different menu functions (as opposed to lines on a grid).</p> <pre><code>public static StardewUI.Graphics.Sprite MenuVerticalDivider { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_32","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuverticaldividermargin","title":"MenuVerticalDividerMargin","text":"<p>Margin adjustment to apply to content adjacent to a MenuVerticalDivider to make content flush with the border; adjusts for internal sprite padding.</p> <pre><code>public static StardewUI.Layout.Edges MenuVerticalDividerMargin { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_33","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/graphics/uisprites/#menuverticaldivideruncolored","title":"MenuVerticalDividerUncolored","text":"<p>Colorless version of the modified 9-slice sprite used for the menu's vertical divider, meant to be drawn over top of the MenuBorderUncolored to denote separate \"sub-panels\" or \"sections\" of the menu to group logically very different menu functions (as opposed to lines on a grid).</p> <pre><code>public static StardewUI.Graphics.Sprite MenuVerticalDividerUncolored { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_34","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#scrollbartrack","title":"ScrollBarTrack","text":"<p>Background for the scroll bar track (which the thumb is inside).</p> <pre><code>public static StardewUI.Graphics.Sprite ScrollBarTrack { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_35","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#sliderbackground","title":"SliderBackground","text":"<p>Background of a slider control.</p> <pre><code>public static StardewUI.Graphics.Sprite SliderBackground { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_36","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#sliderbutton","title":"SliderButton","text":"<p>The movable part of a slider control (\"button\").</p> <pre><code>public static StardewUI.Graphics.Sprite SliderButton { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_37","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#smalldownarrow","title":"SmallDownArrow","text":"<p>Small down arrow, typically used for scroll bars.</p> <pre><code>public static StardewUI.Graphics.Sprite SmallDownArrow { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_38","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#smallgreenplus","title":"SmallGreenPlus","text":"<p>A small green \"+\" icon.</p> <pre><code>public static StardewUI.Graphics.Sprite SmallGreenPlus { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_39","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#remarks_2","title":"Remarks","text":"<p>Technically used to represent energy buffs, can sometimes be tinted to communicate a concept like \"add to list\".</p>"},{"location":"reference/stardewui/graphics/uisprites/#smallleftarrow","title":"SmallLeftArrow","text":"<p>Small left arrow, typically used for top-level list navigation.</p> <pre><code>public static StardewUI.Graphics.Sprite SmallLeftArrow { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_40","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#smallrightarrow","title":"SmallRightArrow","text":"<p>Small right arrow, typically used for top-level list navigation.</p> <pre><code>public static StardewUI.Graphics.Sprite SmallRightArrow { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_41","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#smalltrashcan","title":"SmallTrashCan","text":"<p>Small and tall trash can, larger than the TinyTrashCan and more suitable for tall rows.</p> <pre><code>public static StardewUI.Graphics.Sprite SmallTrashCan { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_42","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#smalluparrow","title":"SmallUpArrow","text":"<p>Small up arrow, typically used for scroll bars.</p> <pre><code>public static StardewUI.Graphics.Sprite SmallUpArrow { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_43","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#tabtopempty","title":"TabTopEmpty","text":"<p>Top-facing tab with no inner content, used for tab controls.</p> <pre><code>public static StardewUI.Graphics.Sprite TabTopEmpty { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_44","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#textbox","title":"TextBox","text":"<p>Border/background for a text input box.</p> <pre><code>public static StardewUI.Graphics.Sprite TextBox { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_45","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#thinhorizontaldivider","title":"ThinHorizontalDivider","text":"<p>Simple horizontal divider, typically used to divide sections of uniform content, e.g. grid rows.</p> <pre><code>public static StardewUI.Graphics.Sprite ThinHorizontalDivider { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_46","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#thinhorizontaldivideruncolored","title":"ThinHorizontalDividerUncolored","text":"<p>Simple, colorless horizontal divider, typically used to divide sections of uniform content, e.g. grid rows.</p> <pre><code>public static StardewUI.Graphics.Sprite ThinHorizontalDividerUncolored { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_47","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#thinverticaldivider","title":"ThinVerticalDivider","text":"<p>Simple vertical divider, typically used to divide sections of uniform content, e.g. grid columns.</p> <pre><code>public static StardewUI.Graphics.Sprite ThinVerticalDivider { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_48","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#thinverticaldivideruncolored","title":"ThinVerticalDividerUncolored","text":"<p>Simple, colorless vertical divider, typically used to divide sections of uniform content, e.g. grid columns.</p> <pre><code>public static StardewUI.Graphics.Sprite ThinVerticalDividerUncolored { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_49","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#tinytrashcan","title":"TinyTrashCan","text":"<p>Very small trash can, e.g. to be used in lists/subforms as \"remove\" button.</p> <pre><code>public static StardewUI.Graphics.Sprite TinyTrashCan { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_50","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#verticalscrollthumb","title":"VerticalScrollThumb","text":"<p>Thumb sprite used for vertical scroll bars.</p> <pre><code>public static StardewUI.Graphics.Sprite VerticalScrollThumb { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_51","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/uisprites/#white","title":"White","text":"<p>A single white pixel.</p> <pre><code>public static StardewUI.Graphics.Sprite White { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/uisprites/#property-value_52","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/","title":"XeluButtonSpriteMap","text":""},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#class-xelubuttonspritemap","title":"Class XeluButtonSpriteMap","text":""},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Controller/keyboard sprite map based on Xelu's CC0 pack.</p> <pre><code>public class XeluButtonSpriteMap : StardewUI.Graphics.ButtonSpriteMap\n</code></pre> <p>Inheritance Object \u21e6 ButtonSpriteMap \u21e6 XeluButtonSpriteMap</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#remarks","title":"Remarks","text":"<p>Uses specific sprites (Xbox-based) per gamepad button, with a fallback for unknown buttons. All keyboard keys use the same placeholder border/background sprite with the expectation of having the key name drawn inside, in order to at least be consistent with Stardew's fonts.</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#members","title":"Members","text":""},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#constructors","title":"Constructors","text":"Name Description XeluButtonSpriteMap(Texture2D, Texture2D, Texture2D) Controller/keyboard sprite map based on Xelu's CC0 pack."},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#properties","title":"Properties","text":"Name Description ControllerBlank A blank controller button upon which the specific button label can be drawn.(Overrides ButtonSpriteMap.<code>get_ControllerBlank()</code>) KeyboardBlank A blank keyboard key upon which the specific key name can be drawn.(Overrides ButtonSpriteMap.<code>get_KeyboardBlank()</code>) KeyboardTheme The active theme for keyboard sprites. MouseLeft The mouse with left button pressed.(Overrides ButtonSpriteMap.<code>get_MouseLeft()</code>) MouseMiddle The mouse with middle button pressed.(Overrides ButtonSpriteMap.<code>get_MouseMiddle()</code>) MouseRight The mouse with right button pressed.(Overrides ButtonSpriteMap.<code>get_MouseRight()</code>) MouseTheme The active theme for mouse sprites. SliceScale Scale to apply to nine-slice sprites, specifically keyboard blanks."},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#methods","title":"Methods","text":"Name Description Get(SButton) Gets the specific sprite for a particular button.(Overrides ButtonSpriteMap.Get(SButton)) Get(SButton, Boolean) Gets the sprite corresponding to a particular key.(Inherited from ButtonSpriteMap)"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#details","title":"Details","text":""},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#xelubuttonspritemaptexture2d-texture2d-texture2d","title":"XeluButtonSpriteMap(Texture2D, Texture2D, Texture2D)","text":"<p>Controller/keyboard sprite map based on Xelu's CC0 pack.</p> <pre><code>public XeluButtonSpriteMap(Microsoft.Xna.Framework.Graphics.Texture2D gamepad, Microsoft.Xna.Framework.Graphics.Texture2D keyboard, Microsoft.Xna.Framework.Graphics.Texture2D mouse);\n</code></pre>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#parameters","title":"Parameters","text":"<p><code>gamepad</code> Texture2D Gamepad texture atlas, loaded from the mod's copy of <code>GamepadButtons.png</code>.</p> <p><code>keyboard</code> Texture2D Keyboard texture atlas, loaded from the mod's copy of <code>KeyboardKeys.png</code>.</p> <p><code>mouse</code> Texture2D Mouse texture atlas, loaded from the mod's copy of <code>MouseButtons.png</code>.</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#remarks_1","title":"Remarks","text":"<p>Uses specific sprites (Xbox-based) per gamepad button, with a fallback for unknown buttons. All keyboard keys use the same placeholder border/background sprite with the expectation of having the key name drawn inside, in order to at least be consistent with Stardew's fonts.</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#controllerblank","title":"ControllerBlank","text":"<p>A blank controller button upon which the specific button label can be drawn.</p> <pre><code>protected StardewUI.Graphics.Sprite ControllerBlank { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#property-value","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#remarks_2","title":"Remarks","text":"<p>If the sprite specifies non-zero FixedEdges then they will be added to the label's margin.</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#keyboardblank","title":"KeyboardBlank","text":"<p>A blank keyboard key upon which the specific key name can be drawn.</p> <pre><code>protected StardewUI.Graphics.Sprite KeyboardBlank { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#property-value_1","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#remarks_3","title":"Remarks","text":"<p>If the sprite specifies non-zero FixedEdges then they will be added to the label's margin.</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#keyboardtheme","title":"KeyboardTheme","text":"<p>The active theme for keyboard sprites.</p> <pre><code>public StardewUI.Graphics.XeluButtonSpriteMap.SpriteTheme KeyboardTheme { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#property-value_2","title":"Property Value","text":"<p>SpriteTheme</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#mouseleft","title":"MouseLeft","text":"<p>The mouse with left button pressed.</p> <pre><code>protected StardewUI.Graphics.Sprite MouseLeft { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#property-value_3","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#mousemiddle","title":"MouseMiddle","text":"<p>The mouse with middle button pressed.</p> <pre><code>protected StardewUI.Graphics.Sprite MouseMiddle { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#property-value_4","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#mouseright","title":"MouseRight","text":"<p>The mouse with right button pressed.</p> <pre><code>protected StardewUI.Graphics.Sprite MouseRight { get; }\n</code></pre>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#property-value_5","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#mousetheme","title":"MouseTheme","text":"<p>The active theme for mouse sprites.</p> <pre><code>public StardewUI.Graphics.XeluButtonSpriteMap.SpriteTheme MouseTheme { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#property-value_6","title":"Property Value","text":"<p>SpriteTheme</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#slicescale","title":"SliceScale","text":"<p>Scale to apply to nine-slice sprites, specifically keyboard blanks.</p> <pre><code>public float SliceScale { get; set; }\n</code></pre>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#property-value_7","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#remarks_4","title":"Remarks","text":"<p>This setting exists because the sprite assets are much larger than the space available for a typical keybind image in a menu, which - very unusually for Stardew - means they need to be scaled down, not up. However, some UIs (e.g. some overlays) may want to display these sprites at their normal size or larger, and in these cases, should not scale the slices because the borders would look strange or hard to see. </p> <p>In general, considering the base dimensions of 100x100, a comfortable size for menus targeting roughly 48px button height should use roughly 1/3 scale (0.3). Overlays and other UIs intending to render the sprite at full size (or larger) can leave the default of 1.</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#getsbutton","title":"Get(SButton)","text":"<p>Gets the specific sprite for a particular button.</p> <pre><code>protected override StardewUI.Graphics.Sprite Get(StardewModdingAPI.SButton button);\n</code></pre>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#parameters_1","title":"Parameters","text":"<p><code>button</code> \u00a0 SButton The button for which to retrieve a sprite.</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap/#returns","title":"Returns","text":"<p>Sprite</p> <p>The precise Sprite representing the given <code>button</code>, or <code>null</code> if the button does not have a special sprite and could/should use a generic background + text.</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap.spritetheme/","title":"XeluButtonSpriteMap.SpriteTheme","text":""},{"location":"reference/stardewui/graphics/xelubuttonspritemap.spritetheme/#enum-xelubuttonspritemapspritetheme","title":"Enum XeluButtonSpriteMap.SpriteTheme","text":""},{"location":"reference/stardewui/graphics/xelubuttonspritemap.spritetheme/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Graphics Assembly: StardewUI.dll  </p> <p>Available theme variants for certain sprites.</p> <pre><code>public enum XeluButtonSpriteMap.SpriteTheme\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 SpriteTheme</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap.spritetheme/#remarks","title":"Remarks","text":"<p>Applies to the keyboard and mouse sprites, but not controller (Xbox style) sprites.</p>"},{"location":"reference/stardewui/graphics/xelubuttonspritemap.spritetheme/#fields","title":"Fields","text":"Name Value Description Dark 0 Black and dark gray, with white highlights (e.g. for pressed mouse button). Light 1 White and light gray, with red highlights (e.g. for pressed mouse button). Stardew 2 Custom theme mimicking the Stardew yellow-orange palette; falls back to Light for non-customized sprites."},{"location":"reference/stardewui/input/","title":"StardewUI.Input","text":""},{"location":"reference/stardewui/input/#stardewuiinput-namespace","title":"StardewUI.Input Namespace","text":""},{"location":"reference/stardewui/input/#classes","title":"Classes","text":"Name Description ActionRepeat Configures the repeat rate of an action used in an ActionState&lt;T&gt;. ActionState&lt;T&gt; Translates raw input to semantic actions. ButtonResolver Helper for resolving button state reported by vanilla menu code. FocusSearchResult The result of a FocusSearch(Vector2, Direction). Identifies the specific view/position found, as well as the path to that view from the search root."},{"location":"reference/stardewui/input/#interfaces","title":"Interfaces","text":"Name Description ICaptureTarget Denotes a view or other UI element that can be the active IKeyboardSubscriber. Allows view hosts to provide deterministic release, e.g. when the mouse is clicked outside the target."},{"location":"reference/stardewui/input/#enums","title":"Enums","text":"Name Description ButtonAction The actions that a given button can trigger in a UI context. For details see ButtonResolver."},{"location":"reference/stardewui/input/actionrepeat/","title":"ActionRepeat","text":""},{"location":"reference/stardewui/input/actionrepeat/#class-actionrepeat","title":"Class ActionRepeat","text":""},{"location":"reference/stardewui/input/actionrepeat/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Input Assembly: StardewUI.dll  </p> <p>Configures the repeat rate of an action used in an ActionState&lt;T&gt;.</p> <pre><code>[StardewUI.DuckType]\npublic record ActionRepeat : IEquatable&lt;StardewUI.Input.ActionRepeat&gt;\n</code></pre> <p>Inheritance Object \u21e6 ActionRepeat</p> <p>Implements IEquatable&lt;ActionRepeat&gt;</p>"},{"location":"reference/stardewui/input/actionrepeat/#members","title":"Members","text":""},{"location":"reference/stardewui/input/actionrepeat/#constructors","title":"Constructors","text":"Name Description ActionRepeat(TimeSpan, TimeSpan?) Configures the repeat rate of an action used in an ActionState&lt;T&gt;."},{"location":"reference/stardewui/input/actionrepeat/#fields","title":"Fields","text":"Name Description Continuous Configures an action to repeat continuously, i.e. to run again on every frame as long as the trigger keys are still held. Default Default repetition setting suitable for most UI scenarios. None Configures an action to never repeat, no matter how long the trigger keys are held."},{"location":"reference/stardewui/input/actionrepeat/#properties","title":"Properties","text":"Name Description EqualityContract InitialDelay Initial delay after the first press, before any repetitions are allowed. RepeatInterval The interval between repetitions of the action, while the key is held."},{"location":"reference/stardewui/input/actionrepeat/#details","title":"Details","text":""},{"location":"reference/stardewui/input/actionrepeat/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/input/actionrepeat/#actionrepeattimespan-timespan","title":"ActionRepeat(TimeSpan, TimeSpan?)","text":"<p>Configures the repeat rate of an action used in an ActionState&lt;T&gt;.</p> <pre><code>public ActionRepeat(System.TimeSpan RepeatInterval, System.TimeSpan? InitialDelay);\n</code></pre>"},{"location":"reference/stardewui/input/actionrepeat/#parameters","title":"Parameters","text":"<p><code>RepeatInterval</code> TimeSpan The interval between repetitions of the action, while the key is held.</p> <p><code>InitialDelay</code> Nullable&lt;TimeSpan&gt; Initial delay after the first press, before any repetitions are allowed.</p>"},{"location":"reference/stardewui/input/actionrepeat/#fields_1","title":"Fields","text":""},{"location":"reference/stardewui/input/actionrepeat/#continuous","title":"Continuous","text":"<p>Configures an action to repeat continuously, i.e. to run again on every frame as long as the trigger keys are still held.</p> <pre><code>public static readonly StardewUI.Input.ActionRepeat Continuous;\n</code></pre>"},{"location":"reference/stardewui/input/actionrepeat/#field-value","title":"Field Value","text":"<p>ActionRepeat</p>"},{"location":"reference/stardewui/input/actionrepeat/#default","title":"Default","text":"<p>Default repetition setting suitable for most UI scenarios.</p> <pre><code>public static readonly StardewUI.Input.ActionRepeat Default;\n</code></pre>"},{"location":"reference/stardewui/input/actionrepeat/#field-value_1","title":"Field Value","text":"<p>ActionRepeat</p>"},{"location":"reference/stardewui/input/actionrepeat/#remarks","title":"Remarks","text":"<p>Not perfectly consistent (nor intended to be consistent) with vanilla game settings, which are all over the place depending on which key/button is being considered.</p>"},{"location":"reference/stardewui/input/actionrepeat/#none","title":"None","text":"<p>Configures an action to never repeat, no matter how long the trigger keys are held.</p> <pre><code>public static readonly StardewUI.Input.ActionRepeat None;\n</code></pre>"},{"location":"reference/stardewui/input/actionrepeat/#field-value_2","title":"Field Value","text":"<p>ActionRepeat</p>"},{"location":"reference/stardewui/input/actionrepeat/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/input/actionrepeat/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/input/actionrepeat/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/input/actionrepeat/#initialdelay","title":"InitialDelay","text":"<p>Initial delay after the first press, before any repetitions are allowed.</p> <pre><code>public System.TimeSpan? InitialDelay { get; set; }\n</code></pre>"},{"location":"reference/stardewui/input/actionrepeat/#property-value_1","title":"Property Value","text":"<p>Nullable&lt;TimeSpan&gt;</p>"},{"location":"reference/stardewui/input/actionrepeat/#repeatinterval","title":"RepeatInterval","text":"<p>The interval between repetitions of the action, while the key is held.</p> <pre><code>public System.TimeSpan RepeatInterval { get; set; }\n</code></pre>"},{"location":"reference/stardewui/input/actionrepeat/#property-value_2","title":"Property Value","text":"<p>TimeSpan</p>"},{"location":"reference/stardewui/input/actionstate-1/","title":"ActionState&lt;T&gt;","text":""},{"location":"reference/stardewui/input/actionstate-1/#class-actionstatet","title":"Class ActionState&lt;T&gt;","text":""},{"location":"reference/stardewui/input/actionstate-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Input Assembly: StardewUI.dll  </p> <p>Translates raw input to semantic actions.</p> <pre><code>public class ActionState&lt;T&gt;\n</code></pre>"},{"location":"reference/stardewui/input/actionstate-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The semantic action type.</p> <p>Inheritance Object \u21e6 ActionState&lt;T&gt;</p>"},{"location":"reference/stardewui/input/actionstate-1/#members","title":"Members","text":""},{"location":"reference/stardewui/input/actionstate-1/#constructors","title":"Constructors","text":"Name Description ActionState&lt;T&gt;(ActionRepeat, Boolean) Translates raw input to semantic actions."},{"location":"reference/stardewui/input/actionstate-1/#methods","title":"Methods","text":"Name Description Bind(SButton, T, ActionRepeat, Boolean?) Binds an action to a single button. Bind(IReadOnlyList&lt;SButton&gt;, T, ActionRepeat, Boolean) Binds an action to several individual buttons. Bind(Keybind, T, ActionRepeat, Boolean?) Binds an action to a button combination. Bind(IReadOnlyList&lt;Keybind&gt;, T, ActionRepeat, Boolean?) Binds an action to several button combinations. Bind(KeybindList, T, ActionRepeat, Boolean?) Binds an action to all keybinds in a KeybindList. GetControllerBindings(T) Gets all controller bindings associated with a given action. GetCurrentActions() Gets the actions that should be run right now, either because one of the triggering buttons/combinations was just pressed, or because it was held and is due to repeat. GetKeyboardBindings(T) Gets all keyboard bindings associated with a given action."},{"location":"reference/stardewui/input/actionstate-1/#details","title":"Details","text":""},{"location":"reference/stardewui/input/actionstate-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/input/actionstate-1/#actionstatetactionrepeat-bool","title":"ActionState&lt;T&gt;(ActionRepeat, bool)","text":"<p>Translates raw input to semantic actions.</p> <pre><code>public ActionState&lt;T&gt;(StardewUI.Input.ActionRepeat defaultRepeat, bool defaultSuppress);\n</code></pre>"},{"location":"reference/stardewui/input/actionstate-1/#parameters","title":"Parameters","text":"<p><code>defaultRepeat</code> ActionRepeat Default repetition settings for registered actions that do not specify one.</p> <p><code>defaultSuppress</code> Boolean Whether registered actions should, by default, suppress the normal game behavior for any buttons in their active keybinds. Individual registrations can override this setting.</p>"},{"location":"reference/stardewui/input/actionstate-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/input/actionstate-1/#bindsbutton-t-actionrepeat-bool","title":"Bind(SButton, T, ActionRepeat, bool?)","text":"<p>Binds an action to a single button.</p> <pre><code>public StardewUI.Input.ActionState&lt;T&gt; Bind(StardewModdingAPI.SButton button, T action, StardewUI.Input.ActionRepeat repeat, bool? suppress);\n</code></pre>"},{"location":"reference/stardewui/input/actionstate-1/#parameters_1","title":"Parameters","text":"<p><code>button</code> \u00a0 SButton The bound button.</p> <p><code>action</code> \u00a0 T The action to activate.</p> <p><code>repeat</code> ActionRepeat Repeat behavior for this binding, if not using the default setting.</p> <p><code>suppress</code> Nullable&lt;Boolean&gt; Input suppression behavior for this binding, if not using the default setting.</p>"},{"location":"reference/stardewui/input/actionstate-1/#returns","title":"Returns","text":"<p>ActionState&lt;T&gt;</p> <p>The current instance.</p>"},{"location":"reference/stardewui/input/actionstate-1/#bindireadonlylistsbutton-t-actionrepeat-bool","title":"Bind(IReadOnlyList&lt;SButton&gt;, T, ActionRepeat, bool)","text":"<p>Binds an action to several individual buttons.</p> <pre><code>public StardewUI.Input.ActionState&lt;T&gt; Bind(System.Collections.Generic.IReadOnlyList&lt;StardewModdingAPI.SButton&gt; buttons, T action, StardewUI.Input.ActionRepeat repeat, bool suppress);\n</code></pre>"},{"location":"reference/stardewui/input/actionstate-1/#parameters_2","title":"Parameters","text":"<p><code>buttons</code> IReadOnlyList List of buttons which will each trigger the associated <code>action</code>. <p><code>action</code> \u00a0 T The action to activate.</p> <p><code>repeat</code> ActionRepeat Repeat behavior for this binding, if not using the default setting.</p> <p><code>suppress</code> Boolean Input suppression behavior for this binding, if not using the default setting.</p>"},{"location":"reference/stardewui/input/actionstate-1/#returns_1","title":"Returns","text":"<p>ActionState&lt;T&gt;</p> <p>The current instance.</p>"},{"location":"reference/stardewui/input/actionstate-1/#remarks","title":"Remarks","text":"<p>The <code>buttons</code> are not treated as a single keybind; each individual SButton will independently trigger the <code>action</code>.</p>"},{"location":"reference/stardewui/input/actionstate-1/#bindkeybind-t-actionrepeat-bool","title":"Bind(Keybind, T, ActionRepeat, bool?)","text":"<p>Binds an action to a button combination.</p> <pre><code>public StardewUI.Input.ActionState&lt;T&gt; Bind(StardewModdingAPI.Utilities.Keybind keybind, T action, StardewUI.Input.ActionRepeat repeat, bool? suppress);\n</code></pre>"},{"location":"reference/stardewui/input/actionstate-1/#parameters_3","title":"Parameters","text":"<p><code>keybind</code> \u00a0 Keybind Keybind containing buttons that must be simultaneously pressed.</p> <p><code>action</code> \u00a0 T The action to activate.</p> <p><code>repeat</code> ActionRepeat Repeat behavior for this binding, if not using the default setting.</p> <p><code>suppress</code> Nullable&lt;Boolean&gt; Input suppression behavior for this binding, if not using the default setting.</p>"},{"location":"reference/stardewui/input/actionstate-1/#returns_2","title":"Returns","text":"<p>ActionState&lt;T&gt;</p> <p>The current instance.</p>"},{"location":"reference/stardewui/input/actionstate-1/#bindireadonlylistkeybind-t-actionrepeat-bool","title":"Bind(IReadOnlyList&lt;Keybind&gt;, T, ActionRepeat, bool?)","text":"<p>Binds an action to several button combinations.</p> <pre><code>public StardewUI.Input.ActionState&lt;T&gt; Bind(System.Collections.Generic.IReadOnlyList&lt;StardewModdingAPI.Utilities.Keybind&gt; keybinds, T action, StardewUI.Input.ActionRepeat repeat, bool? suppress);\n</code></pre>"},{"location":"reference/stardewui/input/actionstate-1/#parameters_4","title":"Parameters","text":"<p><code>keybinds</code> IReadOnlyList List of keybinds each of whose button combinations will trigger the associated <code>action</code>. <p><code>action</code> \u00a0 T The action to activate.</p> <p><code>repeat</code> ActionRepeat Repeat behavior for this binding, if not using the default setting.</p> <p><code>suppress</code> Nullable&lt;Boolean&gt; Input suppression behavior for this binding, if not using the default setting.</p>"},{"location":"reference/stardewui/input/actionstate-1/#returns_3","title":"Returns","text":"<p>ActionState&lt;T&gt;</p> <p>The current instance.</p>"},{"location":"reference/stardewui/input/actionstate-1/#bindkeybindlist-t-actionrepeat-bool","title":"Bind(KeybindList, T, ActionRepeat, bool?)","text":"<p>Binds an action to all keybinds in a KeybindList.</p> <pre><code>public StardewUI.Input.ActionState&lt;T&gt; Bind(StardewModdingAPI.Utilities.KeybindList keybindList, T action, StardewUI.Input.ActionRepeat repeat, bool? suppress);\n</code></pre>"},{"location":"reference/stardewui/input/actionstate-1/#parameters_5","title":"Parameters","text":"<p><code>keybindList</code> \u00a0 KeybindList List of all keybinds that should trigger the <code>action</code>.</p> <p><code>action</code> \u00a0 T The action to activate.</p> <p><code>repeat</code> ActionRepeat Repeat behavior for this binding, if not using the default setting.</p> <p><code>suppress</code> Nullable&lt;Boolean&gt; Input suppression behavior for this binding, if not using the default setting.</p>"},{"location":"reference/stardewui/input/actionstate-1/#returns_4","title":"Returns","text":"<p>ActionState&lt;T&gt;</p> <p>The current instance.</p>"},{"location":"reference/stardewui/input/actionstate-1/#getcontrollerbindingst","title":"GetControllerBindings(T)","text":"<p>Gets all controller bindings associated with a given action.</p> <pre><code>public System.Collections.Generic.IEnumerable&lt;StardewModdingAPI.Utilities.Keybind&gt; GetControllerBindings(T action);\n</code></pre>"},{"location":"reference/stardewui/input/actionstate-1/#parameters_6","title":"Parameters","text":"<p><code>action</code> \u00a0 T The action to look up.</p>"},{"location":"reference/stardewui/input/actionstate-1/#returns_5","title":"Returns","text":"<p>IEnumerable <p>A sequence of Keybind elements that perform the specified <code>action</code> and use at least one controller button.</p>"},{"location":"reference/stardewui/input/actionstate-1/#getcurrentactions","title":"GetCurrentActions()","text":"<p>Gets the actions that should be run right now, either because one of the triggering buttons/combinations was just pressed, or because it was held and is due to repeat.</p> <pre><code>public System.Collections.Generic.IEnumerable&lt;T&gt; GetCurrentActions();\n</code></pre>"},{"location":"reference/stardewui/input/actionstate-1/#returns_6","title":"Returns","text":"<p>IEnumerable&lt;T&gt;</p> <p>Sequence of actions that should be handled this frame.</p>"},{"location":"reference/stardewui/input/actionstate-1/#remarks_1","title":"Remarks","text":"<p>Current actions reset on every frame regardless of whether the actions were \"handled\". Code that reads from <code>GetCurrentActions</code> should generally do so at the end of an update tick, e.g. in SMAPI's UpdateTicked event.</p>"},{"location":"reference/stardewui/input/actionstate-1/#getkeyboardbindingst","title":"GetKeyboardBindings(T)","text":"<p>Gets all keyboard bindings associated with a given action.</p> <pre><code>public System.Collections.Generic.IEnumerable&lt;StardewModdingAPI.Utilities.Keybind&gt; GetKeyboardBindings(T action);\n</code></pre>"},{"location":"reference/stardewui/input/actionstate-1/#parameters_7","title":"Parameters","text":"<p><code>action</code> \u00a0 T The action to look up.</p>"},{"location":"reference/stardewui/input/actionstate-1/#returns_7","title":"Returns","text":"<p>IEnumerable <p>A sequence of Keybind elements that perform the specified <code>action</code> and use at least one keyboard key.</p>"},{"location":"reference/stardewui/input/buttonaction/","title":"ButtonAction","text":""},{"location":"reference/stardewui/input/buttonaction/#enum-buttonaction","title":"Enum ButtonAction","text":""},{"location":"reference/stardewui/input/buttonaction/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Input Assembly: StardewUI.dll  </p> <p>The actions that a given button can trigger in a UI context. For details see ButtonResolver.</p> <pre><code>public enum ButtonAction\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 ButtonAction</p>"},{"location":"reference/stardewui/input/buttonaction/#fields","title":"Fields","text":"Name Value Description None 0 The button has no standard UI behavior. Primary 1 Used for primary interaction, or \"left click\". Secondary 2 Used for secondary interaction, or \"right click\". Cancel 3 Cancels out of the current menu, overlay, etc."},{"location":"reference/stardewui/input/buttonresolver/","title":"ButtonResolver","text":""},{"location":"reference/stardewui/input/buttonresolver/#class-buttonresolver","title":"Class ButtonResolver","text":""},{"location":"reference/stardewui/input/buttonresolver/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Input Assembly: StardewUI.dll  </p> <p>Helper for resolving button state reported by vanilla menu code.</p> <pre><code>public static class ButtonResolver\n</code></pre> <p>Inheritance Object \u21e6 ButtonResolver</p>"},{"location":"reference/stardewui/input/buttonresolver/#remarks","title":"Remarks","text":"<p>Stardew's menu system is quite obnoxious about trying to \"simplify\" button handling and doesn't provide a lot of escape hatches. In addition, the buttons it considers to be the same are not equivalent to the way normal gameplay operates; for example, gamepad controls use A as the action button which is the same as a right-click when interacting with the game world; however, in menus A is the same as a left-click while X is right click. </p> <p>Going through this class can help identify the correct \"function\" of a button in a UI context as well as identify which real button was actually pressed, the better to work with input suppressions and similar concerns.</p>"},{"location":"reference/stardewui/input/buttonresolver/#members","title":"Members","text":""},{"location":"reference/stardewui/input/buttonresolver/#methods","title":"Methods","text":"Name Description GetActionButtons(ButtonAction) Gets all buttons that can be resolved to a specific action. GetButtonAction(SButton) Determines the action that should be performed by a button. GetPressedButton(SButton) Attempts to determine the actual physically pressed key for a \"representative\" or logical button reported by the underlying menu system that may not actually be down."},{"location":"reference/stardewui/input/buttonresolver/#details","title":"Details","text":""},{"location":"reference/stardewui/input/buttonresolver/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/input/buttonresolver/#getactionbuttonsbuttonaction","title":"GetActionButtons(ButtonAction)","text":"<p>Gets all buttons that can be resolved to a specific action.</p> <pre><code>public static System.Collections.Generic.IEnumerable&lt;StardewModdingAPI.SButton&gt; GetActionButtons(StardewUI.Input.ButtonAction action);\n</code></pre>"},{"location":"reference/stardewui/input/buttonresolver/#parameters","title":"Parameters","text":"<p><code>action</code> ButtonAction The UI action.</p>"},{"location":"reference/stardewui/input/buttonresolver/#returns","title":"Returns","text":"<p>IEnumerable <p>A sequence of SButton elements each of which is considered to perform the specified <code>action</code>.</p>"},{"location":"reference/stardewui/input/buttonresolver/#getbuttonactionsbutton","title":"GetButtonAction(SButton)","text":"<p>Determines the action that should be performed by a button.</p> <pre><code>public static StardewUI.Input.ButtonAction GetButtonAction(StardewModdingAPI.SButton button);\n</code></pre>"},{"location":"reference/stardewui/input/buttonresolver/#parameters_1","title":"Parameters","text":"<p><code>button</code> \u00a0 SButton The action button.</p>"},{"location":"reference/stardewui/input/buttonresolver/#returns_1","title":"Returns","text":"<p>ButtonAction</p> <p>The action for the specified <code>button</code>.</p>"},{"location":"reference/stardewui/input/buttonresolver/#getpressedbuttonsbutton","title":"GetPressedButton(SButton)","text":"<p>Attempts to determine the actual physically pressed key for a \"representative\" or logical button reported by the underlying menu system that may not actually be down.</p> <pre><code>public static StardewModdingAPI.SButton GetPressedButton(StardewModdingAPI.SButton logicalButton);\n</code></pre>"},{"location":"reference/stardewui/input/buttonresolver/#parameters_2","title":"Parameters","text":"<p><code>logicalButton</code> \u00a0 SButton The button that was reported.</p>"},{"location":"reference/stardewui/input/buttonresolver/#returns_2","title":"Returns","text":"<p>SButton</p> <p>A button that performs the same action as <code>logicalButton</code> and is currently pressed; or the original <code>logicalButton</code> if no match can be found.</p>"},{"location":"reference/stardewui/input/focussearchresult/","title":"FocusSearchResult","text":""},{"location":"reference/stardewui/input/focussearchresult/#class-focussearchresult","title":"Class FocusSearchResult","text":""},{"location":"reference/stardewui/input/focussearchresult/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Input Assembly: StardewUI.dll  </p> <p>The result of a FocusSearch(Vector2, Direction). Identifies the specific view/position found, as well as the path to that view from the search root.</p> <pre><code>public record FocusSearchResult : IEquatable&lt;StardewUI.Input.FocusSearchResult&gt;\n</code></pre> <p>Inheritance Object \u21e6 FocusSearchResult</p> <p>Implements IEquatable&lt;FocusSearchResult&gt;</p>"},{"location":"reference/stardewui/input/focussearchresult/#members","title":"Members","text":""},{"location":"reference/stardewui/input/focussearchresult/#constructors","title":"Constructors","text":"Name Description FocusSearchResult(ViewChild, IEnumerable&lt;ViewChild&gt;) The result of a FocusSearch(Vector2, Direction). Identifies the specific view/position found, as well as the path to that view from the search root."},{"location":"reference/stardewui/input/focussearchresult/#properties","title":"Properties","text":"Name Description EqualityContract Path The path from root to Target, in top-down order; each element's Position is relative to the parent, not the search root as <code>Target</code> is. Target The specific view that can/will be focused, with a Position relative to the search root."},{"location":"reference/stardewui/input/focussearchresult/#methods","title":"Methods","text":"Name Description AsChild(IView, Vector2) Returns a transformed FocusSearchResult that adds a view (generally the caller) to the beginning of the Path, and applies its content offset to either the first element of the current Path (if non-empty) or the Target (if the path is empty). Offset(Vector2) Applies a local offset to a search result."},{"location":"reference/stardewui/input/focussearchresult/#details","title":"Details","text":""},{"location":"reference/stardewui/input/focussearchresult/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/input/focussearchresult/#focussearchresultviewchild-ienumerableviewchild","title":"FocusSearchResult(ViewChild, IEnumerable&lt;ViewChild&gt;)","text":"<p>The result of a FocusSearch(Vector2, Direction). Identifies the specific view/position found, as well as the path to that view from the search root.</p> <pre><code>public FocusSearchResult(StardewUI.ViewChild Target, System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; Path);\n</code></pre>"},{"location":"reference/stardewui/input/focussearchresult/#parameters","title":"Parameters","text":"<p><code>Target</code> ViewChild The specific view that can/will be focused, with a Position relative to the search root.</p> <p><code>Path</code> IEnumerable&lt;ViewChild&gt; The path from root to Target, in top-down order; each element's Position is relative to the parent, not the search root as <code>Target</code> is.</p>"},{"location":"reference/stardewui/input/focussearchresult/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/input/focussearchresult/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/input/focussearchresult/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/input/focussearchresult/#path","title":"Path","text":"<p>The path from root to Target, in top-down order; each element's Position is relative to the parent, not the search root as <code>Target</code> is.</p> <pre><code>public System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; Path { get; set; }\n</code></pre>"},{"location":"reference/stardewui/input/focussearchresult/#property-value_1","title":"Property Value","text":"<p>IEnumerable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/input/focussearchresult/#target","title":"Target","text":"<p>The specific view that can/will be focused, with a Position relative to the search root.</p> <pre><code>public StardewUI.ViewChild Target { get; set; }\n</code></pre>"},{"location":"reference/stardewui/input/focussearchresult/#property-value_2","title":"Property Value","text":"<p>ViewChild</p>"},{"location":"reference/stardewui/input/focussearchresult/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/input/focussearchresult/#aschildiview-vector2","title":"AsChild(IView, Vector2)","text":"<p>Returns a transformed FocusSearchResult that adds a view (generally the caller) to the beginning of the Path, and applies its content offset to either the first element of the current Path (if non-empty) or the Target (if the path is empty).</p> <pre><code>public StardewUI.Input.FocusSearchResult AsChild(StardewUI.IView parent, Microsoft.Xna.Framework.Vector2 position);\n</code></pre>"},{"location":"reference/stardewui/input/focussearchresult/#parameters_1","title":"Parameters","text":"<p><code>parent</code> IView The parent that contains the current result.</p> <p><code>position</code> Vector2 The content offset relative to the <code>parent</code>.</p>"},{"location":"reference/stardewui/input/focussearchresult/#returns","title":"Returns","text":"<p>FocusSearchResult</p>"},{"location":"reference/stardewui/input/focussearchresult/#remarks","title":"Remarks","text":"<p>Used to propagate results correctly up the view hierarchy in a focus search. This is called by FocusSearch(Vector2, Direction) and should not be called in overrides of FindFocusableDescendant(Vector2, Direction).</p>"},{"location":"reference/stardewui/input/focussearchresult/#offsetvector2","title":"Offset(Vector2)","text":"<p>Applies a local offset to a search result.</p> <pre><code>public StardewUI.Input.FocusSearchResult Offset(Microsoft.Xna.Framework.Vector2 distance);\n</code></pre>"},{"location":"reference/stardewui/input/focussearchresult/#parameters_2","title":"Parameters","text":"<p><code>distance</code> Vector2 The distance to offset the Target and first element of Path.</p>"},{"location":"reference/stardewui/input/focussearchresult/#returns_1","title":"Returns","text":"<p>FocusSearchResult</p> <p>A new FocusSearchResult with the <code>distance</code> offset applied.</p>"},{"location":"reference/stardewui/input/focussearchresult/#remarks_1","title":"Remarks","text":"<p>Used to propagate the child position into a search result produced by that child. For example, view A is a layout with positioned child view C, which yields a search result targeting view Z in terms of its (C's) local coordinates. Applying the offset will adjust either the first element of the Path, if non-empty, or the Target itself if Path is empty. No other elements of the Path will be modified, as each element is already positioned relative to its parent preceding it in the list.</p>"},{"location":"reference/stardewui/input/icapturetarget/","title":"ICaptureTarget","text":""},{"location":"reference/stardewui/input/icapturetarget/#interface-icapturetarget","title":"Interface ICaptureTarget","text":""},{"location":"reference/stardewui/input/icapturetarget/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Input Assembly: StardewUI.dll  </p> <p>Denotes a view or other UI element that can be the active IKeyboardSubscriber. Allows view hosts to provide deterministic release, e.g. when the mouse is clicked outside the target.</p> <pre><code>public interface ICaptureTarget\n</code></pre>"},{"location":"reference/stardewui/input/icapturetarget/#remarks","title":"Remarks","text":"<p>This is primarily intended to work by checking if the Subscriber implements this interface, and if it's CapturingView belongs to the current click/focus tree. To work correctly, both of these conditions must be met.</p>"},{"location":"reference/stardewui/input/icapturetarget/#members","title":"Members","text":""},{"location":"reference/stardewui/input/icapturetarget/#properties","title":"Properties","text":"Name Description CapturingView The view that initiated the capturing. May be the same object as the ICaptureTarget, or may be the \"owner\" of a hidden TextBox or other IKeyboardSubscriber."},{"location":"reference/stardewui/input/icapturetarget/#methods","title":"Methods","text":"Name Description ReleaseCapture() Stops input capturing from this target. Update(TimeSpan) Runs on every game update tick while capturing."},{"location":"reference/stardewui/input/icapturetarget/#details","title":"Details","text":""},{"location":"reference/stardewui/input/icapturetarget/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/input/icapturetarget/#capturingview","title":"CapturingView","text":"<p>The view that initiated the capturing. May be the same object as the ICaptureTarget, or may be the \"owner\" of a hidden TextBox or other IKeyboardSubscriber.</p> <pre><code>StardewUI.IView CapturingView { get; }\n</code></pre>"},{"location":"reference/stardewui/input/icapturetarget/#property-value","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/input/icapturetarget/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/input/icapturetarget/#releasecapture","title":"ReleaseCapture()","text":"<p>Stops input capturing from this target.</p> <pre><code>void ReleaseCapture();\n</code></pre>"},{"location":"reference/stardewui/input/icapturetarget/#updatetimespan","title":"Update(TimeSpan)","text":"<p>Runs on every game update tick while capturing.</p> <pre><code>void Update(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/input/icapturetarget/#parameters","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan The amount of real time elapsed since the last tick.</p>"},{"location":"reference/stardewui/layout/","title":"StardewUI.Layout","text":""},{"location":"reference/stardewui/layout/#stardewuilayout-namespace","title":"StardewUI.Layout Namespace","text":""},{"location":"reference/stardewui/layout/#classes","title":"Classes","text":"Name Description AlignmentExtensions Common helpers for Alignment. Bounds A bounding rectangle using floating-point dimensions. DirtyTracker&lt;T&gt; Convenience class for tracking properties that have changed, i.e. for layout dirty checking. DirtyTrackingList&lt;T&gt; List wrapper that tracks whether changes have been made. Edges Describes a set of edge dimensions, e.g. for margin or padding. FloatingElement Provides independent layout for an IView relative to its parent. FloatingPosition Describes the position of a FloatingElement. NineGridPlacement Model for content placement along a nine-segment grid, i.e. all possible combinations of horizontal and vertical Alignment. NineGridPlacement.Neighbor Represents an adjacent placement; the result of GetNeighbors(Boolean). OffsettableExtensions Extensions for the IOffsettable&lt;T&gt; interface. OrientationExtensions Helpers for working with Orientation."},{"location":"reference/stardewui/layout/#structs","title":"Structs","text":"Name Description LayoutParameters Layout parameters for an IView. Length Specifies how to calculate the length of a single dimension (width or height)."},{"location":"reference/stardewui/layout/#interfaces","title":"Interfaces","text":"Name Description IOffsettable&lt;T&gt; Provides a method to clone the current instance with an offset applied. IPageable Signals that an IView implements paging controls. ITabbable Signals that an IView implements tab controls."},{"location":"reference/stardewui/layout/#enums","title":"Enums","text":"Name Description Alignment Specifies an alignment (horizontal or vertical) for text or other layout. LengthType Types of length calculation available for a Length. Orientation Available orientation directions for views such as Lane. Visibility Controls the visibility of an IView."},{"location":"reference/stardewui/layout/alignment/","title":"Alignment","text":""},{"location":"reference/stardewui/layout/alignment/#enum-alignment","title":"Enum Alignment","text":""},{"location":"reference/stardewui/layout/alignment/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Specifies an alignment (horizontal or vertical) for text or other layout.</p> <pre><code>public enum Alignment\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 Alignment</p>"},{"location":"reference/stardewui/layout/alignment/#fields","title":"Fields","text":"Name Value Description Start 0 Align to the start of the available space - horizontal left or vertical top. Middle 1 Align to the middle of the available space. End 2 Align to the end of the available space - horizontal right or vertical bottom."},{"location":"reference/stardewui/layout/alignmentextensions/","title":"AlignmentExtensions","text":""},{"location":"reference/stardewui/layout/alignmentextensions/#class-alignmentextensions","title":"Class AlignmentExtensions","text":""},{"location":"reference/stardewui/layout/alignmentextensions/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Common helpers for Alignment.</p> <pre><code>public static class AlignmentExtensions\n</code></pre> <p>Inheritance Object \u21e6 AlignmentExtensions</p>"},{"location":"reference/stardewui/layout/alignmentextensions/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/alignmentextensions/#methods","title":"Methods","text":"Name Description Align(Alignment, Single, Single) Applies an alignment to an axis starting at position 0."},{"location":"reference/stardewui/layout/alignmentextensions/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/alignmentextensions/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/alignmentextensions/#alignalignment-float-float","title":"Align(Alignment, float, float)","text":"<p>Applies an alignment to an axis starting at position 0.</p> <pre><code>public static float Align(StardewUI.Layout.Alignment alignment, float contentLength, float axisLength);\n</code></pre>"},{"location":"reference/stardewui/layout/alignmentextensions/#parameters","title":"Parameters","text":"<p><code>alignment</code> Alignment The alignment type.</p> <p><code>contentLength</code> Single The length (width or height) of the content to align.</p> <p><code>axisLength</code> Single The total space (width or height) available for the content.</p>"},{"location":"reference/stardewui/layout/alignmentextensions/#returns","title":"Returns","text":"<p>Single</p>"},{"location":"reference/stardewui/layout/bounds/","title":"Bounds","text":""},{"location":"reference/stardewui/layout/bounds/#class-bounds","title":"Class Bounds","text":""},{"location":"reference/stardewui/layout/bounds/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>A bounding rectangle using floating-point dimensions.</p> <pre><code>[StardewUI.DuckType]\npublic record Bounds : StardewUI.Layout.IOffsettable&lt;StardewUI.Layout.Bounds&gt;, \n    IEquatable&lt;StardewUI.Layout.Bounds&gt;\n</code></pre> <p>Inheritance Object \u21e6 Bounds</p> <p>Implements IOffsettable&lt;Bounds&gt;, IEquatable&lt;Bounds&gt;</p>"},{"location":"reference/stardewui/layout/bounds/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/bounds/#constructors","title":"Constructors","text":"Name Description Bounds(Vector2, Vector2) A bounding rectangle using floating-point dimensions."},{"location":"reference/stardewui/layout/bounds/#fields","title":"Fields","text":"Name Description Empty Empty bounds, used for invalid results."},{"location":"reference/stardewui/layout/bounds/#properties","title":"Properties","text":"Name Description Bottom The Y value at the bottom edge of the bounding rectangle. EqualityContract Left The X value at the left edge of the bounding rectangle. Position The top-left position. Right The X value at the right edge of the bounding rectangle. Size The width and height. Top The Y value at the top edge of the bounding rectangle."},{"location":"reference/stardewui/layout/bounds/#methods","title":"Methods","text":"Name Description Center() Gets the point at the center of the bounding rectangle. ContainsBounds(Bounds) Checks if an entire bounding rectangle is fully within these bounds. ContainsPoint(Vector2) Checks if a given point is within the bounds. Intersection(Bounds) Computes the intersection of this Bounds with another instance. IntersectsWith(Bounds) Checks if this Bounds intersects with another instance, without computing the intersection. Offset(Vector2) Offsets a Bounds by a given distance. Union(Bounds) Computes the union of this Bounds with another instance."},{"location":"reference/stardewui/layout/bounds/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/bounds/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/layout/bounds/#boundsvector2-vector2","title":"Bounds(Vector2, Vector2)","text":"<p>A bounding rectangle using floating-point dimensions.</p> <pre><code>public Bounds(Microsoft.Xna.Framework.Vector2 Position, Microsoft.Xna.Framework.Vector2 Size);\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#parameters","title":"Parameters","text":"<p><code>Position</code> Vector2 The top-left position.</p> <p><code>Size</code> Vector2 The width and height.</p>"},{"location":"reference/stardewui/layout/bounds/#fields_1","title":"Fields","text":""},{"location":"reference/stardewui/layout/bounds/#empty","title":"Empty","text":"<p>Empty bounds, used for invalid results.</p> <pre><code>public static readonly StardewUI.Layout.Bounds Empty;\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#field-value","title":"Field Value","text":"<p>Bounds</p>"},{"location":"reference/stardewui/layout/bounds/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/layout/bounds/#bottom","title":"Bottom","text":"<p>The Y value at the bottom edge of the bounding rectangle.</p> <pre><code>public float Bottom { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#property-value","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/layout/bounds/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/layout/bounds/#left","title":"Left","text":"<p>The X value at the left edge of the bounding rectangle.</p> <pre><code>public float Left { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#property-value_2","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/layout/bounds/#position","title":"Position","text":"<p>The top-left position.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 Position { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#property-value_3","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/layout/bounds/#right","title":"Right","text":"<p>The X value at the right edge of the bounding rectangle.</p> <pre><code>public float Right { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#property-value_4","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/layout/bounds/#size","title":"Size","text":"<p>The width and height.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 Size { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#property-value_5","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/layout/bounds/#top","title":"Top","text":"<p>The Y value at the top edge of the bounding rectangle.</p> <pre><code>public float Top { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#property-value_6","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/layout/bounds/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/bounds/#center","title":"Center()","text":"<p>Gets the point at the center of the bounding rectangle.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 Center();\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#returns","title":"Returns","text":"<p>Vector2</p>"},{"location":"reference/stardewui/layout/bounds/#containsboundsbounds","title":"ContainsBounds(Bounds)","text":"<p>Checks if an entire bounding rectangle is fully within these bounds.</p> <pre><code>public bool ContainsBounds(StardewUI.Layout.Bounds bounds);\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#parameters_1","title":"Parameters","text":"<p><code>bounds</code> Bounds The other bounds.</p>"},{"location":"reference/stardewui/layout/bounds/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if <code>bounds</code> are a subset of the current instance; <code>false</code> if the two bounds do not overlap or only overlap partially.</p>"},{"location":"reference/stardewui/layout/bounds/#containspointvector2","title":"ContainsPoint(Vector2)","text":"<p>Checks if a given point is within the bounds.</p> <pre><code>public bool ContainsPoint(Microsoft.Xna.Framework.Vector2 point);\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#parameters_2","title":"Parameters","text":"<p><code>point</code> Vector2 The point to check.</p>"},{"location":"reference/stardewui/layout/bounds/#returns_2","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if <code>point</code> is inside these bounds; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/layout/bounds/#intersectionbounds","title":"Intersection(Bounds)","text":"<p>Computes the intersection of this Bounds with another instance.</p> <pre><code>public StardewUI.Layout.Bounds Intersection(StardewUI.Layout.Bounds other);\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#parameters_3","title":"Parameters","text":"<p><code>other</code> Bounds The other bounds to intersect with.</p>"},{"location":"reference/stardewui/layout/bounds/#returns_3","title":"Returns","text":"<p>Bounds</p> <p>A new Bounds whose area is the intersection of this instance and <code>other</code>, or Empty if they do not overlap.</p>"},{"location":"reference/stardewui/layout/bounds/#intersectswithbounds","title":"IntersectsWith(Bounds)","text":"<p>Checks if this Bounds intersects with another instance, without computing the intersection.</p> <pre><code>public bool IntersectsWith(StardewUI.Layout.Bounds other);\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#parameters_4","title":"Parameters","text":"<p><code>other</code> Bounds The other bounds to check for intersection.</p>"},{"location":"reference/stardewui/layout/bounds/#returns_4","title":"Returns","text":"<p>Boolean</p> <p>True if this Bounds and the <code>other</code> bounds have any intersecting area, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/layout/bounds/#offsetvector2","title":"Offset(Vector2)","text":"<p>Offsets a Bounds by a given distance.</p> <pre><code>public StardewUI.Layout.Bounds Offset(Microsoft.Xna.Framework.Vector2 distance);\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#parameters_5","title":"Parameters","text":"<p><code>distance</code> Vector2 The offset distance.</p>"},{"location":"reference/stardewui/layout/bounds/#returns_5","title":"Returns","text":"<p>Bounds</p> <p>A new Bounds with the same size as this instance and a Position offset by the specified <code>distance</code>.</p>"},{"location":"reference/stardewui/layout/bounds/#unionbounds","title":"Union(Bounds)","text":"<p>Computes the union of this Bounds with another instance.</p> <pre><code>public StardewUI.Layout.Bounds Union(StardewUI.Layout.Bounds other);\n</code></pre>"},{"location":"reference/stardewui/layout/bounds/#parameters_6","title":"Parameters","text":"<p><code>other</code> Bounds The other bounds to add to the union.</p>"},{"location":"reference/stardewui/layout/bounds/#returns_6","title":"Returns","text":"<p>Bounds</p> <p>A new Bounds whose set is the union of this instance and <code>other</code>; i.e. is exactly large enough to contain both bounds.</p>"},{"location":"reference/stardewui/layout/dirtytracker-1/","title":"DirtyTracker&lt;T&gt;","text":""},{"location":"reference/stardewui/layout/dirtytracker-1/#class-dirtytrackert","title":"Class DirtyTracker&lt;T&gt;","text":""},{"location":"reference/stardewui/layout/dirtytracker-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Convenience class for tracking properties that have changed, i.e. for layout dirty checking.</p> <pre><code>public class DirtyTracker&lt;T&gt;\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytracker-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> Type of value held by the tracker.</p> <p>Inheritance Object \u21e6 DirtyTracker&lt;T&gt;</p>"},{"location":"reference/stardewui/layout/dirtytracker-1/#remarks","title":"Remarks","text":"<p>Will not flag changes as dirty unless the changed value is different from previous. Requires a correct <code>Equals(Object)</code> implementation for this to work, typically meaning strings, primitives and records.</p>"},{"location":"reference/stardewui/layout/dirtytracker-1/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/dirtytracker-1/#constructors","title":"Constructors","text":"Name Description DirtyTracker&lt;T&gt;(T) Convenience class for tracking properties that have changed, i.e. for layout dirty checking."},{"location":"reference/stardewui/layout/dirtytracker-1/#properties","title":"Properties","text":"Name Description IsDirty Whether or not the value is dirty, i.e. has changed since the last call to ResetDirty(). Value The currently-held value."},{"location":"reference/stardewui/layout/dirtytracker-1/#methods","title":"Methods","text":"Name Description ResetDirty() Resets the dirty flag, so that IsDirty returns <code>false</code> until the Value is changed again. SetIfChanged(T) Updates the tracker with a new value, if it has changed since the last seen value."},{"location":"reference/stardewui/layout/dirtytracker-1/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/dirtytracker-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/layout/dirtytracker-1/#dirtytrackertt","title":"DirtyTracker&lt;T&gt;(T)","text":"<p>Convenience class for tracking properties that have changed, i.e. for layout dirty checking.</p> <pre><code>public DirtyTracker&lt;T&gt;(T initialValue);\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytracker-1/#parameters","title":"Parameters","text":"<p><code>initialValue</code> \u00a0 T Value to initialize with.</p>"},{"location":"reference/stardewui/layout/dirtytracker-1/#remarks_1","title":"Remarks","text":"<p>Will not flag changes as dirty unless the changed value is different from previous. Requires a correct <code>Equals(Object)</code> implementation for this to work, typically meaning strings, primitives and records.</p>"},{"location":"reference/stardewui/layout/dirtytracker-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/layout/dirtytracker-1/#isdirty","title":"IsDirty","text":"<p>Whether or not the value is dirty, i.e. has changed since the last call to ResetDirty().</p> <pre><code>public bool IsDirty { get; private set; }\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytracker-1/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/layout/dirtytracker-1/#value","title":"Value","text":"<p>The currently-held value.</p> <pre><code>public T Value { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytracker-1/#property-value_1","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/layout/dirtytracker-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/dirtytracker-1/#resetdirty","title":"ResetDirty()","text":"<p>Resets the dirty flag, so that IsDirty returns <code>false</code> until the Value is changed again.</p> <pre><code>public void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytracker-1/#setifchangedt","title":"SetIfChanged(T)","text":"<p>Updates the tracker with a new value, if it has changed since the last seen value.</p> <pre><code>public bool SetIfChanged(T value);\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytracker-1/#parameters_1","title":"Parameters","text":"<p><code>value</code> \u00a0 T The new value.</p>"},{"location":"reference/stardewui/layout/dirtytracker-1/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the <code>value</code> was different from the previous Value, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/layout/dirtytracker-1/#remarks_2","title":"Remarks","text":"<p>If this method returns <code>true</code>, then IsDirty will always also be <code>true</code> afterward. However, if it returns <code>false</code> then the dirty state simply remains unchanged, and will only be <code>false</code> if the value was not already dirty from a previous change.</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/","title":"DirtyTrackingList&lt;T&gt;","text":""},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#class-dirtytrackinglistt","title":"Class DirtyTrackingList&lt;T&gt;","text":""},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>List wrapper that tracks whether changes have been made.</p> <pre><code>public class DirtyTrackingList&lt;T&gt; : System.Collections.Generic.IList&lt;T&gt;, \n    System.Collections.Generic.ICollection&lt;T&gt;, \n    System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.IEnumerable, \n    System.Collections.Generic.IReadOnlyList&lt;T&gt;, \n    System.Collections.Generic.IReadOnlyCollection&lt;T&gt;\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The type of elements in the list.</p> <p>Inheritance Object \u21e6 DirtyTrackingList&lt;T&gt;</p> <p>Implements IList&lt;T&gt;, ICollection&lt;T&gt;, IEnumerable&lt;T&gt;, IEnumerable, IReadOnlyList&lt;T&gt;, IReadOnlyCollection&lt;T&gt;</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#constructors","title":"Constructors","text":"Name Description DirtyTrackingList&lt;T&gt;()"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#properties","title":"Properties","text":"Name Description Count IsDirty Whether changes have been made since the last call to ResetDirty(). IsReadOnly Item[int]"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#methods","title":"Methods","text":"Name Description Add(T) Clear() Contains(T) CopyTo(T, Int32) GetEnumerator() IndexOf(T) Insert(Int32, T) Remove(T) RemoveAt(Int32) ResetDirty() Resets the dirty state; IsDirty will return <code>false</code> until another mutation occurs. SetItems(IEnumerable&lt;T&gt;) Replaces the entire list with the specified sequence."},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#dirtytrackinglistt","title":"DirtyTrackingList&lt;T&gt;()","text":"<pre><code>public DirtyTrackingList&lt;T&gt;();\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#count","title":"Count","text":"<pre><code>public int Count { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#isdirty","title":"IsDirty","text":"<p>Whether changes have been made since the last call to ResetDirty().</p> <pre><code>public bool IsDirty { get; private set; }\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#isreadonly","title":"IsReadOnly","text":"<pre><code>public bool IsReadOnly { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#property-value_2","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#itemint","title":"Item[int]","text":"<pre><code>public T Item[int] { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#property-value_3","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#addt","title":"Add(T)","text":"<pre><code>public void Add(T item);\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#parameters","title":"Parameters","text":"<p><code>item</code> \u00a0 T</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#clear","title":"Clear()","text":"<pre><code>public void Clear();\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#containst","title":"Contains(T)","text":"<pre><code>public bool Contains(T item);\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#parameters_1","title":"Parameters","text":"<p><code>item</code> \u00a0 T</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#returns","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#copytot-int","title":"CopyTo(T, int)","text":"<pre><code>public void CopyTo(T array, int arrayIndex);\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#parameters_2","title":"Parameters","text":"<p><code>array</code> <code>T</code></p> <p><code>arrayIndex</code> Int32</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#getenumerator","title":"GetEnumerator()","text":"<pre><code>public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator();\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#returns_1","title":"Returns","text":"<p>IEnumerator&lt;T&gt;</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#indexoft","title":"IndexOf(T)","text":"<pre><code>public int IndexOf(T item);\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#parameters_3","title":"Parameters","text":"<p><code>item</code> \u00a0 T</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#insertint-t","title":"Insert(int, T)","text":"<pre><code>public void Insert(int index, T item);\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#parameters_4","title":"Parameters","text":"<p><code>index</code> Int32</p> <p><code>item</code> \u00a0 T</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#removet","title":"Remove(T)","text":"<pre><code>public bool Remove(T item);\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#parameters_5","title":"Parameters","text":"<p><code>item</code> \u00a0 T</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#removeatint","title":"RemoveAt(int)","text":"<pre><code>public void RemoveAt(int index);\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#parameters_6","title":"Parameters","text":"<p><code>index</code> Int32</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#resetdirty","title":"ResetDirty()","text":"<p>Resets the dirty state; IsDirty will return <code>false</code> until another mutation occurs.</p> <pre><code>public void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#setitemsienumerablet","title":"SetItems(IEnumerable&lt;T&gt;)","text":"<p>Replaces the entire list with the specified sequence.</p> <pre><code>public bool SetItems(System.Collections.Generic.IEnumerable&lt;T&gt; items);\n</code></pre>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#parameters_7","title":"Parameters","text":"<p><code>items</code> IEnumerable&lt;T&gt; The new list items.</p>"},{"location":"reference/stardewui/layout/dirtytrackinglist-1/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/layout/edges/","title":"Edges","text":""},{"location":"reference/stardewui/layout/edges/#class-edges","title":"Class Edges","text":""},{"location":"reference/stardewui/layout/edges/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Describes a set of edge dimensions, e.g. for margin or padding.</p> <pre><code>[StardewUI.DuckType]\npublic record Edges : IEquatable&lt;StardewUI.Layout.Edges&gt;\n</code></pre> <p>Inheritance Object \u21e6 Edges</p> <p>Implements IEquatable&lt;Edges&gt;</p>"},{"location":"reference/stardewui/layout/edges/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/edges/#constructors","title":"Constructors","text":"Name Description Edges(Int32, Int32, Int32, Int32) Describes a set of edge dimensions, e.g. for margin or padding. Edges(Int32) Initializes a new Edges with all edges set to the same value. Edges(Int32, Int32) Initialies a new Edges with symmetrical horizontal and vertical values."},{"location":"reference/stardewui/layout/edges/#fields","title":"Fields","text":"Name Description NONE An Edges instance with all edges set to zero."},{"location":"reference/stardewui/layout/edges/#properties","title":"Properties","text":"Name Description Bottom The bottom edge. EqualityContract Horizontal Gets the total value for all horizontal edges (Left + Right). Left The left edge. Right The right edge. Top The top edge. Total The total size occupied by all edges. Vertical Gets the total value for all vertical edges (Top + Bottom)."},{"location":"reference/stardewui/layout/edges/#methods","title":"Methods","text":"Name Description Equals(Edges) GetHashCode() (Overrides Object.<code>GetHashCode()</code>) HorizontalOnly() Gets a copy of this instance with only the horizontal edges set (vertical edges zeroed out). Parse(string) Parses an Edges value from a comma-separated string representation. Rotate(SimpleRotation) Rotates the edges, transposing the individual edge values. ToString() (Overrides Object.<code>ToString()</code>) VerticalOnly() Gets a copy of this instance with only the vertical edges set (horizontal edges zeroed out)."},{"location":"reference/stardewui/layout/edges/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/edges/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/layout/edges/#edgesint-int-int-int","title":"Edges(int, int, int, int)","text":"<p>Describes a set of edge dimensions, e.g. for margin or padding.</p> <pre><code>public Edges(int Left, int Top, int Right, int Bottom);\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#parameters","title":"Parameters","text":"<p><code>Left</code> Int32 The left edge.</p> <p><code>Top</code> Int32 The top edge.</p> <p><code>Right</code> Int32 The right edge.</p> <p><code>Bottom</code> Int32 The bottom edge.</p>"},{"location":"reference/stardewui/layout/edges/#edgesint","title":"Edges(int)","text":"<p>Initializes a new Edges with all edges set to the same value.</p> <pre><code>public Edges(int all);\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#parameters_1","title":"Parameters","text":"<p><code>all</code> Int32 Common value for all edges.</p>"},{"location":"reference/stardewui/layout/edges/#edgesint-int","title":"Edges(int, int)","text":"<p>Initialies a new Edges with symmetrical horizontal and vertical values.</p> <pre><code>public Edges(int horizontal, int vertical);\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#parameters_2","title":"Parameters","text":"<p><code>horizontal</code> Int32 Common value for the Left and Right edges.</p> <p><code>vertical</code> Int32 Common value for the Top and Bottom edges.</p>"},{"location":"reference/stardewui/layout/edges/#fields_1","title":"Fields","text":""},{"location":"reference/stardewui/layout/edges/#none","title":"NONE","text":"<p>An Edges instance with all edges set to zero.</p> <pre><code>public static readonly StardewUI.Layout.Edges NONE;\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#field-value","title":"Field Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/layout/edges/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/layout/edges/#bottom","title":"Bottom","text":"<p>The bottom edge.</p> <pre><code>public int Bottom { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/layout/edges/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/layout/edges/#horizontal","title":"Horizontal","text":"<p>Gets the total value for all horizontal edges (Left + Right).</p> <pre><code>public int Horizontal { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#property-value_2","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/layout/edges/#left","title":"Left","text":"<p>The left edge.</p> <pre><code>public int Left { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#property-value_3","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/layout/edges/#right","title":"Right","text":"<p>The right edge.</p> <pre><code>public int Right { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#property-value_4","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/layout/edges/#top","title":"Top","text":"<p>The top edge.</p> <pre><code>public int Top { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#property-value_5","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/layout/edges/#total","title":"Total","text":"<p>The total size occupied by all edges.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 Total { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#property-value_6","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/layout/edges/#vertical","title":"Vertical","text":"<p>Gets the total value for all vertical edges (Top + Bottom).</p> <pre><code>public int Vertical { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#property-value_7","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/layout/edges/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/edges/#equalsedges","title":"Equals(Edges)","text":"<pre><code>public virtual bool Equals(StardewUI.Layout.Edges other);\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#parameters_3","title":"Parameters","text":"<p><code>other</code> Edges</p>"},{"location":"reference/stardewui/layout/edges/#returns","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/layout/edges/#remarks","title":"Remarks","text":"<p>Overrides the default implementation to avoid using reflection on every frame during dirty checks.</p>"},{"location":"reference/stardewui/layout/edges/#gethashcode","title":"GetHashCode()","text":"<pre><code>public override int GetHashCode();\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#returns_1","title":"Returns","text":"<p>Int32</p>"},{"location":"reference/stardewui/layout/edges/#horizontalonly","title":"HorizontalOnly()","text":"<p>Gets a copy of this instance with only the horizontal edges set (vertical edges zeroed out).</p> <pre><code>public StardewUI.Layout.Edges HorizontalOnly();\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#returns_2","title":"Returns","text":"<p>Edges</p>"},{"location":"reference/stardewui/layout/edges/#parsestring","title":"Parse(string)","text":"<p>Parses an Edges value from a comma-separated string representation.</p> <pre><code>public static StardewUI.Layout.Edges Parse(string value);\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#parameters_4","title":"Parameters","text":"<p><code>value</code> string The formatted edges to parse.</p>"},{"location":"reference/stardewui/layout/edges/#returns_3","title":"Returns","text":"<p>Edges</p> <p>The parsed Edges.</p>"},{"location":"reference/stardewui/layout/edges/#remarks_1","title":"Remarks","text":"<p>The behavior depends on the number of comma-separated tokens in the string, equivalent to the constructor overload with that number of parameters: </p> <ul> <li>A single value will give all edges the same length</li> <li>Two values will set the horizontal (left/right) and vertical (top/bottom) lengths</li> <li>Four values will set each length individually</li> <li>Any other format will throw FormatException.</li> </ul>"},{"location":"reference/stardewui/layout/edges/#rotatesimplerotation","title":"Rotate(SimpleRotation)","text":"<p>Rotates the edges, transposing the individual edge values.</p> <pre><code>public StardewUI.Layout.Edges Rotate(StardewUI.Graphics.SimpleRotation rotation);\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#parameters_5","title":"Parameters","text":"<p><code>rotation</code> SimpleRotation The rotation type (angle).</p>"},{"location":"reference/stardewui/layout/edges/#returns_4","title":"Returns","text":"<p>Edges</p> <p>A rotated copy of this Edges instance.</p>"},{"location":"reference/stardewui/layout/edges/#tostring","title":"ToString()","text":"<pre><code>public override string ToString();\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#returns_5","title":"Returns","text":"<p>string</p>"},{"location":"reference/stardewui/layout/edges/#verticalonly","title":"VerticalOnly()","text":"<p>Gets a copy of this instance with only the vertical edges set (horizontal edges zeroed out).</p> <pre><code>public StardewUI.Layout.Edges VerticalOnly();\n</code></pre>"},{"location":"reference/stardewui/layout/edges/#returns_6","title":"Returns","text":"<p>Edges</p>"},{"location":"reference/stardewui/layout/floatingelement/","title":"FloatingElement","text":""},{"location":"reference/stardewui/layout/floatingelement/#class-floatingelement","title":"Class FloatingElement","text":""},{"location":"reference/stardewui/layout/floatingelement/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Provides independent layout for an IView relative to its parent.</p> <pre><code>public class FloatingElement\n</code></pre> <p>Inheritance Object \u21e6 FloatingElement</p>"},{"location":"reference/stardewui/layout/floatingelement/#remarks","title":"Remarks","text":"<p>Floating elements do not participate in the normal layout (Measure(Vector2)) of the view that owns them; they are excluded entirely from the flow, and then provided with their own measurement and position using the final bounds of the parent (i.e. those that result from its non-floating elements). </p> <p>This is primarily useful for annotations, callouts, or elements that are intentionally drawn outside their logical container such as scrollbars or sidebars. Floating views can receive focus and clicks, but do not actually capture the cursor like an Overlay would, and therefore shouldn't be used for modal UI. </p> <p>In general it is preferred to use standard layout controls like Lane over floating elements, but there are specific cases that justify floats, such as the aforementioned scrollbar which should display \"outside\" the container regardless of how nested the container itself is - i.e. the float must \"break out\" of the normal flow.</p>"},{"location":"reference/stardewui/layout/floatingelement/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/floatingelement/#constructors","title":"Constructors","text":"Name Description FloatingElement(IView, FloatingPosition) Provides independent layout for an IView relative to its parent."},{"location":"reference/stardewui/layout/floatingelement/#properties","title":"Properties","text":"Name Description Position The element's defined position. View The view to display within this element."},{"location":"reference/stardewui/layout/floatingelement/#methods","title":"Methods","text":"Name Description AsViewChild() Creates a ViewChild with the floating element's view and current position. Draw(ISpriteBatch) Draws the element at its current position. MeasureAndPosition(View, Boolean) Measures the view's content and repositions the entire floating element if necessary."},{"location":"reference/stardewui/layout/floatingelement/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/floatingelement/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/layout/floatingelement/#floatingelementiview-floatingposition","title":"FloatingElement(IView, FloatingPosition)","text":"<p>Provides independent layout for an IView relative to its parent.</p> <pre><code>public FloatingElement(StardewUI.IView view, StardewUI.Layout.FloatingPosition position);\n</code></pre>"},{"location":"reference/stardewui/layout/floatingelement/#parameters","title":"Parameters","text":"<p><code>view</code> IView The floating view to display/interact with.</p> <p><code>position</code> FloatingPosition Specifies how to position the <code>view</code> relative to the parent and its own measured size.</p>"},{"location":"reference/stardewui/layout/floatingelement/#remarks_1","title":"Remarks","text":"<p>Floating elements do not participate in the normal layout (Measure(Vector2)) of the view that owns them; they are excluded entirely from the flow, and then provided with their own measurement and position using the final bounds of the parent (i.e. those that result from its non-floating elements). </p> <p>This is primarily useful for annotations, callouts, or elements that are intentionally drawn outside their logical container such as scrollbars or sidebars. Floating views can receive focus and clicks, but do not actually capture the cursor like an Overlay would, and therefore shouldn't be used for modal UI. </p> <p>In general it is preferred to use standard layout controls like Lane over floating elements, but there are specific cases that justify floats, such as the aforementioned scrollbar which should display \"outside\" the container regardless of how nested the container itself is - i.e. the float must \"break out\" of the normal flow.</p>"},{"location":"reference/stardewui/layout/floatingelement/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/layout/floatingelement/#position","title":"Position","text":"<p>The element's defined position.</p> <pre><code>public StardewUI.Layout.FloatingPosition Position { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/floatingelement/#property-value","title":"Property Value","text":"<p>FloatingPosition</p>"},{"location":"reference/stardewui/layout/floatingelement/#view","title":"View","text":"<p>The view to display within this element.</p> <pre><code>public StardewUI.IView View { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/floatingelement/#property-value_1","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/layout/floatingelement/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/floatingelement/#asviewchild","title":"AsViewChild()","text":"<p>Creates a ViewChild with the floating element's view and current position.</p> <pre><code>public StardewUI.ViewChild AsViewChild();\n</code></pre>"},{"location":"reference/stardewui/layout/floatingelement/#returns","title":"Returns","text":"<p>ViewChild</p> <p>The current element represented as a ViewChild.</p>"},{"location":"reference/stardewui/layout/floatingelement/#remarks_2","title":"Remarks","text":"<p>The result can generally be used as if it were any other non-floating element, e.g. for dispatching clicks, focus searches and other events.</p>"},{"location":"reference/stardewui/layout/floatingelement/#drawispritebatch","title":"Draw(ISpriteBatch)","text":"<p>Draws the element at its current position.</p> <pre><code>public void Draw(StardewUI.Graphics.ISpriteBatch spriteBatch);\n</code></pre>"},{"location":"reference/stardewui/layout/floatingelement/#parameters_1","title":"Parameters","text":"<p><code>spriteBatch</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/layout/floatingelement/#measureandpositionview-bool","title":"MeasureAndPosition(View, bool)","text":"<p>Measures the view's content and repositions the entire floating element if necessary.</p> <pre><code>public void MeasureAndPosition(StardewUI.View parentView, bool wasParentDirty);\n</code></pre>"},{"location":"reference/stardewui/layout/floatingelement/#parameters_2","title":"Parameters","text":"<p><code>parentView</code> View The view whose FloatingElements this element belongs to. Required for repositioning when the layout has changed.</p> <p><code>wasParentDirty</code> Boolean Whether this measurement is being done because the parent's layout already changed and therefore a reposition is always required (<code>true</code>), or whether to reposition only if the floating element's internal layout has changed (<code>false</code>).</p>"},{"location":"reference/stardewui/layout/floatingposition/","title":"FloatingPosition","text":""},{"location":"reference/stardewui/layout/floatingposition/#class-floatingposition","title":"Class FloatingPosition","text":""},{"location":"reference/stardewui/layout/floatingposition/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Describes the position of a FloatingElement.</p> <pre><code>[StardewUI.DuckType]\npublic class FloatingPosition\n</code></pre> <p>Inheritance Object \u21e6 FloatingPosition</p>"},{"location":"reference/stardewui/layout/floatingposition/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/floatingposition/#constructors","title":"Constructors","text":"Name Description FloatingPosition(Func&lt;Vector2, Vector2, Vector2&gt;) Describes the position of a FloatingElement."},{"location":"reference/stardewui/layout/floatingposition/#fields","title":"Fields","text":"Name Description AboveParent Positions the floating element immediately above the parent view, so that its bottom edge is flush with the parent's top edge. AfterParent Positions the floating element immediately to the right of (after) the parent view, so that its left edge is flush with the parent's right edge. BeforeParent Positions the floating element immediately to the left of (before) the parent view, so that its right edge is flush with the parent's left edge. BelowParent Positions the floating element immediately below the parent view, so that its top edge is flush with the parent's bottom edge."},{"location":"reference/stardewui/layout/floatingposition/#methods","title":"Methods","text":"Name Description GetOffset(IView, View) Calculates the final position of the floating view."},{"location":"reference/stardewui/layout/floatingposition/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/floatingposition/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/layout/floatingposition/#floatingpositionfuncvector2-vector2-vector2","title":"FloatingPosition(Func&lt;Vector2, Vector2, Vector2&gt;)","text":"<p>Describes the position of a FloatingElement.</p> <pre><code>public FloatingPosition(Func&lt;Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2&gt; offsetSelector);\n</code></pre>"},{"location":"reference/stardewui/layout/floatingposition/#parameters","title":"Parameters","text":"<p><code>offsetSelector</code> Func&lt;Vector2, Vector2, Vector2&gt; Calculates the position offset (relative to the parent) of the floating view. Takes the measured floating view size, and then the parent size, as arguments.</p>"},{"location":"reference/stardewui/layout/floatingposition/#fields_1","title":"Fields","text":""},{"location":"reference/stardewui/layout/floatingposition/#aboveparent","title":"AboveParent","text":"<p>Positions the floating element immediately above the parent view, so that its bottom edge is flush with the parent's top edge.</p> <pre><code>public static readonly StardewUI.Layout.FloatingPosition AboveParent;\n</code></pre>"},{"location":"reference/stardewui/layout/floatingposition/#field-value","title":"Field Value","text":"<p>FloatingPosition</p>"},{"location":"reference/stardewui/layout/floatingposition/#afterparent","title":"AfterParent","text":"<p>Positions the floating element immediately to the right of (after) the parent view, so that its left edge is flush with the parent's right edge.</p> <pre><code>public static readonly StardewUI.Layout.FloatingPosition AfterParent;\n</code></pre>"},{"location":"reference/stardewui/layout/floatingposition/#field-value_1","title":"Field Value","text":"<p>FloatingPosition</p>"},{"location":"reference/stardewui/layout/floatingposition/#beforeparent","title":"BeforeParent","text":"<p>Positions the floating element immediately to the left of (before) the parent view, so that its right edge is flush with the parent's left edge.</p> <pre><code>public static readonly StardewUI.Layout.FloatingPosition BeforeParent;\n</code></pre>"},{"location":"reference/stardewui/layout/floatingposition/#field-value_2","title":"Field Value","text":"<p>FloatingPosition</p>"},{"location":"reference/stardewui/layout/floatingposition/#belowparent","title":"BelowParent","text":"<p>Positions the floating element immediately below the parent view, so that its top edge is flush with the parent's bottom edge.</p> <pre><code>public static readonly StardewUI.Layout.FloatingPosition BelowParent;\n</code></pre>"},{"location":"reference/stardewui/layout/floatingposition/#field-value_3","title":"Field Value","text":"<p>FloatingPosition</p>"},{"location":"reference/stardewui/layout/floatingposition/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/floatingposition/#getoffsetiview-view","title":"GetOffset(IView, View)","text":"<p>Calculates the final position of the floating view.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 GetOffset(StardewUI.IView view, StardewUI.View parentView);\n</code></pre>"},{"location":"reference/stardewui/layout/floatingposition/#parameters_1","title":"Parameters","text":"<p><code>view</code> IView The floating view to position.</p> <p><code>parentView</code> View The parent relative to which the floating view is being positioned.</p>"},{"location":"reference/stardewui/layout/floatingposition/#returns","title":"Returns","text":"<p>Vector2</p> <p>The final position where the <code>view</code> should be drawn.</p>"},{"location":"reference/stardewui/layout/ioffsettable-1/","title":"IOffsettable&lt;T&gt;","text":""},{"location":"reference/stardewui/layout/ioffsettable-1/#interface-ioffsettablet","title":"Interface IOffsettable&lt;T&gt;","text":""},{"location":"reference/stardewui/layout/ioffsettable-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Provides a method to clone the current instance with an offset applied.</p> <pre><code>public interface IOffsettable&lt;T&gt;\n</code></pre>"},{"location":"reference/stardewui/layout/ioffsettable-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The output type; should be the same as the implementing class.</p>"},{"location":"reference/stardewui/layout/ioffsettable-1/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/ioffsettable-1/#methods","title":"Methods","text":"Name Description Offset(Vector2) Creates a clone of this instance with an offset applied to its position."},{"location":"reference/stardewui/layout/ioffsettable-1/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/ioffsettable-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/ioffsettable-1/#offsetvector2","title":"Offset(Vector2)","text":"<p>Creates a clone of this instance with an offset applied to its position.</p> <pre><code>T Offset(Microsoft.Xna.Framework.Vector2 distance);\n</code></pre>"},{"location":"reference/stardewui/layout/ioffsettable-1/#parameters","title":"Parameters","text":"<p><code>distance</code> Vector2 The offset distance.</p>"},{"location":"reference/stardewui/layout/ioffsettable-1/#returns","title":"Returns","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/layout/ipageable/","title":"IPageable","text":""},{"location":"reference/stardewui/layout/ipageable/#interface-ipageable","title":"Interface IPageable","text":""},{"location":"reference/stardewui/layout/ipageable/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Signals that an IView implements paging controls.</p> <pre><code>public interface IPageable\n</code></pre>"},{"location":"reference/stardewui/layout/ipageable/#remarks","title":"Remarks","text":"<p>Paging controls are a gamepad function. While next/previous arrows are usually clickable and have their own navigation logic, controller users generally should be able to use the shoulder buttons to navigate pages, which this interface enables.</p>"},{"location":"reference/stardewui/layout/ipageable/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/ipageable/#methods","title":"Methods","text":"Name Description NextPage() Advance to the next page, within the current tab. PreviousPage() Advance to the previous page, within the current tab."},{"location":"reference/stardewui/layout/ipageable/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/ipageable/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/ipageable/#nextpage","title":"NextPage()","text":"<p>Advance to the next page, within the current tab.</p> <pre><code>bool NextPage();\n</code></pre>"},{"location":"reference/stardewui/layout/ipageable/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if any navigation was performed; <code>false</code> if there are no more pages.</p>"},{"location":"reference/stardewui/layout/ipageable/#previouspage","title":"PreviousPage()","text":"<p>Advance to the previous page, within the current tab.</p> <pre><code>bool PreviousPage();\n</code></pre>"},{"location":"reference/stardewui/layout/ipageable/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if any navigation was performed; <code>false</code> if there are no more pages.</p>"},{"location":"reference/stardewui/layout/itabbable/","title":"ITabbable","text":""},{"location":"reference/stardewui/layout/itabbable/#interface-itabbable","title":"Interface ITabbable","text":""},{"location":"reference/stardewui/layout/itabbable/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Signals that an IView implements tab controls.</p> <pre><code>public interface ITabbable\n</code></pre>"},{"location":"reference/stardewui/layout/itabbable/#remarks","title":"Remarks","text":"<p>Tab controls are a gamepad function. While tabs are usually clickable and have their own navigation logic, controller users should be able to use the trigger buttons to navigate tabs, which this interface enables.</p>"},{"location":"reference/stardewui/layout/itabbable/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/itabbable/#methods","title":"Methods","text":"Name Description NextTab() Advance to the next top-level tab. PreviousTab() Advance to the previous top-level tab."},{"location":"reference/stardewui/layout/itabbable/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/itabbable/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/itabbable/#nexttab","title":"NextTab()","text":"<p>Advance to the next top-level tab.</p> <pre><code>bool NextTab();\n</code></pre>"},{"location":"reference/stardewui/layout/itabbable/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if any navigation was performed; <code>false</code> if there are no more tabs.</p>"},{"location":"reference/stardewui/layout/itabbable/#previoustab","title":"PreviousTab()","text":"<p>Advance to the previous top-level tab.</p> <pre><code>bool PreviousTab();\n</code></pre>"},{"location":"reference/stardewui/layout/itabbable/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if any navigation was performed; <code>false</code> if there are no more tabs.</p>"},{"location":"reference/stardewui/layout/layoutparameters/","title":"LayoutParameters","text":""},{"location":"reference/stardewui/layout/layoutparameters/#struct-layoutparameters","title":"Struct LayoutParameters","text":""},{"location":"reference/stardewui/layout/layoutparameters/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Layout parameters for an IView.</p> <pre><code>[StardewUI.DuckType]\npublic readonly struct LayoutParameters : \n    IEquatable&lt;StardewUI.Layout.LayoutParameters&gt;\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 LayoutParameters</p> <p>Implements IEquatable&lt;LayoutParameters&gt;</p>"},{"location":"reference/stardewui/layout/layoutparameters/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/layoutparameters/#constructors","title":"Constructors","text":"Name Description LayoutParameters() Initializes a new LayoutParameters with default layout settings."},{"location":"reference/stardewui/layout/layoutparameters/#properties","title":"Properties","text":"Name Description Height The vertical height/layout method. MaxHeight Maximum height allowed. MaxWidth Maximum width allowed. MinHeight Minimum height to occupy. MinWidth Minimum width to occupy. Width The horizontal width/layout method."},{"location":"reference/stardewui/layout/layoutparameters/#methods","title":"Methods","text":"Name Description AutoRow() Creates a LayoutParameters that stretches to the available horizontal width, fits the content height, and has no other constraints. Typically used for rows in a vertical layout. Equals(Object) (Overrides Object.<code>Equals(Object)</code>) Equals(LayoutParameters) Fill() Creates a LayoutParameters that stretches to the full available width and height. FitContent() Creates a LayoutParameters that tracks content width and height, and has no other constraints. FixedSize(Point) Creates a LayoutParameters with fixed dimensions, and no other constraints. FixedSize(Single, Single) Creates a LayoutParameters with fixed dimensions, and no other constraints. GetHashCode() (Overrides Object.<code>GetHashCode()</code>) GetLimits(Vector2) Determines the effective content size limits. Resolve(Vector2, Func&lt;Vector2&gt;) Resolves the actual size for the current LayoutParameters. ToString() (Overrides Object.<code>ToString()</code>)"},{"location":"reference/stardewui/layout/layoutparameters/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/layoutparameters/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/layout/layoutparameters/#layoutparameters","title":"LayoutParameters()","text":"<p>Initializes a new LayoutParameters with default layout settings.</p> <pre><code>public LayoutParameters();\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/layout/layoutparameters/#height","title":"Height","text":"<p>The vertical height/layout method.</p> <pre><code>public StardewUI.Layout.Length Height { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#property-value","title":"Property Value","text":"<p>Length</p>"},{"location":"reference/stardewui/layout/layoutparameters/#maxheight","title":"MaxHeight","text":"<p>Maximum height allowed.</p> <pre><code>public float? MaxHeight { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#property-value_1","title":"Property Value","text":"<p>Nullable&lt;Single&gt;</p>"},{"location":"reference/stardewui/layout/layoutparameters/#remarks","title":"Remarks","text":"<p>If specified, the Y component of a view's content size should never exceed this value, regardless of how the Height is configured.</p>"},{"location":"reference/stardewui/layout/layoutparameters/#maxwidth","title":"MaxWidth","text":"<p>Maximum width allowed.</p> <pre><code>public float? MaxWidth { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#property-value_2","title":"Property Value","text":"<p>Nullable&lt;Single&gt;</p>"},{"location":"reference/stardewui/layout/layoutparameters/#remarks_1","title":"Remarks","text":"<p>If specified, the X component of a view's content size should never exceed this value, regardless of how the Width is configured.</p>"},{"location":"reference/stardewui/layout/layoutparameters/#minheight","title":"MinHeight","text":"<p>Minimum height to occupy.</p> <pre><code>public float? MinHeight { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#property-value_3","title":"Property Value","text":"<p>Nullable&lt;Single&gt;</p>"},{"location":"reference/stardewui/layout/layoutparameters/#remarks_2","title":"Remarks","text":"<p>If specified, the Y component of a view's content size will always be at least this value, regardless of how the Height is configured. Typically, minimum sizes are only used with Content if there might be very little content. If a MaxHeight is also specified and is smaller than the <code>MinHeight</code>, then <code>MaxHeight</code> takes precedence.</p>"},{"location":"reference/stardewui/layout/layoutparameters/#minwidth","title":"MinWidth","text":"<p>Minimum width to occupy.</p> <pre><code>public float? MinWidth { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#property-value_4","title":"Property Value","text":"<p>Nullable&lt;Single&gt;</p>"},{"location":"reference/stardewui/layout/layoutparameters/#remarks_3","title":"Remarks","text":"<p>If specified, the X component of a view's content size will always be at least this value, regardless of how the Width is configured. Typically, minimum sizes are only used with Content if there might be very little content. If a MaxWidth is also specified and is smaller than the <code>MinWidth</code>, then <code>MaxWidth</code> takes precedence.</p>"},{"location":"reference/stardewui/layout/layoutparameters/#width","title":"Width","text":"<p>The horizontal width/layout method.</p> <pre><code>public StardewUI.Layout.Length Width { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#property-value_5","title":"Property Value","text":"<p>Length</p>"},{"location":"reference/stardewui/layout/layoutparameters/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/layoutparameters/#autorow","title":"AutoRow()","text":"<p>Creates a LayoutParameters that stretches to the available horizontal width, fits the content height, and has no other constraints. Typically used for rows in a vertical layout.</p> <pre><code>public static StardewUI.Layout.LayoutParameters AutoRow();\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#returns","title":"Returns","text":"<p>LayoutParameters</p>"},{"location":"reference/stardewui/layout/layoutparameters/#equalsobject","title":"Equals(Object)","text":"<pre><code>public override bool Equals(System.Object obj);\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#parameters","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"reference/stardewui/layout/layoutparameters/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/layout/layoutparameters/#remarks_4","title":"Remarks","text":"<p>Overrides the default implementation to avoid using reflection on every frame during dirty checks.</p>"},{"location":"reference/stardewui/layout/layoutparameters/#equalslayoutparameters","title":"Equals(LayoutParameters)","text":"<pre><code>public bool Equals(StardewUI.Layout.LayoutParameters other);\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#parameters_1","title":"Parameters","text":"<p><code>other</code> LayoutParameters</p>"},{"location":"reference/stardewui/layout/layoutparameters/#returns_2","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/layout/layoutparameters/#fill","title":"Fill()","text":"<p>Creates a LayoutParameters that stretches to the full available width and height.</p> <pre><code>public static StardewUI.Layout.LayoutParameters Fill();\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#returns_3","title":"Returns","text":"<p>LayoutParameters</p>"},{"location":"reference/stardewui/layout/layoutparameters/#fitcontent","title":"FitContent()","text":"<p>Creates a LayoutParameters that tracks content width and height, and has no other constraints.</p> <pre><code>public static StardewUI.Layout.LayoutParameters FitContent();\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#returns_4","title":"Returns","text":"<p>LayoutParameters</p>"},{"location":"reference/stardewui/layout/layoutparameters/#fixedsizepoint","title":"FixedSize(Point)","text":"<p>Creates a LayoutParameters with fixed dimensions, and no other constraints.</p> <pre><code>public static StardewUI.Layout.LayoutParameters FixedSize(Microsoft.Xna.Framework.Point size);\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#parameters_2","title":"Parameters","text":"<p><code>size</code> Point The layout size, in pixels.</p>"},{"location":"reference/stardewui/layout/layoutparameters/#returns_5","title":"Returns","text":"<p>LayoutParameters</p>"},{"location":"reference/stardewui/layout/layoutparameters/#fixedsizefloat-float","title":"FixedSize(float, float)","text":"<p>Creates a LayoutParameters with fixed dimensions, and no other constraints.</p> <pre><code>public static StardewUI.Layout.LayoutParameters FixedSize(float width, float height);\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#parameters_3","title":"Parameters","text":"<p><code>width</code> Single The layout width, in pixels.</p> <p><code>height</code> Single The layout height, in pixels.</p>"},{"location":"reference/stardewui/layout/layoutparameters/#returns_6","title":"Returns","text":"<p>LayoutParameters</p>"},{"location":"reference/stardewui/layout/layoutparameters/#gethashcode","title":"GetHashCode()","text":"<pre><code>public override int GetHashCode();\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#returns_7","title":"Returns","text":"<p>Int32</p>"},{"location":"reference/stardewui/layout/layoutparameters/#getlimitsvector2","title":"GetLimits(Vector2)","text":"<p>Determines the effective content size limits.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 GetLimits(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#parameters_4","title":"Parameters","text":"<p><code>availableSize</code> Vector2 The available size in the container/parent.</p>"},{"location":"reference/stardewui/layout/layoutparameters/#returns_8","title":"Returns","text":"<p>Vector2</p> <p>The size (equal to or smaller than <code>availableSize</code>) that can be allocated to content.</p>"},{"location":"reference/stardewui/layout/layoutparameters/#remarks_5","title":"Remarks","text":"<p>Limits are not the same as the actual size coming from a Resolve(Vector2, Func&lt;Vector2&gt;); they provide a maximum width and/or height in the event that one or both dimensions are set to Content. In these cases, the caller usually wants the \"constraints\" - e.g. a text block with fixed width but variable height needs to know that width before it can determine the actual height. </p> <p>Implementations of View will typically obtain the limits in their OnMeasure(Vector2)  method in order to perform internal/child layout, and determine the content size for Resolve(Vector2, Func&lt;Vector2&gt;).</p>"},{"location":"reference/stardewui/layout/layoutparameters/#resolvevector2-funcvector2","title":"Resolve(Vector2, Func&lt;Vector2&gt;)","text":"<p>Resolves the actual size for the current LayoutParameters.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 Resolve(Microsoft.Xna.Framework.Vector2 availableSize, Func&lt;Microsoft.Xna.Framework.Vector2&gt; getContentSize);\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#parameters_5","title":"Parameters","text":"<p><code>availableSize</code> Vector2 The available size in the container/parent.</p> <p><code>getContentSize</code> Func&lt;Vector2&gt; Function to compute the inner content size based on limits obtained from GetLimits(Vector2); will only be invoked if it is required for the current layout configuration, i.e. if one or both dimensions are set to fit content.</p>"},{"location":"reference/stardewui/layout/layoutparameters/#returns_9","title":"Returns","text":"<p>Vector2</p>"},{"location":"reference/stardewui/layout/layoutparameters/#tostring","title":"ToString()","text":"<pre><code>public override string ToString();\n</code></pre>"},{"location":"reference/stardewui/layout/layoutparameters/#returns_10","title":"Returns","text":"<p>string</p>"},{"location":"reference/stardewui/layout/length/","title":"Length","text":""},{"location":"reference/stardewui/layout/length/#struct-length","title":"Struct Length","text":""},{"location":"reference/stardewui/layout/length/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Specifies how to calculate the length of a single dimension (width or height).</p> <pre><code>[StardewUI.DuckType]\npublic readonly struct Length : IEquatable&lt;StardewUI.Layout.Length&gt;\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Length</p> <p>Implements IEquatable&lt;Length&gt;</p>"},{"location":"reference/stardewui/layout/length/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/length/#constructors","title":"Constructors","text":"Name Description Length(LengthType, Single) Specifies how to calculate the length of a single dimension (width or height)."},{"location":"reference/stardewui/layout/length/#properties","title":"Properties","text":"Name Description Type Specifies how to interpret the Value. Value The dimension value, with behavior determined by Type."},{"location":"reference/stardewui/layout/length/#methods","title":"Methods","text":"Name Description Content() Creates a new Length having Content. Parse(ReadOnlySpan&lt;Char&gt;) Parses a Length from its string representation. Parse(string) Parses a Length from its string representation. Percent(Single) Creates a new Length having Percent and the specified percent size. Px(Single) Creates a new Length having Px and the specified pixel size. Resolve(Single, Func&lt;Single&gt;) Resolves an actual (pixel) length. Stretch() Creates a new Length having Stretch. ToString() (Overrides Object.<code>ToString()</code>)"},{"location":"reference/stardewui/layout/length/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/length/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/layout/length/#lengthlengthtype-float","title":"Length(LengthType, float)","text":"<p>Specifies how to calculate the length of a single dimension (width or height).</p> <pre><code>public Length(StardewUI.Layout.LengthType Type, float Value);\n</code></pre>"},{"location":"reference/stardewui/layout/length/#parameters","title":"Parameters","text":"<p><code>Type</code> LengthType Specifies how to interpret the Value.</p> <p><code>Value</code> Single The dimension value, with behavior determined by Type.</p>"},{"location":"reference/stardewui/layout/length/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/layout/length/#type","title":"Type","text":"<p>Specifies how to interpret the Value.</p> <pre><code>public StardewUI.Layout.LengthType Type { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/length/#property-value","title":"Property Value","text":"<p>LengthType</p>"},{"location":"reference/stardewui/layout/length/#value","title":"Value","text":"<p>The dimension value, with behavior determined by Type.</p> <pre><code>public float Value { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/length/#property-value_1","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/layout/length/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/length/#content","title":"Content()","text":"<p>Creates a new Length having Content.</p> <pre><code>public static StardewUI.Layout.Length Content();\n</code></pre>"},{"location":"reference/stardewui/layout/length/#returns","title":"Returns","text":"<p>Length</p>"},{"location":"reference/stardewui/layout/length/#parsereadonlyspanchar","title":"Parse(ReadOnlySpan&lt;Char&gt;)","text":"<p>Parses a Length from its string representation.</p> <pre><code>public static StardewUI.Layout.Length Parse(ReadOnlySpan&lt;System.Char&gt; value);\n</code></pre>"},{"location":"reference/stardewui/layout/length/#parameters_1","title":"Parameters","text":"<p><code>value</code> ReadOnlySpan&lt;Char&gt; The string representation of the Length.</p>"},{"location":"reference/stardewui/layout/length/#returns_1","title":"Returns","text":"<p>Length</p> <p>The parsed Length.</p>"},{"location":"reference/stardewui/layout/length/#parsestring","title":"Parse(string)","text":"<p>Parses a Length from its string representation.</p> <pre><code>public static StardewUI.Layout.Length Parse(string value);\n</code></pre>"},{"location":"reference/stardewui/layout/length/#parameters_2","title":"Parameters","text":"<p><code>value</code> string The string representation of the Length.</p>"},{"location":"reference/stardewui/layout/length/#returns_2","title":"Returns","text":"<p>Length</p> <p>The parsed Length.</p>"},{"location":"reference/stardewui/layout/length/#percentfloat","title":"Percent(float)","text":"<p>Creates a new Length having Percent and the specified percent size.</p> <pre><code>public static StardewUI.Layout.Length Percent(float value);\n</code></pre>"},{"location":"reference/stardewui/layout/length/#parameters_3","title":"Parameters","text":"<p><code>value</code> Single The length in 100-based percent units (e.g. <code>50.0</code> is 50%).</p>"},{"location":"reference/stardewui/layout/length/#returns_3","title":"Returns","text":"<p>Length</p>"},{"location":"reference/stardewui/layout/length/#pxfloat","title":"Px(float)","text":"<p>Creates a new Length having Px and the specified pixel size.</p> <pre><code>public static StardewUI.Layout.Length Px(float value);\n</code></pre>"},{"location":"reference/stardewui/layout/length/#parameters_4","title":"Parameters","text":"<p><code>value</code> Single The length in pixels.</p>"},{"location":"reference/stardewui/layout/length/#returns_4","title":"Returns","text":"<p>Length</p>"},{"location":"reference/stardewui/layout/length/#resolvefloat-funcsingle","title":"Resolve(float, Func&lt;Single&gt;)","text":"<p>Resolves an actual (pixel) length.</p> <pre><code>public float Resolve(float availableLength, Func&lt;System.Single&gt; getContentLength);\n</code></pre>"},{"location":"reference/stardewui/layout/length/#parameters_5","title":"Parameters","text":"<p><code>availableLength</code> Single The remaining space available.</p> <p><code>getContentLength</code> Func&lt;Single&gt; A function to get the length of inner content. Will not be called unless the LengthType requires it.</p>"},{"location":"reference/stardewui/layout/length/#returns_5","title":"Returns","text":"<p>Single</p>"},{"location":"reference/stardewui/layout/length/#remarks","title":"Remarks","text":"<p>This is a convenience method for common layout scenarios, where content length is relatively simple to compute. Its use is optional; complex widgets can use any means they prefer to compute ContentSize. </p> <p>The result is intentionally not constrained to <code>availableLength</code>, which is only used for the Stretch method. This allows callers to check if the bounds were exceeded (e.g. to render a scroll bar, ellipsis, etc.) before clamping it.</p>"},{"location":"reference/stardewui/layout/length/#stretch","title":"Stretch()","text":"<p>Creates a new Length having Stretch.</p> <pre><code>public static StardewUI.Layout.Length Stretch();\n</code></pre>"},{"location":"reference/stardewui/layout/length/#returns_6","title":"Returns","text":"<p>Length</p>"},{"location":"reference/stardewui/layout/length/#tostring","title":"ToString()","text":"<pre><code>public override string ToString();\n</code></pre>"},{"location":"reference/stardewui/layout/length/#returns_7","title":"Returns","text":"<p>string</p>"},{"location":"reference/stardewui/layout/lengthtype/","title":"LengthType","text":""},{"location":"reference/stardewui/layout/lengthtype/#enum-lengthtype","title":"Enum LengthType","text":""},{"location":"reference/stardewui/layout/lengthtype/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Types of length calculation available for a Length.</p> <pre><code>public enum LengthType\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 LengthType</p>"},{"location":"reference/stardewui/layout/lengthtype/#remarks","title":"Remarks","text":"<p>For all types, content may overflow or be clipped if the available size is not large enough.</p>"},{"location":"reference/stardewui/layout/lengthtype/#fields","title":"Fields","text":"Name Value Description Content 0 Ignore the specified Value and use a value just high enough to fit all content. Px 1 Use the exact Value specified, in pixels. Percent 2 Use the specified Value as a percentage of the available width/height. Stretch 3 Ignore the specified Value and stretch to the full available width/height."},{"location":"reference/stardewui/layout/ninegridplacement/","title":"NineGridPlacement","text":""},{"location":"reference/stardewui/layout/ninegridplacement/#class-ninegridplacement","title":"Class NineGridPlacement","text":""},{"location":"reference/stardewui/layout/ninegridplacement/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Model for content placement along a nine-segment grid, i.e. all possible combinations of horizontal and vertical Alignment.</p> <pre><code>[StardewUI.DuckType]\npublic record NineGridPlacement : IEquatable&lt;StardewUI.Layout.NineGridPlacement&gt;\n</code></pre> <p>Inheritance Object \u21e6 NineGridPlacement</p> <p>Implements IEquatable&lt;NineGridPlacement&gt;</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/ninegridplacement/#constructors","title":"Constructors","text":"Name Description NineGridPlacement(Alignment, Alignment, Point) Model for content placement along a nine-segment grid, i.e. all possible combinations of horizontal and vertical Alignment."},{"location":"reference/stardewui/layout/ninegridplacement/#fields","title":"Fields","text":"Name Description StandardPlacements All the standard placements with no Offset, arranged from bottom-left to top-right."},{"location":"reference/stardewui/layout/ninegridplacement/#properties","title":"Properties","text":"Name Description EqualityContract HorizontalAlignment Content alignment along the horizontal axis. Offset Absolute axis-independent pixel offset. VerticalAlignment Content alignment along the vertical axis."},{"location":"reference/stardewui/layout/ninegridplacement/#methods","title":"Methods","text":"Name Description AtPosition(Vector2, Vector2, Alignment, Alignment) Gets the NineGridPlacement for an alignment pair that resolves to a specified exact position. EqualsIgnoringOffset(NineGridPlacement) Checks if another NineGridPlacement has the same alignments as this one, regardless of offset. GetMargin() Calculates what margin should be applied to the content container in order to achieve the Offset. GetNeighbors(Boolean) Gets the NineGridPlacements that neighbor the current placement, i.e. are reachable in a single Snap(Direction, Boolean). GetPosition(Vector2) Computes the aligned pixel position relative to a bounded size. IsMiddle() Checks if this placement is aligned to the exact center of the container, not counting Offset. Nudge(Direction, Int32) Keeps the same alignments, but pushes the content farther in a specific direction. Snap(Direction, Boolean) Snaps to an adjacent grid cell."},{"location":"reference/stardewui/layout/ninegridplacement/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/ninegridplacement/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/layout/ninegridplacement/#ninegridplacementalignment-alignment-point","title":"NineGridPlacement(Alignment, Alignment, Point)","text":"<p>Model for content placement along a nine-segment grid, i.e. all possible combinations of horizontal and vertical Alignment.</p> <pre><code>public NineGridPlacement(StardewUI.Layout.Alignment HorizontalAlignment, StardewUI.Layout.Alignment VerticalAlignment, Microsoft.Xna.Framework.Point Offset);\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#parameters","title":"Parameters","text":"<p><code>HorizontalAlignment</code> Alignment Content alignment along the horizontal axis.</p> <p><code>VerticalAlignment</code> Alignment Content alignment along the vertical axis.</p> <p><code>Offset</code> Point Absolute axis-independent pixel offset.</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#fields_1","title":"Fields","text":""},{"location":"reference/stardewui/layout/ninegridplacement/#standardplacements","title":"StandardPlacements","text":"<p>All the standard placements with no Offset, arranged from bottom-left to top-right.</p> <pre><code>public static readonly System.Collections.Immutable.IImmutableList&lt;StardewUI.Layout.NineGridPlacement&gt; StandardPlacements;\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#field-value","title":"Field Value","text":"<p>IImmutableList&lt;NineGridPlacement&gt;</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/layout/ninegridplacement/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#horizontalalignment","title":"HorizontalAlignment","text":"<p>Content alignment along the horizontal axis.</p> <pre><code>public StardewUI.Layout.Alignment HorizontalAlignment { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#property-value_1","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#offset","title":"Offset","text":"<p>Absolute axis-independent pixel offset.</p> <pre><code>public Microsoft.Xna.Framework.Point Offset { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#property-value_2","title":"Property Value","text":"<p>Point</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#verticalalignment","title":"VerticalAlignment","text":"<p>Content alignment along the vertical axis.</p> <pre><code>public StardewUI.Layout.Alignment VerticalAlignment { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#property-value_3","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/ninegridplacement/#atpositionvector2-vector2-alignment-alignment","title":"AtPosition(Vector2, Vector2, Alignment, Alignment)","text":"<p>Gets the NineGridPlacement for an alignment pair that resolves to a specified exact position.</p> <pre><code>public static StardewUI.Layout.NineGridPlacement AtPosition(Microsoft.Xna.Framework.Vector2 position, Microsoft.Xna.Framework.Vector2 size, StardewUI.Layout.Alignment horizontalAlignment, StardewUI.Layout.Alignment verticalAlignment);\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#parameters_1","title":"Parameters","text":"<p><code>position</code> Vector2 The target position on screen or within the container.</p> <p><code>size</code> Vector2 The size of the viewport or container.</p> <p><code>horizontalAlignment</code> Alignment The desired horizontal alignment.</p> <p><code>verticalAlignment</code> Alignment The desired vertical alignment.</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#returns","title":"Returns","text":"<p>NineGridPlacement</p> <p>A NineGridPlacement whose HorizontalAlignment and VerticalAlignment match the <code>horizontalAlignment</code> and <code>verticalAlignment</code>, respectively, and whose GetPosition(Vector2) will resolve to exactly the specified <code>position</code>.</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#equalsignoringoffsetninegridplacement","title":"EqualsIgnoringOffset(NineGridPlacement)","text":"<p>Checks if another NineGridPlacement has the same alignments as this one, regardless of offset.</p> <pre><code>public bool EqualsIgnoringOffset(StardewUI.Layout.NineGridPlacement other);\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#parameters_2","title":"Parameters","text":"<p><code>other</code> NineGridPlacement The instance to compare.</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the <code>other</code> instance has the same alignments, otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#getmargin","title":"GetMargin()","text":"<p>Calculates what margin should be applied to the content container in order to achieve the Offset.</p> <pre><code>public StardewUI.Layout.Edges GetMargin();\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#returns_2","title":"Returns","text":"<p>Edges</p> <p>The margin required to apply the current Offset to a layout container whose content alignment matches the current HorizontalAlignment and VerticalAlignment.</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#remarks","title":"Remarks","text":"<p>Based on the model of a Panel or Frame whose layout is set to Fill() its container and who will adopt the HorizontalAlignment and VerticalAlignment of this placement as its own HorizontalContentAlignment and VerticalContentAlignment (or equivalent for other view types). </p> <p>Depending on the particular alignments, this can apply either positive or negative margin to either the start or end axis (or both).</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#getneighborsbool","title":"GetNeighbors(bool)","text":"<p>Gets the NineGridPlacements that neighbor the current placement, i.e. are reachable in a single Snap(Direction, Boolean).</p> <pre><code>public System.Collections.Generic.IEnumerable&lt;StardewUI.Layout.NineGridPlacement.Neighbor&gt; GetNeighbors(bool avoidMiddle);\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#parameters_3","title":"Parameters","text":"<p><code>avoidMiddle</code> Boolean Whether to avoid the exact center, i.e. having both HorizontalAlignment and VerticalAlignment be Middle. This is often used for positioning HUD elements which typically are not useful to show in the middle of the screen, and the positioning UI may want to use that space for button prompts instead.</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#returns_3","title":"Returns","text":"<p>IEnumerable&lt;Neighbor&gt;</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#getpositionvector2","title":"GetPosition(Vector2)","text":"<p>Computes the aligned pixel position relative to a bounded size.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 GetPosition(Microsoft.Xna.Framework.Vector2 size);\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#parameters_4","title":"Parameters","text":"<p><code>size</code> Vector2 The size of the container.</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#returns_4","title":"Returns","text":"<p>Vector2</p> <p>The aligned position, relative to the container.</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#ismiddle","title":"IsMiddle()","text":"<p>Checks if this placement is aligned to the exact center of the container, not counting Offset.</p> <pre><code>public bool IsMiddle();\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#returns_5","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#nudgedirection-int","title":"Nudge(Direction, int)","text":"<p>Keeps the same alignments, but pushes the content farther in a specific direction.</p> <pre><code>public StardewUI.Layout.NineGridPlacement Nudge(StardewUI.Direction direction, int distance);\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#parameters_5","title":"Parameters","text":"<p><code>direction</code> Direction Direction of the additional offset.</p> <p><code>distance</code> Int32 Pixel distance to offset in the specified <code>direction</code>.</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#returns_6","title":"Returns","text":"<p>NineGridPlacement</p> <p>A new NineGridPlacement whose alignments are the same as the current instance and whose Offset represents a move from the current offset in the specified <code>direction</code> with the specified <code>distance</code>.</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#snapdirection-bool","title":"Snap(Direction, bool)","text":"<p>Snaps to an adjacent grid cell.</p> <pre><code>public StardewUI.Layout.NineGridPlacement Snap(StardewUI.Direction direction, bool avoidMiddle);\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement/#parameters_6","title":"Parameters","text":"<p><code>direction</code> Direction Direction in which to move.</p> <p><code>avoidMiddle</code> Boolean Whether to avoid the exact center, i.e. having both HorizontalAlignment and VerticalAlignment be Middle. This is often used for positioning HUD elements which typically are not useful to show in the middle of the screen, and the positioning UI may want to use that space for button prompts instead.</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#returns_7","title":"Returns","text":"<p>NineGridPlacement</p> <p>A new NineGridPlacement representing the adjacent cell in the specified <code>direction</code>, or <code>null</code> if there is no adjacent cell (e.g. trying to snap West from a placement that is already at the horizontal Start).</p>"},{"location":"reference/stardewui/layout/ninegridplacement/#remarks_1","title":"Remarks","text":"<p>Causes the Offset to be reset for the newly-created placement.</p>"},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/","title":"NineGridPlacement.Neighbor","text":""},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#class-ninegridplacementneighbor","title":"Class NineGridPlacement.Neighbor","text":""},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Represents an adjacent placement; the result of GetNeighbors(Boolean).</p> <pre><code>public record NineGridPlacement.Neighbor : \n    IEquatable&lt;StardewUI.Layout.NineGridPlacement.Neighbor&gt;\n</code></pre> <p>Inheritance Object \u21e6 Neighbor</p> <p>Implements IEquatable&lt;Neighbor&gt;</p>"},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#constructors","title":"Constructors","text":"Name Description Neighbor(Direction, NineGridPlacement) Represents an adjacent placement; the result of GetNeighbors(Boolean)."},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#properties","title":"Properties","text":"Name Description Direction The direction of traversal for this neighbor. EqualityContract Placement The neighboring placement."},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#neighbordirection-ninegridplacement","title":"Neighbor(Direction, NineGridPlacement)","text":"<p>Represents an adjacent placement; the result of GetNeighbors(Boolean).</p> <pre><code>public Neighbor(StardewUI.Direction Direction, StardewUI.Layout.NineGridPlacement Placement);\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#parameters","title":"Parameters","text":"<p><code>Direction</code> Direction The direction of traversal for this neighbor.</p> <p><code>Placement</code> NineGridPlacement The neighboring placement.</p>"},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#direction","title":"Direction","text":"<p>The direction of traversal for this neighbor.</p> <pre><code>public StardewUI.Direction Direction { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#property-value","title":"Property Value","text":"<p>Direction</p>"},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#placement","title":"Placement","text":"<p>The neighboring placement.</p> <pre><code>public StardewUI.Layout.NineGridPlacement Placement { get; set; }\n</code></pre>"},{"location":"reference/stardewui/layout/ninegridplacement.neighbor/#property-value_2","title":"Property Value","text":"<p>NineGridPlacement</p>"},{"location":"reference/stardewui/layout/offsettableextensions/","title":"OffsettableExtensions","text":""},{"location":"reference/stardewui/layout/offsettableextensions/#class-offsettableextensions","title":"Class OffsettableExtensions","text":""},{"location":"reference/stardewui/layout/offsettableextensions/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Extensions for the IOffsettable&lt;T&gt; interface.</p> <pre><code>public static class OffsettableExtensions\n</code></pre> <p>Inheritance Object \u21e6 OffsettableExtensions</p>"},{"location":"reference/stardewui/layout/offsettableextensions/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/offsettableextensions/#methods","title":"Methods","text":"Name Description Clone&lt;T&gt;(T) Clones an IOffsettable&lt;T&gt;."},{"location":"reference/stardewui/layout/offsettableextensions/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/offsettableextensions/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/offsettableextensions/#clonett","title":"Clone&lt;T&gt;(T)","text":"<p>Clones an IOffsettable&lt;T&gt;.</p> <pre><code>public static T Clone&lt;T&gt;(T instance);\n</code></pre>"},{"location":"reference/stardewui/layout/offsettableextensions/#parameters","title":"Parameters","text":"<p><code>instance</code> \u00a0 T The instance to clone.</p>"},{"location":"reference/stardewui/layout/offsettableextensions/#returns","title":"Returns","text":"<p><code>T</code></p> <p>A copy of the <code>instance</code>.</p>"},{"location":"reference/stardewui/layout/offsettableextensions/#remarks","title":"Remarks","text":"<p>Since every Offset(Vector2) is implicitly a clone, we can perform an \"explicit\" clone by providing a zero offset.</p>"},{"location":"reference/stardewui/layout/orientation/","title":"Orientation","text":""},{"location":"reference/stardewui/layout/orientation/#enum-orientation","title":"Enum Orientation","text":""},{"location":"reference/stardewui/layout/orientation/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Available orientation directions for views such as Lane.</p> <pre><code>public enum Orientation\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 Orientation</p>"},{"location":"reference/stardewui/layout/orientation/#fields","title":"Fields","text":"Name Value Description Horizontal 0 Content flows in the horizontal direction (generally, left to right). Vertical 1 Content flows in the vertical direction (generally, top to bottom)."},{"location":"reference/stardewui/layout/orientationextensions/","title":"OrientationExtensions","text":""},{"location":"reference/stardewui/layout/orientationextensions/#class-orientationextensions","title":"Class OrientationExtensions","text":""},{"location":"reference/stardewui/layout/orientationextensions/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Helpers for working with Orientation.</p> <pre><code>public static class OrientationExtensions\n</code></pre> <p>Inheritance Object \u21e6 OrientationExtensions</p>"},{"location":"reference/stardewui/layout/orientationextensions/#members","title":"Members","text":""},{"location":"reference/stardewui/layout/orientationextensions/#methods","title":"Methods","text":"Name Description CreateVector(Orientation, Single) Creates a new Vector2 with the oriented dimension set to a specified length and the other dimension set to zero. Get(Orientation, Vector2) Gets the component of a vector along the orientation's axis. Length(Orientation, LayoutParameters) Gets the dimension setting of a layout along the orientation's axis. Set(Orientation, Vector2, Single) Sets the component of a vector corresponding to the orientation's axis. Swap(Orientation) Gets the opposite/perpendicular orientation to a given orientation. Update(Orientation, Vector2, Func&lt;Single, Single&gt;)"},{"location":"reference/stardewui/layout/orientationextensions/#details","title":"Details","text":""},{"location":"reference/stardewui/layout/orientationextensions/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/layout/orientationextensions/#createvectororientation-float","title":"CreateVector(Orientation, float)","text":"<p>Creates a new Vector2 with the oriented dimension set to a specified length and the other dimension set to zero.</p> <pre><code>public static Microsoft.Xna.Framework.Vector2 CreateVector(StardewUI.Layout.Orientation orientation, float length);\n</code></pre>"},{"location":"reference/stardewui/layout/orientationextensions/#parameters","title":"Parameters","text":"<p><code>orientation</code> Orientation The orientation.</p> <p><code>length</code> Single The length along the orientation axis.</p>"},{"location":"reference/stardewui/layout/orientationextensions/#returns","title":"Returns","text":"<p>Vector2</p> <p>A new Vector2 whose length along the <code>orientation</code> axis is <code>length</code>.</p>"},{"location":"reference/stardewui/layout/orientationextensions/#getorientation-vector2","title":"Get(Orientation, Vector2)","text":"<p>Gets the component of a vector along the orientation's axis.</p> <pre><code>public static float Get(StardewUI.Layout.Orientation orientation, Microsoft.Xna.Framework.Vector2 vec);\n</code></pre>"},{"location":"reference/stardewui/layout/orientationextensions/#parameters_1","title":"Parameters","text":"<p><code>orientation</code> Orientation The orientation.</p> <p><code>vec</code> Vector2 Any vector value.</p>"},{"location":"reference/stardewui/layout/orientationextensions/#returns_1","title":"Returns","text":"<p>Single</p> <p>The vector's X component if Horizontal, or Y if Vertical.</p>"},{"location":"reference/stardewui/layout/orientationextensions/#lengthorientation-layoutparameters","title":"Length(Orientation, LayoutParameters)","text":"<p>Gets the dimension setting of a layout along the orientation's axis.</p> <pre><code>public static StardewUI.Layout.Length Length(StardewUI.Layout.Orientation orientation, StardewUI.Layout.LayoutParameters layout);\n</code></pre>"},{"location":"reference/stardewui/layout/orientationextensions/#parameters_2","title":"Parameters","text":"<p><code>orientation</code> Orientation The orientation.</p> <p><code>layout</code> LayoutParameters Layout parameters to extract from.</p>"},{"location":"reference/stardewui/layout/orientationextensions/#returns_2","title":"Returns","text":"<p>Length</p> <p>The Width of the specified <code>layout</code> if the orientation is Horizontal; Height if Vertical.</p>"},{"location":"reference/stardewui/layout/orientationextensions/#setorientation-vector2-float","title":"Set(Orientation, Vector2, float)","text":"<p>Sets the component of a vector corresponding to the orientation's axis.</p> <pre><code>public static void Set(StardewUI.Layout.Orientation orientation, Microsoft.Xna.Framework.Vector2 vec, float value);\n</code></pre>"},{"location":"reference/stardewui/layout/orientationextensions/#parameters_3","title":"Parameters","text":"<p><code>orientation</code> Orientation The orientation.</p> <p><code>vec</code> Vector2 Any vector value.</p> <p><code>value</code> Single The new value for the specified axis.</p>"},{"location":"reference/stardewui/layout/orientationextensions/#swaporientation","title":"Swap(Orientation)","text":"<p>Gets the opposite/perpendicular orientation to a given orientation.</p> <pre><code>public static StardewUI.Layout.Orientation Swap(StardewUI.Layout.Orientation orientation);\n</code></pre>"},{"location":"reference/stardewui/layout/orientationextensions/#parameters_4","title":"Parameters","text":"<p><code>orientation</code> Orientation The orientation.</p>"},{"location":"reference/stardewui/layout/orientationextensions/#returns_3","title":"Returns","text":"<p>Orientation</p>"},{"location":"reference/stardewui/layout/orientationextensions/#updateorientation-vector2-funcsingle-single","title":"Update(Orientation, Vector2, Func&lt;Single, Single&gt;)","text":"<pre><code>public static float Update(StardewUI.Layout.Orientation orientation, Microsoft.Xna.Framework.Vector2 vec, Func&lt;System.Single, System.Single&gt; select);\n</code></pre>"},{"location":"reference/stardewui/layout/orientationextensions/#parameters_5","title":"Parameters","text":"<p><code>orientation</code> Orientation The orientation.</p> <p><code>vec</code> Vector2 Any vector value.</p> <p><code>select</code> Func&lt;Single, Single&gt; A function that takes the previous value and returns the updated value.</p>"},{"location":"reference/stardewui/layout/orientationextensions/#returns_4","title":"Returns","text":"<p>Single</p> <p>The value after update.</p>"},{"location":"reference/stardewui/layout/visibility/","title":"Visibility","text":""},{"location":"reference/stardewui/layout/visibility/#enum-visibility","title":"Enum Visibility","text":""},{"location":"reference/stardewui/layout/visibility/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Layout Assembly: StardewUI.dll  </p> <p>Controls the visibility of an IView.</p> <pre><code>public enum Visibility\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 Visibility</p>"},{"location":"reference/stardewui/layout/visibility/#fields","title":"Fields","text":"Name Value Description Visible 0 The view is visible. Hidden 1 The view is hidden."},{"location":"reference/stardewui/overlays/","title":"StardewUI.Overlays","text":""},{"location":"reference/stardewui/overlays/#stardewuioverlays-namespace","title":"StardewUI.Overlays Namespace","text":""},{"location":"reference/stardewui/overlays/#classes","title":"Classes","text":"Name Description FullScreenOverlay Base class for an overlay meant to take up the full screen. Overlay A basic overlay with immutable properties. OverlayContext The context of an overlay, e.g. the active overlays for a particular menu or other non-overlay UI."},{"location":"reference/stardewui/overlays/#interfaces","title":"Interfaces","text":"Name Description IOverlay Definition of an overlay - i.e. a UI element that displays over all other UI."},{"location":"reference/stardewui/overlays/fullscreenoverlay/","title":"FullScreenOverlay","text":""},{"location":"reference/stardewui/overlays/fullscreenoverlay/#class-fullscreenoverlay","title":"Class FullScreenOverlay","text":""},{"location":"reference/stardewui/overlays/fullscreenoverlay/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Overlays Assembly: StardewUI.dll  </p> <p>Base class for an overlay meant to take up the full screen.</p> <pre><code>public class FullScreenOverlay : StardewUI.Overlays.IOverlay\n</code></pre> <p>Inheritance Object \u21e6 FullScreenOverlay</p> <p>Implements IOverlay</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#members","title":"Members","text":""},{"location":"reference/stardewui/overlays/fullscreenoverlay/#constructors","title":"Constructors","text":"Name Description FullScreenOverlay() Initializes a new instance of FullScreenOverlay."},{"location":"reference/stardewui/overlays/fullscreenoverlay/#properties","title":"Properties","text":"Name Description CapturingInput Whether the overlay wants to capture all keyboard and gamepad inputs, i.e. prevent them from being dispatched to the parent menu. DimmingAmount Amount to dim whatever is underneath the overlay. HorizontalAlignment Horizontal alignment of the overlay relative to the Parent edge. HorizontalParentAlignment Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its HorizontalAlignment. Parent The parent of this overlay, used for positioning. If not specified, then the overlay will be positioned relative to the entire UI viewport. ParentOffset Additional pixel offset to apply to the overlay's position, after alignments. VerticalAlignment Vertical alignment of the overlay relative to the Parent edge. VerticalParentAlignment Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its VerticalAlignment. View The view to be displayed/interacted with as an overlay."},{"location":"reference/stardewui/overlays/fullscreenoverlay/#methods","title":"Methods","text":"Name Description CreateView() Creates the content view that will be displayed as an overlay. OnClose() Runs when the overlay is removed from the active stack. RequireView&lt;TChild&gt;(Func&lt;TChild&gt;) Ensures that the overlay view is created before attempting to access a child view. Update(TimeSpan) Runs on every game update tick."},{"location":"reference/stardewui/overlays/fullscreenoverlay/#events","title":"Events","text":"Name Description Close Event raised when the overlay is closed - i.e. removed from the current context stack."},{"location":"reference/stardewui/overlays/fullscreenoverlay/#details","title":"Details","text":""},{"location":"reference/stardewui/overlays/fullscreenoverlay/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/overlays/fullscreenoverlay/#fullscreenoverlay","title":"FullScreenOverlay()","text":"<p>Initializes a new instance of FullScreenOverlay.</p> <pre><code>public FullScreenOverlay();\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/overlays/fullscreenoverlay/#capturinginput","title":"CapturingInput","text":"<p>Whether the overlay wants to capture all keyboard and gamepad inputs, i.e. prevent them from being dispatched to the parent menu.</p> <pre><code>public bool CapturingInput { get; protected set; }\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#remarks","title":"Remarks","text":"<p>This is not necessary to trap focus, which happens automatically; only to capture buttons/keys that would normally have a navigation function, like triggers/shoulders for paging, E/Esc/GamepadB for cancellation, etc. Overlays that enable capturing should provide their own way for the user to escape using keyboard/gamepad, although it is always possible to click the mouse outside the overlay to dismiss it (and implicitly stop the capturing).</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#dimmingamount","title":"DimmingAmount","text":"<p>Amount to dim whatever is underneath the overlay.</p> <pre><code>public float DimmingAmount { get; set; }\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#property-value_1","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#remarks_1","title":"Remarks","text":"<p>This is an alpha value for a black overlay, so the higher value (between 0 and 1) the darker the content underneath the overlay. These apply individually to each overlay, so multiple stacked overlays will dim not only the underlying main view but also any previous overlays.</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#horizontalalignment","title":"HorizontalAlignment","text":"<p>Horizontal alignment of the overlay relative to the Parent edge.</p> <pre><code>public StardewUI.Layout.Alignment HorizontalAlignment { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#property-value_2","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#remarks_2","title":"Remarks","text":"<p>Full-screen overlays should generally stretch to the entire viewport dimensions, but are middle-aligned in case of a discrepancy.</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#horizontalparentalignment","title":"HorizontalParentAlignment","text":"<p>Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its HorizontalAlignment.</p> <pre><code>public StardewUI.Layout.Alignment HorizontalParentAlignment { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#property-value_3","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#remarks_3","title":"Remarks","text":"<p>Full-screen overlays should generally stretch to the entire viewport dimensions, but are middle-aligned in case of a discrepancy.</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#parent","title":"Parent","text":"<p>The parent of this overlay, used for positioning. If not specified, then the overlay will be positioned relative to the entire UI viewport.</p> <pre><code>public StardewUI.IView Parent { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#property-value_4","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#remarks_4","title":"Remarks","text":"<p>Full-screen overlays always have a <code>null</code> parent.</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#parentoffset","title":"ParentOffset","text":"<p>Additional pixel offset to apply to the overlay's position, after alignments.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 ParentOffset { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#property-value_5","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#verticalalignment","title":"VerticalAlignment","text":"<p>Vertical alignment of the overlay relative to the Parent edge.</p> <pre><code>public StardewUI.Layout.Alignment VerticalAlignment { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#property-value_6","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#remarks_5","title":"Remarks","text":"<p>Full-screen overlays should generally stretch to the entire viewport dimensions, but are middle-aligned in case of a discrepancy.</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#verticalparentalignment","title":"VerticalParentAlignment","text":"<p>Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its VerticalAlignment.</p> <pre><code>public StardewUI.Layout.Alignment VerticalParentAlignment { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#property-value_7","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#remarks_6","title":"Remarks","text":"<p>Full-screen overlays should generally stretch to the entire viewport dimensions, but are middle-aligned in case of a discrepancy.</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#view","title":"View","text":"<p>The view to be displayed/interacted with as an overlay.</p> <pre><code>public StardewUI.IView View { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#property-value_8","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#remarks_7","title":"Remarks","text":"<p>The view provided in a full-screen overlay is a dimming frame with the content view inside.</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/overlays/fullscreenoverlay/#createview","title":"CreateView()","text":"<p>Creates the content view that will be displayed as an overlay.</p> <pre><code>protected virtual StardewUI.IView CreateView();\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#returns","title":"Returns","text":"<p>IView</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#onclose","title":"OnClose()","text":"<p>Runs when the overlay is removed from the active stack.</p> <pre><code>public void OnClose();\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#requireviewtchildfunctchild","title":"RequireView&lt;TChild&gt;(Func&lt;TChild&gt;)","text":"<p>Ensures that the overlay view is created before attempting to access a child view.</p> <pre><code>protected TChild RequireView&lt;TChild&gt;(Func&lt;TChild&gt; viewSelector);\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#parameters","title":"Parameters","text":"<p><code>viewSelector</code> Func&lt;TChild&gt; Function to retrieve the inner view.</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#returns_1","title":"Returns","text":"<p><code>TChild</code></p> <p>The inner view.</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#remarks_8","title":"Remarks","text":"<p>This is syntactic sugar over accessing View first to force lazy loading.</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#updatetimespan","title":"Update(TimeSpan)","text":"<p>Runs on every game update tick.</p> <pre><code>public virtual void Update(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#parameters_1","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan The amount of real time elapsed since the last tick.</p>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#events_1","title":"Events","text":""},{"location":"reference/stardewui/overlays/fullscreenoverlay/#close","title":"Close","text":"<p>Event raised when the overlay is closed - i.e. removed from the current context stack.</p> <pre><code>public event EventHandler&lt;System.EventArgs&gt;? Close;\n</code></pre>"},{"location":"reference/stardewui/overlays/fullscreenoverlay/#event-type","title":"Event Type","text":"<p>EventHandler&lt;EventArgs&gt;</p>"},{"location":"reference/stardewui/overlays/ioverlay/","title":"IOverlay","text":""},{"location":"reference/stardewui/overlays/ioverlay/#interface-ioverlay","title":"Interface IOverlay","text":""},{"location":"reference/stardewui/overlays/ioverlay/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Overlays Assembly: StardewUI.dll  </p> <p>Definition of an overlay - i.e. a UI element that displays over all other UI.</p> <pre><code>public interface IOverlay\n</code></pre>"},{"location":"reference/stardewui/overlays/ioverlay/#members","title":"Members","text":""},{"location":"reference/stardewui/overlays/ioverlay/#properties","title":"Properties","text":"Name Description CapturingInput Whether the overlay wants to capture all keyboard and gamepad inputs, i.e. prevent them from being dispatched to the parent menu. DimmingAmount Amount to dim whatever is underneath the overlay. HorizontalAlignment Horizontal alignment of the overlay relative to the Parent edge. HorizontalParentAlignment Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its HorizontalAlignment. Parent The parent of this overlay, used for positioning. If not specified, then the overlay will be positioned relative to the entire UI viewport. ParentOffset Additional pixel offset to apply to the overlay's position, after alignments. VerticalAlignment Vertical alignment of the overlay relative to the Parent edge. VerticalParentAlignment Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its VerticalAlignment. View The view to be displayed/interacted with as an overlay."},{"location":"reference/stardewui/overlays/ioverlay/#methods","title":"Methods","text":"Name Description OnClose() Runs when the overlay is removed from the active stack. Update(TimeSpan) Runs on every game update tick."},{"location":"reference/stardewui/overlays/ioverlay/#events","title":"Events","text":"Name Description Close Event raised when the overlay is closed - i.e. removed from the current context stack."},{"location":"reference/stardewui/overlays/ioverlay/#details","title":"Details","text":""},{"location":"reference/stardewui/overlays/ioverlay/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/overlays/ioverlay/#capturinginput","title":"CapturingInput","text":"<p>Whether the overlay wants to capture all keyboard and gamepad inputs, i.e. prevent them from being dispatched to the parent menu.</p> <pre><code>bool CapturingInput { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/ioverlay/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/overlays/ioverlay/#remarks","title":"Remarks","text":"<p>This is not necessary to trap focus, which happens automatically; only to capture buttons/keys that would normally have a navigation function, like triggers/shoulders for paging, E/Esc/GamepadB for cancellation, etc. Overlays that enable capturing should provide their own way for the user to escape using keyboard/gamepad, although it is always possible to click the mouse outside the overlay to dismiss it (and implicitly stop the capturing).</p>"},{"location":"reference/stardewui/overlays/ioverlay/#dimmingamount","title":"DimmingAmount","text":"<p>Amount to dim whatever is underneath the overlay.</p> <pre><code>float DimmingAmount { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/ioverlay/#property-value_1","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/overlays/ioverlay/#remarks_1","title":"Remarks","text":"<p>This is an alpha value for a black overlay, so the higher value (between 0 and 1) the darker the content underneath the overlay. These apply individually to each overlay, so multiple stacked overlays will dim not only the underlying main view but also any previous overlays.</p>"},{"location":"reference/stardewui/overlays/ioverlay/#horizontalalignment","title":"HorizontalAlignment","text":"<p>Horizontal alignment of the overlay relative to the Parent edge.</p> <pre><code>StardewUI.Layout.Alignment HorizontalAlignment { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/ioverlay/#property-value_2","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/overlays/ioverlay/#remarks_2","title":"Remarks","text":"<p>Specifies which edge of the overlay is used for positioning, regardless of which parent edge it is aligning to. For example, a HorizontalAlignment of Start and a HorizontalParentAlignment of End means that the overlay's left edge will be aligned to the parent's right edge; similarly, if both are set to Start, then the overlay's left edge is aligned to the parent's left edge.</p>"},{"location":"reference/stardewui/overlays/ioverlay/#horizontalparentalignment","title":"HorizontalParentAlignment","text":"<p>Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its HorizontalAlignment.</p> <pre><code>StardewUI.Layout.Alignment HorizontalParentAlignment { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/ioverlay/#property-value_3","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/overlays/ioverlay/#remarks_3","title":"Remarks","text":"<p>For example, a HorizontalAlignment of Start and a HorizontalParentAlignment of End means that the overlay's left edge will be aligned to the parent's right edge; similarly, if both are set to Start, then the overlay's left edge is aligned to the parent's left edge.</p>"},{"location":"reference/stardewui/overlays/ioverlay/#parent","title":"Parent","text":"<p>The parent of this overlay, used for positioning. If not specified, then the overlay will be positioned relative to the entire UI viewport.</p> <pre><code>StardewUI.IView Parent { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/ioverlay/#property-value_4","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/overlays/ioverlay/#parentoffset","title":"ParentOffset","text":"<p>Additional pixel offset to apply to the overlay's position, after alignments.</p> <pre><code>Microsoft.Xna.Framework.Vector2 ParentOffset { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/ioverlay/#property-value_5","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/overlays/ioverlay/#verticalalignment","title":"VerticalAlignment","text":"<p>Vertical alignment of the overlay relative to the Parent edge.</p> <pre><code>StardewUI.Layout.Alignment VerticalAlignment { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/ioverlay/#property-value_6","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/overlays/ioverlay/#remarks_4","title":"Remarks","text":"<p>Specifies which edge of the overlay is used for positioning, regardless of which parent edge it is aligning to. For example, a VerticalAlignment of Start and a VerticalParentAlignment of End means that the overlay's top edge will be aligned to the parent's bottom edge; similarly, if both are set to Start, then the overlay's top edge is aligned to the parent's top edge.</p>"},{"location":"reference/stardewui/overlays/ioverlay/#verticalparentalignment","title":"VerticalParentAlignment","text":"<p>Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its VerticalAlignment.</p> <pre><code>StardewUI.Layout.Alignment VerticalParentAlignment { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/ioverlay/#property-value_7","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/overlays/ioverlay/#remarks_5","title":"Remarks","text":"<p>For example, a VerticalAlignment of Start and a VerticalParentAlignment of End means that the overlay's top edge will be aligned to the parent's bottom edge; similarly, if both are set to Start, then the overlay's top edge is aligned to the parent's top edge.</p>"},{"location":"reference/stardewui/overlays/ioverlay/#view","title":"View","text":"<p>The view to be displayed/interacted with as an overlay.</p> <pre><code>StardewUI.IView View { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/ioverlay/#property-value_8","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/overlays/ioverlay/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/overlays/ioverlay/#onclose","title":"OnClose()","text":"<p>Runs when the overlay is removed from the active stack.</p> <pre><code>void OnClose();\n</code></pre>"},{"location":"reference/stardewui/overlays/ioverlay/#updatetimespan","title":"Update(TimeSpan)","text":"<p>Runs on every game update tick.</p> <pre><code>void Update(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/overlays/ioverlay/#parameters","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan The amount of real time elapsed since the last tick.</p>"},{"location":"reference/stardewui/overlays/ioverlay/#events_1","title":"Events","text":""},{"location":"reference/stardewui/overlays/ioverlay/#close","title":"Close","text":"<p>Event raised when the overlay is closed - i.e. removed from the current context stack.</p> <pre><code>event EventHandler&lt;System.EventArgs&gt;? Close;\n</code></pre>"},{"location":"reference/stardewui/overlays/ioverlay/#event-type","title":"Event Type","text":"<p>EventHandler&lt;EventArgs&gt;</p>"},{"location":"reference/stardewui/overlays/overlay/","title":"Overlay","text":""},{"location":"reference/stardewui/overlays/overlay/#class-overlay","title":"Class Overlay","text":""},{"location":"reference/stardewui/overlays/overlay/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Overlays Assembly: StardewUI.dll  </p> <p>A basic overlay with immutable properties.</p> <pre><code>public class Overlay : StardewUI.Overlays.IOverlay\n</code></pre> <p>Inheritance Object \u21e6 Overlay</p> <p>Implements IOverlay</p>"},{"location":"reference/stardewui/overlays/overlay/#members","title":"Members","text":""},{"location":"reference/stardewui/overlays/overlay/#constructors","title":"Constructors","text":"Name Description Overlay(IView, IView, Alignment, Alignment, Alignment, Alignment, Vector2) A basic overlay with immutable properties."},{"location":"reference/stardewui/overlays/overlay/#properties","title":"Properties","text":"Name Description HorizontalAlignment Horizontal alignment of the overlay relative to the Parent edge. HorizontalParentAlignment Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its HorizontalAlignment. Parent The parent of this overlay, used for positioning. If not specified, then the overlay will be positioned relative to the entire UI viewport. ParentOffset Additional pixel offset to apply to the overlay's position, after alignments. VerticalAlignment Vertical alignment of the overlay relative to the Parent edge. VerticalParentAlignment Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its VerticalAlignment. View The view to be displayed/interacted with as an overlay."},{"location":"reference/stardewui/overlays/overlay/#methods","title":"Methods","text":"Name Description OnClose() Runs when the overlay is removed from the active stack. OnClose(Action) Registers an action to be run when the overlay is closed. Pop() Removes the front-most overlay. Push(IOverlay) Pushes an overlay to the front. Remove(IOverlay) Removes a specific overlay from the stack, regardless of its position."},{"location":"reference/stardewui/overlays/overlay/#events","title":"Events","text":"Name Description Close Raised when the overlay is removed from the active stack."},{"location":"reference/stardewui/overlays/overlay/#details","title":"Details","text":""},{"location":"reference/stardewui/overlays/overlay/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/overlays/overlay/#overlayiview-iview-alignment-alignment-alignment-alignment-vector2","title":"Overlay(IView, IView, Alignment, Alignment, Alignment, Alignment, Vector2)","text":"<p>A basic overlay with immutable properties.</p> <pre><code>public Overlay(StardewUI.IView view, StardewUI.IView parent, StardewUI.Layout.Alignment horizontalAlignment, StardewUI.Layout.Alignment horizontalParentAlignment, StardewUI.Layout.Alignment verticalAlignment, StardewUI.Layout.Alignment verticalParentAlignment, Microsoft.Xna.Framework.Vector2 parentOffset);\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#parameters","title":"Parameters","text":"<p><code>view</code> IView The View.</p> <p><code>parent</code> IView The Parent.</p> <p><code>horizontalAlignment</code> Alignment The HorizontalAlignment.</p> <p><code>horizontalParentAlignment</code> Alignment The HorizontalParentAlignment.</p> <p><code>verticalAlignment</code> Alignment The VerticalAlignment.</p> <p><code>verticalParentAlignment</code> Alignment The VerticalParentAlignment.</p> <p><code>parentOffset</code> Vector2 The ParentOffset.</p>"},{"location":"reference/stardewui/overlays/overlay/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/overlays/overlay/#horizontalalignment","title":"HorizontalAlignment","text":"<p>Horizontal alignment of the overlay relative to the Parent edge.</p> <pre><code>public StardewUI.Layout.Alignment HorizontalAlignment { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#property-value","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/overlays/overlay/#remarks","title":"Remarks","text":"<p>Specifies which edge of the overlay is used for positioning, regardless of which parent edge it is aligning to. For example, a HorizontalAlignment of Start and a HorizontalParentAlignment of End means that the overlay's left edge will be aligned to the parent's right edge; similarly, if both are set to Start, then the overlay's left edge is aligned to the parent's left edge.</p>"},{"location":"reference/stardewui/overlays/overlay/#horizontalparentalignment","title":"HorizontalParentAlignment","text":"<p>Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its HorizontalAlignment.</p> <pre><code>public StardewUI.Layout.Alignment HorizontalParentAlignment { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#property-value_1","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/overlays/overlay/#remarks_1","title":"Remarks","text":"<p>For example, a HorizontalAlignment of Start and a HorizontalParentAlignment of End means that the overlay's left edge will be aligned to the parent's right edge; similarly, if both are set to Start, then the overlay's left edge is aligned to the parent's left edge.</p>"},{"location":"reference/stardewui/overlays/overlay/#parent","title":"Parent","text":"<p>The parent of this overlay, used for positioning. If not specified, then the overlay will be positioned relative to the entire UI viewport.</p> <pre><code>public StardewUI.IView Parent { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#property-value_2","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/overlays/overlay/#parentoffset","title":"ParentOffset","text":"<p>Additional pixel offset to apply to the overlay's position, after alignments.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 ParentOffset { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#property-value_3","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/overlays/overlay/#verticalalignment","title":"VerticalAlignment","text":"<p>Vertical alignment of the overlay relative to the Parent edge.</p> <pre><code>public StardewUI.Layout.Alignment VerticalAlignment { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#property-value_4","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/overlays/overlay/#remarks_2","title":"Remarks","text":"<p>Specifies which edge of the overlay is used for positioning, regardless of which parent edge it is aligning to. For example, a VerticalAlignment of Start and a VerticalParentAlignment of End means that the overlay's top edge will be aligned to the parent's bottom edge; similarly, if both are set to Start, then the overlay's top edge is aligned to the parent's top edge.</p>"},{"location":"reference/stardewui/overlays/overlay/#verticalparentalignment","title":"VerticalParentAlignment","text":"<p>Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its VerticalAlignment.</p> <pre><code>public StardewUI.Layout.Alignment VerticalParentAlignment { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#property-value_5","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/overlays/overlay/#remarks_3","title":"Remarks","text":"<p>For example, a VerticalAlignment of Start and a VerticalParentAlignment of End means that the overlay's top edge will be aligned to the parent's bottom edge; similarly, if both are set to Start, then the overlay's top edge is aligned to the parent's top edge.</p>"},{"location":"reference/stardewui/overlays/overlay/#view","title":"View","text":"<p>The view to be displayed/interacted with as an overlay.</p> <pre><code>public StardewUI.IView View { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#property-value_6","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/overlays/overlay/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/overlays/overlay/#onclose","title":"OnClose()","text":"<p>Runs when the overlay is removed from the active stack.</p> <pre><code>public void OnClose();\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#oncloseaction","title":"OnClose(Action)","text":"<p>Registers an action to be run when the overlay is closed.</p> <pre><code>public StardewUI.Overlays.Overlay OnClose(System.Action onClose);\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#parameters_1","title":"Parameters","text":"<p><code>onClose</code> Action The action to run on close.</p>"},{"location":"reference/stardewui/overlays/overlay/#returns","title":"Returns","text":"<p>Overlay</p> <p>The current Overlay instance.</p>"},{"location":"reference/stardewui/overlays/overlay/#remarks_4","title":"Remarks","text":"<p>Typically chained to the constructor when creating a new overlay.</p>"},{"location":"reference/stardewui/overlays/overlay/#pop","title":"Pop()","text":"<p>Removes the front-most overlay.</p> <pre><code>public static StardewUI.Overlays.IOverlay Pop();\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#returns_1","title":"Returns","text":"<p>IOverlay</p>"},{"location":"reference/stardewui/overlays/overlay/#remarks_5","title":"Remarks","text":"<p>Applies to the ambient OverlayContext, and is ignored if no context is available.</p>"},{"location":"reference/stardewui/overlays/overlay/#pushioverlay","title":"Push(IOverlay)","text":"<p>Pushes an overlay to the front.</p> <pre><code>public static void Push(StardewUI.Overlays.IOverlay overlay);\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#parameters_2","title":"Parameters","text":"<p><code>overlay</code> IOverlay</p>"},{"location":"reference/stardewui/overlays/overlay/#remarks_6","title":"Remarks","text":"<p>If the specified <code>overlay</code> is already in the stack, then it will be moved from its previous position to the front. </p> <p>Applies to the ambient OverlayContext, and is ignored if no context is available.</p>"},{"location":"reference/stardewui/overlays/overlay/#removeioverlay","title":"Remove(IOverlay)","text":"<p>Removes a specific overlay from the stack, regardless of its position.</p> <pre><code>public static bool Remove(StardewUI.Overlays.IOverlay overlay);\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#parameters_3","title":"Parameters","text":"<p><code>overlay</code> IOverlay The overlay to remove.</p>"},{"location":"reference/stardewui/overlays/overlay/#returns_2","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the <code>overlay</code> was removed; <code>false</code> if it was not active.</p>"},{"location":"reference/stardewui/overlays/overlay/#remarks_7","title":"Remarks","text":"<p>This is most often invoked by an overlay needing to dismiss itself, e.g. an overlay with an \"OK\" or \"Close\" button. </p> <p>Applies to the ambient OverlayContext, and is ignored if no context is available.</p>"},{"location":"reference/stardewui/overlays/overlay/#events_1","title":"Events","text":""},{"location":"reference/stardewui/overlays/overlay/#close","title":"Close","text":"<p>Raised when the overlay is removed from the active stack.</p> <pre><code>public event EventHandler&lt;System.EventArgs&gt;? Close;\n</code></pre>"},{"location":"reference/stardewui/overlays/overlay/#event-type","title":"Event Type","text":"<p>EventHandler&lt;EventArgs&gt;</p>"},{"location":"reference/stardewui/overlays/overlaycontext/","title":"OverlayContext","text":""},{"location":"reference/stardewui/overlays/overlaycontext/#class-overlaycontext","title":"Class OverlayContext","text":""},{"location":"reference/stardewui/overlays/overlaycontext/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Overlays Assembly: StardewUI.dll  </p> <p>The context of an overlay, e.g. the active overlays for a particular menu or other non-overlay UI.</p> <pre><code>public class OverlayContext\n</code></pre> <p>Inheritance Object \u21e6 OverlayContext</p>"},{"location":"reference/stardewui/overlays/overlaycontext/#members","title":"Members","text":""},{"location":"reference/stardewui/overlays/overlaycontext/#constructors","title":"Constructors","text":"Name Description OverlayContext()"},{"location":"reference/stardewui/overlays/overlaycontext/#properties","title":"Properties","text":"Name Description Current The ambient context for the UI root that is currently being displayed or handling events. Front Gets the overlay at the front of the stack."},{"location":"reference/stardewui/overlays/overlaycontext/#methods","title":"Methods","text":"Name Description BackToFront() Iterates the stack from the back/bottom/least-recent overlay to the front/top/most-recent. FrontToBack() Iterates the stack from the front/top/most-recent overlay to the back/bottom/least-recent. Pop() Removes the front-most overlay. Push(IOverlay) Pushes an overlay to the front. Remove(IOverlay) Removes a specific overlay from the stack, regardless of its position."},{"location":"reference/stardewui/overlays/overlaycontext/#events","title":"Events","text":"Name Description Pushed Event raised when an overlay is pushed to the front."},{"location":"reference/stardewui/overlays/overlaycontext/#details","title":"Details","text":""},{"location":"reference/stardewui/overlays/overlaycontext/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/overlays/overlaycontext/#overlaycontext","title":"OverlayContext()","text":"<pre><code>public OverlayContext();\n</code></pre>"},{"location":"reference/stardewui/overlays/overlaycontext/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/overlays/overlaycontext/#current","title":"Current","text":"<p>The ambient context for the UI root that is currently being displayed or handling events.</p> <pre><code>public static StardewUI.Overlays.OverlayContext Current { get; set; }\n</code></pre>"},{"location":"reference/stardewui/overlays/overlaycontext/#property-value","title":"Property Value","text":"<p>OverlayContext</p>"},{"location":"reference/stardewui/overlays/overlaycontext/#front","title":"Front","text":"<p>Gets the overlay at the front of the stack.</p> <pre><code>public StardewUI.Overlays.IOverlay Front { get; }\n</code></pre>"},{"location":"reference/stardewui/overlays/overlaycontext/#property-value_1","title":"Property Value","text":"<p>IOverlay</p>"},{"location":"reference/stardewui/overlays/overlaycontext/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/overlays/overlaycontext/#backtofront","title":"BackToFront()","text":"<p>Iterates the stack from the back/bottom/least-recent overlay to the front/top/most-recent.</p> <pre><code>public System.Collections.Generic.IEnumerable&lt;StardewUI.Overlays.IOverlay&gt; BackToFront();\n</code></pre>"},{"location":"reference/stardewui/overlays/overlaycontext/#returns","title":"Returns","text":"<p>IEnumerable&lt;IOverlay&gt;</p>"},{"location":"reference/stardewui/overlays/overlaycontext/#fronttoback","title":"FrontToBack()","text":"<p>Iterates the stack from the front/top/most-recent overlay to the back/bottom/least-recent.</p> <pre><code>public System.Collections.Generic.IEnumerable&lt;StardewUI.Overlays.IOverlay&gt; FrontToBack();\n</code></pre>"},{"location":"reference/stardewui/overlays/overlaycontext/#returns_1","title":"Returns","text":"<p>IEnumerable&lt;IOverlay&gt;</p>"},{"location":"reference/stardewui/overlays/overlaycontext/#pop","title":"Pop()","text":"<p>Removes the front-most overlay.</p> <pre><code>public StardewUI.Overlays.IOverlay Pop();\n</code></pre>"},{"location":"reference/stardewui/overlays/overlaycontext/#returns_2","title":"Returns","text":"<p>IOverlay</p> <p>The overlay previously at the front, or <code>null</code> if no overlays were active.</p>"},{"location":"reference/stardewui/overlays/overlaycontext/#pushioverlay","title":"Push(IOverlay)","text":"<p>Pushes an overlay to the front.</p> <pre><code>public void Push(StardewUI.Overlays.IOverlay overlay);\n</code></pre>"},{"location":"reference/stardewui/overlays/overlaycontext/#parameters","title":"Parameters","text":"<p><code>overlay</code> IOverlay The overlay to display on top of the current UI and any other overlays.</p>"},{"location":"reference/stardewui/overlays/overlaycontext/#remarks","title":"Remarks","text":"<p>If the specified <code>overlay</code> is already in the stack, then it will be moved from its previous position to the front.</p>"},{"location":"reference/stardewui/overlays/overlaycontext/#removeioverlay","title":"Remove(IOverlay)","text":"<p>Removes a specific overlay from the stack, regardless of its position.</p> <pre><code>public bool Remove(StardewUI.Overlays.IOverlay overlay);\n</code></pre>"},{"location":"reference/stardewui/overlays/overlaycontext/#parameters_1","title":"Parameters","text":"<p><code>overlay</code> IOverlay The overlay to remove.</p>"},{"location":"reference/stardewui/overlays/overlaycontext/#returns_3","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the <code>overlay</code> was removed; <code>false</code> if it was not active.</p>"},{"location":"reference/stardewui/overlays/overlaycontext/#remarks_1","title":"Remarks","text":"<p>This is most often invoked by an overlay needing to dismiss itself, e.g. an overlay with an \"OK\" or \"Close\" button.</p>"},{"location":"reference/stardewui/overlays/overlaycontext/#events_1","title":"Events","text":""},{"location":"reference/stardewui/overlays/overlaycontext/#pushed","title":"Pushed","text":"<p>Event raised when an overlay is pushed to the front.</p> <pre><code>public event EventHandler&lt;System.EventArgs&gt;? Pushed;\n</code></pre>"},{"location":"reference/stardewui/overlays/overlaycontext/#event-type","title":"Event Type","text":"<p>EventHandler&lt;EventArgs&gt;</p>"},{"location":"reference/stardewui/overlays/overlaycontext/#remarks_2","title":"Remarks","text":"<p>This can either be a new overlay, or an overlay that was farther back and brought forward. After this event, the affected overlay will always be the Front.</p>"},{"location":"reference/stardewui/widgets/","title":"StardewUI.Widgets","text":""},{"location":"reference/stardewui/widgets/#stardewuiwidgets-namespace","title":"StardewUI.Widgets Namespace","text":""},{"location":"reference/stardewui/widgets/#classes","title":"Classes","text":"Name Description Banner Draws banner-style text with an optional background. Button Simple button with optional hover background. CheckBox A togglable checkbox. ComponentView Base class for custom widgets and \"app views\" with potentially complex hierarchy using a single root view. ComponentView&lt;T&gt; Base class for custom widgets and \"app views\" with potentially complex hierarchy using a single root view. DecoratorView A view that owns and delegates to an inner view. DecoratorView&lt;T&gt; A view that owns and delegates to an inner view. DecoratorView&lt;T&gt;.DecoratedProperty&lt;T, TValue&gt; Helper for propagating a single property to and from the inner view. DropDownList&lt;T&gt; Button/text field with a drop-down menu. Expander A widget that can be clicked to expand/collapse with additional content. FormBuilder Fluent builder style API for creating form-like tables within a view. Frame A view that holds another view, typically for the purpose of adding a border or background, or in some cases swapping out the content. GhostView A view that draws an exact copy of another view, generally with a tint and transparency to indicate that it is not the original view. Can be used for dragging, indicating target snap positions, etc. Grid A uniform grid containing other views. GridItemLayout Describes the layout of all items in a Grid. GridItemLayout.Count A GridItemLayout specifying the maximum divisions - rows or columns, depending on the grid's Orientation; items will be sized distributed uniformly along that axis. GridItemLayout.Length A GridItemLayout specifying that each item is to have the same fixed length (width or height, depending on the grid's Orientation) and to wrap to the next row/column afterward. Image A view that draws a sprite, scaled to the layout size. Label A view that renders a read-only text string. Lane Simple unidirectional layout that draws multiple child views in a row or column arrangement. Marquee A scrolling marquee supporting any inner content. NineGridPlacementEditor Editor widget for a NineGridPlacement, which brings up a PositioningOverlay on click. OutletAttribute Marks a child/children property as a named outlet. Panel A layout view whose children all overlap the same boundaries. PositioningOverlay An overlay that can be used to edit the position of some arbitrary content. PositioningOverlay.ControlScheme Configures the mapping of buttons to positioning actions in a PositioningOverlay. PositioningOverlay.GamepadControlScheme Configures the mapping of buttons to positioning actions in a PositioningOverlay. Includes the generic ControlScheme settings as well as grid-movement settings specific to gamepads. ScrollableFrameView Layout widget for a sectioned menu including a scrollable content area. ScrollableView Provides a content container and accompanying scrollbar. Scrollbar Controls the scrolling of a ScrollContainer. ScrollContainer Renders inner content clipped to a boundary and with a modifiable scroll offset. SelectionGroup Provides a single selection key with change notifications. Slider A horizontal track with draggable thumb (button) for choosing a numeric value in a range. Spacer An empty view whose sole purpose is to separate other elements. Tab A view with tab appearance, used to navigate sections of a larger complex menu. TextInput A text input field that allows typing from a physical or virtual keyboard. TinyNumberLabel Renders a single-line numeric label using custom digit sprites."},{"location":"reference/stardewui/widgets/#enums","title":"Enums","text":"Name Description ImageFit Specifies how an image should be scaled to fit the content area when the available size is different from the image size, and especially when it has a different aspect ratio. ShadowLayers Describes which shadow layers will be drawn, for widgets such as Label that support layered shadows."},{"location":"reference/stardewui/widgets/banner/","title":"Banner","text":""},{"location":"reference/stardewui/widgets/banner/#class-banner","title":"Class Banner","text":""},{"location":"reference/stardewui/widgets/banner/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Draws banner-style text with an optional background.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Banner : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 Banner</p>"},{"location":"reference/stardewui/widgets/banner/#remarks","title":"Remarks","text":"<p>This is very similar to a Label inside a Frame, but uses the special SpriteText font which is more prominent than any of the game's available SpriteFonts and often used for top-level headings/menu titles.</p>"},{"location":"reference/stardewui/widgets/banner/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/banner/#constructors","title":"Constructors","text":"Name Description Banner()"},{"location":"reference/stardewui/widgets/banner/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) Background Background sprite (including border) to draw underneath the text. BackgroundBorderThickness The thickness of the border edges within the Background. sprite. BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Inherited from View) Margin Margins (whitespace outside border) for this view.(Inherited from View) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Opacity Opacity (alpha level) of the view.(Inherited from View) OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) Tags The user-defined tags for this view.(Inherited from View) Text The text to display within the banner. TextShadowAlpha Alpha value for the text shadow, per layer in ShadowLayers. TextShadowColor Base color for the text shadow, before applying TextShadowAlpha. TextShadowLayers Specifies which layers of the text shadow should be drawn. TextShadowOffset Offset to draw the text shadow, which is a second copy of the Text drawn entirely black. Text shadows will not be visible unless TextShadowAlpha is non-zero. Tooltip Localized tooltip to display on hover, if any.(Inherited from View) Visibility Visibility for this view.(Inherited from View) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/banner/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Inherited from View) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Overrides View.GetBorderThickness()) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Inherited from View) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Inherited from View) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Overrides View.IsContentDirty()) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from View) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Overrides View.OnDrawBorder(ISpriteBatch)) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from View) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from View) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Overrides View.ResetDirty()) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from View) ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/banner/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/banner/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/banner/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/banner/#banner","title":"Banner()","text":"<pre><code>public Banner();\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/banner/#background","title":"Background","text":"<p>Background sprite (including border) to draw underneath the text.</p> <pre><code>public StardewUI.Graphics.Sprite Background { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#property-value","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/banner/#backgroundborderthickness","title":"BackgroundBorderThickness","text":"<p>The thickness of the border edges within the Background. sprite.</p> <pre><code>public StardewUI.Layout.Edges BackgroundBorderThickness { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#property-value_1","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/widgets/banner/#remarks_1","title":"Remarks","text":"<p>This property has no effect on the appearance of the Background, but affects how content is positioned inside the border. It is often correct to set it to the same value as the FixedEdges of the Background sprite, but the values are considered independent.</p>"},{"location":"reference/stardewui/widgets/banner/#text","title":"Text","text":"<p>The text to display within the banner.</p> <pre><code>public string Text { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/banner/#textshadowalpha","title":"TextShadowAlpha","text":"<p>Alpha value for the text shadow, per layer in ShadowLayers.</p> <pre><code>public float TextShadowAlpha { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#property-value_3","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/banner/#remarks_2","title":"Remarks","text":"<p>If set to zero, no text shadow will be drawn.</p>"},{"location":"reference/stardewui/widgets/banner/#textshadowcolor","title":"TextShadowColor","text":"<p>Base color for the text shadow, before applying TextShadowAlpha.</p> <pre><code>public Microsoft.Xna.Framework.Color TextShadowColor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#property-value_4","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/banner/#textshadowlayers","title":"TextShadowLayers","text":"<p>Specifies which layers of the text shadow should be drawn.</p> <pre><code>public StardewUI.Widgets.ShadowLayers TextShadowLayers { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#property-value_5","title":"Property Value","text":"<p>ShadowLayers</p>"},{"location":"reference/stardewui/widgets/banner/#remarks_3","title":"Remarks","text":"<p>Layers are additive, so the same TextShadowAlpha will have a different visual intensity depending on which layers are allowed. If set to None, then no shadow will be drawn.</p>"},{"location":"reference/stardewui/widgets/banner/#textshadowoffset","title":"TextShadowOffset","text":"<p>Offset to draw the text shadow, which is a second copy of the Text drawn entirely black. Text shadows will not be visible unless TextShadowAlpha is non-zero.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 TextShadowOffset { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#property-value_6","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/widgets/banner/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/banner/#getborderthickness","title":"GetBorderThickness()","text":"<p>Measures the thickness of each edge of the border, if the view has a border.</p> <pre><code>protected override StardewUI.Layout.Edges GetBorderThickness();\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#returns","title":"Returns","text":"<p>Edges</p> <p>The border edge thicknesses.</p>"},{"location":"reference/stardewui/widgets/banner/#remarks_4","title":"Remarks","text":"<p>Used only by views that will implement a border via OnDrawBorder(ISpriteBatch). The border thickness is considered during layout, and generally treated as additional Padding for the purposes of setting allowed content size. </p> <p>Borders usually have a static size, but if the thickness can change, then implementations must account for it in their dirty checking (IsContentDirty()).</p>"},{"location":"reference/stardewui/widgets/banner/#iscontentdirty","title":"IsContentDirty()","text":"<p>Checks whether or not the internal content/layout has changed.</p> <pre><code>protected override bool IsContentDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if content has changed; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/banner/#remarks_5","title":"Remarks","text":"<p>The base implementation of IsDirty() only checks if the base layout attributes have changed, i.e. Layout, Margin, Padding, etc. It does not know about content/data in any subclasses; those that accept content parameters (like text) will typically use DirtyTracker&lt;T&gt; to hold that content and should implement this method to check their IsDirty states.</p>"},{"location":"reference/stardewui/widgets/banner/#ondrawborderispritebatch","title":"OnDrawBorder(ISpriteBatch)","text":"<p>Draws the view's border, if it has one.</p> <pre><code>protected override void OnDrawBorder(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#parameters","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/banner/#remarks_6","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying Margin but before Padding.</p>"},{"location":"reference/stardewui/widgets/banner/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#parameters_1","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/banner/#remarks_7","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/banner/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#parameters_2","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/banner/#remarks_8","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/banner/#resetdirty","title":"ResetDirty()","text":"<p>Resets any dirty state associated with this view.</p> <pre><code>protected override void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/banner/#remarks_9","title":"Remarks","text":"<p>This is called at the end of Measure(Vector2), so that on the next pass, all state appears clean unless it was marked dirty after the last pass completed. The default implementation is a no-op; subclasses should use it to clear any private dirty state, e.g. via ResetDirty().</p>"},{"location":"reference/stardewui/widgets/button/","title":"Button","text":""},{"location":"reference/stardewui/widgets/button/#class-button","title":"Class Button","text":""},{"location":"reference/stardewui/widgets/button/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Simple button with optional hover background.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Button : StardewUI.Widgets.ComponentView&lt;T&gt;\n</code></pre> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 ComponentView&lt;T&gt; \u21e6 Button</p>"},{"location":"reference/stardewui/widgets/button/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/button/#constructors","title":"Constructors","text":"Name Description Button()"},{"location":"reference/stardewui/widgets/button/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) Content Content view to display inside the button frame. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) DefaultBackground The default background to show for the button's idle state. FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) Font Font with which to render button text. HoverBackground Alternate background sprite when the button has cursor focus. IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Margin Margin to add outside the button. Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) ShadowVisible Whether or not to display a drop shadow for the button frame. Default <code>false</code>. Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) Text Text to display inside the button. Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) View (Inherited from ComponentView&lt;T&gt;) Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/button/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) CreateView() Creates and returns the root view.(Overrides ComponentView&lt;T&gt;.CreateView()) Dispose() (Inherited from DecoratorView&lt;T&gt;) Draw(ISpriteBatch) Draws the content for this view.(Inherited from DecoratorView&lt;T&gt;) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from DecoratorView&lt;T&gt;) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from DecoratorView&lt;T&gt;) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Inherited from DecoratorView&lt;T&gt;) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/button/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/button/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/button/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/button/#button","title":"Button()","text":"<pre><code>public Button();\n</code></pre>"},{"location":"reference/stardewui/widgets/button/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/button/#content","title":"Content","text":"<p>Content view to display inside the button frame.</p> <pre><code>public StardewUI.IView Content { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/button/#property-value","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/button/#defaultbackground","title":"DefaultBackground","text":"<p>The default background to show for the button's idle state.</p> <pre><code>public StardewUI.Graphics.Sprite DefaultBackground { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/button/#property-value_1","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/button/#font","title":"Font","text":"<p>Font with which to render button text.</p> <pre><code>public Microsoft.Xna.Framework.Graphics.SpriteFont Font { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/button/#property-value_2","title":"Property Value","text":"<p>SpriteFont</p>"},{"location":"reference/stardewui/widgets/button/#remarks","title":"Remarks","text":"<p>This setting only applies when the Content view is a Label, either via passing in a Label directly or by setting Text.</p>"},{"location":"reference/stardewui/widgets/button/#hoverbackground","title":"HoverBackground","text":"<p>Alternate background sprite when the button has cursor focus.</p> <pre><code>public StardewUI.Graphics.Sprite HoverBackground { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/button/#property-value_3","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/button/#margin","title":"Margin","text":"<p>Margin to add outside the button.</p> <pre><code>public StardewUI.Layout.Edges Margin { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/button/#property-value_4","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/widgets/button/#shadowvisible","title":"ShadowVisible","text":"<p>Whether or not to display a drop shadow for the button frame. Default <code>false</code>.</p> <pre><code>public bool ShadowVisible { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/button/#property-value_5","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/widgets/button/#text","title":"Text","text":"<p>Text to display inside the button.</p> <pre><code>public string Text { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/button/#property-value_6","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/button/#remarks_1","title":"Remarks","text":"<p>If the Content is not a Label then this is always <code>null</code>, even if there is a label nested somewhere inside a different type of view. Setting this to any string value will replace the Content view with a Label having the specified text.</p>"},{"location":"reference/stardewui/widgets/button/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/button/#createview","title":"CreateView()","text":"<p>Creates and returns the root view.</p> <pre><code>protected override StardewUI.View CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/button/#returns","title":"Returns","text":"<p>View</p>"},{"location":"reference/stardewui/widgets/checkbox/","title":"CheckBox","text":""},{"location":"reference/stardewui/widgets/checkbox/#class-checkbox","title":"Class CheckBox","text":""},{"location":"reference/stardewui/widgets/checkbox/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A togglable checkbox.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class CheckBox : StardewUI.Widgets.ComponentView&lt;T&gt;\n</code></pre> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 ComponentView&lt;T&gt; \u21e6 CheckBox</p>"},{"location":"reference/stardewui/widgets/checkbox/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/checkbox/#constructors","title":"Constructors","text":"Name Description CheckBox()"},{"location":"reference/stardewui/widgets/checkbox/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) CheckedSprite Sprite to display when the box is checked, if not using the default. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) IsChecked Whether or not the box is checked. IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) LabelColor Color with which to render any LabelText. LabelText Optional label text to be displayed to the right of the checkbox image. Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) UncheckedSprite Sprite to display when the box is unchecked, if not using the default. View (Inherited from ComponentView&lt;T&gt;) Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/checkbox/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) CreateView() Creates and returns the root view.(Overrides ComponentView&lt;T&gt;.CreateView()) Dispose() (Inherited from DecoratorView&lt;T&gt;) Draw(ISpriteBatch) Draws the content for this view.(Inherited from DecoratorView&lt;T&gt;) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from DecoratorView&lt;T&gt;) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from DecoratorView&lt;T&gt;) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Inherited from DecoratorView&lt;T&gt;) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/checkbox/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Change Event raised when the checked state changes. Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/checkbox/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/checkbox/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/checkbox/#checkbox","title":"CheckBox()","text":"<pre><code>public CheckBox();\n</code></pre>"},{"location":"reference/stardewui/widgets/checkbox/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/checkbox/#checkedsprite","title":"CheckedSprite","text":"<p>Sprite to display when the box is checked, if not using the default.</p> <pre><code>public StardewUI.Graphics.Sprite CheckedSprite { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/checkbox/#property-value","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/checkbox/#ischecked","title":"IsChecked","text":"<p>Whether or not the box is checked.</p> <pre><code>public bool IsChecked { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/checkbox/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/widgets/checkbox/#labelcolor","title":"LabelColor","text":"<p>Color with which to render any LabelText.</p> <pre><code>public Microsoft.Xna.Framework.Color LabelColor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/checkbox/#property-value_2","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/checkbox/#labeltext","title":"LabelText","text":"<p>Optional label text to be displayed to the right of the checkbox image.</p> <pre><code>public string LabelText { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/checkbox/#property-value_3","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/checkbox/#remarks","title":"Remarks","text":"<p>The label text is clickable as part of the checkbox, but does not receive focus.</p>"},{"location":"reference/stardewui/widgets/checkbox/#uncheckedsprite","title":"UncheckedSprite","text":"<p>Sprite to display when the box is unchecked, if not using the default.</p> <pre><code>public StardewUI.Graphics.Sprite UncheckedSprite { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/checkbox/#property-value_4","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/checkbox/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/checkbox/#createview","title":"CreateView()","text":"<p>Creates and returns the root view.</p> <pre><code>protected override StardewUI.Widgets.Lane CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/checkbox/#returns","title":"Returns","text":"<p>Lane</p>"},{"location":"reference/stardewui/widgets/checkbox/#events_1","title":"Events","text":""},{"location":"reference/stardewui/widgets/checkbox/#change","title":"Change","text":"<p>Event raised when the checked state changes.</p> <pre><code>public event EventHandler&lt;System.EventArgs&gt;? Change;\n</code></pre>"},{"location":"reference/stardewui/widgets/checkbox/#event-type","title":"Event Type","text":"<p>EventHandler&lt;EventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/componentview-1/","title":"ComponentView&lt;T&gt;","text":""},{"location":"reference/stardewui/widgets/componentview-1/#class-componentviewt","title":"Class ComponentView&lt;T&gt;","text":""},{"location":"reference/stardewui/widgets/componentview-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Base class for custom widgets and \"app views\" with potentially complex hierarchy using a single root view.</p> <pre><code>public class ComponentView&lt;T&gt; : StardewUI.Widgets.DecoratorView&lt;T&gt;\n</code></pre>"},{"location":"reference/stardewui/widgets/componentview-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> Type of view used for the root.</p> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 ComponentView&lt;T&gt;</p>"},{"location":"reference/stardewui/widgets/componentview-1/#remarks","title":"Remarks","text":"<p>This implements all the boilerplate of an IView without having to actually implement a totally custom View; instead, it delegates all functionality to the inner (root) IView. </p> <p>The typical use case is for what is often called \"Components\", \"Layouts\", \"User Controls\", etc., in which a class defines both the view hierarchy and an API for interacting with the view and underlying data at the same time. The top-level layout is created in CreateView(), and child views can be added on creation or at any later time. More importantly, since the subclass decides what children to create, it can also store references to those children for the purposes of updating the UI, responding to events, etc. </p> <p>Component views can be composed like any other views, or used in a ViewMenu&lt;T&gt;.</p>"},{"location":"reference/stardewui/widgets/componentview-1/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/componentview-1/#constructors","title":"Constructors","text":"Name Description ComponentView&lt;T&gt;() Initializes a new instance of ComponentView&lt;T&gt;."},{"location":"reference/stardewui/widgets/componentview-1/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) View The inner view that is decorated by this view. Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/componentview-1/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) CreateView() Creates and returns the root view. Dispose() (Inherited from DecoratorView&lt;T&gt;) Draw(ISpriteBatch) Draws the content for this view.(Inherited from DecoratorView&lt;T&gt;) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from DecoratorView&lt;T&gt;) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from DecoratorView&lt;T&gt;) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Inherited from DecoratorView&lt;T&gt;) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/componentview-1/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/componentview-1/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/componentview-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/componentview-1/#componentviewt","title":"ComponentView&lt;T&gt;()","text":"<p>Initializes a new instance of ComponentView&lt;T&gt;.</p> <pre><code>public ComponentView&lt;T&gt;();\n</code></pre>"},{"location":"reference/stardewui/widgets/componentview-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/componentview-1/#view","title":"View","text":"<p>The inner view that is decorated by this view.</p> <pre><code>protected T View { get; private set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/componentview-1/#property-value","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/widgets/componentview-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/componentview-1/#createview","title":"CreateView()","text":"<p>Creates and returns the root view.</p> <pre><code>protected virtual T CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/componentview-1/#returns","title":"Returns","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/widgets/componentview/","title":"ComponentView","text":""},{"location":"reference/stardewui/widgets/componentview/#class-componentview","title":"Class ComponentView","text":""},{"location":"reference/stardewui/widgets/componentview/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Base class for custom widgets and \"app views\" with potentially complex hierarchy using a single root view.</p> <pre><code>public class ComponentView : StardewUI.Widgets.ComponentView&lt;T&gt;\n</code></pre> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 ComponentView&lt;T&gt; \u21e6 ComponentView</p>"},{"location":"reference/stardewui/widgets/componentview/#remarks","title":"Remarks","text":"<p>This implements all the boilerplate of an IView without having to actually implement a totally custom View; instead, it delegates all functionality to the inner (root) IView. </p> <p>The typical use case is for what is often called \"Components\", \"Layouts\", \"User Controls\", etc., in which a class defines both the view hierarchy and an API for interacting with the view and underlying data at the same time. The top-level layout is created in CreateView(), and child views can be added on creation or at any later time. More importantly, since the subclass decides what children to create, it can also store references to those children for the purposes of updating the UI, responding to events, etc. </p> <p>Component views can be composed like any other views, or used in a ViewMenu&lt;T&gt;.</p>"},{"location":"reference/stardewui/widgets/componentview/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/componentview/#constructors","title":"Constructors","text":"Name Description ComponentView()"},{"location":"reference/stardewui/widgets/componentview/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) View (Inherited from ComponentView&lt;T&gt;) Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/componentview/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) CreateView() Creates and returns the root view.(Inherited from ComponentView&lt;T&gt;) Dispose() (Inherited from DecoratorView&lt;T&gt;) Draw(ISpriteBatch) Draws the content for this view.(Inherited from DecoratorView&lt;T&gt;) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from DecoratorView&lt;T&gt;) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from DecoratorView&lt;T&gt;) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Inherited from DecoratorView&lt;T&gt;) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/componentview/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/componentview/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/componentview/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/componentview/#componentview","title":"ComponentView()","text":"<pre><code>protected ComponentView();\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/","title":"DecoratorView&lt;T&gt;.DecoratedProperty&lt;T, TValue&gt;","text":""},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#class-decoratorviewtdecoratedpropertyt-tvalue","title":"Class DecoratorView&lt;T&gt;.DecoratedProperty&lt;T, TValue&gt;","text":""},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Helper for propagating a single property to and from the inner view.</p> <pre><code>protected class DecoratorView&lt;T&gt;.DecoratedProperty&lt;T, TValue&gt;\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> </p> <p><code>TValue</code> The type of value tracked.</p> <p>Inheritance Object \u21e6 DecoratedProperty&lt;T, TValue&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#remarks","title":"Remarks","text":"<p>Decorated properties must be initialized in the decorator's constructor by calling RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;), and have the following behavior: </p> <ul> <li>The current value is tracked independently of the inner view;</li> <li>If the current value has not been set, then it is ignored when initializing a new view;</li> <li>If the current value has been set, the view's value is overwritten on initialization.</li> </ul>"},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#constructors","title":"Constructors","text":"Name Description DecoratedProperty&lt;T, TValue&gt;(Func&lt;T, TValue&gt;, Action&lt;T, TValue&gt;, TValue) Helper for propagating a single property to and from the inner view."},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#methods","title":"Methods","text":"Name Description Get() Gets the current value from the inner view. Set(TValue) Updates the property value, also updating the inner view if one exists. Update() Updates the inner view's property to the most recent value, if one has been set on the decorated property."},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#decoratedpropertyt-tvaluefunct-tvalue-actiont-tvalue-tvalue","title":"DecoratedProperty&lt;T, TValue&gt;(Func&lt;T, TValue&gt;, Action&lt;T, TValue&gt;, TValue)","text":"<p>Helper for propagating a single property to and from the inner view.</p> <pre><code>public DecoratedProperty&lt;T, TValue&gt;(Func&lt;T, TValue&gt; getValue, Action&lt;T, TValue&gt; setValue, TValue defaultValue);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#parameters","title":"Parameters","text":"<p><code>getValue</code> Func&lt;T, TValue&gt; Function to retrieve the current value from the inner view.</p> <p><code>setValue</code> Action&lt;T, TValue&gt; Delegate to change the current value on the inner view.</p> <p><code>defaultValue</code> \u00a0 TValue The initial value to return from Get() if no view exists and the value has not been changed. This is never written to the view, it is only used by Get() and is effectively a hack to allow DecoratedProperty&lt;T, TValue&gt; to deal with value (struct) types.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#remarks_1","title":"Remarks","text":"<p>Decorated properties must be initialized in the decorator's constructor by calling RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;), and have the following behavior: </p> <ul> <li>The current value is tracked independently of the inner view;</li> <li>If the current value has not been set, then it is ignored when initializing a new view;</li> <li>If the current value has been set, the view's value is overwritten on initialization.</li> </ul>"},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#get","title":"Get()","text":"<p>Gets the current value from the inner view.</p> <pre><code>public TValue Get();\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#returns","title":"Returns","text":"<p><code>TValue</code></p> <p>The value from the current view, if the view is non-null; otherwise, the default value configured for this property.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#settvalue","title":"Set(TValue)","text":"<p>Updates the property value, also updating the inner view if one exists.</p> <pre><code>public void Set(TValue value);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#parameters_1","title":"Parameters","text":"<p><code>value</code> \u00a0 TValue The new value.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#remarks_2","title":"Remarks","text":"<p>If the inner view has not been created yet, then its corresponding property will be updated as soon as it is assigned to the View.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#update","title":"Update()","text":"<p>Updates the inner view's property to the most recent value, if one has been set on the decorated property.</p> <pre><code>public void Update();\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1.decoratedproperty-1/#remarks_3","title":"Remarks","text":"<p>If there have been no calls to Set(TValue), then the view is left untouched, to preserve any non-default settings on the inner view.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/","title":"DecoratorView&lt;T&gt;","text":""},{"location":"reference/stardewui/widgets/decoratorview-1/#class-decoratorviewt","title":"Class DecoratorView&lt;T&gt;","text":""},{"location":"reference/stardewui/widgets/decoratorview-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A view that owns and delegates to an inner view.</p> <pre><code>public class DecoratorView&lt;T&gt; : StardewUI.IView, System.IDisposable, \n    System.ComponentModel.INotifyPropertyChanged\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The specific type of view that the decorator owns.</p> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt;</p> <p>Implements IView, IDisposable, INotifyPropertyChanged</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks","title":"Remarks","text":"<p>Decorator views, while not abstract, are used as a base type for other composite views, and primarily intended for framework use. Custom widgets should normally use ComponentView&lt;T&gt; instead, which incorporates lazy loading and other conveniences for minimalistic implementations. </p> <p>The inner view is considered to be owned by the decorator; it will be assigned any values that were assigned to the decorator itself, such as Layout, and if it implements IDisposable, then it will be disposed along with the decorator.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/decoratorview-1/#constructors","title":"Constructors","text":"Name Description DecoratorView&lt;T&gt;() Initializes a new DecoratorView&lt;T&gt; instance."},{"location":"reference/stardewui/widgets/decoratorview-1/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0). ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins. FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants. IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls. Layout The current layout parameters, which determine how Measure(Vector2) will behave. Name Simple name for this view, used in log/debug output; does not affect behavior. Opacity Opacity (alpha level) of the view. OuterSize The true computed layout size resulting from a single Measure(Vector2) pass. PointerEventsEnabled Whether this view should receive pointer events like Click or Drag. ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it. Tags The user-defined tags for this view. Tooltip Tooltip data to display on hover, if any. View The inner view that is decorated by this view. Visibility Drawing visibility for this view. ZIndex Z order for this view within its direct parent. Higher indices draw later (on top)."},{"location":"reference/stardewui/widgets/decoratorview-1/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds. Dispose() Draw(ISpriteBatch) Draws the content for this view. FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position. GetChildAt(Vector2) Finds the child at a given position. GetChildPosition(IView) Computes or retrieves the position of a given direct child. GetChildren() Gets the current children of this view. GetChildrenAt(Vector2) Finds all children at a given position. GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened. HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds. IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2). Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions. OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path. OnClick(ClickEventArgs) Called when a click is received within this view's bounds. OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held). OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs). OnLayout() Runs whenever layout occurs as a result of the UI elements changing. OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs. OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event. OnPropertyChanged(string) Raises the PropertyChanged event. OnUpdate(TimeSpan) Runs on every update tick. OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds. RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;. ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view."},{"location":"reference/stardewui/widgets/decoratorview-1/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed. Click Event raised when the view receives a click initiated from any button. Drag Event raised when the view is being dragged using the mouse. DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation. DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation. LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A). PointerEnter Event raised when the pointer enters the view. PointerLeave Event raised when the pointer exits the view. PointerMove Event raised when the pointer moves within the view. PropertyChanged RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X). Wheel Event raised when the scroll wheel moves."},{"location":"reference/stardewui/widgets/decoratorview-1/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/decoratorview-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/decoratorview-1/#decoratorviewt","title":"DecoratorView&lt;T&gt;()","text":"<p>Initializes a new DecoratorView&lt;T&gt; instance.</p> <pre><code>public DecoratorView&lt;T&gt;();\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/decoratorview-1/#actualbounds","title":"ActualBounds","text":"<p>The bounds of this view relative to the origin (0, 0).</p> <pre><code>public StardewUI.Layout.Bounds ActualBounds { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value","title":"Property Value","text":"<p>Bounds</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_1","title":"Remarks","text":"<p>Typically, a view's bounds is the rectangle from (0, 0) having size of OuterSize, but there may be a difference especially in the case of negative margins. The various sizes affect layout flow and can even be negative - for example, in a left-to-right layout, a view with left margin -100, right margin 20 and inner width 30 (no padding) has an X size of -50, indicating that it actually (correctly) causes adjacent views to be pulled left along with it. However, <code>ActualBounds</code> always has a positive Size, and if an implicit content offset is being applied (e.g. because of negative margins) then it will be reflected in Position and not affect the Size; the previous example would have position X = -100 and size X = 50 (30 content + 20 right margin). </p> <p>In terms of usage, OuterSize is generally used for the layout itself (Measure(Vector2) and OnMeasure(Vector2) of parent views) whereas ActualBounds is preferred for click and focus targeting.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#contentbounds","title":"ContentBounds","text":"<p>The true bounds of this view's content; i.e. ActualBounds excluding margins.</p> <pre><code>public StardewUI.Layout.Bounds ContentBounds { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_1","title":"Property Value","text":"<p>Bounds</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#floatingbounds","title":"FloatingBounds","text":"<p>Contains the bounds of all floating elements in this view tree, including the current view and all descendants.</p> <pre><code>public System.Collections.Generic.IEnumerable&lt;StardewUI.Layout.Bounds&gt; FloatingBounds { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_2","title":"Property Value","text":"<p>IEnumerable&lt;Bounds&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#isfocusable","title":"IsFocusable","text":"<p>Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.</p> <pre><code>public bool IsFocusable { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_2","title":"Remarks","text":"<p>In other game UI code this is more typically referred to as \"snap\", since there is no true input focus. However, focus is the more general term and better explains what is happening with e.g. a text box.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#layout","title":"Layout","text":"<p>The current layout parameters, which determine how Measure(Vector2) will behave.</p> <pre><code>public StardewUI.Layout.LayoutParameters Layout { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_4","title":"Property Value","text":"<p>LayoutParameters</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#name","title":"Name","text":"<p>Simple name for this view, used in log/debug output; does not affect behavior.</p> <pre><code>public string Name { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_5","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#opacity","title":"Opacity","text":"<p>Opacity (alpha level) of the view.</p> <pre><code>public float Opacity { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_6","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_3","title":"Remarks","text":"<p>Affects this view and all descendants; used to control opacity of an entire control or layout area.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#outersize","title":"OuterSize","text":"<p>The true computed layout size resulting from a single Measure(Vector2) pass.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 OuterSize { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_7","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#pointereventsenabled","title":"PointerEventsEnabled","text":"<p>Whether this view should receive pointer events like Click or Drag.</p> <pre><code>public bool PointerEventsEnabled { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_8","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_4","title":"Remarks","text":"<p>By default, all views receive pointer events; this may be disabled for views that intentionally overlap other views but shouldn't block their input, such as local non-modal overlays.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#scrollwithchildren","title":"ScrollWithChildren","text":"<p>If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.</p> <pre><code>public StardewUI.Layout.Orientation? ScrollWithChildren { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_9","title":"Property Value","text":"<p>Nullable&lt;Orientation&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_5","title":"Remarks","text":"<p>For example, if the view lays out children horizontally, and some children may occupy only a very small amount of space near the top while others are much taller vertically or positioned near the bottom, it might be desirable to configure this with Vertical, so that the entire \"row\" is positioned within the scrollable viewport. </p> <p>In other words, \"if any part of me is made visible via scrolling, then all of me should be visible\".</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#tags","title":"Tags","text":"<p>The user-defined tags for this view.</p> <pre><code>public StardewUI.Tags Tags { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_10","title":"Property Value","text":"<p>Tags</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#tooltip","title":"Tooltip","text":"<p>Tooltip data to display on hover, if any.</p> <pre><code>public StardewUI.Data.TooltipData Tooltip { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_11","title":"Property Value","text":"<p>TooltipData</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#view","title":"View","text":"<p>The inner view that is decorated by this view.</p> <pre><code>protected T View { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_12","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#visibility","title":"Visibility","text":"<p>Drawing visibility for this view.</p> <pre><code>public StardewUI.Layout.Visibility Visibility { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_13","title":"Property Value","text":"<p>Visibility</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#zindex","title":"ZIndex","text":"<p>Z order for this view within its direct parent. Higher indices draw later (on top).</p> <pre><code>public int ZIndex { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#property-value_14","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/decoratorview-1/#containspointvector2","title":"ContainsPoint(Vector2)","text":"<p>Checks if a given point, relative to the view's origin, is within its bounds.</p> <pre><code>public virtual bool ContainsPoint(Microsoft.Xna.Framework.Vector2 point);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters","title":"Parameters","text":"<p><code>point</code> Vector2 The point to test.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if <code>point</code> is within the view bounds; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#dispose","title":"Dispose()","text":"<pre><code>public virtual void Dispose();\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#drawispritebatch","title":"Draw(ISpriteBatch)","text":"<p>Draws the content for this view.</p> <pre><code>public virtual void Draw(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_1","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_6","title":"Remarks","text":"<p>No positional argument is included because ISpriteBatch handles its own transformations; the top-left coordinates of this view are always (0, 0).</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#focussearchvector2-direction","title":"FocusSearch(Vector2, Direction)","text":"<p>Finds the next focusable component in a given direction that does not overlap with a current position.</p> <pre><code>public virtual StardewUI.Input.FocusSearchResult FocusSearch(Microsoft.Xna.Framework.Vector2 position, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_2","title":"Parameters","text":"<p><code>position</code> Vector2 The current cursor position, relative to this view. May have dimensions that are negative or outside the view bounds, indicating that the cursor is not currently within the view.</p> <p><code>direction</code> Direction The direction of cursor movement.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#returns_1","title":"Returns","text":"<p>FocusSearchResult</p> <p>The next focusable view reached by moving in the specified <code>direction</code>, or <code>null</code> if there are no focusable descendants that are possible to reach in that direction.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_7","title":"Remarks","text":"<p>If <code>position</code> is out of bounds, it does not necessarily mean that the view should return <code>null</code>; the expected result depends on the <code>direction</code> also. The base case is when the focus position is already in bounds, and in this case a view should return whichever view can be reached by moving from the edge of that view along a straight line in the specified <code>direction</code>. However, focus search is recursive and the result should reflect the \"best\" candidate for focus if the cursor were to move into this view's bounds. For example, in a 1D horizontal layout the rules might be: </p> <ul> <li>If the <code>direction</code> is East, and the position's X value is negative, then the result should the leftmost focusable child, regardless of Y value.</li> <li>If the direction is South, and the X position is within the view's horizontal bounds, and the Y value is negative or greater than the view's height, then result should be whichever child intersects with that X position.</li> <li>If the direction is West and the X position is negative, or the direction is East and the X position is greater than the view's width, then the result should be <code>null</code> as there is literally nothing the view knows about in that direction.</li> </ul> <p>There are no strict rules for how a view performs focus search, but in general it is assumed that a view implementation understands its own layout and can accommodate accordingly; for example, a grid would follow essentially the same rules as our \"list\" example above, with additional considerations for navigating rows. \"Ragged\" 2D layouts might have complex rules requiring explicit neighbors, and therefore are typically easier to implement as nested lanes.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#getchildatvector2","title":"GetChildAt(Vector2)","text":"<p>Finds the child at a given position.</p> <pre><code>public virtual StardewUI.ViewChild GetChildAt(Microsoft.Xna.Framework.Vector2 position);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_3","title":"Parameters","text":"<p><code>position</code> Vector2 The search position, relative to the view's top-left coordinate.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#returns_2","title":"Returns","text":"<p>ViewChild</p> <p>The view at <code>position</code>, or <code>null</code> if there is no match.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_8","title":"Remarks","text":"<p>If multiple children overlap the same position, then this returns the topmost child.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#getchildpositioniview","title":"GetChildPosition(IView)","text":"<p>Computes or retrieves the position of a given direct child.</p> <pre><code>public virtual Microsoft.Xna.Framework.Vector2? GetChildPosition(StardewUI.IView childView);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_4","title":"Parameters","text":"<p><code>childView</code> IView The child of this view.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#returns_3","title":"Returns","text":"<p>Nullable&lt;Vector2&gt;</p> <p>The local coordinates of the <code>childView</code>, or <code>null</code> if the <code>childView</code> is not a current or direct child.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_9","title":"Remarks","text":"<p>Implementation of this may be O(N) and therefore it should not be called every frame; it is intended for use in directional movement and other user-initiated events.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#getchildren","title":"GetChildren()","text":"<p>Gets the current children of this view.</p> <pre><code>public virtual System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetChildren();\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#returns_4","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#getchildrenatvector2","title":"GetChildrenAt(Vector2)","text":"<p>Finds all children at a given position.</p> <pre><code>public virtual System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetChildrenAt(Microsoft.Xna.Framework.Vector2 position);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_5","title":"Parameters","text":"<p><code>position</code> Vector2 The search position, relative to the view's top-left coordinate.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#returns_5","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p> <p>A sequence of views at the specified <code>position</code>, in front-to-back (reverse ZIndex) order.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#getdefaultfocuschild","title":"GetDefaultFocusChild()","text":"<p>Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.</p> <pre><code>public virtual StardewUI.ViewChild GetDefaultFocusChild();\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#returns_6","title":"Returns","text":"<p>ViewChild</p> <p>The child view and position where initial focus should be, either directly or indirectly as a result of a descendant receiving focus. If this IView is itself IsFocusable, then the result may be a ViewChild referencing this view.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#hasoutofboundscontent","title":"HasOutOfBoundsContent()","text":"<p>Checks if the view has content or elements that are all or partially outside the ActualBounds.</p> <pre><code>public virtual bool HasOutOfBoundsContent();\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#returns_7","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_10","title":"Remarks","text":"<p>This may be the case for e.g. floating elements, and covers not only the view's immediate content/children but also that of any descendants.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#isdirty","title":"IsDirty()","text":"<p>Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).</p> <pre><code>public virtual bool IsDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#returns_8","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if the view must be measured again; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_11","title":"Remarks","text":"<p>Typically, a view will be considered dirty if and only if one of the following are true: </p> <ul> <li>The Layout has changed</li> <li>The content has changed in a way that could affect layout, e.g. the text has changed in a Content configuration</li> <li>The <code>availableSize</code> is not the same as the previously-seen value (see remarks in Measure(Vector2))</li> </ul> <p>A correct implementation is important for performance, as full layout can be very expensive to run on every frame.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#measurevector2","title":"Measure(Vector2)","text":"<p>Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.</p> <pre><code>public virtual bool Measure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_6","title":"Parameters","text":"<p><code>availableSize</code> Vector2 The width/height that is still available in the container/parent.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#returns_9","title":"Returns","text":"<p>Boolean</p> <p>Whether or not any layout was performed as a result of this pass. Callers may use this to propagate layout back up the tree, or perform expensive follow-up actions.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_12","title":"Remarks","text":"<p>Most views should save the value of <code>availableSize</code> for use in IsDirty() checks.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#onbuttonpressbuttoneventargs","title":"OnButtonPress(ButtonEventArgs)","text":"<p>Called when a button press is received while this view is in the focus path.</p> <pre><code>public virtual void OnButtonPress(StardewUI.Events.ButtonEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_7","title":"Parameters","text":"<p><code>e</code> ButtonEventArgs The event data.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#onclickclickeventargs","title":"OnClick(ClickEventArgs)","text":"<p>Called when a click is received within this view's bounds.</p> <pre><code>public virtual void OnClick(StardewUI.Events.ClickEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_8","title":"Parameters","text":"<p><code>e</code> ClickEventArgs The event data.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#ondragpointereventargs","title":"OnDrag(PointerEventArgs)","text":"<p>Called when the view is being dragged (mouse moved while left button held).</p> <pre><code>public virtual void OnDrag(StardewUI.Events.PointerEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_9","title":"Parameters","text":"<p><code>e</code> PointerEventArgs The event data.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#ondroppointereventargs","title":"OnDrop(PointerEventArgs)","text":"<p>Called when the mouse button is released after at least one OnDrag(PointerEventArgs).</p> <pre><code>public virtual void OnDrop(StardewUI.Events.PointerEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_10","title":"Parameters","text":"<p><code>e</code> PointerEventArgs The event data.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#onlayout","title":"OnLayout()","text":"<p>Runs whenever layout occurs as a result of the UI elements changing.</p> <pre><code>protected virtual void OnLayout();\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#onpointermovepointermoveeventargs","title":"OnPointerMove(PointerMoveEventArgs)","text":"<p>Called when a pointer movement related to this view occurs.</p> <pre><code>public virtual void OnPointerMove(StardewUI.Events.PointerMoveEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_11","title":"Parameters","text":"<p><code>e</code> PointerMoveEventArgs The event data.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_13","title":"Remarks","text":"<p>This can either be the pointer entering the view, leaving the view, or moving within the view. The method is used to trigger events such as PointerEnter and PointerLeave.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#onpropertychangedpropertychangedeventargs","title":"OnPropertyChanged(PropertyChangedEventArgs)","text":"<p>Raises the PropertyChanged event.</p> <pre><code>protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs args);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_12","title":"Parameters","text":"<p><code>args</code> PropertyChangedEventArgs The event arguments.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#onpropertychangedstring","title":"OnPropertyChanged(string)","text":"<p>Raises the PropertyChanged event.</p> <pre><code>protected virtual void OnPropertyChanged(string propertyName);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_13","title":"Parameters","text":"<p><code>propertyName</code> string The name of the property that was changed.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#onupdatetimespan","title":"OnUpdate(TimeSpan)","text":"<p>Runs on every update tick.</p> <pre><code>public virtual void OnUpdate(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_14","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan Time elapsed since last game tick.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_14","title":"Remarks","text":"<p>Provided as an escape hatch for very unusual scenarios like responding to flips in the game's gamepadControls state. </p> <p>Override this at your own extreme peril. Frequently performing any layout-affecting logic in this function can negate the performance benefits of a retained-mode UI and cause the UI to become sluggish or even completely unresponsive.  Do not use it for animation; use Animator instead.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#onwheelwheeleventargs","title":"OnWheel(WheelEventArgs)","text":"<p>Called when a wheel event is received within this view's bounds.</p> <pre><code>public virtual void OnWheel(StardewUI.Events.WheelEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_15","title":"Parameters","text":"<p><code>e</code> WheelEventArgs The event data.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#registerdecoratedpropertytvaluedecoratedpropertyt-tvalue","title":"RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;)","text":"<p>Registers a DecoratedProperty&lt;T, TValue&gt;.</p> <pre><code>protected void RegisterDecoratedProperty&lt;TValue&gt;(StardewUI.Widgets.DecoratorView&lt;T&gt;.DecoratedProperty&lt;T, TValue&gt; property);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_16","title":"Parameters","text":"<p><code>property</code> DecoratedProperty&lt;T, TValue&gt; The property to register.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_15","title":"Remarks","text":"<p>All DecoratedProperty&lt;T, TValue&gt; fields must be registered in the constructor or before they are read from or written to.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#scrollintoviewienumerableviewchild-vector2","title":"ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)","text":"<p>Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.</p> <pre><code>public virtual bool ScrollIntoView(System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; path, out Microsoft.Xna.Framework.Vector2 distance);\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#parameters_17","title":"Parameters","text":"<p><code>path</code> IEnumerable&lt;ViewChild&gt; The path to the view that should be visible, starting from (and not including) this view; each element has the local position within its own parent, so the algorithm can run recursively. This is a slice of the same path returned in a FocusSearchResult.</p> <p><code>distance</code> Vector2 The total distance that was scrolled, including distance scrolled by descendants.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#returns_10","title":"Returns","text":"<p>Boolean</p> <p>Whether or not the scroll was successful; <code>false</code> prevents the request from bubbling.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#events_1","title":"Events","text":""},{"location":"reference/stardewui/widgets/decoratorview-1/#buttonpress","title":"ButtonPress","text":"<p>Event raised when any button on any input device is pressed.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.ButtonEventArgs&gt;? ButtonPress;\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#event-type","title":"Event Type","text":"<p>EventHandler&lt;ButtonEventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_16","title":"Remarks","text":"<p>Only the views in the current focus path should receive these events.</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#click","title":"Click","text":"<p>Event raised when the view receives a click initiated from any button.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.ClickEventArgs&gt;? Click;\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#event-type_1","title":"Event Type","text":"<p>EventHandler&lt;ClickEventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#drag","title":"Drag","text":"<p>Event raised when the view is being dragged using the mouse.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? Drag;\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#event-type_2","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#dragend","title":"DragEnd","text":"<p>Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? DragEnd;\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#event-type_3","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#dragstart","title":"DragStart","text":"<p>Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? DragStart;\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#event-type_4","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#leftclick","title":"LeftClick","text":"<p>Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).</p> <pre><code>public event EventHandler&lt;StardewUI.Events.ClickEventArgs&gt;? LeftClick;\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#event-type_5","title":"Event Type","text":"<p>EventHandler&lt;ClickEventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_17","title":"Remarks","text":"<p>Using this event is a shortcut for handling Click and checking for IsPrimaryButton().</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#pointerenter","title":"PointerEnter","text":"<p>Event raised when the pointer enters the view.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? PointerEnter;\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#event-type_6","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#pointerleave","title":"PointerLeave","text":"<p>Event raised when the pointer exits the view.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.PointerEventArgs&gt;? PointerLeave;\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#event-type_7","title":"Event Type","text":"<p>EventHandler&lt;PointerEventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#pointermove","title":"PointerMove","text":"<p>Event raised when the pointer moves within the view.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.PointerMoveEventArgs&gt;? PointerMove;\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#event-type_8","title":"Event Type","text":"<p>EventHandler&lt;PointerMoveEventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#propertychanged","title":"PropertyChanged","text":"<pre><code>public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#event-type_9","title":"Event Type","text":"<p>PropertyChangedEventHandler</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#rightclick","title":"RightClick","text":"<p>Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).</p> <pre><code>public event EventHandler&lt;StardewUI.Events.ClickEventArgs&gt;? RightClick;\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#event-type_10","title":"Event Type","text":"<p>EventHandler&lt;ClickEventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#remarks_18","title":"Remarks","text":"<p>Using this event is a shortcut for handling Click and checking for IsSecondaryButton().</p>"},{"location":"reference/stardewui/widgets/decoratorview-1/#wheel","title":"Wheel","text":"<p>Event raised when the scroll wheel moves.</p> <pre><code>public event EventHandler&lt;StardewUI.Events.WheelEventArgs&gt;? Wheel;\n</code></pre>"},{"location":"reference/stardewui/widgets/decoratorview-1/#event-type_11","title":"Event Type","text":"<p>EventHandler&lt;WheelEventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/decoratorview/","title":"DecoratorView","text":""},{"location":"reference/stardewui/widgets/decoratorview/#class-decoratorview","title":"Class DecoratorView","text":""},{"location":"reference/stardewui/widgets/decoratorview/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A view that owns and delegates to an inner view.</p> <pre><code>public class DecoratorView : StardewUI.Widgets.DecoratorView&lt;T&gt;\n</code></pre> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 DecoratorView</p>"},{"location":"reference/stardewui/widgets/decoratorview/#remarks","title":"Remarks","text":"<p>Decorator views, while not abstract, are used as a base type for other composite views, and primarily intended for framework use. Custom widgets should normally use ComponentView&lt;T&gt; instead, which incorporates lazy loading and other conveniences for minimalistic implementations. </p> <p>The inner view is considered to be owned by the decorator; it will be assigned any values that were assigned to the decorator itself, such as Layout, and if it implements IDisposable, then it will be disposed along with the decorator.</p>"},{"location":"reference/stardewui/widgets/decoratorview/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/decoratorview/#constructors","title":"Constructors","text":"Name Description DecoratorView()"},{"location":"reference/stardewui/widgets/decoratorview/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) View The inner view that is decorated by this view.(Inherited from DecoratorView&lt;T&gt;) Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/decoratorview/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) Dispose() (Inherited from DecoratorView&lt;T&gt;) Draw(ISpriteBatch) Draws the content for this view.(Inherited from DecoratorView&lt;T&gt;) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from DecoratorView&lt;T&gt;) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from DecoratorView&lt;T&gt;) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Inherited from DecoratorView&lt;T&gt;) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/decoratorview/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/decoratorview/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/decoratorview/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/decoratorview/#decoratorview","title":"DecoratorView()","text":"<pre><code>protected DecoratorView();\n</code></pre>"},{"location":"reference/stardewui/widgets/dropdownlist-1/","title":"DropDownList&lt;T&gt;","text":""},{"location":"reference/stardewui/widgets/dropdownlist-1/#class-dropdownlistt","title":"Class DropDownList&lt;T&gt;","text":""},{"location":"reference/stardewui/widgets/dropdownlist-1/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Button/text field with a drop-down menu.</p> <pre><code>public class DropDownList&lt;T&gt; : StardewUI.Widgets.ComponentView\n</code></pre>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code> The type of list item that can be chosen.</p> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 ComponentView&lt;T&gt; \u21e6 ComponentView \u21e6 DropDownList&lt;T&gt;</p>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/dropdownlist-1/#constructors","title":"Constructors","text":"Name Description DropDownList&lt;T&gt;()"},{"location":"reference/stardewui/widgets/dropdownlist-1/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OptionFormat Specifies how to format the SelectedOption in the label text. OptionMinWidth Minimum width for the text area of an option. Options The options available to select. OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) SelectedIndex Index of the currently-selected option in the Options, or <code>-1</code> if none selected. SelectedOption The option that is currently selected, or <code>null</code> if there is no selection. SelectedOptionText The text of the currently-selected option. Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) View (Inherited from ComponentView&lt;T&gt;) Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/dropdownlist-1/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) CreateView() Creates and returns the root view.(Overrides ComponentView&lt;T&gt;.CreateView()) Dispose() (Inherited from DecoratorView&lt;T&gt;) Draw(ISpriteBatch) Draws the content for this view.(Inherited from DecoratorView&lt;T&gt;) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from DecoratorView&lt;T&gt;) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Overrides DecoratorView&lt;T&gt;.Measure(Vector2)) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Inherited from DecoratorView&lt;T&gt;) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/dropdownlist-1/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) Select Event raised when an item in the list is selected. Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/dropdownlist-1/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/dropdownlist-1/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/dropdownlist-1/#dropdownlistt","title":"DropDownList&lt;T&gt;()","text":"<pre><code>public DropDownList&lt;T&gt;();\n</code></pre>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/dropdownlist-1/#optionformat","title":"OptionFormat","text":"<p>Specifies how to format the SelectedOption in the label text.</p> <pre><code>public Func&lt;T, string&gt; OptionFormat { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#property-value","title":"Property Value","text":"<p>Func&lt;T, string&gt;</p>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#optionminwidth","title":"OptionMinWidth","text":"<p>Minimum width for the text area of an option.</p> <pre><code>public float OptionMinWidth { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#property-value_1","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#remarks","title":"Remarks","text":"<p>If this is <code>0</code>, or if all options are larger, then the dropdown will expand horizontally.</p>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#options","title":"Options","text":"<p>The options available to select.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;T&gt; Options { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#property-value_2","title":"Property Value","text":"<p>IReadOnlyList&lt;T&gt;</p>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#selectedindex","title":"SelectedIndex","text":"<p>Index of the currently-selected option in the Options, or <code>-1</code> if none selected.</p> <pre><code>public int SelectedIndex { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#property-value_3","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#selectedoption","title":"SelectedOption","text":"<p>The option that is currently selected, or <code>null</code> if there is no selection.</p> <pre><code>public T SelectedOption { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#property-value_4","title":"Property Value","text":"<p><code>T</code></p>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#selectedoptiontext","title":"SelectedOptionText","text":"<p>The text of the currently-selected option.</p> <pre><code>public string SelectedOptionText { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#property-value_5","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/dropdownlist-1/#createview","title":"CreateView()","text":"<p>Creates and returns the root view.</p> <pre><code>protected override StardewUI.IView CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#returns","title":"Returns","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#measurevector2","title":"Measure(Vector2)","text":"<p>Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.</p> <pre><code>public override bool Measure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#parameters","title":"Parameters","text":"<p><code>availableSize</code> Vector2 The width/height that is still available in the container/parent.</p>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#returns_1","title":"Returns","text":"<p>Boolean</p> <p>Whether or not any layout was performed as a result of this pass. Callers may use this to propagate layout back up the tree, or perform expensive follow-up actions.</p>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#remarks_1","title":"Remarks","text":"<p>Most views should save the value of <code>availableSize</code> for use in IsDirty() checks.</p>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#events_1","title":"Events","text":""},{"location":"reference/stardewui/widgets/dropdownlist-1/#select","title":"Select","text":"<p>Event raised when an item in the list is selected.</p> <pre><code>public event EventHandler&lt;System.EventArgs&gt;? Select;\n</code></pre>"},{"location":"reference/stardewui/widgets/dropdownlist-1/#event-type","title":"Event Type","text":"<p>EventHandler&lt;EventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/expander/","title":"Expander","text":""},{"location":"reference/stardewui/widgets/expander/#class-expander","title":"Class Expander","text":""},{"location":"reference/stardewui/widgets/expander/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A widget that can be clicked to expand/collapse with additional content.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Expander : StardewUI.Widgets.ComponentView\n</code></pre> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 ComponentView&lt;T&gt; \u21e6 ComponentView \u21e6 Expander</p>"},{"location":"reference/stardewui/widgets/expander/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/expander/#constructors","title":"Constructors","text":"Name Description Expander()"},{"location":"reference/stardewui/widgets/expander/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) CollapsedSprite Sprite to show next to the header when collapsed. Content The main content, displayed when expanded. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) ExpandedSprite Sprite to show next to the header when expanded. FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) Header The primary content, which displays inside the menu frame and is clipped/scrollable. HeaderBackground Background sprite to display around the Header and expansion indicator. HeaderBackgroundTint Tint color for the HeaderBackground. HeaderLayout Configures the layout of the header lane that includes the indicator and Header content. HeaderPadding Padding to apply between the header border and content (including indicator). IsExpanded Whether or not the view is expanded, i.e. whether or not to display the Content. IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Margin Margin around the entire widget. Same behavior as Margin. Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) View (Inherited from ComponentView&lt;T&gt;) Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/expander/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) CreateView() Creates and returns the root view.(Overrides ComponentView&lt;T&gt;.CreateView()) Dispose() (Inherited from DecoratorView&lt;T&gt;) Draw(ISpriteBatch) Draws the content for this view.(Inherited from DecoratorView&lt;T&gt;) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from DecoratorView&lt;T&gt;) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from DecoratorView&lt;T&gt;) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Inherited from DecoratorView&lt;T&gt;) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/expander/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) ExpandedChange Event that fires when the IsExpanded property is changed, either externally or by clicking on the header. LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/expander/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/expander/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/expander/#expander","title":"Expander()","text":"<pre><code>public Expander();\n</code></pre>"},{"location":"reference/stardewui/widgets/expander/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/expander/#collapsedsprite","title":"CollapsedSprite","text":"<p>Sprite to show next to the header when collapsed.</p> <pre><code>public StardewUI.Graphics.Sprite CollapsedSprite { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/expander/#property-value","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/expander/#content","title":"Content","text":"<p>The main content, displayed when expanded.</p> <pre><code>public StardewUI.IView Content { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/expander/#property-value_1","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/expander/#expandedsprite","title":"ExpandedSprite","text":"<p>Sprite to show next to the header when expanded.</p> <pre><code>public StardewUI.Graphics.Sprite ExpandedSprite { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/expander/#property-value_2","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/expander/#remarks","title":"Remarks","text":"<p>If this is <code>null</code>, and CollapsedSprite is not null, then the CollapsedSprite will be rotated clockwise on expansion.</p>"},{"location":"reference/stardewui/widgets/expander/#header","title":"Header","text":"<p>The primary content, which displays inside the menu frame and is clipped/scrollable.</p> <pre><code>public StardewUI.IView Header { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/expander/#property-value_3","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/expander/#headerbackground","title":"HeaderBackground","text":"<p>Background sprite to display around the Header and expansion indicator.</p> <pre><code>public StardewUI.Graphics.Sprite HeaderBackground { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/expander/#property-value_4","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/expander/#headerbackgroundtint","title":"HeaderBackgroundTint","text":"<p>Tint color for the HeaderBackground.</p> <pre><code>public Microsoft.Xna.Framework.Color HeaderBackgroundTint { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/expander/#property-value_5","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/expander/#headerlayout","title":"HeaderLayout","text":"<p>Configures the layout of the header lane that includes the indicator and Header content.</p> <pre><code>public StardewUI.Layout.LayoutParameters HeaderLayout { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/expander/#property-value_6","title":"Property Value","text":"<p>LayoutParameters</p>"},{"location":"reference/stardewui/widgets/expander/#headerpadding","title":"HeaderPadding","text":"<p>Padding to apply between the header border and content (including indicator).</p> <pre><code>public StardewUI.Layout.Edges HeaderPadding { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/expander/#property-value_7","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/widgets/expander/#isexpanded","title":"IsExpanded","text":"<p>Whether or not the view is expanded, i.e. whether or not to display the Content.</p> <pre><code>public bool IsExpanded { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/expander/#property-value_8","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/widgets/expander/#margin","title":"Margin","text":"<p>Margin around the entire widget. Same behavior as Margin.</p> <pre><code>public StardewUI.Layout.Edges Margin { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/expander/#property-value_9","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/widgets/expander/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/expander/#createview","title":"CreateView()","text":"<p>Creates and returns the root view.</p> <pre><code>protected override StardewUI.IView CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/expander/#returns","title":"Returns","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/expander/#events_1","title":"Events","text":""},{"location":"reference/stardewui/widgets/expander/#expandedchange","title":"ExpandedChange","text":"<p>Event that fires when the IsExpanded property is changed, either externally or by clicking on the header.</p> <pre><code>public event EventHandler&lt;System.EventArgs&gt;? ExpandedChange;\n</code></pre>"},{"location":"reference/stardewui/widgets/expander/#event-type","title":"Event Type","text":"<p>EventHandler&lt;EventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/formbuilder/","title":"FormBuilder","text":""},{"location":"reference/stardewui/widgets/formbuilder/#class-formbuilder","title":"Class FormBuilder","text":""},{"location":"reference/stardewui/widgets/formbuilder/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Fluent builder style API for creating form-like tables within a view.</p> <pre><code>public class FormBuilder\n</code></pre> <p>Inheritance Object \u21e6 FormBuilder</p>"},{"location":"reference/stardewui/widgets/formbuilder/#remarks","title":"Remarks","text":"<p>Useful for \"settings\" style views.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/formbuilder/#constructors","title":"Constructors","text":"Name Description FormBuilder(Int32, Int32) Fluent builder style API for creating form-like tables within a view."},{"location":"reference/stardewui/widgets/formbuilder/#methods","title":"Methods","text":"Name Description AddCustom(IView) Adds a custom row, which is simply a horizontal Lane consisting of the specified views, not including any label - i.e. the first view is flush with the labels on other rows. AddField(string, string, IView) Adds a labeled control row, i.e. a field. AddSection(string) Starts a new section by adding header text. Build() Builds the form. CreateSectionHeading(string) Creates the banner used as a section heading. SetMargin(Edges) Configures the margin for the entire form. SetPadding(Edges) Configures the padding for the entire form."},{"location":"reference/stardewui/widgets/formbuilder/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/formbuilder/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/formbuilder/#formbuilderint-int","title":"FormBuilder(int, int)","text":"<p>Fluent builder style API for creating form-like tables within a view.</p> <pre><code>public FormBuilder(int labelWidth, int fieldIndent);\n</code></pre>"},{"location":"reference/stardewui/widgets/formbuilder/#parameters","title":"Parameters","text":"<p><code>labelWidth</code> Int32 The width of the label column. Same for all rows.</p> <p><code>fieldIndent</code> Int32 Pixel amount by which to indent the field rows, relative to any heading rows.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#remarks_1","title":"Remarks","text":"<p>Useful for \"settings\" style views.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/formbuilder/#addcustomiview","title":"AddCustom(IView)","text":"<p>Adds a custom row, which is simply a horizontal Lane consisting of the specified views, not including any label - i.e. the first view is flush with the labels on other rows.</p> <pre><code>public StardewUI.Widgets.FormBuilder AddCustom(StardewUI.IView views);\n</code></pre>"},{"location":"reference/stardewui/widgets/formbuilder/#parameters_1","title":"Parameters","text":"<p><code>views</code> IView The views to display in this row.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#returns","title":"Returns","text":"<p>FormBuilder</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#remarks_2","title":"Remarks","text":"<p>Might be used for a row of confirmation buttons, a paragraph of help text, etc.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#addfieldstring-string-iview","title":"AddField(string, string, IView)","text":"<p>Adds a labeled control row, i.e. a field.</p> <pre><code>public StardewUI.Widgets.FormBuilder AddField(string title, string description, StardewUI.IView view);\n</code></pre>"},{"location":"reference/stardewui/widgets/formbuilder/#parameters_2","title":"Parameters","text":"<p><code>title</code> string The field title, displayed on the left side.</p> <p><code>description</code> string Description of the field's value or purpose, displayed as a tooltip when hovering over the title text.</p> <p><code>view</code> IView The view for modifying the field's value.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#returns_1","title":"Returns","text":"<p>FormBuilder</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#addsectionstring","title":"AddSection(string)","text":"<p>Starts a new section by adding header text.</p> <pre><code>public StardewUI.Widgets.FormBuilder AddSection(string title);\n</code></pre>"},{"location":"reference/stardewui/widgets/formbuilder/#parameters_3","title":"Parameters","text":"<p><code>title</code> string The section title.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#returns_2","title":"Returns","text":"<p>FormBuilder</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#build","title":"Build()","text":"<p>Builds the form.</p> <pre><code>public StardewUI.IView Build();\n</code></pre>"},{"location":"reference/stardewui/widgets/formbuilder/#returns_3","title":"Returns","text":"<p>IView</p> <p>The view containing the form layout.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#createsectionheadingstring","title":"CreateSectionHeading(string)","text":"<p>Creates the banner used as a section heading.</p> <pre><code>public static StardewUI.IView CreateSectionHeading(string title);\n</code></pre>"},{"location":"reference/stardewui/widgets/formbuilder/#parameters_4","title":"Parameters","text":"<p><code>title</code> string The section title.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#returns_4","title":"Returns","text":"<p>IView</p> <p>Section heading view.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#remarks_3","title":"Remarks","text":"<p>This is the standalone version of AddSection(string) that can be used by any views wanting to provide form-style section headings outside of an actual form.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#setmarginedges","title":"SetMargin(Edges)","text":"<p>Configures the margin for the entire form.</p> <pre><code>public StardewUI.Widgets.FormBuilder SetMargin(StardewUI.Layout.Edges margin);\n</code></pre>"},{"location":"reference/stardewui/widgets/formbuilder/#parameters_5","title":"Parameters","text":"<p><code>margin</code> Edges Margin outside the form.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#returns_5","title":"Returns","text":"<p>FormBuilder</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#setpaddingedges","title":"SetPadding(Edges)","text":"<p>Configures the padding for the entire form.</p> <pre><code>public StardewUI.Widgets.FormBuilder SetPadding(StardewUI.Layout.Edges padding);\n</code></pre>"},{"location":"reference/stardewui/widgets/formbuilder/#parameters_6","title":"Parameters","text":"<p><code>padding</code> Edges Padding inside the form.</p>"},{"location":"reference/stardewui/widgets/formbuilder/#returns_6","title":"Returns","text":"<p>FormBuilder</p> <p>The current builder instance.</p>"},{"location":"reference/stardewui/widgets/frame/","title":"Frame","text":""},{"location":"reference/stardewui/widgets/frame/#class-frame","title":"Class Frame","text":""},{"location":"reference/stardewui/widgets/frame/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A view that holds another view, typically for the purpose of adding a border or background, or in some cases swapping out the content.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Frame : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 Frame</p>"},{"location":"reference/stardewui/widgets/frame/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/frame/#constructors","title":"Constructors","text":"Name Description Frame()"},{"location":"reference/stardewui/widgets/frame/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) Background The background sprite to draw for this frame. BackgroundTint Tint color for the Background image. Border The border sprite to draw for this frame. BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) BorderThickness The thickness of the border edges. Content The inner content view, which will render inside the border and padding. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) HorizontalContentAlignment Specifies how to align the Content horizontally within the frame's area. Only has an effect if the frame's content area is larger than the content size, i.e. when Width does not use Content. InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Inherited from View) Margin Margins (whitespace outside border) for this view.(Inherited from View) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Opacity Opacity (alpha level) of the view.(Inherited from View) OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) ShadowAlpha Alpha value for the shadow. If set to the default of zero, no shadow will be drawn. ShadowCount Number of shadows to draw if ShadowAlpha is non-zero. ShadowOffset Offset to draw the sprite shadow, which is a second copy of the Background drawn entirely black. Shadows will not be visible unless ShadowAlpha is non-zero. Tags The user-defined tags for this view.(Inherited from View) Tooltip Localized tooltip to display on hover, if any.(Inherited from View) VerticalContentAlignment Specifies how to align the Content vertically within the frame's area. Only has an effect if the frame's content area is larger than the content size, i.e. when Height does not use Content. Visibility Visibility for this view.(Inherited from View) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/frame/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Overrides View.FindFocusableDescendant(Vector2, Direction)) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Overrides View.GetBorderThickness()) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Overrides View.GetLocalChildren()) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Inherited from View) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Overrides View.IsContentDirty()) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from View) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Overrides View.OnDrawBorder(ISpriteBatch)) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from View) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from View) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Overrides View.ResetDirty()) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from View) ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/frame/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/frame/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/frame/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/frame/#frame","title":"Frame()","text":"<pre><code>public Frame();\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/frame/#background","title":"Background","text":"<p>The background sprite to draw for this frame.</p> <pre><code>public StardewUI.Graphics.Sprite Background { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#property-value","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/frame/#backgroundtint","title":"BackgroundTint","text":"<p>Tint color for the Background image.</p> <pre><code>public Microsoft.Xna.Framework.Color BackgroundTint { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#property-value_1","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/frame/#border","title":"Border","text":"<p>The border sprite to draw for this frame.</p> <pre><code>public StardewUI.Graphics.Sprite Border { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#property-value_2","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/frame/#remarks","title":"Remarks","text":"<p>Setting a border here does not affect layout, even if FixedEdges are set to non-zero values, since fixed edges only govern scaling and are not necessarily the same as the actual edge thicknesses. To ensure that inner content does not overlap with the border, BorderThickness should also be set when using a border.</p>"},{"location":"reference/stardewui/widgets/frame/#borderthickness","title":"BorderThickness","text":"<p>The thickness of the border edges.</p> <pre><code>public StardewUI.Layout.Edges BorderThickness { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#property-value_3","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/widgets/frame/#remarks_1","title":"Remarks","text":"<p>This property has no effect on the appearance of the Border, but affects how content is positioned inside the border. It is often correct to set it to the same value as the FixedEdges of the Border sprite, but the values are considered independent.</p>"},{"location":"reference/stardewui/widgets/frame/#content","title":"Content","text":"<p>The inner content view, which will render inside the border and padding.</p> <pre><code>public StardewUI.IView Content { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#property-value_4","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/frame/#horizontalcontentalignment","title":"HorizontalContentAlignment","text":"<p>Specifies how to align the Content horizontally within the frame's area. Only has an effect if the frame's content area is larger than the content size, i.e. when Width does not use Content.</p> <pre><code>public StardewUI.Layout.Alignment HorizontalContentAlignment { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#property-value_5","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/widgets/frame/#shadowalpha","title":"ShadowAlpha","text":"<p>Alpha value for the shadow. If set to the default of zero, no shadow will be drawn.</p> <pre><code>public float ShadowAlpha { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#property-value_6","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/frame/#shadowcount","title":"ShadowCount","text":"<p>Number of shadows to draw if ShadowAlpha is non-zero.</p> <pre><code>public int ShadowCount { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#property-value_7","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/widgets/frame/#remarks_2","title":"Remarks","text":"<p>While rare, some game sprites are supposed to be drawn with multiple stacked shadows. If this number is higher than the default of <code>1</code>, shadows will be drawn stacked with the offset repeatedly applied.</p>"},{"location":"reference/stardewui/widgets/frame/#shadowoffset","title":"ShadowOffset","text":"<p>Offset to draw the sprite shadow, which is a second copy of the Background drawn entirely black. Shadows will not be visible unless ShadowAlpha is non-zero.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 ShadowOffset { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#property-value_8","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/widgets/frame/#verticalcontentalignment","title":"VerticalContentAlignment","text":"<p>Specifies how to align the Content vertically within the frame's area. Only has an effect if the frame's content area is larger than the content size, i.e. when Height does not use Content.</p> <pre><code>public StardewUI.Layout.Alignment VerticalContentAlignment { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#property-value_9","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/widgets/frame/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/frame/#findfocusabledescendantvector2-direction","title":"FindFocusableDescendant(Vector2, Direction)","text":"<p>Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.</p> <pre><code>protected override StardewUI.Input.FocusSearchResult FindFocusableDescendant(Microsoft.Xna.Framework.Vector2 contentPosition, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#parameters","title":"Parameters","text":"<p><code>contentPosition</code> Vector2 The search position, relative to where this view's content starts (after applying margin, borders and padding).</p> <p><code>direction</code> Direction The search direction.</p>"},{"location":"reference/stardewui/widgets/frame/#returns","title":"Returns","text":"<p>FocusSearchResult</p>"},{"location":"reference/stardewui/widgets/frame/#remarks_3","title":"Remarks","text":"<p>This is the same as FocusSearch(Vector2, Direction) but in pre-transformed content coordinates, and does not require checking for \"self-focus\" as FocusSearch(Vector2, Direction) already does this. The default implementation simply returns <code>null</code> as most views do not have children; subclasses with children must override this.</p>"},{"location":"reference/stardewui/widgets/frame/#getborderthickness","title":"GetBorderThickness()","text":"<p>Measures the thickness of each edge of the border, if the view has a border.</p> <pre><code>protected override StardewUI.Layout.Edges GetBorderThickness();\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#returns_1","title":"Returns","text":"<p>Edges</p> <p>The border edge thicknesses.</p>"},{"location":"reference/stardewui/widgets/frame/#remarks_4","title":"Remarks","text":"<p>Used only by views that will implement a border via OnDrawBorder(ISpriteBatch). The border thickness is considered during layout, and generally treated as additional Padding for the purposes of setting allowed content size. </p> <p>Borders usually have a static size, but if the thickness can change, then implementations must account for it in their dirty checking (IsContentDirty()).</p>"},{"location":"reference/stardewui/widgets/frame/#getlocalchildren","title":"GetLocalChildren()","text":"<p>Gets the view's children with positions relative to the content area.</p> <pre><code>protected override System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetLocalChildren();\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#returns_2","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/widgets/frame/#remarks_5","title":"Remarks","text":"<p>This has the same signature as GetChildren() but assumes that coordinates are in the same space as those used in OnDrawContent(ISpriteBatch), i.e. not accounting for margin/border/padding. These coordinates are automatically adjusted in the GetChildren() to be relative to the entire view. </p> <p>The default implementation returns an empty sequence. Composite views must override this method in order for user interactions to behave correctly.</p>"},{"location":"reference/stardewui/widgets/frame/#iscontentdirty","title":"IsContentDirty()","text":"<p>Checks whether or not the internal content/layout has changed.</p> <pre><code>protected override bool IsContentDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#returns_3","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if content has changed; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/frame/#remarks_6","title":"Remarks","text":"<p>The base implementation of IsDirty() only checks if the base layout attributes have changed, i.e. Layout, Margin, Padding, etc. It does not know about content/data in any subclasses; those that accept content parameters (like text) will typically use DirtyTracker&lt;T&gt; to hold that content and should implement this method to check their IsDirty states.</p>"},{"location":"reference/stardewui/widgets/frame/#ondrawborderispritebatch","title":"OnDrawBorder(ISpriteBatch)","text":"<p>Draws the view's border, if it has one.</p> <pre><code>protected override void OnDrawBorder(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#parameters_1","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/frame/#remarks_7","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying Margin but before Padding.</p>"},{"location":"reference/stardewui/widgets/frame/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#parameters_2","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/frame/#remarks_8","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/frame/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#parameters_3","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/frame/#remarks_9","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/frame/#resetdirty","title":"ResetDirty()","text":"<p>Resets any dirty state associated with this view.</p> <pre><code>protected override void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/frame/#remarks_10","title":"Remarks","text":"<p>This is called at the end of Measure(Vector2), so that on the next pass, all state appears clean unless it was marked dirty after the last pass completed. The default implementation is a no-op; subclasses should use it to clear any private dirty state, e.g. via ResetDirty().</p>"},{"location":"reference/stardewui/widgets/ghostview/","title":"GhostView","text":""},{"location":"reference/stardewui/widgets/ghostview/#class-ghostview","title":"Class GhostView","text":""},{"location":"reference/stardewui/widgets/ghostview/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A view that draws an exact copy of another view, generally with a tint and transparency to indicate that it is not the original view. Can be used for dragging, indicating target snap positions, etc.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class GhostView : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 GhostView</p>"},{"location":"reference/stardewui/widgets/ghostview/#remarks","title":"Remarks","text":"<p>The RealView must be part of a real layout in order for the ghosting to work correctly; GhostView does no layout or layout-forwarding of its own.</p>"},{"location":"reference/stardewui/widgets/ghostview/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/ghostview/#constructors","title":"Constructors","text":"Name Description GhostView()"},{"location":"reference/stardewui/widgets/ghostview/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Inherited from View) Margin Margins (whitespace outside border) for this view.(Inherited from View) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Opacity Opacity (alpha level) of the view.(Inherited from View) OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) RealView The view for which a copy will be drawn. ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) Tags The user-defined tags for this view.(Inherited from View) TintColor Color of the ghost. Tooltip Localized tooltip to display on hover, if any.(Inherited from View) Visibility Visibility for this view.(Inherited from View) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/ghostview/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Inherited from View) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Inherited from View) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Inherited from View) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Inherited from View) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Inherited from View) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from View) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Inherited from View) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from View) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from View) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Inherited from View) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from View) ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/ghostview/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/ghostview/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/ghostview/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/ghostview/#ghostview","title":"GhostView()","text":"<pre><code>public GhostView();\n</code></pre>"},{"location":"reference/stardewui/widgets/ghostview/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/ghostview/#realview","title":"RealView","text":"<p>The view for which a copy will be drawn.</p> <pre><code>public StardewUI.IView RealView { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/ghostview/#property-value","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/ghostview/#tintcolor","title":"TintColor","text":"<p>Color of the ghost.</p> <pre><code>public Microsoft.Xna.Framework.Color TintColor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/ghostview/#property-value_1","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/ghostview/#remarks_1","title":"Remarks","text":"<p>This tint is multiplied against the RealView's pixel values and acts as a recolor; for example, specifying Red here will result in the ghost being entirely red and black.</p>"},{"location":"reference/stardewui/widgets/ghostview/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/ghostview/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/ghostview/#parameters","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/ghostview/#remarks_2","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/ghostview/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/ghostview/#parameters_1","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/ghostview/#remarks_3","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/grid/","title":"Grid","text":""},{"location":"reference/stardewui/widgets/grid/#class-grid","title":"Class Grid","text":""},{"location":"reference/stardewui/widgets/grid/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A uniform grid containing other views.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Grid : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 Grid</p>"},{"location":"reference/stardewui/widgets/grid/#remarks","title":"Remarks","text":"<p>Can be configured to use either a fixed cell size, and therefore a variable number of rows and columns depending on the grid size, or a fixed number of rows and columns, with a variable size per cell.</p>"},{"location":"reference/stardewui/widgets/grid/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/grid/#constructors","title":"Constructors","text":"Name Description Grid()"},{"location":"reference/stardewui/widgets/grid/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) Children Child views to display in this layout, arranged according to the ItemLayout. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) HorizontalItemAlignment Specifies how to align each child IView horizontally within its respective cell, i.e. if the view is narrower than the cell's width. InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) ItemLayout The layout for items (cells) in this grid. ItemSpacing Spacing between the edges of adjacent columns (X) and rows (Y). LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Inherited from View) Margin Margins (whitespace outside border) for this view.(Inherited from View) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Opacity Opacity (alpha level) of the view.(Inherited from View) OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) PrimaryOrientation Specifies the axis that items are added to before wrapping. ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) Tags The user-defined tags for this view.(Inherited from View) Tooltip Localized tooltip to display on hover, if any.(Inherited from View) VerticalItemAlignment Specifies how to align each child IView vertically within its respective cell, i.e. if the view is shorter than the cell's height. Visibility Visibility for this view.(Inherited from View) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/grid/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Overrides View.FindFocusableDescendant(Vector2, Direction)) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Inherited from View) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Overrides View.GetLocalChildren()) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Overrides View.GetLocalChildrenAt(Vector2)) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Overrides View.IsContentDirty()) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from View) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Inherited from View) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from View) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from View) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Overrides View.ResetDirty()) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from View) ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/grid/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/grid/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/grid/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/grid/#grid","title":"Grid()","text":"<pre><code>public Grid();\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/grid/#children","title":"Children","text":"<p>Child views to display in this layout, arranged according to the ItemLayout.</p> <pre><code>public System.Collections.Generic.IList&lt;StardewUI.IView&gt; Children { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#property-value","title":"Property Value","text":"<p>IList&lt;IView&gt;</p>"},{"location":"reference/stardewui/widgets/grid/#horizontalitemalignment","title":"HorizontalItemAlignment","text":"<p>Specifies how to align each child IView horizontally within its respective cell, i.e. if the view is narrower than the cell's width.</p> <pre><code>public StardewUI.Layout.Alignment HorizontalItemAlignment { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#property-value_1","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/widgets/grid/#itemlayout","title":"ItemLayout","text":"<p>The layout for items (cells) in this grid.</p> <pre><code>public StardewUI.Widgets.GridItemLayout ItemLayout { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#property-value_2","title":"Property Value","text":"<p>GridItemLayout</p>"},{"location":"reference/stardewui/widgets/grid/#remarks_1","title":"Remarks","text":"<p>Layouts are relative to the PrimaryOrientation. Count specifies the number of columns when Horizontal, and number of rows when Vertical; similarly, Length specifies the column width when horizontal and row height when vertical. The other dimension is determined by the individual item's own LayoutParameters. </p> <p>Note that this affects the limits for individual items, not necessarily their exact size. Children may be smaller than the cells that contain them, and if so are positioned according to the HorizontalItemAlignment and VerticalItemAlignment.</p>"},{"location":"reference/stardewui/widgets/grid/#itemspacing","title":"ItemSpacing","text":"<p>Spacing between the edges of adjacent columns (X) and rows (Y).</p> <pre><code>public Microsoft.Xna.Framework.Vector2 ItemSpacing { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#property-value_3","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/widgets/grid/#remarks_2","title":"Remarks","text":"<p>Setting this is roughly equivalent to specifying the same Margin on each child, except that it will not add extra space before the first item or after the last item.</p>"},{"location":"reference/stardewui/widgets/grid/#primaryorientation","title":"PrimaryOrientation","text":"<p>Specifies the axis that items are added to before wrapping.</p> <pre><code>public StardewUI.Layout.Orientation PrimaryOrientation { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#property-value_4","title":"Property Value","text":"<p>Orientation</p>"},{"location":"reference/stardewui/widgets/grid/#remarks_3","title":"Remarks","text":"<p>Horizontal means children are added from left to right, and when reaching the edge or max column count, start over at the beginning of the next row. Vertical means children flow from top to bottom, and when reaching the bottom, wrap to the top of the next column. </p> <p>Also affects which dimension is fixed and which is potentially unbounded. Horizontally-oriented grids have a fixed width and can grow to any height (if Height is set to Content()). Vertically-oriented grids are the opposite, having a fixed height and growing to an arbitrary width.</p>"},{"location":"reference/stardewui/widgets/grid/#verticalitemalignment","title":"VerticalItemAlignment","text":"<p>Specifies how to align each child IView vertically within its respective cell, i.e. if the view is shorter than the cell's height.</p> <pre><code>public StardewUI.Layout.Alignment VerticalItemAlignment { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#property-value_5","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/widgets/grid/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/grid/#findfocusabledescendantvector2-direction","title":"FindFocusableDescendant(Vector2, Direction)","text":"<p>Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.</p> <pre><code>protected override StardewUI.Input.FocusSearchResult FindFocusableDescendant(Microsoft.Xna.Framework.Vector2 contentPosition, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#parameters","title":"Parameters","text":"<p><code>contentPosition</code> Vector2 The search position, relative to where this view's content starts (after applying margin, borders and padding).</p> <p><code>direction</code> Direction The search direction.</p>"},{"location":"reference/stardewui/widgets/grid/#returns","title":"Returns","text":"<p>FocusSearchResult</p>"},{"location":"reference/stardewui/widgets/grid/#remarks_4","title":"Remarks","text":"<p>This is the same as FocusSearch(Vector2, Direction) but in pre-transformed content coordinates, and does not require checking for \"self-focus\" as FocusSearch(Vector2, Direction) already does this. The default implementation simply returns <code>null</code> as most views do not have children; subclasses with children must override this.</p>"},{"location":"reference/stardewui/widgets/grid/#getlocalchildren","title":"GetLocalChildren()","text":"<p>Gets the view's children with positions relative to the content area.</p> <pre><code>protected override System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetLocalChildren();\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#returns_1","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/widgets/grid/#remarks_5","title":"Remarks","text":"<p>This has the same signature as GetChildren() but assumes that coordinates are in the same space as those used in OnDrawContent(ISpriteBatch), i.e. not accounting for margin/border/padding. These coordinates are automatically adjusted in the GetChildren() to be relative to the entire view. </p> <p>The default implementation returns an empty sequence. Composite views must override this method in order for user interactions to behave correctly.</p>"},{"location":"reference/stardewui/widgets/grid/#getlocalchildrenatvector2","title":"GetLocalChildrenAt(Vector2)","text":"<p>Searches for all views at a given position relative to the content area.</p> <pre><code>protected override System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetLocalChildrenAt(Microsoft.Xna.Framework.Vector2 contentPosition);\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#parameters_1","title":"Parameters","text":"<p><code>contentPosition</code> Vector2 The search position, relative to where this view's content starts (after applying margin, borders and padding).</p>"},{"location":"reference/stardewui/widgets/grid/#returns_2","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p> <p>The views at the specified <code>contentPosition</code>, in original layout order.</p>"},{"location":"reference/stardewui/widgets/grid/#remarks_6","title":"Remarks","text":"<p>The default implementation performs a linear search on all children and returns all whose bounds overlap the specified <code>contentPosition</code>. Views can override this to provide optimized implementations for their layout, or handle overlapping views.</p>"},{"location":"reference/stardewui/widgets/grid/#iscontentdirty","title":"IsContentDirty()","text":"<p>Checks whether or not the internal content/layout has changed.</p> <pre><code>protected override bool IsContentDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#returns_3","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if content has changed; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/grid/#remarks_7","title":"Remarks","text":"<p>The base implementation of IsDirty() only checks if the base layout attributes have changed, i.e. Layout, Margin, Padding, etc. It does not know about content/data in any subclasses; those that accept content parameters (like text) will typically use DirtyTracker&lt;T&gt; to hold that content and should implement this method to check their IsDirty states.</p>"},{"location":"reference/stardewui/widgets/grid/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#parameters_2","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/grid/#remarks_8","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/grid/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#parameters_3","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/grid/#remarks_9","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/grid/#resetdirty","title":"ResetDirty()","text":"<p>Resets any dirty state associated with this view.</p> <pre><code>protected override void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/grid/#remarks_10","title":"Remarks","text":"<p>This is called at the end of Measure(Vector2), so that on the next pass, all state appears clean unless it was marked dirty after the last pass completed. The default implementation is a no-op; subclasses should use it to clear any private dirty state, e.g. via ResetDirty().</p>"},{"location":"reference/stardewui/widgets/griditemlayout.count/","title":"GridItemLayout.Count","text":""},{"location":"reference/stardewui/widgets/griditemlayout.count/#class-griditemlayoutcount","title":"Class GridItemLayout.Count","text":""},{"location":"reference/stardewui/widgets/griditemlayout.count/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A GridItemLayout specifying the maximum divisions - rows or columns, depending on the grid's Orientation; items will be sized distributed uniformly along that axis.</p> <pre><code>public record GridItemLayout.Count : StardewUI.Widgets.GridItemLayout, \n    IEquatable&lt;StardewUI.Widgets.GridItemLayout.Count&gt;\n</code></pre> <p>Inheritance Object \u21e6 GridItemLayout \u21e6 Count</p> <p>Implements IEquatable&lt;Count&gt;</p>"},{"location":"reference/stardewui/widgets/griditemlayout.count/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/griditemlayout.count/#constructors","title":"Constructors","text":"Name Description Count(Int32) A GridItemLayout specifying the maximum divisions - rows or columns, depending on the grid's Orientation; items will be sized distributed uniformly along that axis."},{"location":"reference/stardewui/widgets/griditemlayout.count/#properties","title":"Properties","text":"Name Description EqualityContract (Overrides GridItemLayout.<code>get_EqualityContract()</code>) ItemCount Maximum number of cell divisions along the primary orientation axis."},{"location":"reference/stardewui/widgets/griditemlayout.count/#methods","title":"Methods","text":"Name Description GetItemCountAndLength(Single, Single) Computes the length (along the grid's PrimaryOrientation axis) of a single item, and the number of items that can fit before wrapping.(Overrides GridItemLayout.GetItemCountAndLength(Single, Single))"},{"location":"reference/stardewui/widgets/griditemlayout.count/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/griditemlayout.count/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/griditemlayout.count/#countint","title":"Count(int)","text":"<p>A GridItemLayout specifying the maximum divisions - rows or columns, depending on the grid's Orientation; items will be sized distributed uniformly along that axis.</p> <pre><code>public Count(int ItemCount);\n</code></pre>"},{"location":"reference/stardewui/widgets/griditemlayout.count/#parameters","title":"Parameters","text":"<p><code>ItemCount</code> Int32 Maximum number of cell divisions along the primary orientation axis.</p>"},{"location":"reference/stardewui/widgets/griditemlayout.count/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/griditemlayout.count/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/griditemlayout.count/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/widgets/griditemlayout.count/#itemcount","title":"ItemCount","text":"<p>Maximum number of cell divisions along the primary orientation axis.</p> <pre><code>public int ItemCount { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/griditemlayout.count/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/widgets/griditemlayout.count/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/griditemlayout.count/#getitemcountandlengthfloat-float","title":"GetItemCountAndLength(float, float)","text":"<p>Computes the length (along the grid's PrimaryOrientation axis) of a single item, and the number of items that can fit before wrapping.</p> <pre><code>public override ValueTuple&lt;System.Single, System.Int32&gt; GetItemCountAndLength(float available, float spacing);\n</code></pre>"},{"location":"reference/stardewui/widgets/griditemlayout.count/#parameters_1","title":"Parameters","text":"<p><code>available</code> Single The length available along the same axis.</p> <p><code>spacing</code> Single Spacing between items, to adjust count-based layouts.</p>"},{"location":"reference/stardewui/widgets/griditemlayout.count/#returns","title":"Returns","text":"<p>ValueTuple&lt;Single, Int32&gt;</p> <p>The length to apply to each item.</p>"},{"location":"reference/stardewui/widgets/griditemlayout.length/","title":"GridItemLayout.Length","text":""},{"location":"reference/stardewui/widgets/griditemlayout.length/#class-griditemlayoutlength","title":"Class GridItemLayout.Length","text":""},{"location":"reference/stardewui/widgets/griditemlayout.length/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A GridItemLayout specifying that each item is to have the same fixed length (width or height, depending on the grid's Orientation) and to wrap to the next row/column afterward.</p> <pre><code>public record GridItemLayout.Length : StardewUI.Widgets.GridItemLayout, \n    IEquatable&lt;StardewUI.Widgets.GridItemLayout.Length&gt;\n</code></pre> <p>Inheritance Object \u21e6 GridItemLayout \u21e6 Length</p> <p>Implements IEquatable&lt;Length&gt;</p>"},{"location":"reference/stardewui/widgets/griditemlayout.length/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/griditemlayout.length/#constructors","title":"Constructors","text":"Name Description Length(Single) A GridItemLayout specifying that each item is to have the same fixed length (width or height, depending on the grid's Orientation) and to wrap to the next row/column afterward."},{"location":"reference/stardewui/widgets/griditemlayout.length/#properties","title":"Properties","text":"Name Description EqualityContract (Overrides GridItemLayout.<code>get_EqualityContract()</code>) Px The length, in pixels, of each item along the grid's orientation axis."},{"location":"reference/stardewui/widgets/griditemlayout.length/#methods","title":"Methods","text":"Name Description GetItemCountAndLength(Single, Single) Computes the length (along the grid's PrimaryOrientation axis) of a single item, and the number of items that can fit before wrapping.(Overrides GridItemLayout.GetItemCountAndLength(Single, Single))"},{"location":"reference/stardewui/widgets/griditemlayout.length/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/griditemlayout.length/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/griditemlayout.length/#lengthfloat","title":"Length(float)","text":"<p>A GridItemLayout specifying that each item is to have the same fixed length (width or height, depending on the grid's Orientation) and to wrap to the next row/column afterward.</p> <pre><code>public Length(float Px);\n</code></pre>"},{"location":"reference/stardewui/widgets/griditemlayout.length/#parameters","title":"Parameters","text":"<p><code>Px</code> Single The length, in pixels, of each item along the grid's orientation axis.</p>"},{"location":"reference/stardewui/widgets/griditemlayout.length/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/griditemlayout.length/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/griditemlayout.length/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/widgets/griditemlayout.length/#px","title":"Px","text":"<p>The length, in pixels, of each item along the grid's orientation axis.</p> <pre><code>public float Px { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/griditemlayout.length/#property-value_1","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/griditemlayout.length/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/griditemlayout.length/#getitemcountandlengthfloat-float","title":"GetItemCountAndLength(float, float)","text":"<p>Computes the length (along the grid's PrimaryOrientation axis) of a single item, and the number of items that can fit before wrapping.</p> <pre><code>public override ValueTuple&lt;System.Single, System.Int32&gt; GetItemCountAndLength(float available, float spacing);\n</code></pre>"},{"location":"reference/stardewui/widgets/griditemlayout.length/#parameters_1","title":"Parameters","text":"<p><code>available</code> Single The length available along the same axis.</p> <p><code>spacing</code> Single Spacing between items, to adjust count-based layouts.</p>"},{"location":"reference/stardewui/widgets/griditemlayout.length/#returns","title":"Returns","text":"<p>ValueTuple&lt;Single, Int32&gt;</p> <p>The length to apply to each item.</p>"},{"location":"reference/stardewui/widgets/griditemlayout/","title":"GridItemLayout","text":""},{"location":"reference/stardewui/widgets/griditemlayout/#class-griditemlayout","title":"Class GridItemLayout","text":""},{"location":"reference/stardewui/widgets/griditemlayout/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Describes the layout of all items in a Grid.</p> <pre><code>public record GridItemLayout : IEquatable&lt;StardewUI.Widgets.GridItemLayout&gt;\n</code></pre> <p>Inheritance Object \u21e6 GridItemLayout</p> <p>Implements IEquatable&lt;GridItemLayout&gt;</p>"},{"location":"reference/stardewui/widgets/griditemlayout/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/griditemlayout/#properties","title":"Properties","text":"Name Description EqualityContract"},{"location":"reference/stardewui/widgets/griditemlayout/#methods","title":"Methods","text":"Name Description GetItemCountAndLength(Single, Single) Computes the length (along the grid's PrimaryOrientation axis) of a single item, and the number of items that can fit before wrapping."},{"location":"reference/stardewui/widgets/griditemlayout/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/griditemlayout/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/griditemlayout/#equalitycontract","title":"EqualityContract","text":"<pre><code>protected System.Type EqualityContract { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/griditemlayout/#property-value","title":"Property Value","text":"<p>Type</p>"},{"location":"reference/stardewui/widgets/griditemlayout/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/griditemlayout/#getitemcountandlengthfloat-float","title":"GetItemCountAndLength(float, float)","text":"<p>Computes the length (along the grid's PrimaryOrientation axis) of a single item, and the number of items that can fit before wrapping.</p> <pre><code>public virtual ValueTuple&lt;System.Single, System.Int32&gt; GetItemCountAndLength(float available, float spacing);\n</code></pre>"},{"location":"reference/stardewui/widgets/griditemlayout/#parameters","title":"Parameters","text":"<p><code>available</code> Single The length available along the same axis.</p> <p><code>spacing</code> Single Spacing between items, to adjust count-based layouts.</p>"},{"location":"reference/stardewui/widgets/griditemlayout/#returns","title":"Returns","text":"<p>ValueTuple&lt;Single, Int32&gt;</p> <p>The length to apply to each item.</p>"},{"location":"reference/stardewui/widgets/image/","title":"Image","text":""},{"location":"reference/stardewui/widgets/image/#class-image","title":"Class Image","text":""},{"location":"reference/stardewui/widgets/image/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A view that draws a sprite, scaled to the layout size.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Image : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 Image</p>"},{"location":"reference/stardewui/widgets/image/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/image/#constructors","title":"Constructors","text":"Name Description Image()"},{"location":"reference/stardewui/widgets/image/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) Fit How to fit the image in the content area, if sizes differ. FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) HorizontalAlignment Specifies where to align the image horizontally if the image width is different from the final layout width. InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Inherited from View) Margin Margins (whitespace outside border) for this view.(Inherited from View) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Opacity Opacity (alpha level) of the view.(Inherited from View) OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) Rotation Rotation to apply to the image. Scale Scale to apply to the image. ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) ShadowAlpha Alpha value for the shadow. If set to the default of zero, no shadow will be drawn. ShadowOffset Offset to draw the sprite shadow, which is a second copy of the Sprite drawn entirely black. Shadows will not be visible unless ShadowAlpha is non-zero. Sprite The sprite to draw. Tags The user-defined tags for this view.(Inherited from View) Tint Tint color (multiplier) to apply when drawing. Tooltip Localized tooltip to display on hover, if any.(Inherited from View) VerticalAlignment Specifies where to align the image vertically if the image height is different from the final layout height. Visibility Visibility for this view.(Inherited from View) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/image/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Inherited from View) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Inherited from View) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Inherited from View) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Inherited from View) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Overrides View.IsContentDirty()) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from View) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Inherited from View) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from View) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from View) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Overrides View.ResetDirty()) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from View) ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/image/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/image/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/image/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/image/#image","title":"Image()","text":"<pre><code>public Image();\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/image/#fit","title":"Fit","text":"<p>How to fit the image in the content area, if sizes differ.</p> <pre><code>public StardewUI.Widgets.ImageFit Fit { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#property-value","title":"Property Value","text":"<p>ImageFit</p>"},{"location":"reference/stardewui/widgets/image/#remarks","title":"Remarks","text":"<p>The fit setting is always ignored when both the Width and Height use Content, because that combination of settings will cause the exact SourceRect (or texture bounds, if not specified) as the layout size. At least one dimension must be content-independent (fixed or container size) for this to have any effect.</p>"},{"location":"reference/stardewui/widgets/image/#horizontalalignment","title":"HorizontalAlignment","text":"<p>Specifies where to align the image horizontally if the image width is different from the final layout width.</p> <pre><code>public StardewUI.Layout.Alignment HorizontalAlignment { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#property-value_1","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/widgets/image/#rotation","title":"Rotation","text":"<p>Rotation to apply to the image.</p> <pre><code>public StardewUI.Graphics.SimpleRotation? Rotation { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#property-value_2","title":"Property Value","text":"<p>Nullable&lt;SimpleRotation&gt;</p>"},{"location":"reference/stardewui/widgets/image/#remarks_1","title":"Remarks","text":"<p>Unlike Scale, rotation potentially does affect layout under specific conditions; specifically, if any dimensions are Content sized, and the rotation is 90\u00b0 in either direction, it will take the opposite dimension for layout. However, images whose dimensions are entirely fixed or stretch-based will not have their layout affected.</p>"},{"location":"reference/stardewui/widgets/image/#scale","title":"Scale","text":"<p>Scale to apply to the image.</p> <pre><code>public float Scale { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#property-value_3","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/image/#remarks_2","title":"Remarks","text":"<p>This scale acts only as a drawing transformation and does not affect layout; a scaled-up image can potentially draw (or clip) outside its container, and a scaled-down image will not shrink the size of an image that specifies Content for either or both dimensions.</p>"},{"location":"reference/stardewui/widgets/image/#shadowalpha","title":"ShadowAlpha","text":"<p>Alpha value for the shadow. If set to the default of zero, no shadow will be drawn.</p> <pre><code>public float ShadowAlpha { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#property-value_4","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/image/#shadowoffset","title":"ShadowOffset","text":"<p>Offset to draw the sprite shadow, which is a second copy of the Sprite drawn entirely black. Shadows will not be visible unless ShadowAlpha is non-zero.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 ShadowOffset { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#property-value_5","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/widgets/image/#sprite","title":"Sprite","text":"<p>The sprite to draw.</p> <pre><code>public StardewUI.Graphics.Sprite Sprite { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#property-value_6","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/image/#remarks_3","title":"Remarks","text":"<p>If LayoutParameters uses Content for either dimension, then changing the sprite can affect layout depending on Fit.</p>"},{"location":"reference/stardewui/widgets/image/#tint","title":"Tint","text":"<p>Tint color (multiplier) to apply when drawing.</p> <pre><code>public Microsoft.Xna.Framework.Color Tint { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#property-value_7","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/image/#verticalalignment","title":"VerticalAlignment","text":"<p>Specifies where to align the image vertically if the image height is different from the final layout height.</p> <pre><code>public StardewUI.Layout.Alignment VerticalAlignment { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#property-value_8","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/widgets/image/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/image/#iscontentdirty","title":"IsContentDirty()","text":"<p>Checks whether or not the internal content/layout has changed.</p> <pre><code>protected override bool IsContentDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if content has changed; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/image/#remarks_4","title":"Remarks","text":"<p>The base implementation of IsDirty() only checks if the base layout attributes have changed, i.e. Layout, Margin, Padding, etc. It does not know about content/data in any subclasses; those that accept content parameters (like text) will typically use DirtyTracker&lt;T&gt; to hold that content and should implement this method to check their IsDirty states.</p>"},{"location":"reference/stardewui/widgets/image/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#parameters","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/image/#remarks_5","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/image/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#parameters_1","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/image/#remarks_6","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/image/#resetdirty","title":"ResetDirty()","text":"<p>Resets any dirty state associated with this view.</p> <pre><code>protected override void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/image/#remarks_7","title":"Remarks","text":"<p>This is called at the end of Measure(Vector2), so that on the next pass, all state appears clean unless it was marked dirty after the last pass completed. The default implementation is a no-op; subclasses should use it to clear any private dirty state, e.g. via ResetDirty().</p>"},{"location":"reference/stardewui/widgets/imagefit/","title":"ImageFit","text":""},{"location":"reference/stardewui/widgets/imagefit/#enum-imagefit","title":"Enum ImageFit","text":""},{"location":"reference/stardewui/widgets/imagefit/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Specifies how an image should be scaled to fit the content area when the available size is different from the image size, and especially when it has a different aspect ratio.</p> <pre><code>public enum ImageFit\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 ImageFit</p>"},{"location":"reference/stardewui/widgets/imagefit/#fields","title":"Fields","text":"Name Value Description None 0 Don't scale the image, i.e. draw it at its original size regardless of the eventual layout size. Contain 1 Force uniform scaling, and make both dimensions small enough to fit in the content area. Cover 2 Force uniform scaling, and make both dimensions large enough to completely cover the content area (i.e. clip whatever parts are outside the bounds). Stretch 3 Allow non-uniform scaling, and scale the image to exactly match the content area."},{"location":"reference/stardewui/widgets/label/","title":"Label","text":""},{"location":"reference/stardewui/widgets/label/#class-label","title":"Class Label","text":""},{"location":"reference/stardewui/widgets/label/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A view that renders a read-only text string.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Label : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 Label</p>"},{"location":"reference/stardewui/widgets/label/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/label/#constructors","title":"Constructors","text":"Name Description Label()"},{"location":"reference/stardewui/widgets/label/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) Bold Whether to draw the text in a bold style. BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) Color The text color. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) Font The font that will be used to render the text. HorizontalAlignment How to align the text horizontally. InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Inherited from View) Margin Margins (whitespace outside border) for this view.(Inherited from View) MaxLines Maximum number of lines of text to display when wrapping. Default is <code>0</code> which applies no limit. Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Opacity Opacity (alpha level) of the view.(Inherited from View) OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) Scale Font scaling to apply. Default is <code>1.0</code> (normal size). ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) ShadowAlpha Alpha value for the text shadow, per layer in ShadowLayers. ShadowColor Base color for the text shadow, before applying ShadowAlpha. ShadowLayers Specifies which layers of the shadow should be drawn. ShadowOffset Offset to draw the text shadow, which is a second copy of the Text drawn entirely black. Text shadows will not be visible unless ShadowAlpha is non-zero. Tags The user-defined tags for this view.(Inherited from View) Text The text string to display. Tooltip Localized tooltip to display on hover, if any.(Inherited from View) Visibility Visibility for this view.(Inherited from View) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/label/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Inherited from View) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Inherited from View) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Inherited from View) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Inherited from View) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Overrides View.IsContentDirty()) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from View) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Inherited from View) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from View) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from View) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Overrides View.ResetDirty()) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from View) Simple(string, SpriteFont, Color?, Int32) Creates a typical, simple run of 1-line text using content sizing. ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/label/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/label/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/label/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/label/#label","title":"Label()","text":"<pre><code>public Label();\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/label/#bold","title":"Bold","text":"<p>Whether to draw the text in a bold style.</p> <pre><code>public bool Bold { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/widgets/label/#remarks","title":"Remarks","text":"<p>Current implementation is based on overdraw, as SpriteFont does not support font variants. Changing this setting will not affect size/layout.</p>"},{"location":"reference/stardewui/widgets/label/#color","title":"Color","text":"<p>The text color.</p> <pre><code>public Microsoft.Xna.Framework.Color Color { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#property-value_1","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/label/#font","title":"Font","text":"<p>The font that will be used to render the text.</p> <pre><code>public Microsoft.Xna.Framework.Graphics.SpriteFont Font { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#property-value_2","title":"Property Value","text":"<p>SpriteFont</p>"},{"location":"reference/stardewui/widgets/label/#horizontalalignment","title":"HorizontalAlignment","text":"<p>How to align the text horizontally.</p> <pre><code>public StardewUI.Layout.Alignment HorizontalAlignment { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#property-value_3","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/widgets/label/#remarks_1","title":"Remarks","text":"<p>This acts differently from setting an Alignment on the container view as it applies to each individual line of text rather than the entire block of text.  Alignment behavior is also sensitive to the width settings in Layout. Middle and End may have no effect if the width type is set to Content; for non-default alignments to work, one of the other length types is required.</p>"},{"location":"reference/stardewui/widgets/label/#maxlines","title":"MaxLines","text":"<p>Maximum number of lines of text to display when wrapping. Default is <code>0</code> which applies no limit.</p> <pre><code>public int MaxLines { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#property-value_4","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/widgets/label/#scale","title":"Scale","text":"<p>Font scaling to apply. Default is <code>1.0</code> (normal size).</p> <pre><code>public float Scale { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#property-value_5","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/label/#remarks_2","title":"Remarks","text":"<p>Applies only to the text itself and not layout properties such as Margin.</p>"},{"location":"reference/stardewui/widgets/label/#shadowalpha","title":"ShadowAlpha","text":"<p>Alpha value for the text shadow, per layer in ShadowLayers.</p> <pre><code>public float ShadowAlpha { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#property-value_6","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/label/#remarks_3","title":"Remarks","text":"<p>If set to zero, no text shadow will be drawn.</p>"},{"location":"reference/stardewui/widgets/label/#shadowcolor","title":"ShadowColor","text":"<p>Base color for the text shadow, before applying ShadowAlpha.</p> <pre><code>public Microsoft.Xna.Framework.Color ShadowColor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#property-value_7","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/label/#shadowlayers","title":"ShadowLayers","text":"<p>Specifies which layers of the shadow should be drawn.</p> <pre><code>public StardewUI.Widgets.ShadowLayers ShadowLayers { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#property-value_8","title":"Property Value","text":"<p>ShadowLayers</p>"},{"location":"reference/stardewui/widgets/label/#remarks_4","title":"Remarks","text":"<p>Layers are additive, so the same ShadowAlpha will have a different visual intensity depending on which layers are allowed. If set to None, then no shadow will be drawn.</p>"},{"location":"reference/stardewui/widgets/label/#shadowoffset","title":"ShadowOffset","text":"<p>Offset to draw the text shadow, which is a second copy of the Text drawn entirely black. Text shadows will not be visible unless ShadowAlpha is non-zero.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 ShadowOffset { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#property-value_9","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/widgets/label/#text","title":"Text","text":"<p>The text string to display.</p> <pre><code>public string Text { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#property-value_10","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/label/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/label/#iscontentdirty","title":"IsContentDirty()","text":"<p>Checks whether or not the internal content/layout has changed.</p> <pre><code>protected override bool IsContentDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if content has changed; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/label/#remarks_5","title":"Remarks","text":"<p>The base implementation of IsDirty() only checks if the base layout attributes have changed, i.e. Layout, Margin, Padding, etc. It does not know about content/data in any subclasses; those that accept content parameters (like text) will typically use DirtyTracker&lt;T&gt; to hold that content and should implement this method to check their IsDirty states.</p>"},{"location":"reference/stardewui/widgets/label/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#parameters","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/label/#remarks_6","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/label/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#parameters_1","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/label/#remarks_7","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/label/#resetdirty","title":"ResetDirty()","text":"<p>Resets any dirty state associated with this view.</p> <pre><code>protected override void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#remarks_8","title":"Remarks","text":"<p>This is called at the end of Measure(Vector2), so that on the next pass, all state appears clean unless it was marked dirty after the last pass completed. The default implementation is a no-op; subclasses should use it to clear any private dirty state, e.g. via ResetDirty().</p>"},{"location":"reference/stardewui/widgets/label/#simplestring-spritefont-color-int","title":"Simple(string, SpriteFont, Color?, int)","text":"<p>Creates a typical, simple run of 1-line text using content sizing.</p> <pre><code>public static StardewUI.Widgets.Label Simple(string initialText, Microsoft.Xna.Framework.Graphics.SpriteFont font, Microsoft.Xna.Framework.Color? color, int margin);\n</code></pre>"},{"location":"reference/stardewui/widgets/label/#parameters_2","title":"Parameters","text":"<p><code>initialText</code> string Initial text to display; can be updated later.</p> <p><code>font</code> SpriteFont Font to use, if different from the default label font.</p> <p><code>color</code> Nullable&lt;Color&gt; Color to use, if different from the default font color.</p> <p><code>margin</code> Int32 Horizontal margin to add.</p>"},{"location":"reference/stardewui/widgets/label/#returns_1","title":"Returns","text":"<p>Label</p>"},{"location":"reference/stardewui/widgets/lane/","title":"Lane","text":""},{"location":"reference/stardewui/widgets/lane/#class-lane","title":"Class Lane","text":""},{"location":"reference/stardewui/widgets/lane/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Simple unidirectional layout that draws multiple child views in a row or column arrangement.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Lane : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 Lane</p>"},{"location":"reference/stardewui/widgets/lane/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/lane/#constructors","title":"Constructors","text":"Name Description Lane()"},{"location":"reference/stardewui/widgets/lane/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) Children Child views to display in this layout. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) HorizontalContentAlignment Specifies how to align the Children horizontally within the lane's area. Only has an effect if the total content area is larger than the content size, i.e. when Width does not use Content. InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Inherited from View) Margin Margins (whitespace outside border) for this view.(Inherited from View) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Opacity Opacity (alpha level) of the view.(Inherited from View) Orientation The layout orientation. OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) Tags The user-defined tags for this view.(Inherited from View) Tooltip Localized tooltip to display on hover, if any.(Inherited from View) VerticalContentAlignment Specifies how to align the Children vertically within the lane's area. Only has an effect if the total content area is larger than the content size, i.e. when Height does not use Content. Visibility Visibility for this view.(Inherited from View) VisibleChildren The children that have received layout and have at least some content visible. ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/lane/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Overrides View.FindFocusableDescendant(Vector2, Direction)) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Inherited from View) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Overrides View.GetLocalChildren()) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Inherited from View) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Overrides View.IsContentDirty()) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from View) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Inherited from View) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from View) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from View) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Overrides View.ResetDirty()) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from View) ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/lane/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/lane/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/lane/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/lane/#lane","title":"Lane()","text":"<pre><code>public Lane();\n</code></pre>"},{"location":"reference/stardewui/widgets/lane/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/lane/#children","title":"Children","text":"<p>Child views to display in this layout.</p> <pre><code>public System.Collections.Generic.IList&lt;StardewUI.IView&gt; Children { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/lane/#property-value","title":"Property Value","text":"<p>IList&lt;IView&gt;</p>"},{"location":"reference/stardewui/widgets/lane/#horizontalcontentalignment","title":"HorizontalContentAlignment","text":"<p>Specifies how to align the Children horizontally within the lane's area. Only has an effect if the total content area is larger than the content size, i.e. when Width does not use Content.</p> <pre><code>public StardewUI.Layout.Alignment HorizontalContentAlignment { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/lane/#property-value_1","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/widgets/lane/#orientation","title":"Orientation","text":"<p>The layout orientation.</p> <pre><code>public StardewUI.Layout.Orientation Orientation { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/lane/#property-value_2","title":"Property Value","text":"<p>Orientation</p>"},{"location":"reference/stardewui/widgets/lane/#verticalcontentalignment","title":"VerticalContentAlignment","text":"<p>Specifies how to align the Children vertically within the lane's area. Only has an effect if the total content area is larger than the content size, i.e. when Height does not use Content.</p> <pre><code>public StardewUI.Layout.Alignment VerticalContentAlignment { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/lane/#property-value_3","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/widgets/lane/#visiblechildren","title":"VisibleChildren","text":"<p>The children that have received layout and have at least some content visible.</p> <pre><code>public System.Collections.Generic.IEnumerable&lt;StardewUI.IView&gt; VisibleChildren { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/lane/#property-value_4","title":"Property Value","text":"<p>IEnumerable&lt;IView&gt;</p>"},{"location":"reference/stardewui/widgets/lane/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/lane/#findfocusabledescendantvector2-direction","title":"FindFocusableDescendant(Vector2, Direction)","text":"<p>Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.</p> <pre><code>protected override StardewUI.Input.FocusSearchResult FindFocusableDescendant(Microsoft.Xna.Framework.Vector2 contentPosition, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/widgets/lane/#parameters","title":"Parameters","text":"<p><code>contentPosition</code> Vector2 The search position, relative to where this view's content starts (after applying margin, borders and padding).</p> <p><code>direction</code> Direction The search direction.</p>"},{"location":"reference/stardewui/widgets/lane/#returns","title":"Returns","text":"<p>FocusSearchResult</p>"},{"location":"reference/stardewui/widgets/lane/#remarks","title":"Remarks","text":"<p>This is the same as FocusSearch(Vector2, Direction) but in pre-transformed content coordinates, and does not require checking for \"self-focus\" as FocusSearch(Vector2, Direction) already does this. The default implementation simply returns <code>null</code> as most views do not have children; subclasses with children must override this.</p>"},{"location":"reference/stardewui/widgets/lane/#getlocalchildren","title":"GetLocalChildren()","text":"<p>Gets the view's children with positions relative to the content area.</p> <pre><code>protected override System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetLocalChildren();\n</code></pre>"},{"location":"reference/stardewui/widgets/lane/#returns_1","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/widgets/lane/#remarks_1","title":"Remarks","text":"<p>This has the same signature as GetChildren() but assumes that coordinates are in the same space as those used in OnDrawContent(ISpriteBatch), i.e. not accounting for margin/border/padding. These coordinates are automatically adjusted in the GetChildren() to be relative to the entire view. </p> <p>The default implementation returns an empty sequence. Composite views must override this method in order for user interactions to behave correctly.</p>"},{"location":"reference/stardewui/widgets/lane/#iscontentdirty","title":"IsContentDirty()","text":"<p>Checks whether or not the internal content/layout has changed.</p> <pre><code>protected override bool IsContentDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/lane/#returns_2","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if content has changed; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/lane/#remarks_2","title":"Remarks","text":"<p>The base implementation of IsDirty() only checks if the base layout attributes have changed, i.e. Layout, Margin, Padding, etc. It does not know about content/data in any subclasses; those that accept content parameters (like text) will typically use DirtyTracker&lt;T&gt; to hold that content and should implement this method to check their IsDirty states.</p>"},{"location":"reference/stardewui/widgets/lane/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/lane/#parameters_1","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/lane/#remarks_3","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/lane/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/lane/#parameters_2","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/lane/#remarks_4","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/lane/#resetdirty","title":"ResetDirty()","text":"<p>Resets any dirty state associated with this view.</p> <pre><code>protected override void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/lane/#remarks_5","title":"Remarks","text":"<p>This is called at the end of Measure(Vector2), so that on the next pass, all state appears clean unless it was marked dirty after the last pass completed. The default implementation is a no-op; subclasses should use it to clear any private dirty state, e.g. via ResetDirty().</p>"},{"location":"reference/stardewui/widgets/marquee/","title":"Marquee","text":""},{"location":"reference/stardewui/widgets/marquee/#class-marquee","title":"Class Marquee","text":""},{"location":"reference/stardewui/widgets/marquee/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A scrolling marquee supporting any inner content.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Marquee : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 Marquee</p>"},{"location":"reference/stardewui/widgets/marquee/#remarks","title":"Remarks","text":"<p>Works by doubling and shifting the drawing the portion and applying a clipping rectangle, and therefore should be used only for non-interactive content; clicks and focus searches will not be correct inside the content area.</p>"},{"location":"reference/stardewui/widgets/marquee/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/marquee/#constructors","title":"Constructors","text":"Name Description Marquee() Initializes a new instance of Marquee."},{"location":"reference/stardewui/widgets/marquee/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) Content Content to scroll inside the marquee. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) ExtraDistance Distance in pixels between the copy of the content being scrolled \"out\" of the marquee, and the second copy of the content being scrolled \"in\". FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Inherited from View) Margin Margins (whitespace outside border) for this view.(Inherited from View) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Opacity Opacity (alpha level) of the view.(Inherited from View) OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) Speed Scrolling speed, in pixels per second. Tags The user-defined tags for this view.(Inherited from View) Tooltip Localized tooltip to display on hover, if any.(Inherited from View) Visibility Visibility for this view.(Inherited from View) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/marquee/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Overrides View.FindFocusableDescendant(Vector2, Direction)) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Inherited from View) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Overrides View.GetLocalChildren()) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Inherited from View) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Overrides View.IsContentDirty()) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from View) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Inherited from View) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from View) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from View) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Overrides View.ResetDirty()) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from View) ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/marquee/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/marquee/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/marquee/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/marquee/#marquee","title":"Marquee()","text":"<p>Initializes a new instance of Marquee.</p> <pre><code>public Marquee();\n</code></pre>"},{"location":"reference/stardewui/widgets/marquee/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/marquee/#content","title":"Content","text":"<p>Content to scroll inside the marquee.</p> <pre><code>public StardewUI.IView Content { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/marquee/#property-value","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/marquee/#extradistance","title":"ExtraDistance","text":"<p>Distance in pixels between the copy of the content being scrolled \"out\" of the marquee, and the second copy of the content being scrolled \"in\".</p> <pre><code>public float ExtraDistance { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/marquee/#property-value_1","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/marquee/#remarks_1","title":"Remarks","text":"<p>For example, a marquee scrolling the text \"Hello World\" might at any given moment look like:</p>"},{"location":"reference/stardewui/widgets/marquee/#speed","title":"Speed","text":"<p>Scrolling speed, in pixels per second.</p> <pre><code>public float Speed { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/marquee/#property-value_2","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/marquee/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/marquee/#findfocusabledescendantvector2-direction","title":"FindFocusableDescendant(Vector2, Direction)","text":"<p>Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.</p> <pre><code>protected override StardewUI.Input.FocusSearchResult FindFocusableDescendant(Microsoft.Xna.Framework.Vector2 contentPosition, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/widgets/marquee/#parameters","title":"Parameters","text":"<p><code>contentPosition</code> Vector2 The search position, relative to where this view's content starts (after applying margin, borders and padding).</p> <p><code>direction</code> Direction The search direction.</p>"},{"location":"reference/stardewui/widgets/marquee/#returns","title":"Returns","text":"<p>FocusSearchResult</p>"},{"location":"reference/stardewui/widgets/marquee/#remarks_2","title":"Remarks","text":"<p>This is the same as FocusSearch(Vector2, Direction) but in pre-transformed content coordinates, and does not require checking for \"self-focus\" as FocusSearch(Vector2, Direction) already does this. The default implementation simply returns <code>null</code> as most views do not have children; subclasses with children must override this.</p>"},{"location":"reference/stardewui/widgets/marquee/#getlocalchildren","title":"GetLocalChildren()","text":"<p>Gets the view's children with positions relative to the content area.</p> <pre><code>protected override System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetLocalChildren();\n</code></pre>"},{"location":"reference/stardewui/widgets/marquee/#returns_1","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/widgets/marquee/#remarks_3","title":"Remarks","text":"<p>This has the same signature as GetChildren() but assumes that coordinates are in the same space as those used in OnDrawContent(ISpriteBatch), i.e. not accounting for margin/border/padding. These coordinates are automatically adjusted in the GetChildren() to be relative to the entire view. </p> <p>The default implementation returns an empty sequence. Composite views must override this method in order for user interactions to behave correctly.</p>"},{"location":"reference/stardewui/widgets/marquee/#iscontentdirty","title":"IsContentDirty()","text":"<p>Checks whether or not the internal content/layout has changed.</p> <pre><code>protected override bool IsContentDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/marquee/#returns_2","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if content has changed; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/marquee/#remarks_4","title":"Remarks","text":"<p>The base implementation of IsDirty() only checks if the base layout attributes have changed, i.e. Layout, Margin, Padding, etc. It does not know about content/data in any subclasses; those that accept content parameters (like text) will typically use DirtyTracker&lt;T&gt; to hold that content and should implement this method to check their IsDirty states.</p>"},{"location":"reference/stardewui/widgets/marquee/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/marquee/#parameters_1","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/marquee/#remarks_5","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/marquee/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/marquee/#parameters_2","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/marquee/#remarks_6","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/marquee/#resetdirty","title":"ResetDirty()","text":"<p>Resets any dirty state associated with this view.</p> <pre><code>protected override void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/marquee/#remarks_7","title":"Remarks","text":"<p>This is called at the end of Measure(Vector2), so that on the next pass, all state appears clean unless it was marked dirty after the last pass completed. The default implementation is a no-op; subclasses should use it to clear any private dirty state, e.g. via ResetDirty().</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/","title":"NineGridPlacementEditor","text":""},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#class-ninegridplacementeditor","title":"Class NineGridPlacementEditor","text":""},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Editor widget for a NineGridPlacement, which brings up a PositioningOverlay on click.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class NineGridPlacementEditor : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 NineGridPlacementEditor</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#remarks","title":"Remarks","text":"<p>Appears as a grid with 9 squares, with the \"selected\" cell according to Placement drawn with a different background color. The grid is uniform and the size of each cell is determined by the widget's actual size (by way of its Layout) and the current LineWidth.</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#constructors","title":"Constructors","text":"Name Description NineGridPlacementEditor()"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) ButtonSpriteMap Map of buttons to button prompt sprites. CellColor The default color to draw grid cells (inside the gridlines). Content The content to display in the PositioningOverlay when editing. Not shown in the editor itself. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) DirectionSpriteMap Map of directions to directional arrow sprites; used to indicate dragging. Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) GridColor The color to draw gridlines. HoverTintColor Color to tint cells and gridlines while the mouse is hovering over the editor. InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Inherited from View) LineWidth Thickness of gridlines. Margin Margins (whitespace outside border) for this view.(Inherited from View) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Opacity Opacity (alpha level) of the view.(Inherited from View) OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) Placement The current content placement. PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) SelectionBackgroundColor Color for the grid cell that is is selected according to Placement. Tags The user-defined tags for this view.(Inherited from View) Tooltip Localized tooltip to display on hover, if any.(Inherited from View) Visibility Visibility for this view.(Inherited from View) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Inherited from View) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Inherited from View) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Inherited from View) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Inherited from View) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Overrides View.IsContentDirty()) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Overrides View.OnClick(ClickEventArgs)) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Inherited from View) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Overrides View.OnPointerMove(PointerMoveEventArgs)) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from View) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Overrides View.ResetDirty()) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from View) ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#ninegridplacementeditor","title":"NineGridPlacementEditor()","text":"<pre><code>public NineGridPlacementEditor();\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#buttonspritemap","title":"ButtonSpriteMap","text":"<p>Map of buttons to button prompt sprites.</p> <pre><code>public StardewUI.Graphics.ISpriteMap&lt;StardewModdingAPI.SButton&gt; ButtonSpriteMap { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#property-value","title":"Property Value","text":"<p>ISpriteMap"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#cellcolor","title":"CellColor","text":"<p>The default color to draw grid cells (inside the gridlines).</p> <pre><code>public Microsoft.Xna.Framework.Color CellColor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#property-value_1","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#content","title":"Content","text":"<p>The content to display in the PositioningOverlay when editing. Not shown in the editor itself.</p> <pre><code>public StardewUI.IView Content { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#property-value_2","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#directionspritemap","title":"DirectionSpriteMap","text":"<p>Map of directions to directional arrow sprites; used to indicate dragging.</p> <pre><code>public StardewUI.Graphics.ISpriteMap&lt;StardewUI.Direction&gt; DirectionSpriteMap { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#property-value_3","title":"Property Value","text":"<p>ISpriteMap&lt;Direction&gt;</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#gridcolor","title":"GridColor","text":"<p>The color to draw gridlines.</p> <pre><code>public Microsoft.Xna.Framework.Color GridColor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#property-value_4","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#hovertintcolor","title":"HoverTintColor","text":"<p>Color to tint cells and gridlines while the mouse is hovering over the editor.</p> <pre><code>public Microsoft.Xna.Framework.Color HoverTintColor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#property-value_5","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#linewidth","title":"LineWidth","text":"<p>Thickness of gridlines.</p> <pre><code>public int LineWidth { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#property-value_6","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#placement","title":"Placement","text":"<p>The current content placement.</p> <pre><code>public StardewUI.Layout.NineGridPlacement Placement { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#property-value_7","title":"Property Value","text":"<p>NineGridPlacement</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#selectionbackgroundcolor","title":"SelectionBackgroundColor","text":"<p>Color for the grid cell that is is selected according to Placement.</p> <pre><code>public Microsoft.Xna.Framework.Color SelectionBackgroundColor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#property-value_8","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#iscontentdirty","title":"IsContentDirty()","text":"<p>Checks whether or not the internal content/layout has changed.</p> <pre><code>protected override bool IsContentDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if content has changed; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#remarks_1","title":"Remarks","text":"<p>The base implementation of IsDirty() only checks if the base layout attributes have changed, i.e. Layout, Margin, Padding, etc. It does not know about content/data in any subclasses; those that accept content parameters (like text) will typically use DirtyTracker&lt;T&gt; to hold that content and should implement this method to check their IsDirty states.</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#onclickclickeventargs","title":"OnClick(ClickEventArgs)","text":"<p>Called when a click is received within this view's bounds.</p> <pre><code>public override void OnClick(StardewUI.Events.ClickEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#parameters","title":"Parameters","text":"<p><code>e</code> ClickEventArgs The event data.</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#parameters_1","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#remarks_2","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#parameters_2","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#remarks_3","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#onpointermovepointermoveeventargs","title":"OnPointerMove(PointerMoveEventArgs)","text":"<p>Called when a pointer movement related to this view occurs.</p> <pre><code>public override void OnPointerMove(StardewUI.Events.PointerMoveEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#parameters_3","title":"Parameters","text":"<p><code>e</code> PointerMoveEventArgs The event data.</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#remarks_4","title":"Remarks","text":"<p>This can either be the pointer entering the view, leaving the view, or moving within the view. The method is used to trigger events such as PointerEnter and PointerLeave.</p>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#resetdirty","title":"ResetDirty()","text":"<p>Resets any dirty state associated with this view.</p> <pre><code>protected override void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/ninegridplacementeditor/#remarks_5","title":"Remarks","text":"<p>This is called at the end of Measure(Vector2), so that on the next pass, all state appears clean unless it was marked dirty after the last pass completed. The default implementation is a no-op; subclasses should use it to clear any private dirty state, e.g. via ResetDirty().</p>"},{"location":"reference/stardewui/widgets/outletattribute/","title":"OutletAttribute","text":""},{"location":"reference/stardewui/widgets/outletattribute/#class-outletattribute","title":"Class OutletAttribute","text":""},{"location":"reference/stardewui/widgets/outletattribute/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Marks a child/children property as a named outlet.</p> <pre><code>[System.AttributeUsage]\npublic class OutletAttribute : System.Attribute\n</code></pre> <p>Inheritance Object \u21e6 Attribute \u21e6 OutletAttribute</p>"},{"location":"reference/stardewui/widgets/outletattribute/#remarks","title":"Remarks","text":"<p>Outlets are used by the UI Framework, in StarML views, to differentiate between multiple child properties of the same layout view. For example, the Expander defines both a Content view (the \"main\" view) and a separate Header view, but normally only one children/content property is allowed per layout view. </p> <p>When a property is decorated with an <code>OutletAttribute</code>, it is ignored by the framework unless the markup element includes an <code>*outlet</code> attribute with a value equal to the outlet Name, in which case the element (or elements) will be added or assigned to that specific outlet. </p> <p>The attribute should be omitted for whichever outlet is considered the default, i.e. to be targeted whenever the markup element does not include an <code>*outlet</code> attribute. </p> <p>Has no effect when used outside a data binding context, or when applied to any property that does not have either IView or a collection of IView elements such as IEnumerable&lt;T&gt;.</p>"},{"location":"reference/stardewui/widgets/outletattribute/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/outletattribute/#constructors","title":"Constructors","text":"Name Description OutletAttribute(string) Marks a child/children property as a named outlet."},{"location":"reference/stardewui/widgets/outletattribute/#properties","title":"Properties","text":"Name Description Name The outlet name, to be matched in an <code>*outlet</code> attribute. TypeId (Inherited from Attribute)"},{"location":"reference/stardewui/widgets/outletattribute/#methods","title":"Methods","text":"Name Description Equals(Object) (Inherited from Attribute) GetHashCode() (Inherited from Attribute) IsDefaultAttribute() (Inherited from Attribute) Match(Object) (Inherited from Attribute)"},{"location":"reference/stardewui/widgets/outletattribute/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/outletattribute/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/outletattribute/#outletattributestring","title":"OutletAttribute(string)","text":"<p>Marks a child/children property as a named outlet.</p> <pre><code>public OutletAttribute(string name);\n</code></pre>"},{"location":"reference/stardewui/widgets/outletattribute/#parameters","title":"Parameters","text":"<p><code>name</code> string The outlet name, to be matched in an <code>*outlet</code> attribute.</p>"},{"location":"reference/stardewui/widgets/outletattribute/#remarks_1","title":"Remarks","text":"<p>Outlets are used by the UI Framework, in StarML views, to differentiate between multiple child properties of the same layout view. For example, the Expander defines both a Content view (the \"main\" view) and a separate Header view, but normally only one children/content property is allowed per layout view. </p> <p>When a property is decorated with an <code>OutletAttribute</code>, it is ignored by the framework unless the markup element includes an <code>*outlet</code> attribute with a value equal to the outlet Name, in which case the element (or elements) will be added or assigned to that specific outlet. </p> <p>The attribute should be omitted for whichever outlet is considered the default, i.e. to be targeted whenever the markup element does not include an <code>*outlet</code> attribute. </p> <p>Has no effect when used outside a data binding context, or when applied to any property that does not have either IView or a collection of IView elements such as IEnumerable&lt;T&gt;.</p>"},{"location":"reference/stardewui/widgets/outletattribute/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/outletattribute/#name","title":"Name","text":"<p>The outlet name, to be matched in an <code>*outlet</code> attribute.</p> <pre><code>public string Name { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/outletattribute/#property-value","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/panel/","title":"Panel","text":""},{"location":"reference/stardewui/widgets/panel/#class-panel","title":"Class Panel","text":""},{"location":"reference/stardewui/widgets/panel/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A layout view whose children all overlap the same boundaries.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Panel : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 Panel</p>"},{"location":"reference/stardewui/widgets/panel/#remarks","title":"Remarks","text":"<p>A panel's content size (i.e. if any dimensions are Content) is always equal to the largest child; alignment applies to each child individually, and children are drawn according to their ZIndex first and then their order in Children. </p> <p>Children can be positioned more precisely using their Margin and Padding for standard view types, or drawing at non-origin positions for custom IView implementations. </p> <p>A common use of panels is to draw overlapping images, in cases where a Frame doesn't really make sense, e.g. there is no explicit \"background\" or \"border\", or if there are more than 2 layers to draw.</p>"},{"location":"reference/stardewui/widgets/panel/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/panel/#constructors","title":"Constructors","text":"Name Description Panel()"},{"location":"reference/stardewui/widgets/panel/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) Children Child views to display in this layout. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) HorizontalContentAlignment Specifies how to align each child in Children horizontally within the frame's area. InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Inherited from View) Margin Margins (whitespace outside border) for this view.(Inherited from View) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Opacity Opacity (alpha level) of the view.(Inherited from View) OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) Tags The user-defined tags for this view.(Inherited from View) Tooltip Localized tooltip to display on hover, if any.(Inherited from View) VerticalContentAlignment Specifies how to align each child in Children vertically within the frame's area. Visibility Visibility for this view.(Inherited from View) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/panel/#methods","title":"Methods","text":"Name Description Align(IView, Alignment, Alignment, string) Creates a Panel that is used to align some inner content inside a parent, typically another Panel. ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Overrides View.FindFocusableDescendant(Vector2, Direction)) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Inherited from View) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Overrides View.GetLocalChildren()) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Inherited from View) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Overrides View.IsContentDirty()) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from View) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Inherited from View) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from View) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from View) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Overrides View.ResetDirty()) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from View) ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/panel/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/panel/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/panel/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/panel/#panel","title":"Panel()","text":"<pre><code>public Panel();\n</code></pre>"},{"location":"reference/stardewui/widgets/panel/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/panel/#children","title":"Children","text":"<p>Child views to display in this layout.</p> <pre><code>public System.Collections.Generic.IList&lt;StardewUI.IView&gt; Children { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/panel/#property-value","title":"Property Value","text":"<p>IList&lt;IView&gt;</p>"},{"location":"reference/stardewui/widgets/panel/#horizontalcontentalignment","title":"HorizontalContentAlignment","text":"<p>Specifies how to align each child in Children horizontally within the frame's area.</p> <pre><code>public StardewUI.Layout.Alignment HorizontalContentAlignment { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/panel/#property-value_1","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/widgets/panel/#verticalcontentalignment","title":"VerticalContentAlignment","text":"<p>Specifies how to align each child in Children vertically within the frame's area.</p> <pre><code>public StardewUI.Layout.Alignment VerticalContentAlignment { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/panel/#property-value_2","title":"Property Value","text":"<p>Alignment</p>"},{"location":"reference/stardewui/widgets/panel/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/panel/#aligniview-alignment-alignment-string","title":"Align(IView, Alignment, Alignment, string)","text":"<p>Creates a Panel that is used to align some inner content inside a parent, typically another Panel.</p> <pre><code>public static StardewUI.Widgets.Panel Align(StardewUI.IView content, StardewUI.Layout.Alignment horizontal, StardewUI.Layout.Alignment vertical, string name);\n</code></pre>"},{"location":"reference/stardewui/widgets/panel/#parameters","title":"Parameters","text":"<p><code>content</code> IView The content to align.</p> <p><code>horizontal</code> Alignment Horizontal alignment of the content.</p> <p><code>vertical</code> Alignment Vertical alignment of the content.</p> <p><code>name</code> string Optional name to give to the panel, for debugging.</p>"},{"location":"reference/stardewui/widgets/panel/#returns","title":"Returns","text":"<p>Panel</p>"},{"location":"reference/stardewui/widgets/panel/#remarks_1","title":"Remarks","text":"<p>The created panel will stretch to fill all available area, and align the <code>content</code> view within itself according to the <code>horizontal</code> and <code>vertical</code> alignments. Several Align(IView, Alignment, Alignment, string) helpers can be used to align different content/controls to different edges or corners of the same parent Panel.</p>"},{"location":"reference/stardewui/widgets/panel/#findfocusabledescendantvector2-direction","title":"FindFocusableDescendant(Vector2, Direction)","text":"<p>Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.</p> <pre><code>protected override StardewUI.Input.FocusSearchResult FindFocusableDescendant(Microsoft.Xna.Framework.Vector2 contentPosition, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/widgets/panel/#parameters_1","title":"Parameters","text":"<p><code>contentPosition</code> Vector2 The search position, relative to where this view's content starts (after applying margin, borders and padding).</p> <p><code>direction</code> Direction The search direction.</p>"},{"location":"reference/stardewui/widgets/panel/#returns_1","title":"Returns","text":"<p>FocusSearchResult</p>"},{"location":"reference/stardewui/widgets/panel/#remarks_2","title":"Remarks","text":"<p>This is the same as FocusSearch(Vector2, Direction) but in pre-transformed content coordinates, and does not require checking for \"self-focus\" as FocusSearch(Vector2, Direction) already does this. The default implementation simply returns <code>null</code> as most views do not have children; subclasses with children must override this.</p>"},{"location":"reference/stardewui/widgets/panel/#getlocalchildren","title":"GetLocalChildren()","text":"<p>Gets the view's children with positions relative to the content area.</p> <pre><code>protected override System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetLocalChildren();\n</code></pre>"},{"location":"reference/stardewui/widgets/panel/#returns_2","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/widgets/panel/#remarks_3","title":"Remarks","text":"<p>This has the same signature as GetChildren() but assumes that coordinates are in the same space as those used in OnDrawContent(ISpriteBatch), i.e. not accounting for margin/border/padding. These coordinates are automatically adjusted in the GetChildren() to be relative to the entire view. </p> <p>The default implementation returns an empty sequence. Composite views must override this method in order for user interactions to behave correctly.</p>"},{"location":"reference/stardewui/widgets/panel/#iscontentdirty","title":"IsContentDirty()","text":"<p>Checks whether or not the internal content/layout has changed.</p> <pre><code>protected override bool IsContentDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/panel/#returns_3","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if content has changed; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/panel/#remarks_4","title":"Remarks","text":"<p>The base implementation of IsDirty() only checks if the base layout attributes have changed, i.e. Layout, Margin, Padding, etc. It does not know about content/data in any subclasses; those that accept content parameters (like text) will typically use DirtyTracker&lt;T&gt; to hold that content and should implement this method to check their IsDirty states.</p>"},{"location":"reference/stardewui/widgets/panel/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/panel/#parameters_2","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/panel/#remarks_5","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/panel/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/panel/#parameters_3","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/panel/#remarks_6","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/panel/#resetdirty","title":"ResetDirty()","text":"<p>Resets any dirty state associated with this view.</p> <pre><code>protected override void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/panel/#remarks_7","title":"Remarks","text":"<p>This is called at the end of Measure(Vector2), so that on the next pass, all state appears clean unless it was marked dirty after the last pass completed. The default implementation is a no-op; subclasses should use it to clear any private dirty state, e.g. via ResetDirty().</p>"},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/","title":"PositioningOverlay.ControlScheme","text":""},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#class-positioningoverlaycontrolscheme","title":"Class PositioningOverlay.ControlScheme","text":""},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Configures the mapping of buttons to positioning actions in a PositioningOverlay.</p> <pre><code>public class PositioningOverlay.ControlScheme\n</code></pre> <p>Inheritance Object \u21e6 ControlScheme</p>"},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#remarks","title":"Remarks","text":"<p>For all IReadOnlyList&lt;T&gt; properties, any of the buttons can be pressed in order to perform that function; it is primarily intended to support left-stick/d-pad equivalency and WASD/arrow-key equivalency. Button combinations are not supported. </p> <p>Keyboard control schemes only specify the fine movements; alignments are always controlled using number/numpad keys for each of the 9 possibilities.</p>"},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#constructors","title":"Constructors","text":"Name Description ControlScheme()"},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#properties","title":"Properties","text":"Name Description FineDown Buttons to shift the content down one pixel by modifying the Offset of the ContentPlacement. FineLeft Buttons to shift the content left one pixel by modifying the Offset of the ContentPlacement. FineRight Buttons to shift the content right one pixel by modifying the Offset of the ContentPlacement. FineUp Buttons to shift the content up one pixel by modifying the Offset of the ContentPlacement."},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#controlscheme","title":"ControlScheme()","text":"<pre><code>public ControlScheme();\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#finedown","title":"FineDown","text":"<p>Buttons to shift the content down one pixel by modifying the Offset of the ContentPlacement.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewModdingAPI.SButton&gt; FineDown { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#property-value","title":"Property Value","text":"<p>IReadOnlyList"},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#fineleft","title":"FineLeft","text":"<p>Buttons to shift the content left one pixel by modifying the Offset of the ContentPlacement.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewModdingAPI.SButton&gt; FineLeft { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#property-value_1","title":"Property Value","text":"<p>IReadOnlyList"},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#fineright","title":"FineRight","text":"<p>Buttons to shift the content right one pixel by modifying the Offset of the ContentPlacement.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewModdingAPI.SButton&gt; FineRight { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#property-value_2","title":"Property Value","text":"<p>IReadOnlyList"},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#fineup","title":"FineUp","text":"<p>Buttons to shift the content up one pixel by modifying the Offset of the ContentPlacement.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewModdingAPI.SButton&gt; FineUp { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay.controlscheme/#property-value_3","title":"Property Value","text":"<p>IReadOnlyList"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/","title":"PositioningOverlay.GamepadControlScheme","text":""},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#class-positioningoverlaygamepadcontrolscheme","title":"Class PositioningOverlay.GamepadControlScheme","text":""},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Configures the mapping of buttons to positioning actions in a PositioningOverlay. Includes the generic ControlScheme settings as well as grid-movement settings specific to gamepads.</p> <pre><code>public class PositioningOverlay.GamepadControlScheme : \n    StardewUI.Widgets.PositioningOverlay.ControlScheme\n</code></pre> <p>Inheritance Object \u21e6 ControlScheme \u21e6 GamepadControlScheme</p>"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#constructors","title":"Constructors","text":"Name Description GamepadControlScheme()"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#properties","title":"Properties","text":"Name Description FineDown Buttons to shift the content down one pixel by modifying the Offset of the ContentPlacement.(Inherited from ControlScheme) FineLeft Buttons to shift the content left one pixel by modifying the Offset of the ContentPlacement.(Inherited from ControlScheme) FineRight Buttons to shift the content right one pixel by modifying the Offset of the ContentPlacement.(Inherited from ControlScheme) FineUp Buttons to shift the content up one pixel by modifying the Offset of the ContentPlacement.(Inherited from ControlScheme) GridDown Buttons to shift the content down by one grid cell by changing the VerticalAlignment of the ContentPlacement. Start becomes Middle and Middle becomes End. GridLeft Buttons to shift the content left by one grid cell by changing the HorizontalAlignment of the ContentPlacement. End becomes Middle and Middle becomes Start. GridRight Buttons to shift the content right by one grid cell by changing the HorizontalAlignment of the ContentPlacement. Start becomes Middle and Middle becomes End. GridUp Buttons to shift the content up by one grid cell by changing the VerticalAlignment of the ContentPlacement. End becomes Middle and Middle becomes Start. Modifier Modifier key to switch between grid- and fine-positioning modes."},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#gamepadcontrolscheme","title":"GamepadControlScheme()","text":"<pre><code>public GamepadControlScheme();\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#griddown","title":"GridDown","text":"<p>Buttons to shift the content down by one grid cell by changing the VerticalAlignment of the ContentPlacement. Start becomes Middle and Middle becomes End.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewModdingAPI.SButton&gt; GridDown { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#property-value","title":"Property Value","text":"<p>IReadOnlyList"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#gridleft","title":"GridLeft","text":"<p>Buttons to shift the content left by one grid cell by changing the HorizontalAlignment of the ContentPlacement. End becomes Middle and Middle becomes Start.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewModdingAPI.SButton&gt; GridLeft { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#property-value_1","title":"Property Value","text":"<p>IReadOnlyList"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#gridright","title":"GridRight","text":"<p>Buttons to shift the content right by one grid cell by changing the HorizontalAlignment of the ContentPlacement. Start becomes Middle and Middle becomes End.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewModdingAPI.SButton&gt; GridRight { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#property-value_2","title":"Property Value","text":"<p>IReadOnlyList"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#gridup","title":"GridUp","text":"<p>Buttons to shift the content up by one grid cell by changing the VerticalAlignment of the ContentPlacement. End becomes Middle and Middle becomes Start.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewModdingAPI.SButton&gt; GridUp { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#property-value_3","title":"Property Value","text":"<p>IReadOnlyList"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#modifier","title":"Modifier","text":"<p>Modifier key to switch between grid- and fine-positioning modes.</p> <pre><code>public StardewModdingAPI.SButton Modifier { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#property-value_4","title":"Property Value","text":"<p>SButton</p>"},{"location":"reference/stardewui/widgets/positioningoverlay.gamepadcontrolscheme/#remarks","title":"Remarks","text":"<p>If specified, the default motion will be fine, and the modifier key must be held in order to move accross the grid.</p>"},{"location":"reference/stardewui/widgets/positioningoverlay/","title":"PositioningOverlay","text":""},{"location":"reference/stardewui/widgets/positioningoverlay/#class-positioningoverlay","title":"Class PositioningOverlay","text":""},{"location":"reference/stardewui/widgets/positioningoverlay/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>An overlay that can be used to edit the position of some arbitrary content.</p> <pre><code>public class PositioningOverlay : StardewUI.Overlays.FullScreenOverlay\n</code></pre> <p>Inheritance Object \u21e6 FullScreenOverlay \u21e6 PositioningOverlay</p>"},{"location":"reference/stardewui/widgets/positioningoverlay/#remarks","title":"Remarks","text":"<p>Note that the widget only provides a means to visually/interactively obtain a new position, similar to e.g. obtaining a text string from a modal input query. It is up to the caller to persist the resulting ContentPlacement to configuration and determine how to actually position the content in its usual context (e.g. game HUD).</p>"},{"location":"reference/stardewui/widgets/positioningoverlay/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/positioningoverlay/#constructors","title":"Constructors","text":"Name Description PositioningOverlay(ISpriteMap&lt;SButton&gt;, ISpriteMap&lt;Direction&gt;) An overlay that can be used to edit the position of some arbitrary content."},{"location":"reference/stardewui/widgets/positioningoverlay/#properties","title":"Properties","text":"Name Description CapturingInput Whether the overlay wants to capture all keyboard and gamepad inputs, i.e. prevent them from being dispatched to the parent menu.(Inherited from FullScreenOverlay) Content The content that is being positioned. ContentPlacement Current placement of the Content within the viewport. DimmingAmount Amount to dim whatever is underneath the overlay.(Inherited from FullScreenOverlay) GamepadControls The control scheme to use when positioning with a gamepad. HorizontalAlignment Horizontal alignment of the overlay relative to the Parent edge.(Inherited from FullScreenOverlay) HorizontalParentAlignment Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its HorizontalAlignment.(Inherited from FullScreenOverlay) KeyboardControls The control scheme to use when positioning with keyboard/mouse. Parent The parent of this overlay, used for positioning. If not specified, then the overlay will be positioned relative to the entire UI viewport.(Inherited from FullScreenOverlay) ParentOffset Additional pixel offset to apply to the overlay's position, after alignments.(Inherited from FullScreenOverlay) VerticalAlignment Vertical alignment of the overlay relative to the Parent edge.(Inherited from FullScreenOverlay) VerticalParentAlignment Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its VerticalAlignment.(Inherited from FullScreenOverlay) View The view to be displayed/interacted with as an overlay.(Inherited from FullScreenOverlay)"},{"location":"reference/stardewui/widgets/positioningoverlay/#methods","title":"Methods","text":"Name Description CreateView() Creates the content view that will be displayed as an overlay.(Overrides FullScreenOverlay.CreateView()) OnClose() Runs when the overlay is removed from the active stack.(Inherited from FullScreenOverlay) RequireView&lt;TChild&gt;(Func&lt;TChild&gt;) Ensures that the overlay view is created before attempting to access a child view.(Inherited from FullScreenOverlay) Update(TimeSpan) Runs on every game update tick.(Inherited from FullScreenOverlay)"},{"location":"reference/stardewui/widgets/positioningoverlay/#events","title":"Events","text":"Name Description Close Event raised when the overlay is closed - i.e. removed from the current context stack.(Inherited from FullScreenOverlay)"},{"location":"reference/stardewui/widgets/positioningoverlay/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/positioningoverlay/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/positioningoverlay/#positioningoverlayispritemapsbutton-ispritemapdirection","title":"PositioningOverlay(ISpriteMap&lt;SButton&gt;, ISpriteMap&lt;Direction&gt;)","text":"<p>An overlay that can be used to edit the position of some arbitrary content.</p> <pre><code>public PositioningOverlay(StardewUI.Graphics.ISpriteMap&lt;StardewModdingAPI.SButton&gt; buttonSpriteMap, StardewUI.Graphics.ISpriteMap&lt;StardewUI.Direction&gt; directionSpriteMap);\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay/#parameters","title":"Parameters","text":"<p><code>buttonSpriteMap</code> ISpriteMap Map of buttons to button prompt sprites. <p><code>directionSpriteMap</code> ISpriteMap&lt;Direction&gt; Map of directions to directional arrow sprites; used to indicate dragging.</p>"},{"location":"reference/stardewui/widgets/positioningoverlay/#remarks_1","title":"Remarks","text":"<p>Note that the widget only provides a means to visually/interactively obtain a new position, similar to e.g. obtaining a text string from a modal input query. It is up to the caller to persist the resulting ContentPlacement to configuration and determine how to actually position the content in its usual context (e.g. game HUD).</p>"},{"location":"reference/stardewui/widgets/positioningoverlay/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/positioningoverlay/#content","title":"Content","text":"<p>The content that is being positioned.</p> <pre><code>public StardewUI.IView Content { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay/#property-value","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/positioningoverlay/#remarks_2","title":"Remarks","text":"<p>This is normally a \"representative\" version of the real content, as the true HUD widget or other element may not exist or have its properties known at configuration time.</p>"},{"location":"reference/stardewui/widgets/positioningoverlay/#contentplacement","title":"ContentPlacement","text":"<p>Current placement of the Content within the viewport.</p> <pre><code>public StardewUI.Layout.NineGridPlacement ContentPlacement { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay/#property-value_1","title":"Property Value","text":"<p>NineGridPlacement</p>"},{"location":"reference/stardewui/widgets/positioningoverlay/#gamepadcontrols","title":"GamepadControls","text":"<p>The control scheme to use when positioning with a gamepad.</p> <pre><code>public StardewUI.Widgets.PositioningOverlay.GamepadControlScheme GamepadControls { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay/#property-value_2","title":"Property Value","text":"<p>GamepadControlScheme</p>"},{"location":"reference/stardewui/widgets/positioningoverlay/#keyboardcontrols","title":"KeyboardControls","text":"<p>The control scheme to use when positioning with keyboard/mouse.</p> <pre><code>public StardewUI.Widgets.PositioningOverlay.ControlScheme KeyboardControls { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay/#property-value_3","title":"Property Value","text":"<p>ControlScheme</p>"},{"location":"reference/stardewui/widgets/positioningoverlay/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/positioningoverlay/#createview","title":"CreateView()","text":"<p>Creates the content view that will be displayed as an overlay.</p> <pre><code>protected override StardewUI.IView CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/positioningoverlay/#returns","title":"Returns","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/","title":"ScrollableFrameView","text":""},{"location":"reference/stardewui/widgets/scrollableframeview/#class-scrollableframeview","title":"Class ScrollableFrameView","text":""},{"location":"reference/stardewui/widgets/scrollableframeview/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Layout widget for a sectioned menu including a scrollable content area.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class ScrollableFrameView : StardewUI.Widgets.ComponentView\n</code></pre> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 ComponentView&lt;T&gt; \u21e6 ComponentView \u21e6 ScrollableFrameView</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#remarks","title":"Remarks","text":"<p>The primary content is always kept centered, with optional title, footer and sidebar (e.g. for navigation) available to decorate the view. Many if not most menus can be fully represented with this layout, as long as they do not have built-in subnavigation such as top-level tabs.</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/scrollableframeview/#constructors","title":"Constructors","text":"Name Description ScrollableFrameView()"},{"location":"reference/stardewui/widgets/scrollableframeview/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) Content The primary content, which displays inside the menu frame and is clipped/scrollable. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) ContentLayout Layout parameters to apply to the actual ScrollContainer containing the Content. FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) Footer Optional footer to display below the Content. FrameLayout Layout parameters to apply to the frame surrounding the Content. IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) Sidebar Optional content to display to the left of the Content frame. SidebarWidth Maximum width of the sidebar area. Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) Title Title to display above the Content. Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) View (Inherited from ComponentView&lt;T&gt;) Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/scrollableframeview/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) CreateView() Creates and returns the root view.(Overrides ComponentView&lt;T&gt;.CreateView()) Dispose() (Inherited from DecoratorView&lt;T&gt;) Draw(ISpriteBatch) Draws the content for this view.(Inherited from DecoratorView&lt;T&gt;) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from DecoratorView&lt;T&gt;) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Overrides DecoratorView&lt;T&gt;.Measure(Vector2)) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Inherited from DecoratorView&lt;T&gt;) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Overrides DecoratorView&lt;T&gt;.OnWheel(WheelEventArgs)) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/scrollableframeview/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/scrollableframeview/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/scrollableframeview/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/scrollableframeview/#scrollableframeview","title":"ScrollableFrameView()","text":"<pre><code>public ScrollableFrameView();\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableframeview/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/scrollableframeview/#content","title":"Content","text":"<p>The primary content, which displays inside the menu frame and is clipped/scrollable.</p> <pre><code>public StardewUI.IView Content { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableframeview/#property-value","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#contentlayout","title":"ContentLayout","text":"<p>Layout parameters to apply to the actual ScrollContainer containing the Content.</p> <pre><code>public StardewUI.Layout.LayoutParameters ContentLayout { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableframeview/#property-value_1","title":"Property Value","text":"<p>LayoutParameters</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#remarks_1","title":"Remarks","text":"<p>The scroll container sits between the Content and the outer frame. By default it is set to stretch to the outer layout dimensions, but can be modified to e.g. fit width to content.</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#footer","title":"Footer","text":"<p>Optional footer to display below the Content.</p> <pre><code>public StardewUI.IView Footer { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableframeview/#property-value_2","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#remarks_2","title":"Remarks","text":"<p>Footer layout can be any arbitrary size and will not push up the Content. However, footers wider than the <code>Content</code> may cause problems.</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#framelayout","title":"FrameLayout","text":"<p>Layout parameters to apply to the frame surrounding the Content.</p> <pre><code>public StardewUI.Layout.LayoutParameters FrameLayout { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableframeview/#property-value_3","title":"Property Value","text":"<p>LayoutParameters</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#remarks_3","title":"Remarks","text":"<p>Determines the size of the scrollable area and should generally be one of the FixedSize(Point) overloads, or at least have a fixed Height.</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#sidebar","title":"Sidebar","text":"<p>Optional content to display to the left of the Content frame.</p> <pre><code>public StardewUI.IView Sidebar { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableframeview/#property-value_4","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#remarks_4","title":"Remarks","text":"<p>Typically used for navigation or other contextual info. Max width is constrained to SidebarWidth regardless of layout.</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#sidebarwidth","title":"SidebarWidth","text":"<p>Maximum width of the sidebar area.</p> <pre><code>public int SidebarWidth { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableframeview/#property-value_5","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#remarks_5","title":"Remarks","text":"<p>To keep the primary content centered, the same dimension must be applied to the scrollbar's container, so the width must be specified ahead of time. This acts as a maximum width; the actual sidebar does not have to fill this space (it will be right-aligned in that case), but larger views may clip or overflow.</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#title","title":"Title","text":"<p>Title to display above the Content.</p> <pre><code>public string Title { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableframeview/#property-value_6","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#remarks_6","title":"Remarks","text":"<p>All titles are displayed as a Banner.</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/scrollableframeview/#createview","title":"CreateView()","text":"<p>Creates and returns the root view.</p> <pre><code>protected override StardewUI.IView CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableframeview/#returns","title":"Returns","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#measurevector2","title":"Measure(Vector2)","text":"<p>Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.</p> <pre><code>public override bool Measure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableframeview/#parameters","title":"Parameters","text":"<p><code>availableSize</code> Vector2 The width/height that is still available in the container/parent.</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#returns_1","title":"Returns","text":"<p>Boolean</p> <p>Whether or not any layout was performed as a result of this pass. Callers may use this to propagate layout back up the tree, or perform expensive follow-up actions.</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#remarks_7","title":"Remarks","text":"<p>Most views should save the value of <code>availableSize</code> for use in IsDirty() checks.</p>"},{"location":"reference/stardewui/widgets/scrollableframeview/#onwheelwheeleventargs","title":"OnWheel(WheelEventArgs)","text":"<p>Called when a wheel event is received within this view's bounds.</p> <pre><code>public override void OnWheel(StardewUI.Events.WheelEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableframeview/#parameters_1","title":"Parameters","text":"<p><code>e</code> WheelEventArgs The event data.</p>"},{"location":"reference/stardewui/widgets/scrollableview/","title":"ScrollableView","text":""},{"location":"reference/stardewui/widgets/scrollableview/#class-scrollableview","title":"Class ScrollableView","text":""},{"location":"reference/stardewui/widgets/scrollableview/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Provides a content container and accompanying scrollbar.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class ScrollableView : StardewUI.Widgets.ComponentView&lt;T&gt;\n</code></pre> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 ComponentView&lt;T&gt; \u21e6 ScrollableView</p>"},{"location":"reference/stardewui/widgets/scrollableview/#remarks","title":"Remarks","text":"<p>This does not add any extra UI elements aside from the scrollbar, like ScrollableFrameView does, and is more suitable for highly customized menus. </p> <p>Currently supports only vertically-scrolling content.</p>"},{"location":"reference/stardewui/widgets/scrollableview/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/scrollableview/#constructors","title":"Constructors","text":"Name Description ScrollableView()"},{"location":"reference/stardewui/widgets/scrollableview/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) Content The content to make scrollable. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) Peeking Amount of extra distance above/below scrolled content; see Peeking. PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) View (Inherited from ComponentView&lt;T&gt;) Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/scrollableview/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) CreateView() Creates and returns the root view.(Overrides ComponentView&lt;T&gt;.CreateView()) Dispose() (Inherited from DecoratorView&lt;T&gt;) Draw(ISpriteBatch) Draws the content for this view.(Inherited from DecoratorView&lt;T&gt;) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from DecoratorView&lt;T&gt;) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from DecoratorView&lt;T&gt;) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Inherited from DecoratorView&lt;T&gt;) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Overrides DecoratorView&lt;T&gt;.OnWheel(WheelEventArgs)) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/scrollableview/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/scrollableview/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/scrollableview/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/scrollableview/#scrollableview","title":"ScrollableView()","text":"<pre><code>public ScrollableView();\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableview/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/scrollableview/#content","title":"Content","text":"<p>The content to make scrollable.</p> <pre><code>public StardewUI.IView Content { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableview/#property-value","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/scrollableview/#peeking","title":"Peeking","text":"<p>Amount of extra distance above/below scrolled content; see Peeking.</p> <pre><code>public float Peeking { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableview/#property-value_1","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/scrollableview/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/scrollableview/#createview","title":"CreateView()","text":"<p>Creates and returns the root view.</p> <pre><code>protected override StardewUI.Widgets.ScrollContainer CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableview/#returns","title":"Returns","text":"<p>ScrollContainer</p>"},{"location":"reference/stardewui/widgets/scrollableview/#onwheelwheeleventargs","title":"OnWheel(WheelEventArgs)","text":"<p>Called when a wheel event is received within this view's bounds.</p> <pre><code>public override void OnWheel(StardewUI.Events.WheelEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollableview/#parameters","title":"Parameters","text":"<p><code>e</code> WheelEventArgs The event data.</p>"},{"location":"reference/stardewui/widgets/scrollbar/","title":"Scrollbar","text":""},{"location":"reference/stardewui/widgets/scrollbar/#class-scrollbar","title":"Class Scrollbar","text":""},{"location":"reference/stardewui/widgets/scrollbar/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Controls the scrolling of a ScrollContainer.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Scrollbar : StardewUI.Widgets.ComponentView&lt;T&gt;\n</code></pre> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 ComponentView&lt;T&gt; \u21e6 Scrollbar</p>"},{"location":"reference/stardewui/widgets/scrollbar/#remarks","title":"Remarks","text":"<p>Must be associated with a ScrollContainer in order to work; will not draw if the container is not set or if its ScrollSize is zero.</p>"},{"location":"reference/stardewui/widgets/scrollbar/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/scrollbar/#constructors","title":"Constructors","text":"Name Description Scrollbar()"},{"location":"reference/stardewui/widgets/scrollbar/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) Container The scroll container that this Scrollbar controls. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) DownSprite Sprite to draw for the down arrow, or right arrow in horizontal orientation. FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Margin Margins for this view. See Margin. Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) ThumbSprite Sprite to draw for the thumb, which moves within the track and indicates the current scroll position and can be dragged to scroll. Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) TrackSprite Sprite to draw for the track area, within which the thumb can move. UpSprite Sprite to draw for the up arrow, or left arrow in horizontal orientation. View (Inherited from ComponentView&lt;T&gt;) Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/scrollbar/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) CreateView() Creates and returns the root view.(Overrides ComponentView&lt;T&gt;.CreateView()) Dispose() (Inherited from DecoratorView&lt;T&gt;) Draw(ISpriteBatch) Draws the content for this view.(Inherited from DecoratorView&lt;T&gt;) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from DecoratorView&lt;T&gt;) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from DecoratorView&lt;T&gt;) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Inherited from DecoratorView&lt;T&gt;) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;) SyncPosition() Forces an immediate sync of the thumb position with the associated container."},{"location":"reference/stardewui/widgets/scrollbar/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/scrollbar/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/scrollbar/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/scrollbar/#scrollbar","title":"Scrollbar()","text":"<pre><code>public Scrollbar();\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollbar/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/scrollbar/#container","title":"Container","text":"<p>The scroll container that this Scrollbar controls.</p> <pre><code>public StardewUI.Widgets.ScrollContainer Container { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollbar/#property-value","title":"Property Value","text":"<p>ScrollContainer</p>"},{"location":"reference/stardewui/widgets/scrollbar/#downsprite","title":"DownSprite","text":"<p>Sprite to draw for the down arrow, or right arrow in horizontal orientation.</p> <pre><code>public StardewUI.Graphics.Sprite DownSprite { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollbar/#property-value_1","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/scrollbar/#margin","title":"Margin","text":"<p>Margins for this view. See Margin.</p> <pre><code>public StardewUI.Layout.Edges Margin { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollbar/#property-value_2","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/widgets/scrollbar/#thumbsprite","title":"ThumbSprite","text":"<p>Sprite to draw for the thumb, which moves within the track and indicates the current scroll position and can be dragged to scroll.</p> <pre><code>public StardewUI.Graphics.Sprite ThumbSprite { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollbar/#property-value_3","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/scrollbar/#tracksprite","title":"TrackSprite","text":"<p>Sprite to draw for the track area, within which the thumb can move.</p> <pre><code>public StardewUI.Graphics.Sprite TrackSprite { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollbar/#property-value_4","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/scrollbar/#upsprite","title":"UpSprite","text":"<p>Sprite to draw for the up arrow, or left arrow in horizontal orientation.</p> <pre><code>public StardewUI.Graphics.Sprite UpSprite { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollbar/#property-value_5","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/scrollbar/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/scrollbar/#createview","title":"CreateView()","text":"<p>Creates and returns the root view.</p> <pre><code>protected override StardewUI.Widgets.Lane CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollbar/#returns","title":"Returns","text":"<p>Lane</p>"},{"location":"reference/stardewui/widgets/scrollbar/#syncposition","title":"SyncPosition()","text":"<p>Forces an immediate sync of the thumb position with the associated container.</p> <pre><code>public void SyncPosition();\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollbar/#remarks_1","title":"Remarks","text":"<p>This is typically automatic and should only need to be called in rare situations.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/","title":"ScrollContainer","text":""},{"location":"reference/stardewui/widgets/scrollcontainer/#class-scrollcontainer","title":"Class ScrollContainer","text":""},{"location":"reference/stardewui/widgets/scrollcontainer/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Renders inner content clipped to a boundary and with a modifiable scroll offset.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class ScrollContainer : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 ScrollContainer</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#remarks","title":"Remarks","text":"<p>Does not provide its own scroll bar; scrolling UI and behavior can be controlled via adding a Scrollbar to any other part of the UI. </p> <p>While nothing prevents a ScrollContainer from being set up with the Orientation dimension set to use Content, in general the container will only work correctly when the scrolled dimension is constrained (Px or Stretch). Scrolling behavior is enabled by providing an infinite available length to the Content view for layout, while constraining its own size. </p> <p>Scrolling is not virtual. Regardless of the difference in size between scroll container and content, the full content will always be drawn on every frame, and simply clipped to the available area. This may therefore not be suitable for extremely long lists or other unbounded content.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/scrollcontainer/#constructors","title":"Constructors","text":"Name Description ScrollContainer()"},{"location":"reference/stardewui/widgets/scrollcontainer/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) Content The inner content view which will be scrolled. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) ContentViewSize The size of the current content view, or Zero if there is no content. Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Overrides View.<code>get_LayoutOffset()</code>) Margin Margins (whitespace outside border) for this view.(Inherited from View) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Opacity Opacity (alpha level) of the view.(Inherited from View) Orientation The orientation, i.e. the direction of scrolling. OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) Peeking The amount of \"peeking\" to add when scrolling a component into view; adds extra space before/after the visible element so that all or part of the previous/next element is also visible. PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) ScrollOffset The current scroll position along the Orientation axis. ScrollSize The maximum amount by which the container can be scrolled without exceeding the inner content bounds. ScrollStep Default scroll distance when calling ScrollForward() or ScrollBackward(). Does not prevent directly setting the scroll position via ScrollOffset. ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) Tags The user-defined tags for this view.(Inherited from View) Tooltip Localized tooltip to display on hover, if any.(Inherited from View) Visibility Visibility for this view.(Inherited from View) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/scrollcontainer/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Overrides View.FindFocusableDescendant(Vector2, Direction)) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Inherited from View) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Overrides View.GetLocalChildren()) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Overrides View.GetLocalChildrenAt(Vector2)) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Overrides View.IsContentDirty()) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from View) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Inherited from View) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from View) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Overrides View.OnPropertyChanged(PropertyChangedEventArgs)) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Overrides View.ResetDirty()) ScrollBackward() Scrolls backward (up or left) by the distance configured in ScrollStep. ScrollForward() Scrolls forward (down or right) by the distance configured in ScrollStep. ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Overrides View.ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)) ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/scrollcontainer/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) ScrollChanged Event raised when any aspect of the scrolling changes. Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/scrollcontainer/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/scrollcontainer/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/scrollcontainer/#scrollcontainer","title":"ScrollContainer()","text":"<pre><code>public ScrollContainer();\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/scrollcontainer/#content","title":"Content","text":"<p>The inner content view which will be scrolled.</p> <pre><code>public StardewUI.IView Content { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#property-value","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#contentviewsize","title":"ContentViewSize","text":"<p>The size of the current content view, or Zero if there is no content.</p> <pre><code>protected Microsoft.Xna.Framework.Vector2 ContentViewSize { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#property-value_1","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#layoutoffset","title":"LayoutOffset","text":"<p>Pixel offset of the view's content, which is applied to all pointer events and child queries.</p> <pre><code>protected Microsoft.Xna.Framework.Vector2 LayoutOffset { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#property-value_2","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#remarks_1","title":"Remarks","text":"<p>A non-zero offset means that the nominal positions of any view children (e.g. as obtained from GetChildren()) are different from their actual drawing positions on screen, for example in the case of a ScrollContainer that is not at the default scroll position. </p> <p>If a view will internally shift content in this way without affecting layout, it should update the LayoutOffset property to ensure correctness of pointer events and coordinate-related queries such as GetLocalChildrenAt(Vector2), instead of attempting to correct for that offset locally.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#orientation","title":"Orientation","text":"<p>The orientation, i.e. the direction of scrolling.</p> <pre><code>public StardewUI.Layout.Orientation Orientation { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#property-value_3","title":"Property Value","text":"<p>Orientation</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#remarks_2","title":"Remarks","text":"<p>A single ScrollContainer can only scroll in one direction. If content needs to scroll both horizontally and vertically, a nested ScrollContainer can be used.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#peeking","title":"Peeking","text":"<p>The amount of \"peeking\" to add when scrolling a component into view; adds extra space before/after the visible element so that all or part of the previous/next element is also visible.</p> <pre><code>public float Peeking { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#property-value_4","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#remarks_3","title":"Remarks","text":"<p>Nonzero values help with discoverability, making it clear that there is more content.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#scrolloffset","title":"ScrollOffset","text":"<p>The current scroll position along the Orientation axis.</p> <pre><code>public float ScrollOffset { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#property-value_5","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#scrollsize","title":"ScrollSize","text":"<p>The maximum amount by which the container can be scrolled without exceeding the inner content bounds.</p> <pre><code>public float ScrollSize { get; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#property-value_6","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#scrollstep","title":"ScrollStep","text":"<p>Default scroll distance when calling ScrollForward() or ScrollBackward(). Does not prevent directly setting the scroll position via ScrollOffset.</p> <pre><code>public float ScrollStep { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#property-value_7","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/scrollcontainer/#findfocusabledescendantvector2-direction","title":"FindFocusableDescendant(Vector2, Direction)","text":"<p>Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.</p> <pre><code>protected override StardewUI.Input.FocusSearchResult FindFocusableDescendant(Microsoft.Xna.Framework.Vector2 contentPosition, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#parameters","title":"Parameters","text":"<p><code>contentPosition</code> Vector2 The search position, relative to where this view's content starts (after applying margin, borders and padding).</p> <p><code>direction</code> Direction The search direction.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#returns","title":"Returns","text":"<p>FocusSearchResult</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#remarks_4","title":"Remarks","text":"<p>This is the same as FocusSearch(Vector2, Direction) but in pre-transformed content coordinates, and does not require checking for \"self-focus\" as FocusSearch(Vector2, Direction) already does this. The default implementation simply returns <code>null</code> as most views do not have children; subclasses with children must override this.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#getlocalchildren","title":"GetLocalChildren()","text":"<p>Gets the view's children with positions relative to the content area.</p> <pre><code>protected override System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetLocalChildren();\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#returns_1","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#remarks_5","title":"Remarks","text":"<p>This has the same signature as GetChildren() but assumes that coordinates are in the same space as those used in OnDrawContent(ISpriteBatch), i.e. not accounting for margin/border/padding. These coordinates are automatically adjusted in the GetChildren() to be relative to the entire view. </p> <p>The default implementation returns an empty sequence. Composite views must override this method in order for user interactions to behave correctly.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#getlocalchildrenatvector2","title":"GetLocalChildrenAt(Vector2)","text":"<p>Searches for all views at a given position relative to the content area.</p> <pre><code>protected override System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetLocalChildrenAt(Microsoft.Xna.Framework.Vector2 contentPosition);\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#parameters_1","title":"Parameters","text":"<p><code>contentPosition</code> Vector2 The search position, relative to where this view's content starts (after applying margin, borders and padding).</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#returns_2","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p> <p>The views at the specified <code>contentPosition</code>, in original layout order.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#remarks_6","title":"Remarks","text":"<p>The default implementation performs a linear search on all children and returns all whose bounds overlap the specified <code>contentPosition</code>. Views can override this to provide optimized implementations for their layout, or handle overlapping views.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#iscontentdirty","title":"IsContentDirty()","text":"<p>Checks whether or not the internal content/layout has changed.</p> <pre><code>protected override bool IsContentDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#returns_3","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if content has changed; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#remarks_7","title":"Remarks","text":"<p>The base implementation of IsDirty() only checks if the base layout attributes have changed, i.e. Layout, Margin, Padding, etc. It does not know about content/data in any subclasses; those that accept content parameters (like text) will typically use DirtyTracker&lt;T&gt; to hold that content and should implement this method to check their IsDirty states.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#parameters_2","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#remarks_8","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#parameters_3","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#remarks_9","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#onpropertychangedpropertychangedeventargs","title":"OnPropertyChanged(PropertyChangedEventArgs)","text":"<p>Raises the PropertyChanged event.</p> <pre><code>protected override void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs args);\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#parameters_4","title":"Parameters","text":"<p><code>args</code> PropertyChangedEventArgs The event arguments.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#resetdirty","title":"ResetDirty()","text":"<p>Resets any dirty state associated with this view.</p> <pre><code>protected override void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#remarks_10","title":"Remarks","text":"<p>This is called at the end of Measure(Vector2), so that on the next pass, all state appears clean unless it was marked dirty after the last pass completed. The default implementation is a no-op; subclasses should use it to clear any private dirty state, e.g. via ResetDirty().</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#scrollbackward","title":"ScrollBackward()","text":"<p>Scrolls backward (up or left) by the distance configured in ScrollStep.</p> <pre><code>public bool ScrollBackward();\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#scrollforward","title":"ScrollForward()","text":"<p>Scrolls forward (down or right) by the distance configured in ScrollStep.</p> <pre><code>public bool ScrollForward();\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#returns_5","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#scrollintoviewienumerableviewchild-vector2","title":"ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)","text":"<p>Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.</p> <pre><code>public override bool ScrollIntoView(System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; path, out Microsoft.Xna.Framework.Vector2 distance);\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#parameters_5","title":"Parameters","text":"<p><code>path</code> IEnumerable&lt;ViewChild&gt; The path to the view that should be visible, starting from (and not including) this view; each element has the local position within its own parent, so the algorithm can run recursively. This is a slice of the same path returned in a FocusSearchResult.</p> <p><code>distance</code> Vector2 The total distance that was scrolled, including distance scrolled by descendants.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#returns_6","title":"Returns","text":"<p>Boolean</p> <p>Whether or not the scroll was successful; <code>false</code> prevents the request from bubbling.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#remarks_11","title":"Remarks","text":"<p>The default implementation does no scrolling of its own, only passes the request down to the child and aborts if the child returns <code>true</code>. Scrollable views must override this to provide scrolling behavior.</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#events_1","title":"Events","text":""},{"location":"reference/stardewui/widgets/scrollcontainer/#scrollchanged","title":"ScrollChanged","text":"<p>Event raised when any aspect of the scrolling changes.</p> <pre><code>public event System.EventHandler? ScrollChanged;\n</code></pre>"},{"location":"reference/stardewui/widgets/scrollcontainer/#event-type","title":"Event Type","text":"<p>EventHandler</p>"},{"location":"reference/stardewui/widgets/scrollcontainer/#remarks_12","title":"Remarks","text":"<p>This tracks changes to the ScrollOffset but also the ScrollSize, even if the offset has not changed. ScrollStep is not included.</p>"},{"location":"reference/stardewui/widgets/selectiongroup/","title":"SelectionGroup","text":""},{"location":"reference/stardewui/widgets/selectiongroup/#class-selectiongroup","title":"Class SelectionGroup","text":""},{"location":"reference/stardewui/widgets/selectiongroup/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Provides a single selection key with change notifications.</p> <pre><code>public class SelectionGroup\n</code></pre> <p>Inheritance Object \u21e6 SelectionGroup</p>"},{"location":"reference/stardewui/widgets/selectiongroup/#remarks","title":"Remarks","text":"<p>Can be used to group together UI widgets so that only one at a time can be active, e.g. in a tab or radio group.</p>"},{"location":"reference/stardewui/widgets/selectiongroup/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/selectiongroup/#constructors","title":"Constructors","text":"Name Description SelectionGroup()"},{"location":"reference/stardewui/widgets/selectiongroup/#properties","title":"Properties","text":"Name Description Key The currently-selected key."},{"location":"reference/stardewui/widgets/selectiongroup/#events","title":"Events","text":"Name Description Change Raised when the Key changes."},{"location":"reference/stardewui/widgets/selectiongroup/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/selectiongroup/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/selectiongroup/#selectiongroup","title":"SelectionGroup()","text":"<pre><code>public SelectionGroup();\n</code></pre>"},{"location":"reference/stardewui/widgets/selectiongroup/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/selectiongroup/#key","title":"Key","text":"<p>The currently-selected key.</p> <pre><code>public string Key { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/selectiongroup/#property-value","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/selectiongroup/#events_1","title":"Events","text":""},{"location":"reference/stardewui/widgets/selectiongroup/#change","title":"Change","text":"<p>Raised when the Key changes.</p> <pre><code>public event System.EventHandler? Change;\n</code></pre>"},{"location":"reference/stardewui/widgets/selectiongroup/#event-type","title":"Event Type","text":"<p>EventHandler</p>"},{"location":"reference/stardewui/widgets/shadowlayers/","title":"ShadowLayers","text":""},{"location":"reference/stardewui/widgets/shadowlayers/#enum-shadowlayers","title":"Enum ShadowLayers","text":""},{"location":"reference/stardewui/widgets/shadowlayers/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Describes which shadow layers will be drawn, for widgets such as Label that support layered shadows.</p> <pre><code>[System.Flags]\npublic enum ShadowLayers\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 ShadowLayers</p>"},{"location":"reference/stardewui/widgets/shadowlayers/#fields","title":"Fields","text":"Name Value Description None 0 No layers; the shadow will not be drawn. Diagonal 1 Diagonal shadow layer, with both a horizontal and vertical offset from the content. Horizontal 2 Horizontal shadow layer, using only the horizontal offset from content and ignoring vertical offset. HorizontalAndDiagonal 3 Combination of Horizontal and Diagonal layers. Vertical 4 Vertical shadow layer, using only the vertical offset from content and ignoring horizontal offset. VerticalAndDiagonal 5 Combination of Vertical and Diagonal layers. HorizontalAndVertical 6 Combination of Horizontal and Vertical layers. All 7 Includes all individual shadow layers."},{"location":"reference/stardewui/widgets/slider/","title":"Slider","text":""},{"location":"reference/stardewui/widgets/slider/#class-slider","title":"Class Slider","text":""},{"location":"reference/stardewui/widgets/slider/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A horizontal track with draggable thumb (button) for choosing a numeric value in a range.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Slider : StardewUI.Widgets.ComponentView\n</code></pre> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 ComponentView&lt;T&gt; \u21e6 ComponentView \u21e6 Slider</p>"},{"location":"reference/stardewui/widgets/slider/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/slider/#constructors","title":"Constructors","text":"Name Description Slider()"},{"location":"reference/stardewui/widgets/slider/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) BackgroundSprite Background or track sprite, if not using the default. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) Interval The interval of which Value should be a multiple. Affects which values will be hit while dragging. IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Max The maximum value allowed for Value. Min The minimum value allowed for Value. Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) ThumbSize Override for the thumb/button size, recommended when using a custom ThumbSprite. ThumbSprite Sprite for the thumb/button, if not using the default. Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) TrackWidth Width of the track bar. Value The current value. ValueColor Color of the value text to render, if overriding the default text color. ValueFormat Specifies how to format the Value in the label text. View (Inherited from ComponentView&lt;T&gt;) Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/slider/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) CreateView() Creates and returns the root view.(Overrides ComponentView&lt;T&gt;.CreateView()) Dispose() (Inherited from DecoratorView&lt;T&gt;) Draw(ISpriteBatch) Draws the content for this view.(Inherited from DecoratorView&lt;T&gt;) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Overrides DecoratorView&lt;T&gt;.FocusSearch(Vector2, Direction)) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from DecoratorView&lt;T&gt;) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Overrides DecoratorView&lt;T&gt;.OnLayout()) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/slider/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) ValueChange Event raised when the Value changes. Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/slider/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/slider/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/slider/#slider","title":"Slider()","text":"<pre><code>public Slider();\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/slider/#backgroundsprite","title":"BackgroundSprite","text":"<p>Background or track sprite, if not using the default.</p> <pre><code>public StardewUI.Graphics.Sprite BackgroundSprite { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#property-value","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/slider/#interval","title":"Interval","text":"<p>The interval of which Value should be a multiple. Affects which values will be hit while dragging.</p> <pre><code>public float Interval { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#property-value_1","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/slider/#max","title":"Max","text":"<p>The maximum value allowed for Value.</p> <pre><code>public float Max { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#property-value_2","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/slider/#min","title":"Min","text":"<p>The minimum value allowed for Value.</p> <pre><code>public float Min { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#property-value_3","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/slider/#thumbsize","title":"ThumbSize","text":"<p>Override for the thumb/button size, recommended when using a custom ThumbSprite.</p> <pre><code>public Microsoft.Xna.Framework.Vector2? ThumbSize { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#property-value_4","title":"Property Value","text":"<p>Nullable&lt;Vector2&gt;</p>"},{"location":"reference/stardewui/widgets/slider/#thumbsprite","title":"ThumbSprite","text":"<p>Sprite for the thumb/button, if not using the default.</p> <pre><code>public StardewUI.Graphics.Sprite ThumbSprite { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#property-value_5","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/slider/#trackwidth","title":"TrackWidth","text":"<p>Width of the track bar.</p> <pre><code>public float TrackWidth { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#property-value_6","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/slider/#value","title":"Value","text":"<p>The current value.</p> <pre><code>public float Value { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#property-value_7","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/slider/#valuecolor","title":"ValueColor","text":"<p>Color of the value text to render, if overriding the default text color.</p> <pre><code>public Microsoft.Xna.Framework.Color? ValueColor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#property-value_8","title":"Property Value","text":"<p>Nullable&lt;Color&gt;</p>"},{"location":"reference/stardewui/widgets/slider/#valueformat","title":"ValueFormat","text":"<p>Specifies how to format the Value in the label text.</p> <pre><code>public Func&lt;System.Single, string&gt; ValueFormat { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#property-value_9","title":"Property Value","text":"<p>Func&lt;Single, string&gt;</p>"},{"location":"reference/stardewui/widgets/slider/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/slider/#createview","title":"CreateView()","text":"<p>Creates and returns the root view.</p> <pre><code>protected override StardewUI.IView CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#returns","title":"Returns","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/slider/#focussearchvector2-direction","title":"FocusSearch(Vector2, Direction)","text":"<p>Finds the next focusable component in a given direction that does not overlap with a current position.</p> <pre><code>public override StardewUI.Input.FocusSearchResult FocusSearch(Microsoft.Xna.Framework.Vector2 position, StardewUI.Direction direction);\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#parameters","title":"Parameters","text":"<p><code>position</code> Vector2 The current cursor position, relative to this view. May have dimensions that are negative or outside the view bounds, indicating that the cursor is not currently within the view.</p> <p><code>direction</code> Direction The direction of cursor movement.</p>"},{"location":"reference/stardewui/widgets/slider/#returns_1","title":"Returns","text":"<p>FocusSearchResult</p> <p>The next focusable view reached by moving in the specified <code>direction</code>, or <code>null</code> if there are no focusable descendants that are possible to reach in that direction.</p>"},{"location":"reference/stardewui/widgets/slider/#remarks","title":"Remarks","text":"<p>If <code>position</code> is out of bounds, it does not necessarily mean that the view should return <code>null</code>; the expected result depends on the <code>direction</code> also. The base case is when the focus position is already in bounds, and in this case a view should return whichever view can be reached by moving from the edge of that view along a straight line in the specified <code>direction</code>. However, focus search is recursive and the result should reflect the \"best\" candidate for focus if the cursor were to move into this view's bounds. For example, in a 1D horizontal layout the rules might be: </p> <ul> <li>If the <code>direction</code> is East, and the position's X value is negative, then the result should the leftmost focusable child, regardless of Y value.</li> <li>If the direction is South, and the X position is within the view's horizontal bounds, and the Y value is negative or greater than the view's height, then result should be whichever child intersects with that X position.</li> <li>If the direction is West and the X position is negative, or the direction is East and the X position is greater than the view's width, then the result should be <code>null</code> as there is literally nothing the view knows about in that direction.</li> </ul> <p>There are no strict rules for how a view performs focus search, but in general it is assumed that a view implementation understands its own layout and can accommodate accordingly; for example, a grid would follow essentially the same rules as our \"list\" example above, with additional considerations for navigating rows. \"Ragged\" 2D layouts might have complex rules requiring explicit neighbors, and therefore are typically easier to implement as nested lanes.</p>"},{"location":"reference/stardewui/widgets/slider/#onlayout","title":"OnLayout()","text":"<p>Runs whenever layout occurs as a result of the UI elements changing.</p> <pre><code>protected override void OnLayout();\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#events_1","title":"Events","text":""},{"location":"reference/stardewui/widgets/slider/#valuechange","title":"ValueChange","text":"<p>Event raised when the Value changes.</p> <pre><code>public event EventHandler&lt;System.EventArgs&gt;? ValueChange;\n</code></pre>"},{"location":"reference/stardewui/widgets/slider/#event-type","title":"Event Type","text":"<p>EventHandler&lt;EventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/spacer/","title":"Spacer","text":""},{"location":"reference/stardewui/widgets/spacer/#class-spacer","title":"Class Spacer","text":""},{"location":"reference/stardewui/widgets/spacer/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>An empty view whose sole purpose is to separate other elements.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Spacer : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 Spacer</p>"},{"location":"reference/stardewui/widgets/spacer/#remarks","title":"Remarks","text":"<p>The size of the view is entirely controlled by its Layout; that is, it is considered to have no content and setting both dimensions to Content() will cause it to disappear.</p>"},{"location":"reference/stardewui/widgets/spacer/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/spacer/#constructors","title":"Constructors","text":"Name Description Spacer()"},{"location":"reference/stardewui/widgets/spacer/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Inherited from View) Margin Margins (whitespace outside border) for this view.(Inherited from View) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Opacity Opacity (alpha level) of the view.(Inherited from View) OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) Tags The user-defined tags for this view.(Inherited from View) Tooltip Localized tooltip to display on hover, if any.(Inherited from View) Visibility Visibility for this view.(Inherited from View) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/spacer/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Inherited from View) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Inherited from View) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Inherited from View) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Inherited from View) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Inherited from View) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from View) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Inherited from View) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from View) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from View) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Inherited from View) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from View) ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/spacer/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/spacer/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/spacer/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/spacer/#spacer","title":"Spacer()","text":"<pre><code>public Spacer();\n</code></pre>"},{"location":"reference/stardewui/widgets/spacer/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/spacer/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/spacer/#parameters","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/spacer/#remarks_1","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/spacer/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/spacer/#parameters_1","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/spacer/#remarks_2","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/tab/","title":"Tab","text":""},{"location":"reference/stardewui/widgets/tab/#class-tab","title":"Class Tab","text":""},{"location":"reference/stardewui/widgets/tab/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A view with tab appearance, used to navigate sections of a larger complex menu.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class Tab : StardewUI.Widgets.ComponentView&lt;T&gt;\n</code></pre> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 ComponentView&lt;T&gt; \u21e6 Tab</p>"},{"location":"reference/stardewui/widgets/tab/#remarks","title":"Remarks","text":"<p>Tabs activate when clicked; multiple tabs can be assigned to the same Group, each with a unique GroupKey, in order to deactivate other tabs when any one tab is activated.</p>"},{"location":"reference/stardewui/widgets/tab/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/tab/#constructors","title":"Constructors","text":"Name Description Tab()"},{"location":"reference/stardewui/widgets/tab/#properties","title":"Properties","text":"Name Description Active Whether or not the tab is considered active (selected). ActiveOffset The drawing offset to apply when the tab is Active. ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) Background Background image to draw behind the tab's Content, which provides the tab appearance. BackgroundRotation Rotation of the Background; does not apply to Content. Content Content to draw inside the tab's border. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) ContentMargin Margin to apply to the frame containing the Content, i.e. distance between the tab's visual border and the inner image, text, etc. FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) Group The selection group, if any, to which this tab belongs. GroupKey The unique key per Group that identifies this tab. IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) View (Inherited from ComponentView&lt;T&gt;) Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/tab/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) CreateView() Creates and returns the root view.(Overrides ComponentView&lt;T&gt;.CreateView()) Dispose() (Overrides DecoratorView&lt;T&gt;.Dispose()) Draw(ISpriteBatch) Draws the content for this view.(Overrides DecoratorView&lt;T&gt;.Draw(ISpriteBatch)) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from DecoratorView&lt;T&gt;) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from DecoratorView&lt;T&gt;) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Overrides DecoratorView&lt;T&gt;.OnClick(ClickEventArgs)) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Inherited from DecoratorView&lt;T&gt;) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/tab/#events","title":"Events","text":"Name Description Activate Event raised when Active becomes <code>true</code>. ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Deactivate Event raised when Active becomes <code>false</code>. Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/tab/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/tab/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/tab/#tab","title":"Tab()","text":"<pre><code>public Tab();\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/tab/#active","title":"Active","text":"<p>Whether or not the tab is considered active (selected).</p> <pre><code>public bool Active { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/widgets/tab/#remarks_1","title":"Remarks","text":"<p>Active tabs have an offset appearance, normally used to indicate their \"pressed\" status in relation to other, neighboring tabs. The offset can be adjusted with ActiveOffset.</p>"},{"location":"reference/stardewui/widgets/tab/#activeoffset","title":"ActiveOffset","text":"<p>The drawing offset to apply when the tab is Active.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 ActiveOffset { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#property-value_1","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/widgets/tab/#background","title":"Background","text":"<p>Background image to draw behind the tab's Content, which provides the tab appearance.</p> <pre><code>public StardewUI.Graphics.Sprite Background { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#property-value_2","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/tab/#backgroundrotation","title":"BackgroundRotation","text":"<p>Rotation of the Background; does not apply to Content.</p> <pre><code>public StardewUI.Graphics.SimpleRotation? BackgroundRotation { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#property-value_3","title":"Property Value","text":"<p>Nullable&lt;SimpleRotation&gt;</p>"},{"location":"reference/stardewui/widgets/tab/#content","title":"Content","text":"<p>Content to draw inside the tab's border.</p> <pre><code>public StardewUI.IView Content { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#property-value_4","title":"Property Value","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/tab/#contentmargin","title":"ContentMargin","text":"<p>Margin to apply to the frame containing the Content, i.e. distance between the tab's visual border and the inner image, text, etc.</p> <pre><code>public StardewUI.Layout.Edges ContentMargin { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#property-value_5","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/widgets/tab/#remarks_2","title":"Remarks","text":"<p>When using the default Background, this is automatically set up to match its border size. If a different background is used, the margin may need to be adjusted.</p>"},{"location":"reference/stardewui/widgets/tab/#group","title":"Group","text":"<p>The selection group, if any, to which this tab belongs.</p> <pre><code>public StardewUI.Widgets.SelectionGroup Group { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#property-value_6","title":"Property Value","text":"<p>SelectionGroup</p>"},{"location":"reference/stardewui/widgets/tab/#remarks_3","title":"Remarks","text":"<p>Assigning multiple tabs to the same group guarantees that only one can be Active at a time. If this tab becomes active, any previously-active tab will become inactive. </p> <p>To participate in the group, a non-empty GroupKey must also be specified.</p>"},{"location":"reference/stardewui/widgets/tab/#groupkey","title":"GroupKey","text":"<p>The unique key per Group that identifies this tab.</p> <pre><code>public string GroupKey { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#property-value_7","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/tab/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/tab/#createview","title":"CreateView()","text":"<p>Creates and returns the root view.</p> <pre><code>protected override StardewUI.Widgets.Panel CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#returns","title":"Returns","text":"<p>Panel</p>"},{"location":"reference/stardewui/widgets/tab/#dispose","title":"Dispose()","text":"<pre><code>public override void Dispose();\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#drawispritebatch","title":"Draw(ISpriteBatch)","text":"<p>Draws the content for this view.</p> <pre><code>public override void Draw(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#parameters","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/tab/#remarks_4","title":"Remarks","text":"<p>No positional argument is included because ISpriteBatch handles its own transformations; the top-left coordinates of this view are always (0, 0).</p>"},{"location":"reference/stardewui/widgets/tab/#onclickclickeventargs","title":"OnClick(ClickEventArgs)","text":"<p>Called when a click is received within this view's bounds.</p> <pre><code>public override void OnClick(StardewUI.Events.ClickEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#parameters_1","title":"Parameters","text":"<p><code>e</code> ClickEventArgs The event data.</p>"},{"location":"reference/stardewui/widgets/tab/#events_1","title":"Events","text":""},{"location":"reference/stardewui/widgets/tab/#activate","title":"Activate","text":"<p>Event raised when Active becomes <code>true</code>.</p> <pre><code>public event System.EventHandler? Activate;\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#event-type","title":"Event Type","text":"<p>EventHandler</p>"},{"location":"reference/stardewui/widgets/tab/#deactivate","title":"Deactivate","text":"<p>Event raised when Active becomes <code>false</code>.</p> <pre><code>public event System.EventHandler? Deactivate;\n</code></pre>"},{"location":"reference/stardewui/widgets/tab/#event-type_1","title":"Event Type","text":"<p>EventHandler</p>"},{"location":"reference/stardewui/widgets/textinput/","title":"TextInput","text":""},{"location":"reference/stardewui/widgets/textinput/#class-textinput","title":"Class TextInput","text":""},{"location":"reference/stardewui/widgets/textinput/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>A text input field that allows typing from a physical or virtual keyboard.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class TextInput : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 TextInput</p>"},{"location":"reference/stardewui/widgets/textinput/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/textinput/#constructors","title":"Constructors","text":"Name Description TextInput() Initializes a new TextInput."},{"location":"reference/stardewui/widgets/textinput/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) Background The background sprite to draw for this frame. BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) BorderThickness Gets or sets the thickness of the border edges in the Background sprite. Caret Sprite to draw for the cursor showing the current text position. CaretPosition The zero-based position of the caret within the text. CaretWidth The width to draw the Caret, if different from the sprite's source width. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) Font The font with which to render text. Defaults to smallFont. InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Inherited from View) Margin Margins (whitespace outside border) for this view.(Inherited from View) MaxLength The maximum number of characters allowed in this field. Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Opacity Opacity (alpha level) of the view.(Inherited from View) OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) ShadowAlpha Alpha value for the shadow. If set to the default of zero, no shadow will be drawn. ShadowOffset Offset to draw the sprite shadow, which is a second copy of the Background drawn entirely black. Shadows will not be visible unless ShadowAlpha is non-zero. Tags The user-defined tags for this view.(Inherited from View) Text The text currently entered. TextColor Color of displayed text, as well as the Caret tint color. Tooltip Localized tooltip to display on hover, if any.(Inherited from View) Visibility Visibility for this view.(Inherited from View) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/textinput/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Inherited from View) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Inherited from View) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Overrides View.GetLocalChildren()) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Inherited from View) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Overrides View.IsContentDirty()) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Overrides View.OnClick(ClickEventArgs)) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Inherited from View) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from View) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from View) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Inherited from View) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from View) ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/textinput/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) TextChanged Event raised when the Text changes. Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/textinput/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/textinput/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/textinput/#textinput","title":"TextInput()","text":"<p>Initializes a new TextInput.</p> <pre><code>public TextInput();\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/textinput/#background","title":"Background","text":"<p>The background sprite to draw for this frame.</p> <pre><code>public StardewUI.Graphics.Sprite Background { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#property-value","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/textinput/#borderthickness","title":"BorderThickness","text":"<p>Gets or sets the thickness of the border edges in the Background sprite.</p> <pre><code>public StardewUI.Layout.Edges BorderThickness { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#property-value_1","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/widgets/textinput/#remarks","title":"Remarks","text":"<p>This is similar to Border but assumes that the border is part of the background, rather than a separate sprite. Setting this affects padding of content inside the background.</p>"},{"location":"reference/stardewui/widgets/textinput/#caret","title":"Caret","text":"<p>Sprite to draw for the cursor showing the current text position.</p> <pre><code>public StardewUI.Graphics.Sprite Caret { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#property-value_2","title":"Property Value","text":"<p>Sprite</p>"},{"location":"reference/stardewui/widgets/textinput/#caretposition","title":"CaretPosition","text":"<p>The zero-based position of the caret within the text.</p> <pre><code>public int CaretPosition { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#property-value_3","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/widgets/textinput/#remarks_1","title":"Remarks","text":"<p>This value is the string position; e.g. if the Text has a length of 5, and the current caret position is 2, then the caret is between the 2nd and 3rd characters. The value cannot be greater than the length of the current text.</p>"},{"location":"reference/stardewui/widgets/textinput/#caretwidth","title":"CaretWidth","text":"<p>The width to draw the Caret, if different from the sprite's source width.</p> <pre><code>public float? CaretWidth { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#property-value_4","title":"Property Value","text":"<p>Nullable&lt;Single&gt;</p>"},{"location":"reference/stardewui/widgets/textinput/#font","title":"Font","text":"<p>The font with which to render text. Defaults to smallFont.</p> <pre><code>public Microsoft.Xna.Framework.Graphics.SpriteFont Font { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#property-value_5","title":"Property Value","text":"<p>SpriteFont</p>"},{"location":"reference/stardewui/widgets/textinput/#maxlength","title":"MaxLength","text":"<p>The maximum number of characters allowed in this field.</p> <pre><code>public int MaxLength { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#property-value_6","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/widgets/textinput/#remarks_2","title":"Remarks","text":"<p>The default value is <code>0</code> which does not impose any limit.</p>"},{"location":"reference/stardewui/widgets/textinput/#shadowalpha","title":"ShadowAlpha","text":"<p>Alpha value for the shadow. If set to the default of zero, no shadow will be drawn.</p> <pre><code>public float ShadowAlpha { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#property-value_7","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/textinput/#shadowoffset","title":"ShadowOffset","text":"<p>Offset to draw the sprite shadow, which is a second copy of the Background drawn entirely black. Shadows will not be visible unless ShadowAlpha is non-zero.</p> <pre><code>public Microsoft.Xna.Framework.Vector2 ShadowOffset { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#property-value_8","title":"Property Value","text":"<p>Vector2</p>"},{"location":"reference/stardewui/widgets/textinput/#text","title":"Text","text":"<p>The text currently entered.</p> <pre><code>public string Text { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#property-value_9","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/textinput/#remarks_3","title":"Remarks","text":"<p>Setting this to a new value will reset the caret position to the end of the text.</p>"},{"location":"reference/stardewui/widgets/textinput/#textcolor","title":"TextColor","text":"<p>Color of displayed text, as well as the Caret tint color.</p> <pre><code>public Microsoft.Xna.Framework.Color TextColor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#property-value_10","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/textinput/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/textinput/#getlocalchildren","title":"GetLocalChildren()","text":"<p>Gets the view's children with positions relative to the content area.</p> <pre><code>protected override System.Collections.Generic.IEnumerable&lt;StardewUI.ViewChild&gt; GetLocalChildren();\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#returns","title":"Returns","text":"<p>IEnumerable&lt;ViewChild&gt;</p>"},{"location":"reference/stardewui/widgets/textinput/#remarks_4","title":"Remarks","text":"<p>This has the same signature as GetChildren() but assumes that coordinates are in the same space as those used in OnDrawContent(ISpriteBatch), i.e. not accounting for margin/border/padding. These coordinates are automatically adjusted in the GetChildren() to be relative to the entire view. </p> <p>The default implementation returns an empty sequence. Composite views must override this method in order for user interactions to behave correctly.</p>"},{"location":"reference/stardewui/widgets/textinput/#iscontentdirty","title":"IsContentDirty()","text":"<p>Checks whether or not the internal content/layout has changed.</p> <pre><code>protected override bool IsContentDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#returns_1","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if content has changed; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/textinput/#remarks_5","title":"Remarks","text":"<p>The base implementation of IsDirty() only checks if the base layout attributes have changed, i.e. Layout, Margin, Padding, etc. It does not know about content/data in any subclasses; those that accept content parameters (like text) will typically use DirtyTracker&lt;T&gt; to hold that content and should implement this method to check their IsDirty states.</p>"},{"location":"reference/stardewui/widgets/textinput/#onclickclickeventargs","title":"OnClick(ClickEventArgs)","text":"<p>Called when a click is received within this view's bounds.</p> <pre><code>public override void OnClick(StardewUI.Events.ClickEventArgs e);\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#parameters","title":"Parameters","text":"<p><code>e</code> ClickEventArgs The event data.</p>"},{"location":"reference/stardewui/widgets/textinput/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#parameters_1","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/textinput/#remarks_6","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/textinput/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#parameters_2","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/textinput/#remarks_7","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/textinput/#events_1","title":"Events","text":""},{"location":"reference/stardewui/widgets/textinput/#textchanged","title":"TextChanged","text":"<p>Event raised when the Text changes.</p> <pre><code>public event EventHandler&lt;System.EventArgs&gt;? TextChanged;\n</code></pre>"},{"location":"reference/stardewui/widgets/textinput/#event-type","title":"Event Type","text":"<p>EventHandler&lt;EventArgs&gt;</p>"},{"location":"reference/stardewui/widgets/tinynumberlabel/","title":"TinyNumberLabel","text":""},{"location":"reference/stardewui/widgets/tinynumberlabel/#class-tinynumberlabel","title":"Class TinyNumberLabel","text":""},{"location":"reference/stardewui/widgets/tinynumberlabel/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets Assembly: StardewUI.dll  </p> <p>Renders a single-line numeric label using custom digit sprites.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class TinyNumberLabel : StardewUI.View\n</code></pre> <p>Inheritance Object \u21e6 View \u21e6 TinyNumberLabel</p>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#remarks","title":"Remarks","text":"<p>Corresponds to drawTinyDigits(Int32, SpriteBatch, Vector2, Single, Single, Color). </p> <p>For this widget type, Scale does affect layout, and the size of the rendered text is entirely based on the DigitSprites and cumulative scale which is effectively treated like a font size. If the view's Layout uses any non-content-based dimensions, it will affect the box size as expected but will not change the rendered text; the text is not scaled to the layout bounds.</p>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/tinynumberlabel/#constructors","title":"Constructors","text":"Name Description TinyNumberLabel()"},{"location":"reference/stardewui/widgets/tinynumberlabel/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from View) BorderSize The layout size (not edge thickness) of the entire drawn area including the border, i.e. the InnerSize plus any borders defined in GetBorderThickness(). Does not include the Margin.(Inherited from View) ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from View) ContentSize The size of the view's content, which is drawn inside the padding. Subclasses set this in their OnMeasure(Vector2) method and padding, margins, etc. are handled automatically.(Inherited from View) DigitSprites The sprites for each individual digit, with the index corresponding to the digit itself (element 0 for digit '0', element 4 for digit '4', etc.). This must have exactly 10 elements. Draggable Whether or not this view should fire drag events such as DragStart and Drag.(Inherited from View) FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from View) FloatingElements The floating elements to display relative to this view.(Inherited from View) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.(Inherited from View) InnerSize The size allocated to the entire area inside the border, i.e. ContentSize plus any Padding. Does not include border or Margin.(Inherited from View) IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from View) LastAvailableSize The most recent size used in a Measure(Vector2) pass. Used for additional dirty checks.(Inherited from View) Layout Layout settings for this view; determines how its dimensions will be computed.(Inherited from View) LayoutOffset Pixel offset of the view's content, which is applied to all pointer events and child queries.(Inherited from View) Margin Margins (whitespace outside border) for this view.(Inherited from View) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from View) Number The number to display. Opacity Opacity (alpha level) of the view.(Inherited from View) OuterSize The size of the entire area occupied by this view including margins, border and padding.(Inherited from View) Padding Padding (whitespace inside border) for this view.(Inherited from View) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from View) Scale Scale to draw the digits, relative to their original pixel size. ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from View) Tags The user-defined tags for this view.(Inherited from View) Tooltip Localized tooltip to display on hover, if any.(Inherited from View) Visibility Visibility for this view.(Inherited from View) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from View)"},{"location":"reference/stardewui/widgets/tinynumberlabel/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from View) Dispose() (Inherited from View) Draw(ISpriteBatch) Draws the content for this view.(Inherited from View) FindFocusableDescendant(Vector2, Direction) Searches for a focusable child within this view that is reachable in the specified <code>direction</code>, and returns a result containing the view and search path if found.(Inherited from View) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from View) GetBorderThickness() Measures the thickness of each edge of the border, if the view has a border.(Inherited from View) GetChildAt(Vector2) Finds the child at a given position.(Inherited from View) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from View) GetChildren() Gets the current children of this view.(Inherited from View) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from View) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from View) GetLocalChildren() Gets the view's children with positions relative to the content area.(Inherited from View) GetLocalChildrenAt(Vector2) Searches for all views at a given position relative to the content area.(Inherited from View) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from View) IsContentDirty() Checks whether or not the internal content/layout has changed.(Overrides View.IsContentDirty()) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from View) LogFocusSearch(string) Outputs a debug log entry with the current view type, name and specified message.(Inherited from View) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from View) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from View) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from View) OnDispose() Performs additional cleanup when Dispose() is called.(Inherited from View) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from View) OnDrawBorder(ISpriteBatch) Draws the view's border, if it has one.(Inherited from View) OnDrawContent(ISpriteBatch) Draws the inner content of this view.(Overrides View.OnDrawContent(ISpriteBatch)) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from View) OnMeasure(Vector2) Performs the internal layout.(Overrides View.OnMeasure(Vector2)) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from View) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from View) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from View) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from View) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from View) ResetDirty() Resets any dirty state associated with this view.(Overrides View.ResetDirty()) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from View) ToString() (Inherited from View)"},{"location":"reference/stardewui/widgets/tinynumberlabel/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from View) Click Event raised when the view receives a click.(Inherited from View) Drag Event raised when the view is being dragged using the mouse.(Inherited from View) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from View) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from View) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from View) PointerEnter Event raised when the pointer enters the view.(Inherited from View) PointerLeave Event raised when the pointer exits the view.(Inherited from View) PointerMove Event raised when the pointer moves within the view.(Inherited from View) PropertyChanged (Inherited from View) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from View) Wheel Event raised when the scroll wheel moves.(Inherited from View)"},{"location":"reference/stardewui/widgets/tinynumberlabel/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/tinynumberlabel/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/tinynumberlabel/#tinynumberlabel","title":"TinyNumberLabel()","text":"<pre><code>public TinyNumberLabel();\n</code></pre>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/tinynumberlabel/#digitsprites","title":"DigitSprites","text":"<p>The sprites for each individual digit, with the index corresponding to the digit itself (element 0 for digit '0', element 4 for digit '4', etc.). This must have exactly 10 elements.</p> <pre><code>public System.Collections.Generic.IReadOnlyList&lt;StardewUI.Graphics.Sprite&gt; DigitSprites { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;Sprite&gt;</p>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#number","title":"Number","text":"<p>The number to display.</p> <pre><code>public int Number { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#scale","title":"Scale","text":"<p>Scale to draw the digits, relative to their original pixel size.</p> <pre><code>public float Scale { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#property-value_2","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/tinynumberlabel/#iscontentdirty","title":"IsContentDirty()","text":"<p>Checks whether or not the internal content/layout has changed.</p> <pre><code>protected override bool IsContentDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#returns","title":"Returns","text":"<p>Boolean</p> <p><code>true</code> if content has changed; otherwise <code>false</code>.</p>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#remarks_1","title":"Remarks","text":"<p>The base implementation of IsDirty() only checks if the base layout attributes have changed, i.e. Layout, Margin, Padding, etc. It does not know about content/data in any subclasses; those that accept content parameters (like text) will typically use DirtyTracker&lt;T&gt; to hold that content and should implement this method to check their IsDirty states.</p>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#ondrawcontentispritebatch","title":"OnDrawContent(ISpriteBatch)","text":"<p>Draws the inner content of this view.</p> <pre><code>protected override void OnDrawContent(StardewUI.Graphics.ISpriteBatch b);\n</code></pre>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#parameters","title":"Parameters","text":"<p><code>b</code> ISpriteBatch Sprite batch to hold the drawing output.</p>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#remarks_2","title":"Remarks","text":"<p>This is called from Draw(ISpriteBatch) after applying both Margin and Padding.</p>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#onmeasurevector2","title":"OnMeasure(Vector2)","text":"<p>Performs the internal layout.</p> <pre><code>protected override void OnMeasure(Microsoft.Xna.Framework.Vector2 availableSize);\n</code></pre>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#parameters_1","title":"Parameters","text":"<p><code>availableSize</code> Vector2 Size available in the container, after applying padding, margin and borders.</p>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#remarks_3","title":"Remarks","text":"<p>This is called from Measure(Vector2) only when the layout is dirty (layout parameters or content changed) and a new layout is actually required. Subclasses must implement this and set ContentSize once layout is complete. Typically, Resolve(Vector2, Func&lt;Vector2&gt;) should be used in order to ensure that the original LayoutParameters are respected (e.g. if the actual content size is smaller than the configured size). </p> <p>The <code>availableSize</code> provided to the method is pre-adjusted for Margin, Padding, and any border determined by GetBorderThickness().</p>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#resetdirty","title":"ResetDirty()","text":"<p>Resets any dirty state associated with this view.</p> <pre><code>protected override void ResetDirty();\n</code></pre>"},{"location":"reference/stardewui/widgets/tinynumberlabel/#remarks_4","title":"Remarks","text":"<p>This is called at the end of Measure(Vector2), so that on the next pass, all state appears clean unless it was marked dirty after the last pass completed. The default implementation is a no-op; subclasses should use it to clear any private dirty state, e.g. via ResetDirty().</p>"},{"location":"reference/stardewui/widgets/keybinding/","title":"StardewUI.Widgets.Keybinding","text":""},{"location":"reference/stardewui/widgets/keybinding/#stardewuiwidgetskeybinding-namespace","title":"StardewUI.Widgets.Keybinding Namespace","text":""},{"location":"reference/stardewui/widgets/keybinding/#classes","title":"Classes","text":"Name Description KeybindListEditor Editor widget for a KeybindList. KeybindOverlay Overlay control for editing a keybinding, or list of bindings. KeybindView Display widget for a single Keybind showing all required keys."},{"location":"reference/stardewui/widgets/keybinding/#enums","title":"Enums","text":"Name Description KeybindType Specifies the exact type of keybind supported by a widget using a KeybindList."},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/","title":"KeybindListEditor","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#class-keybindlisteditor","title":"Class KeybindListEditor","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets.Keybinding Assembly: StardewUI.dll  </p> <p>Editor widget for a KeybindList.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class KeybindListEditor : StardewUI.Widgets.ComponentView\n</code></pre> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 ComponentView&lt;T&gt; \u21e6 ComponentView \u21e6 KeybindListEditor</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#remarks","title":"Remarks","text":"<p>Displays all the configured keybinds in one row, and (EditableType is not <code>null</code>) opens up a KeybindOverlay to edit the keybinds when clicked.</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#constructors","title":"Constructors","text":"Name Description KeybindListEditor()"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) AddButtonText The AddButtonText to display for adding new bindings. ButtonHeight The height for button images/sprites. Images are scaled uniformly, preserving source aspect ratio. ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) DeleteButtonTooltip The DeleteButtonTooltip to display for deleting bindings in a multiple-binding UI. EditableType Specifies what kind of keybind the editor should allow. EmptyText Placeholder text to display when the current keybind list is empty. EmptyTextColor Color of the displayed EmptyText when the list is empty. FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) Focusable Whether or not the view should be able to receive focus. Applies only to this specific view, not its children. Font Font used to display text in button/key placeholders. IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) KeybindList The current keybinds to display in the list. Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) SpriteMap Map of bindable buttons to sprite representations. Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) View (Inherited from ComponentView&lt;T&gt;) Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) CreateView() Creates and returns the root view.(Overrides ComponentView&lt;T&gt;.CreateView()) Dispose() (Inherited from DecoratorView&lt;T&gt;) Draw(ISpriteBatch) Draws the content for this view.(Inherited from DecoratorView&lt;T&gt;) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from DecoratorView&lt;T&gt;) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from DecoratorView&lt;T&gt;) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Inherited from DecoratorView&lt;T&gt;) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#keybindlisteditor","title":"KeybindListEditor()","text":"<pre><code>public KeybindListEditor();\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#addbuttontext","title":"AddButtonText","text":"<p>The AddButtonText to display for adding new bindings.</p> <pre><code>public string AddButtonText { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#property-value","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#remarks_1","title":"Remarks","text":"<p>Changing this while the overlay is already displayed will not update the overlay.</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#buttonheight","title":"ButtonHeight","text":"<p>The height for button images/sprites. Images are scaled uniformly, preserving source aspect ratio.</p> <pre><code>public int ButtonHeight { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#deletebuttontooltip","title":"DeleteButtonTooltip","text":"<p>The DeleteButtonTooltip to display for deleting bindings in a multiple-binding UI.</p> <pre><code>public string DeleteButtonTooltip { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#remarks_2","title":"Remarks","text":"<p>Changing this while the overlay is already displayed will not update the overlay.</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#editabletype","title":"EditableType","text":"<p>Specifies what kind of keybind the editor should allow.</p> <pre><code>public StardewUI.Widgets.Keybinding.KeybindType? EditableType { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#property-value_3","title":"Property Value","text":"<p>Nullable&lt;KeybindType&gt;</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#remarks_3","title":"Remarks","text":"<p>The current value KeybindList is always fully displayed, even if it does not conform to the semantic type. It is up to the caller to ensure that the value initially assigned to the editor is of the correct kind. If this is <code>null</code>, the list is considered read-only.</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#emptytext","title":"EmptyText","text":"<p>Placeholder text to display when the current keybind list is empty.</p> <pre><code>public string EmptyText { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#property-value_4","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#emptytextcolor","title":"EmptyTextColor","text":"<p>Color of the displayed EmptyText when the list is empty.</p> <pre><code>public Microsoft.Xna.Framework.Color EmptyTextColor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#property-value_5","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#focusable","title":"Focusable","text":"<p>Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.</p> <pre><code>public bool Focusable { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#property-value_6","title":"Property Value","text":"<p>Boolean</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#remarks_4","title":"Remarks","text":"<p>All views are non-focusable by default and must have their focus enabled explicitly. Subclasses may choose to override the default value if they should always be focusable.</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#font","title":"Font","text":"<p>Font used to display text in button/key placeholders.</p> <pre><code>public Microsoft.Xna.Framework.Graphics.SpriteFont Font { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#property-value_7","title":"Property Value","text":"<p>SpriteFont</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#remarks_5","title":"Remarks","text":"<p>Only applies for buttons that use a placeholder sprite (i.e. set the <code>isPlaceholder</code> output of Get(T, Boolean) to <code>true</code>). In these cases, the actual button text drawn inside the sprite will be drawn using the specified font.</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#keybindlist","title":"KeybindList","text":"<p>The current keybinds to display in the list.</p> <pre><code>public StardewModdingAPI.Utilities.KeybindList KeybindList { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#property-value_8","title":"Property Value","text":"<p>KeybindList</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#remarks_6","title":"Remarks","text":"<p>Changing these while the overlay is open may not update the overlay.</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#spritemap","title":"SpriteMap","text":"<p>Map of bindable buttons to sprite representations.</p> <pre><code>public StardewUI.Graphics.ISpriteMap&lt;StardewModdingAPI.SButton&gt; SpriteMap { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#property-value_9","title":"Property Value","text":"<p>ISpriteMap"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#createview","title":"CreateView()","text":"<p>Creates and returns the root view.</p> <pre><code>protected override StardewUI.IView CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindlisteditor/#returns","title":"Returns","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/","title":"KeybindOverlay","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#class-keybindoverlay","title":"Class KeybindOverlay","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets.Keybinding Assembly: StardewUI.dll  </p> <p>Overlay control for editing a keybinding, or list of bindings.</p> <pre><code>public class KeybindOverlay : StardewUI.Overlays.FullScreenOverlay\n</code></pre> <p>Inheritance Object \u21e6 FullScreenOverlay \u21e6 KeybindOverlay</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#constructors","title":"Constructors","text":"Name Description KeybindOverlay(ISpriteMap&lt;SButton&gt;) Overlay control for editing a keybinding, or list of bindings."},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#properties","title":"Properties","text":"Name Description AddButtonText Text to display on the button used to add a new binding. CapturingInput Whether the overlay wants to capture all keyboard and gamepad inputs, i.e. prevent them from being dispatched to the parent menu.(Inherited from FullScreenOverlay) DeleteButtonTooltip Tooltip to display for the delete (trash can) button beside each existing binding. DimmingAmount Amount to dim whatever is underneath the overlay.(Inherited from FullScreenOverlay) HorizontalAlignment Horizontal alignment of the overlay relative to the Parent edge.(Inherited from FullScreenOverlay) HorizontalParentAlignment Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its HorizontalAlignment.(Inherited from FullScreenOverlay) KeybindList The current keybinds to display in the list. KeybindType Specifies what kind of keybind is being edited. Parent The parent of this overlay, used for positioning. If not specified, then the overlay will be positioned relative to the entire UI viewport.(Inherited from FullScreenOverlay) ParentOffset Additional pixel offset to apply to the overlay's position, after alignments.(Inherited from FullScreenOverlay) VerticalAlignment Vertical alignment of the overlay relative to the Parent edge.(Inherited from FullScreenOverlay) VerticalParentAlignment Specifies which edge of the Parent (or screen, if no parent is specified) will be used to align the overlay edge denoted by its VerticalAlignment.(Inherited from FullScreenOverlay) View The view to be displayed/interacted with as an overlay.(Inherited from FullScreenOverlay)"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#methods","title":"Methods","text":"Name Description CreateView() Creates the content view that will be displayed as an overlay.(Overrides FullScreenOverlay.CreateView()) OnClose() Runs when the overlay is removed from the active stack.(Inherited from FullScreenOverlay) RequireView&lt;TChild&gt;(Func&lt;TChild&gt;) Ensures that the overlay view is created before attempting to access a child view.(Inherited from FullScreenOverlay) StartCapturing() Starts capturing a new keybind. Update(TimeSpan) Runs on every game update tick.(Overrides FullScreenOverlay.Update(TimeSpan))"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#events","title":"Events","text":"Name Description Close Event raised when the overlay is closed - i.e. removed from the current context stack.(Inherited from FullScreenOverlay)"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#keybindoverlayispritemapsbutton","title":"KeybindOverlay(ISpriteMap&lt;SButton&gt;)","text":"<p>Overlay control for editing a keybinding, or list of bindings.</p> <pre><code>public KeybindOverlay(StardewUI.Graphics.ISpriteMap&lt;StardewModdingAPI.SButton&gt; spriteMap);\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#parameters","title":"Parameters","text":"<p><code>spriteMap</code> ISpriteMap Map of bindable buttons to sprite representations."},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#addbuttontext","title":"AddButtonText","text":"<p>Text to display on the button used to add a new binding.</p> <pre><code>public string AddButtonText { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#property-value","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#remarks","title":"Remarks","text":"<p>If not specified, the button will use a generic \"+\" image instead.</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#deletebuttontooltip","title":"DeleteButtonTooltip","text":"<p>Tooltip to display for the delete (trash can) button beside each existing binding.</p> <pre><code>public string DeleteButtonTooltip { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#property-value_1","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#remarks_1","title":"Remarks","text":"<p>If not specified, the delete buttons will have no tooltips.</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#keybindlist","title":"KeybindList","text":"<p>The current keybinds to display in the list.</p> <pre><code>public StardewModdingAPI.Utilities.KeybindList KeybindList { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#property-value_2","title":"Property Value","text":"<p>KeybindList</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#keybindtype","title":"KeybindType","text":"<p>Specifies what kind of keybind is being edited.</p> <pre><code>public StardewUI.Widgets.Keybinding.KeybindType KeybindType { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#property-value_3","title":"Property Value","text":"<p>KeybindType</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#remarks_2","title":"Remarks","text":"<p>This determines the behavior of the capturing as well as what happens after capture: </p> <ul> <li>MultipleKeybinds displays the list of existing keybinds (if any), adds the captured keybind when all buttons/keys are released, and allows adding more;</li> <li>SingleKeybind does not display the list or separator, and when all buttons/keys are released, updates its KeybindList to have that single keybind and closes the overlay.</li> <li>SingleButton is similar to SingleKeybind but records the keybind and closes the overlay as soon as a single button is pressed.</li> </ul> <p>Typically when using single-bind or single-button modes, the caller should StartCapturing() upon creation of the overlay in order to minimize redundant clicks.</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#createview","title":"CreateView()","text":"<p>Creates the content view that will be displayed as an overlay.</p> <pre><code>protected override StardewUI.IView CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#returns","title":"Returns","text":"<p>IView</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#startcapturing","title":"StartCapturing()","text":"<p>Starts capturing a new keybind.</p> <pre><code>public void StartCapturing();\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#remarks_3","title":"Remarks","text":"<p>This makes the capture area start flashing and hides the \"Add\" button; any buttons pressed in the capturing state are recorded and combined into a single keybind after the capture ends, when all buttons are released.</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#updatetimespan","title":"Update(TimeSpan)","text":"<p>Runs on every game update tick.</p> <pre><code>public override void Update(System.TimeSpan elapsed);\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindoverlay/#parameters_1","title":"Parameters","text":"<p><code>elapsed</code> TimeSpan The amount of real time elapsed since the last tick.</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindtype/","title":"KeybindType","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindtype/#enum-keybindtype","title":"Enum KeybindType","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindtype/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets.Keybinding Assembly: StardewUI.dll  </p> <p>Specifies the exact type of keybind supported by a widget using a KeybindList.</p> <pre><code>public enum KeybindType\n</code></pre> <p>Inheritance Object \u21e6 ValueType \u21e6 Enum \u21e6 KeybindType</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindtype/#fields","title":"Fields","text":"Name Value Description SingleButton 0 The binding is a single SButton and does not support key combinations. SingleKeybind 1 The binding is a single Keybind, supporting exactly one combination of keys that must all be pressed. MultipleKeybinds 2 The binding is a real KeybindList, which can handle any number of individual Keybinds each with their own key combination."},{"location":"reference/stardewui/widgets/keybinding/keybindview/","title":"KeybindView","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindview/#class-keybindview","title":"Class KeybindView","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindview/#definition","title":"Definition","text":"<p>Namespace: StardewUI.Widgets.Keybinding Assembly: StardewUI.dll  </p> <p>Display widget for a single Keybind showing all required keys.</p> <pre><code>[StardewUI.GenerateDescriptor]\npublic class KeybindView : StardewUI.Widgets.ComponentView&lt;T&gt;\n</code></pre> <p>Inheritance Object \u21e6 DecoratorView&lt;T&gt; \u21e6 ComponentView&lt;T&gt; \u21e6 KeybindView</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#members","title":"Members","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindview/#constructors","title":"Constructors","text":"Name Description KeybindView()"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#fields","title":"Fields","text":"Name Description DEFAULT_BUTTON_HEIGHT Default setting for ButtonHeight."},{"location":"reference/stardewui/widgets/keybinding/keybindview/#properties","title":"Properties","text":"Name Description ActualBounds The bounds of this view relative to the origin (0, 0).(Inherited from DecoratorView&lt;T&gt;) ButtonHeight The height for button images/sprites. Images are scaled uniformly, preserving source aspect ratio. ButtonMinWidth Minimum width for button images/sprites, used if the layout width would be less than that implied by the ButtonHeight and placeholder content (if any). ContentBounds The true bounds of this view's content; i.e. ActualBounds excluding margins.(Inherited from DecoratorView&lt;T&gt;) EmptyText Placeholder text to display when the current keybind is empty. FloatingBounds Contains the bounds of all floating elements in this view tree, including the current view and all descendants.(Inherited from DecoratorView&lt;T&gt;) Font Font used to display text in button/key placeholders. IsFocusable Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this view. Not generally applicable for mouse controls.(Inherited from DecoratorView&lt;T&gt;) Keybind The current keybind. Layout The current layout parameters, which determine how Measure(Vector2) will behave.(Inherited from DecoratorView&lt;T&gt;) Margin Margins (whitespace outside border) for this view. Name Simple name for this view, used in log/debug output; does not affect behavior.(Inherited from DecoratorView&lt;T&gt;) Opacity Opacity (alpha level) of the view.(Inherited from DecoratorView&lt;T&gt;) OuterSize The true computed layout size resulting from a single Measure(Vector2) pass.(Inherited from DecoratorView&lt;T&gt;) PointerEventsEnabled Whether this view should receive pointer events like Click or Drag.(Inherited from DecoratorView&lt;T&gt;) ScrollWithChildren If set to an axis, specifies that when any child of the view is scrolled into view (using ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2)), then this entire view should be scrolled along with it.(Inherited from DecoratorView&lt;T&gt;) Spacing Extra spacing between displayed button sprites, if the sprites do not have implicit wide margins. SpriteMap Map of bindable buttons to sprite representations. Tags The user-defined tags for this view.(Inherited from DecoratorView&lt;T&gt;) TextColor Text color for the button text inside any placeholder sprites. TintColor Color to tint the background/sprite of each key. Tooltip Tooltip data to display on hover, if any.(Inherited from DecoratorView&lt;T&gt;) View (Inherited from ComponentView&lt;T&gt;) Visibility Drawing visibility for this view.(Inherited from DecoratorView&lt;T&gt;) ZIndex Z order for this view within its direct parent. Higher indices draw later (on top).(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#methods","title":"Methods","text":"Name Description ContainsPoint(Vector2) Checks if a given point, relative to the view's origin, is within its bounds.(Inherited from DecoratorView&lt;T&gt;) CreateView() Creates and returns the root view.(Overrides ComponentView&lt;T&gt;.CreateView()) Dispose() (Inherited from DecoratorView&lt;T&gt;) Draw(ISpriteBatch) Draws the content for this view.(Inherited from DecoratorView&lt;T&gt;) FocusSearch(Vector2, Direction) Finds the next focusable component in a given direction that does not overlap with a current position.(Inherited from DecoratorView&lt;T&gt;) GetChildAt(Vector2) Finds the child at a given position.(Inherited from DecoratorView&lt;T&gt;) GetChildPosition(IView) Computes or retrieves the position of a given direct child.(Inherited from DecoratorView&lt;T&gt;) GetChildren() Gets the current children of this view.(Inherited from DecoratorView&lt;T&gt;) GetChildrenAt(Vector2) Finds all children at a given position.(Inherited from DecoratorView&lt;T&gt;) GetDefaultFocusChild() Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first opened.(Inherited from DecoratorView&lt;T&gt;) HasOutOfBoundsContent() Checks if the view has content or elements that are all or partially outside the ActualBounds.(Inherited from DecoratorView&lt;T&gt;) IsDirty() Checks whether or not the view is dirty - i.e. requires a new layout with a full Measure(Vector2).(Inherited from DecoratorView&lt;T&gt;) Measure(Vector2) Performs layout on this view, updating its OuterSize, ActualBounds and ContentBounds, and arranging any children in their respective positions.(Inherited from DecoratorView&lt;T&gt;) OnButtonPress(ButtonEventArgs) Called when a button press is received while this view is in the focus path.(Inherited from DecoratorView&lt;T&gt;) OnClick(ClickEventArgs) Called when a click is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) OnDrag(PointerEventArgs) Called when the view is being dragged (mouse moved while left button held).(Inherited from DecoratorView&lt;T&gt;) OnDrop(PointerEventArgs) Called when the mouse button is released after at least one OnDrag(PointerEventArgs).(Inherited from DecoratorView&lt;T&gt;) OnLayout() Runs whenever layout occurs as a result of the UI elements changing.(Inherited from DecoratorView&lt;T&gt;) OnPointerMove(PointerMoveEventArgs) Called when a pointer movement related to this view occurs.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(PropertyChangedEventArgs) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnPropertyChanged(string) Raises the PropertyChanged event.(Inherited from DecoratorView&lt;T&gt;) OnUpdate(TimeSpan) Runs on every update tick.(Inherited from DecoratorView&lt;T&gt;) OnWheel(WheelEventArgs) Called when a wheel event is received within this view's bounds.(Inherited from DecoratorView&lt;T&gt;) RegisterDecoratedProperty&lt;TValue&gt;(DecoratedProperty&lt;T, TValue&gt;) Registers a DecoratedProperty&lt;T, TValue&gt;.(Inherited from DecoratorView&lt;T&gt;) ScrollIntoView(IEnumerable&lt;ViewChild&gt;, Vector2) Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#events","title":"Events","text":"Name Description ButtonPress Event raised when any button on any input device is pressed.(Inherited from DecoratorView&lt;T&gt;) Click Event raised when the view receives a click initiated from any button.(Inherited from DecoratorView&lt;T&gt;) Drag Event raised when the view is being dragged using the mouse.(Inherited from DecoratorView&lt;T&gt;) DragEnd Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) DragStart Event raised when mouse dragging is first activated. Always raised before the first Drag, and only once per drag operation.(Inherited from DecoratorView&lt;T&gt;) LeftClick Event raised when the view receives a click initiated from the left mouse button, or the controller's action button (A).(Inherited from DecoratorView&lt;T&gt;) PointerEnter Event raised when the pointer enters the view.(Inherited from DecoratorView&lt;T&gt;) PointerLeave Event raised when the pointer exits the view.(Inherited from DecoratorView&lt;T&gt;) PointerMove Event raised when the pointer moves within the view.(Inherited from DecoratorView&lt;T&gt;) PropertyChanged (Inherited from DecoratorView&lt;T&gt;) RightClick Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use button (X).(Inherited from DecoratorView&lt;T&gt;) Wheel Event raised when the scroll wheel moves.(Inherited from DecoratorView&lt;T&gt;)"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#details","title":"Details","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindview/#constructors_1","title":"Constructors","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindview/#keybindview","title":"KeybindView()","text":"<pre><code>public KeybindView();\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#fields_1","title":"Fields","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindview/#default_button_height","title":"DEFAULT_BUTTON_HEIGHT","text":"<p>Default setting for ButtonHeight.</p> <pre><code>public static const int DEFAULT_BUTTON_HEIGHT;\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#field-value","title":"Field Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#properties_1","title":"Properties","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindview/#buttonheight","title":"ButtonHeight","text":"<p>The height for button images/sprites. Images are scaled uniformly, preserving source aspect ratio.</p> <pre><code>public int ButtonHeight { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#buttonminwidth","title":"ButtonMinWidth","text":"<p>Minimum width for button images/sprites, used if the layout width would be less than that implied by the ButtonHeight and placeholder content (if any).</p> <pre><code>public int? ButtonMinWidth { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#property-value_1","title":"Property Value","text":"<p>Nullable&lt;Int32&gt;</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#emptytext","title":"EmptyText","text":"<p>Placeholder text to display when the current keybind is empty.</p> <pre><code>public string EmptyText { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#property-value_2","title":"Property Value","text":"<p>string</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#font","title":"Font","text":"<p>Font used to display text in button/key placeholders.</p> <pre><code>public Microsoft.Xna.Framework.Graphics.SpriteFont Font { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#property-value_3","title":"Property Value","text":"<p>SpriteFont</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#remarks","title":"Remarks","text":"<p>Only applies for buttons that use a placeholder sprite (i.e. set the <code>isPlaceholder</code> output of Get(T, Boolean) to <code>true</code>). In these cases, the actual button text drawn inside the sprite will be drawn using the specified font.</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#keybind","title":"Keybind","text":"<p>The current keybind.</p> <pre><code>public StardewModdingAPI.Utilities.Keybind Keybind { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#property-value_4","title":"Property Value","text":"<p>Keybind</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#margin","title":"Margin","text":"<p>Margins (whitespace outside border) for this view.</p> <pre><code>public StardewUI.Layout.Edges Margin { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#property-value_5","title":"Property Value","text":"<p>Edges</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#spacing","title":"Spacing","text":"<p>Extra spacing between displayed button sprites, if the sprites do not have implicit wide margins.</p> <pre><code>public float Spacing { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#property-value_6","title":"Property Value","text":"<p>Single</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#spritemap","title":"SpriteMap","text":"<p>Map of bindable buttons to sprite representations.</p> <pre><code>public StardewUI.Graphics.ISpriteMap&lt;StardewModdingAPI.SButton&gt; SpriteMap { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#property-value_7","title":"Property Value","text":"<p>ISpriteMap"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#textcolor","title":"TextColor","text":"<p>Text color for the button text inside any placeholder sprites.</p> <pre><code>public Microsoft.Xna.Framework.Color TextColor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#property-value_8","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#tintcolor","title":"TintColor","text":"<p>Color to tint the background/sprite of each key.</p> <pre><code>public Microsoft.Xna.Framework.Color TintColor { get; set; }\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#property-value_9","title":"Property Value","text":"<p>Color</p>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#methods_1","title":"Methods","text":""},{"location":"reference/stardewui/widgets/keybinding/keybindview/#createview","title":"CreateView()","text":"<p>Creates and returns the root view.</p> <pre><code>protected override StardewUI.Widgets.Lane CreateView();\n</code></pre>"},{"location":"reference/stardewui/widgets/keybinding/keybindview/#returns","title":"Returns","text":"<p>Lane</p>"}]}